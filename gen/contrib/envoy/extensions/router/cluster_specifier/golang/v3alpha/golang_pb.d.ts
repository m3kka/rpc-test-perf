// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/router/cluster_specifier/golang/v3alpha/golang.proto (package envoy.extensions.router.cluster_specifier.golang.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * [#extension-category: envoy.router.cluster_specifier_plugin]
 *
 * @generated from message envoy.extensions.router.cluster_specifier.golang.v3alpha.Config
 */
export declare class Config extends Message<Config> {
  /**
   * Globally unique ID for a dynamic library file.
   *
   * @generated from field: string library_id = 1;
   */
  libraryId: string;

  /**
   * Path to a dynamic library implementing the
   * :repo:`ClusterSpecifier API <contrib/golang/router/cluster_specifier/source/go/pkg/api.ClusterSpecifier>`
   * interface.
   * [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
   *
   * @generated from field: string library_path = 2;
   */
  libraryPath: string;

  /**
   * Default cluster.
   *
   * It will be used when the specifier interface return empty string or panic.
   *
   *
   * @generated from field: string default_cluster = 3;
   */
  defaultCluster: string;

  /**
   * Configuration for the Go cluster specifier plugin.
   *
   * .. note::
   *     This configuration is only parsed in the go cluster specifier, and is therefore not validated
   *     by Envoy.
   *
   *     See the :repo:`StreamFilter API <contrib/golang/router/cluster_specifier/source/go/pkg/cluster_specifier/config.go>`
   *     for more information about how the plugin's configuration data can be accessed.
   *
   *
   * @generated from field: google.protobuf.Any config = 4;
   */
  config?: Any;

  constructor(data?: PartialMessage<Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.router.cluster_specifier.golang.v3alpha.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config;

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean;
}

