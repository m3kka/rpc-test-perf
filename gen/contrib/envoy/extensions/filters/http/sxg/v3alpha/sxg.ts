// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/http/sxg/v3alpha/sxg.proto" (package "envoy.extensions.filters.http.sxg.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { SdsSecretConfig } from "../../../../../../../envoy/extensions/transport_sockets/tls/v3/secret";
// [#protodoc-title: Signed HTTP Exchange Filter]
// SXG :ref:`configuration overview <config_http_filters_sxg>`.
// [#extension: envoy.filters.http.sxg]

/**
 * [#next-free-field: 10]
 *
 * @generated from protobuf message envoy.extensions.filters.http.sxg.v3alpha.SXG
 */
export interface SXG {
    /**
     * The SDS configuration for the public key data for the SSL certificate that will be used to sign the
     * SXG response.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig certificate = 1;
     */
    certificate?: SdsSecretConfig;
    /**
     * The SDS configuration for the private key data for the SSL certificate that will be used to sign the
     * SXG response.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig private_key = 2;
     */
    privateKey?: SdsSecretConfig;
    /**
     * The duration for which the generated SXG package will be valid. Default is 604800s (7 days in seconds).
     * Note that in order to account for clock skew, the timestamp will be backdated by a day. So, if duration
     * is set to 7 days, that will be 7 days from 24 hours ago (6 days from now). Also note that while 6/7 days
     * is appropriate for most content, if the downstream service is serving Javascript, or HTML with inline
     * Javascript, 1 day (so, with backdated expiry, 2 days, or 172800 seconds) is more appropriate.
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 3;
     */
    duration?: Duration;
    /**
     * The SXG response payload is Merkle Integrity Content Encoding (MICE) encoded (specification is [here](https://datatracker.ietf.org/doc/html/draft-thomson-http-mice-03))
     * This value indicates the record size in the encoded payload. The default value is 4096.
     *
     * @generated from protobuf field: uint64 mi_record_size = 4;
     */
    miRecordSize: bigint;
    /**
     * The URI of certificate CBOR file published. Since it is required that the certificate CBOR file
     * be served from the same domain as the SXG document, this should be a relative URI.
     *
     * @generated from protobuf field: string cbor_url = 5;
     */
    cborUrl: string;
    /**
     * URL to retrieve validity data for signature, a CBOR map. See specification [here](https://tools.ietf.org/html/draft-yasskin-httpbis-origin-signed-exchanges-impl-00#section-3.6)
     *
     * @generated from protobuf field: string validity_url = 6;
     */
    validityUrl: string;
    /**
     * Header that will be set if it is determined that the client can accept SXG (typically ``accept: application/signed-exchange;v=b3``)
     * If not set, filter will default to: ``x-client-can-accept-sxg``
     *
     * @generated from protobuf field: string client_can_accept_sxg_header = 7;
     */
    clientCanAcceptSxgHeader: string;
    /**
     * Header set by downstream service to signal that the response should be transformed to SXG If not set,
     * filter will default to: ``x-should-encode-sxg``
     *
     * @generated from protobuf field: string should_encode_sxg_header = 8;
     */
    shouldEncodeSxgHeader: string;
    /**
     * Headers that will be stripped from the SXG document, by listing a prefix (i.e. ``x-custom-`` will cause
     * all headers prefixed by ``x-custom-`` to be omitted from the SXG document)
     *
     * @generated from protobuf field: repeated string header_prefix_filters = 9;
     */
    headerPrefixFilters: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SXG$Type extends MessageType<SXG> {
    constructor() {
        super("envoy.extensions.filters.http.sxg.v3alpha.SXG", [
            { no: 1, name: "certificate", kind: "message", T: () => SdsSecretConfig },
            { no: 2, name: "private_key", kind: "message", T: () => SdsSecretConfig },
            { no: 3, name: "duration", kind: "message", T: () => Duration },
            { no: 4, name: "mi_record_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "cbor_url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", prefix: "/" } } } },
            { no: 6, name: "validity_url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", prefix: "/" } } } },
            { no: 7, name: "client_can_accept_sxg_header", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false, ignoreEmpty: true } } } },
            { no: 8, name: "should_encode_sxg_header", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false, ignoreEmpty: true } } } },
            { no: 9, name: "header_prefix_filters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } } } }
        ]);
    }
    create(value?: PartialMessage<SXG>): SXG {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.miRecordSize = 0n;
        message.cborUrl = "";
        message.validityUrl = "";
        message.clientCanAcceptSxgHeader = "";
        message.shouldEncodeSxgHeader = "";
        message.headerPrefixFilters = [];
        if (value !== undefined)
            reflectionMergePartial<SXG>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SXG): SXG {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig certificate */ 1:
                    message.certificate = SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, message.certificate);
                    break;
                case /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig private_key */ 2:
                    message.privateKey = SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, message.privateKey);
                    break;
                case /* google.protobuf.Duration duration */ 3:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* uint64 mi_record_size */ 4:
                    message.miRecordSize = reader.uint64().toBigInt();
                    break;
                case /* string cbor_url */ 5:
                    message.cborUrl = reader.string();
                    break;
                case /* string validity_url */ 6:
                    message.validityUrl = reader.string();
                    break;
                case /* string client_can_accept_sxg_header */ 7:
                    message.clientCanAcceptSxgHeader = reader.string();
                    break;
                case /* string should_encode_sxg_header */ 8:
                    message.shouldEncodeSxgHeader = reader.string();
                    break;
                case /* repeated string header_prefix_filters */ 9:
                    message.headerPrefixFilters.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SXG, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig certificate = 1; */
        if (message.certificate)
            SdsSecretConfig.internalBinaryWrite(message.certificate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig private_key = 2; */
        if (message.privateKey)
            SdsSecretConfig.internalBinaryWrite(message.privateKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 3; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 mi_record_size = 4; */
        if (message.miRecordSize !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.miRecordSize);
        /* string cbor_url = 5; */
        if (message.cborUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cborUrl);
        /* string validity_url = 6; */
        if (message.validityUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.validityUrl);
        /* string client_can_accept_sxg_header = 7; */
        if (message.clientCanAcceptSxgHeader !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.clientCanAcceptSxgHeader);
        /* string should_encode_sxg_header = 8; */
        if (message.shouldEncodeSxgHeader !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.shouldEncodeSxgHeader);
        /* repeated string header_prefix_filters = 9; */
        for (let i = 0; i < message.headerPrefixFilters.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.headerPrefixFilters[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.sxg.v3alpha.SXG
 */
export const SXG = new SXG$Type();
