// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/http/golang/v3alpha/golang.proto (package envoy.extensions.filters.http.golang.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.golang.v3alpha.Config
 */
export declare class Config extends Message<Config> {
  /**
   * Globally unique ID for a dynamic library file.
   *
   * @generated from field: string library_id = 1;
   */
  libraryId: string;

  /**
   * Path to a dynamic library implementing the
   * :repo:`StreamFilter API <contrib/golang/common/go/api.StreamFilter>`
   * interface.
   * [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
   *
   * @generated from field: string library_path = 2;
   */
  libraryPath: string;

  /**
   * Globally unique name of the Go plugin.
   *
   * This name **must** be consistent with the name registered in ``http::RegisterHttpFilterConfigFactory``,
   * and can be used to associate :ref:`route and virtualHost plugin configuration
   * <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.ConfigsPerRoute.plugins_config>`.
   *
   *
   * @generated from field: string plugin_name = 3;
   */
  pluginName: string;

  /**
   * Configuration for the Go plugin.
   *
   * .. note::
   *     This configuration is only parsed in the go plugin, and is therefore not validated
   *     by Envoy.
   *
   *     See the :repo:`StreamFilter API <contrib/golang/common/go/api/filter.go>`
   *     for more information about how the plugin's configuration data can be accessed.
   *
   *
   * @generated from field: google.protobuf.Any plugin_config = 4;
   */
  pluginConfig?: Any;

  /**
   * Merge policy for plugin configuration.
   *
   * The Go plugin configuration supports three dimensions:
   *
   * * Virtual host’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.VirtualHost.typed_per_filter_config>`
   * * Route’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.Route.typed_per_filter_config>`
   * * The filter's :ref:`plugin_config <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_config>`
   *
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy merge_policy = 5;
   */
  mergePolicy: Config_MergePolicy;

  constructor(data?: PartialMessage<Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.golang.v3alpha.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config;

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean;
}

/**
 * The meanings are as follows:
 *
 * :``MERGE_VIRTUALHOST_ROUTER_FILTER``: Pass all configuration into Go plugin.
 * :``MERGE_VIRTUALHOST_ROUTER``: Pass merged Virtual host and Router configuration into Go plugin.
 * :``OVERRIDE``: Pass merged Virtual host, Router, and plugin configuration into Go plugin.
 *
 * [#not-implemented-hide:]
 *
 * @generated from enum envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy
 */
export declare enum Config_MergePolicy {
  /**
   * @generated from enum value: MERGE_VIRTUALHOST_ROUTER_FILTER = 0;
   */
  MERGE_VIRTUALHOST_ROUTER_FILTER = 0,

  /**
   * @generated from enum value: MERGE_VIRTUALHOST_ROUTER = 1;
   */
  MERGE_VIRTUALHOST_ROUTER = 1,

  /**
   * @generated from enum value: OVERRIDE = 3;
   */
  OVERRIDE = 3,
}

/**
 * @generated from message envoy.extensions.filters.http.golang.v3alpha.RouterPlugin
 */
export declare class RouterPlugin extends Message<RouterPlugin> {
  /**
   * @generated from oneof envoy.extensions.filters.http.golang.v3alpha.RouterPlugin.override
   */
  override: {
    /**
     * [#not-implemented-hide:]
     * Disable the filter for this particular vhost or route.
     * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
     *
     * @generated from field: bool disabled = 1;
     */
    value: boolean;
    case: "disabled";
  } | {
    /**
     * The config field is used for setting per-route and per-virtualhost plugin config.
     *
     * @generated from field: google.protobuf.Any config = 2;
     */
    value: Any;
    case: "config";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RouterPlugin>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.golang.v3alpha.RouterPlugin";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouterPlugin;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouterPlugin;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouterPlugin;

  static equals(a: RouterPlugin | PlainMessage<RouterPlugin> | undefined, b: RouterPlugin | PlainMessage<RouterPlugin> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
 */
export declare class ConfigsPerRoute extends Message<ConfigsPerRoute> {
  /**
   * Configuration of the Go plugin at the per-router or per-virtualhost level,
   * keyed on the :ref:`plugin_name <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_name>`
   * of the Go plugin.
   *
   *
   * @generated from field: map<string, envoy.extensions.filters.http.golang.v3alpha.RouterPlugin> plugins_config = 1;
   */
  pluginsConfig: { [key: string]: RouterPlugin };

  constructor(data?: PartialMessage<ConfigsPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigsPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigsPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigsPerRoute;

  static equals(a: ConfigsPerRoute | PlainMessage<ConfigsPerRoute> | undefined, b: ConfigsPerRoute | PlainMessage<ConfigsPerRoute> | undefined): boolean;
}

