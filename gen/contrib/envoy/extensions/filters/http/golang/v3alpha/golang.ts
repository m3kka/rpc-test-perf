// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/http/golang/v3alpha/golang.proto" (package "envoy.extensions.filters.http.golang.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../../../google/protobuf/any";
// [#protodoc-title: Golang HTTP filter]
// 
// For an overview of the Golang HTTP filter please see the :ref:`configuration reference documentation <config_http_filters_golang>`.
// [#extension: envoy.filters.http.golang]

/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.http.golang.v3alpha.Config
 */
export interface Config {
    /**
     * Globally unique ID for a dynamic library file.
     *
     * @generated from protobuf field: string library_id = 1;
     */
    libraryId: string;
    /**
     * Path to a dynamic library implementing the
     * :repo:`StreamFilter API <contrib/golang/common/go/api.StreamFilter>`
     * interface.
     * [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
     *
     * @generated from protobuf field: string library_path = 2;
     */
    libraryPath: string;
    /**
     * Globally unique name of the Go plugin.
     *
     * This name **must** be consistent with the name registered in ``http::RegisterHttpFilterConfigFactory``,
     * and can be used to associate :ref:`route and virtualHost plugin configuration
     * <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.ConfigsPerRoute.plugins_config>`.
     *
     *
     * @generated from protobuf field: string plugin_name = 3;
     */
    pluginName: string;
    /**
     * Configuration for the Go plugin.
     *
     * .. note::
     *     This configuration is only parsed in the go plugin, and is therefore not validated
     *     by Envoy.
     *
     *     See the :repo:`StreamFilter API <contrib/golang/common/go/api/filter.go>`
     *     for more information about how the plugin's configuration data can be accessed.
     *
     *
     * @generated from protobuf field: google.protobuf.Any plugin_config = 4;
     */
    pluginConfig?: Any;
    /**
     * Merge policy for plugin configuration.
     *
     * The Go plugin configuration supports three dimensions:
     *
     * * Virtual host’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.VirtualHost.typed_per_filter_config>`
     * * Route’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.Route.typed_per_filter_config>`
     * * The filter's :ref:`plugin_config <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_config>`
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy merge_policy = 5;
     */
    mergePolicy: Config_MergePolicy;
}
/**
 * The meanings are as follows:
 *
 * :``MERGE_VIRTUALHOST_ROUTER_FILTER``: Pass all configuration into Go plugin.
 * :``MERGE_VIRTUALHOST_ROUTER``: Pass merged Virtual host and Router configuration into Go plugin.
 * :``OVERRIDE``: Pass merged Virtual host, Router, and plugin configuration into Go plugin.
 *
 * [#not-implemented-hide:]
 *
 * @generated from protobuf enum envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy
 */
export enum Config_MergePolicy {
    /**
     * @generated from protobuf enum value: MERGE_VIRTUALHOST_ROUTER_FILTER = 0;
     */
    MERGE_VIRTUALHOST_ROUTER_FILTER = 0,
    /**
     * @generated from protobuf enum value: MERGE_VIRTUALHOST_ROUTER = 1;
     */
    MERGE_VIRTUALHOST_ROUTER = 1,
    /**
     * @generated from protobuf enum value: OVERRIDE = 3;
     */
    OVERRIDE = 3
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.golang.v3alpha.RouterPlugin
 */
export interface RouterPlugin {
    /**
     * @generated from protobuf oneof: override
     */
    override: {
        oneofKind: "disabled";
        /**
         * [#not-implemented-hide:]
         * Disable the filter for this particular vhost or route.
         * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
         *
         * @generated from protobuf field: bool disabled = 1;
         */
        disabled: boolean;
    } | {
        oneofKind: "config";
        /**
         * The config field is used for setting per-route and per-virtualhost plugin config.
         *
         * @generated from protobuf field: google.protobuf.Any config = 2;
         */
        config: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
 */
export interface ConfigsPerRoute {
    /**
     * Configuration of the Go plugin at the per-router or per-virtualhost level,
     * keyed on the :ref:`plugin_name <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_name>`
     * of the Go plugin.
     *
     *
     * @generated from protobuf field: map<string, envoy.extensions.filters.http.golang.v3alpha.RouterPlugin> plugins_config = 1;
     */
    pluginsConfig: {
        [key: string]: RouterPlugin;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("envoy.extensions.filters.http.golang.v3alpha.Config", [
            { no: 1, name: "library_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "library_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "plugin_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 4, name: "plugin_config", kind: "message", T: () => Any },
            { no: 5, name: "merge_policy", kind: "enum", T: () => ["envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy", Config_MergePolicy], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.libraryId = "";
        message.libraryPath = "";
        message.pluginName = "";
        message.mergePolicy = 0;
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string library_id */ 1:
                    message.libraryId = reader.string();
                    break;
                case /* string library_path */ 2:
                    message.libraryPath = reader.string();
                    break;
                case /* string plugin_name */ 3:
                    message.pluginName = reader.string();
                    break;
                case /* google.protobuf.Any plugin_config */ 4:
                    message.pluginConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.pluginConfig);
                    break;
                case /* envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy merge_policy */ 5:
                    message.mergePolicy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string library_id = 1; */
        if (message.libraryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.libraryId);
        /* string library_path = 2; */
        if (message.libraryPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.libraryPath);
        /* string plugin_name = 3; */
        if (message.pluginName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pluginName);
        /* google.protobuf.Any plugin_config = 4; */
        if (message.pluginConfig)
            Any.internalBinaryWrite(message.pluginConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.http.golang.v3alpha.Config.MergePolicy merge_policy = 5; */
        if (message.mergePolicy !== 0)
            writer.tag(5, WireType.Varint).int32(message.mergePolicy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.golang.v3alpha.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouterPlugin$Type extends MessageType<RouterPlugin> {
    constructor() {
        super("envoy.extensions.filters.http.golang.v3alpha.RouterPlugin", [
            { no: 1, name: "disabled", kind: "scalar", oneof: "override", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 2, name: "config", kind: "message", oneof: "override", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<RouterPlugin>): RouterPlugin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.override = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RouterPlugin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouterPlugin): RouterPlugin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disabled */ 1:
                    message.override = {
                        oneofKind: "disabled",
                        disabled: reader.bool()
                    };
                    break;
                case /* google.protobuf.Any config */ 2:
                    message.override = {
                        oneofKind: "config",
                        config: Any.internalBinaryRead(reader, reader.uint32(), options, (message.override as any).config)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouterPlugin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool disabled = 1; */
        if (message.override.oneofKind === "disabled")
            writer.tag(1, WireType.Varint).bool(message.override.disabled);
        /* google.protobuf.Any config = 2; */
        if (message.override.oneofKind === "config")
            Any.internalBinaryWrite(message.override.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.golang.v3alpha.RouterPlugin
 */
export const RouterPlugin = new RouterPlugin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigsPerRoute$Type extends MessageType<ConfigsPerRoute> {
    constructor() {
        super("envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute", [
            { no: 1, name: "plugins_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => RouterPlugin } }
        ]);
    }
    create(value?: PartialMessage<ConfigsPerRoute>): ConfigsPerRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pluginsConfig = {};
        if (value !== undefined)
            reflectionMergePartial<ConfigsPerRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigsPerRoute): ConfigsPerRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, envoy.extensions.filters.http.golang.v3alpha.RouterPlugin> plugins_config */ 1:
                    this.binaryReadMap1(message.pluginsConfig, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ConfigsPerRoute["pluginsConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ConfigsPerRoute["pluginsConfig"] | undefined, val: ConfigsPerRoute["pluginsConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = RouterPlugin.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.plugins_config");
            }
        }
        map[key ?? ""] = val ?? RouterPlugin.create();
    }
    internalBinaryWrite(message: ConfigsPerRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, envoy.extensions.filters.http.golang.v3alpha.RouterPlugin> plugins_config = 1; */
        for (let k of globalThis.Object.keys(message.pluginsConfig)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            RouterPlugin.internalBinaryWrite(message.pluginsConfig[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute
 */
export const ConfigsPerRoute = new ConfigsPerRoute$Type();
