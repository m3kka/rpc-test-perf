// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/http/squash/v3/squash.proto" (package "envoy.extensions.filters.http.squash.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { Struct } from "../../../../../../../google/protobuf/struct";
// [#protodoc-title: Squash]
// Squash :ref:`configuration overview <config_http_filters_squash>`.
// [#extension: envoy.filters.http.squash]

/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.http.squash.v3.Squash
 */
export interface Squash {
    /**
     * The name of the cluster that hosts the Squash server.
     *
     * @generated from protobuf field: string cluster = 1;
     */
    cluster: string;
    /**
     * When the filter requests the Squash server to create a DebugAttachment, it will use this
     * structure as template for the body of the request. It can contain reference to environment
     * variables in the form of '{{ ENV_VAR_NAME }}'. These can be used to provide the Squash server
     * with more information to find the process to attach the debugger to. For example, in a
     * Istio/k8s environment, this will contain information on the pod:
     *
     * .. code-block:: json
     *
     *  {
     *    "spec": {
     *      "attachment": {
     *        "pod": "{{ POD_NAME }}",
     *        "namespace": "{{ POD_NAMESPACE }}"
     *      },
     *      "match_request": true
     *    }
     *  }
     *
     * (where POD_NAME, POD_NAMESPACE are configured in the pod via the Downward API)
     *
     * @generated from protobuf field: google.protobuf.Struct attachment_template = 2;
     */
    attachmentTemplate?: Struct;
    /**
     * The timeout for individual requests sent to the Squash cluster. Defaults to 1 second.
     *
     * @generated from protobuf field: google.protobuf.Duration request_timeout = 3;
     */
    requestTimeout?: Duration;
    /**
     * The total timeout Squash will delay a request and wait for it to be attached. Defaults to 60
     * seconds.
     *
     * @generated from protobuf field: google.protobuf.Duration attachment_timeout = 4;
     */
    attachmentTimeout?: Duration;
    /**
     * Amount of time to poll for the status of the attachment object in the Squash server
     * (to check if has been attached). Defaults to 1 second.
     *
     * @generated from protobuf field: google.protobuf.Duration attachment_poll_period = 5;
     */
    attachmentPollPeriod?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class Squash$Type extends MessageType<Squash> {
    constructor() {
        super("envoy.extensions.filters.http.squash.v3.Squash", [
            { no: 1, name: "cluster", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "attachment_template", kind: "message", T: () => Struct },
            { no: 3, name: "request_timeout", kind: "message", T: () => Duration },
            { no: 4, name: "attachment_timeout", kind: "message", T: () => Duration },
            { no: 5, name: "attachment_poll_period", kind: "message", T: () => Duration }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.squash.v2.Squash" } });
    }
    create(value?: PartialMessage<Squash>): Squash {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cluster = "";
        if (value !== undefined)
            reflectionMergePartial<Squash>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Squash): Squash {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster */ 1:
                    message.cluster = reader.string();
                    break;
                case /* google.protobuf.Struct attachment_template */ 2:
                    message.attachmentTemplate = Struct.internalBinaryRead(reader, reader.uint32(), options, message.attachmentTemplate);
                    break;
                case /* google.protobuf.Duration request_timeout */ 3:
                    message.requestTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.requestTimeout);
                    break;
                case /* google.protobuf.Duration attachment_timeout */ 4:
                    message.attachmentTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.attachmentTimeout);
                    break;
                case /* google.protobuf.Duration attachment_poll_period */ 5:
                    message.attachmentPollPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.attachmentPollPeriod);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Squash, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster = 1; */
        if (message.cluster !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cluster);
        /* google.protobuf.Struct attachment_template = 2; */
        if (message.attachmentTemplate)
            Struct.internalBinaryWrite(message.attachmentTemplate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration request_timeout = 3; */
        if (message.requestTimeout)
            Duration.internalBinaryWrite(message.requestTimeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration attachment_timeout = 4; */
        if (message.attachmentTimeout)
            Duration.internalBinaryWrite(message.attachmentTimeout, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration attachment_poll_period = 5; */
        if (message.attachmentPollPeriod)
            Duration.internalBinaryWrite(message.attachmentPollPeriod, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.squash.v3.Squash
 */
export const Squash = new Squash$Type();
