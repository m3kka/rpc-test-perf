// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/http/language/v3alpha/language.proto" (package "envoy.extensions.filters.http.language.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Language]
// Language :ref:`configuration overview <config_http_filters_language>`.
// [#extension: envoy.filters.http.language]

/**
 * Language detection filter config.
 *
 * @generated from protobuf message envoy.extensions.filters.http.language.v3alpha.Language
 */
export interface Language {
    /**
     * The default language to be used as a fallback.
     * The value will be included in the list of the supported languages.
     *
     * See https://unicode-org.github.io/icu/userguide/locale/
     *
     * @generated from protobuf field: string default_language = 1;
     */
    defaultLanguage: string;
    /**
     * The set of supported languages. There is no order priority.
     * The order will be determined by the Accept-Language header priority list
     * of the client.
     *
     * See https://unicode-org.github.io/icu/userguide/locale/
     *
     * @generated from protobuf field: repeated string supported_languages = 2;
     */
    supportedLanguages: string[];
    /**
     * If the x-language header is altered, clear the route cache for the current request.
     * This should be set if the route configuration may depend on the x-language header.
     * Otherwise it should be unset to avoid the performance cost of route recalculation.
     *
     * @generated from protobuf field: bool clear_route_cache = 3;
     */
    clearRouteCache: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Language$Type extends MessageType<Language> {
    constructor() {
        super("envoy.extensions.filters.http.language.v3alpha.Language", [
            { no: 1, name: "default_language", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2" } } } },
            { no: 2, name: "supported_languages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", unique: true, items: { string: { minLen: "2" } } } } } },
            { no: 3, name: "clear_route_cache", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Language>): Language {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.defaultLanguage = "";
        message.supportedLanguages = [];
        message.clearRouteCache = false;
        if (value !== undefined)
            reflectionMergePartial<Language>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Language): Language {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string default_language */ 1:
                    message.defaultLanguage = reader.string();
                    break;
                case /* repeated string supported_languages */ 2:
                    message.supportedLanguages.push(reader.string());
                    break;
                case /* bool clear_route_cache */ 3:
                    message.clearRouteCache = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Language, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string default_language = 1; */
        if (message.defaultLanguage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.defaultLanguage);
        /* repeated string supported_languages = 2; */
        for (let i = 0; i < message.supportedLanguages.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.supportedLanguages[i]);
        /* bool clear_route_cache = 3; */
        if (message.clearRouteCache !== false)
            writer.tag(3, WireType.Varint).bool(message.clearRouteCache);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.language.v3alpha.Language
 */
export const Language = new Language$Type();
