// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/postgres_proxy/v3alpha/postgres_proxy.proto" (package "envoy.extensions.filters.network.postgres_proxy.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Postgres proxy]
// Postgres Proxy :ref:`configuration overview
// <config_network_filters_postgres_proxy>`.
// [#extension: envoy.filters.network.postgres_proxy]

/**
 * @generated from protobuf message envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy
 */
export interface PostgresProxy {
    /**
     * The human readable prefix to use when emitting :ref:`statistics
     * <config_network_filters_postgres_proxy_stats>`.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * Controls whether SQL statements received in Frontend Query messages
     * are parsed. Parsing is required to produce Postgres proxy filter
     * metadata. Defaults to true.
     *
     * @generated from protobuf field: google.protobuf.BoolValue enable_sql_parsing = 2;
     */
    enableSqlParsing?: BoolValue;
    /**
     * Controls whether to terminate SSL session initiated by a client.
     * If the value is false, the Postgres proxy filter will not try to
     * terminate SSL session, but will pass all the packets to the upstream server.
     * If the value is true, the Postgres proxy filter will try to terminate SSL
     * session. In order to do that, the filter chain must use :ref:`starttls transport socket
     * <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.StartTlsConfig>`.
     * If the filter does not manage to terminate the SSL session, it will close the connection from the client.
     * Refer to official documentation for details
     * `SSL Session Encryption Message Flow <https://www.postgresql.org/docs/current/protocol-flow.html#id-1.10.5.7.11>`_.
     *
     * @generated from protobuf field: bool terminate_ssl = 3;
     */
    terminateSsl: boolean;
    /**
     * Controls whether to establish upstream SSL connection to the server.
     * Envoy will try to establish upstream SSL connection to the server only when
     * Postgres filter is able to read Postgres payload in clear-text. It happens when
     * a client established a clear-text connection to Envoy or when a client established
     * SSL connection to Envoy and Postgres filter is configured to terminate SSL.
     * In order for upstream encryption to work, the corresponding cluster must be configured to use
     * :ref:`starttls transport socket <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig>`.
     * Defaults to ``SSL_DISABLE``.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode upstream_ssl = 4;
     */
    upstreamSsl: PostgresProxy_SSLMode;
}
/**
 * Upstream SSL operational modes.
 *
 * @generated from protobuf enum envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode
 */
export enum PostgresProxy_SSLMode {
    /**
     * Do not encrypt upstream connection to the server.
     *
     * @generated from protobuf enum value: DISABLE = 0;
     */
    DISABLE = 0,
    /**
     * Establish upstream SSL connection to the server. If the server does not
     * accept the request for SSL connection, the session is terminated.
     *
     * @generated from protobuf enum value: REQUIRE = 1;
     */
    REQUIRE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PostgresProxy$Type extends MessageType<PostgresProxy> {
    constructor() {
        super("envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "enable_sql_parsing", kind: "message", T: () => BoolValue },
            { no: 3, name: "terminate_ssl", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "upstream_ssl", kind: "enum", T: () => ["envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode", PostgresProxy_SSLMode] }
        ]);
    }
    create(value?: PartialMessage<PostgresProxy>): PostgresProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.terminateSsl = false;
        message.upstreamSsl = 0;
        if (value !== undefined)
            reflectionMergePartial<PostgresProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostgresProxy): PostgresProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* google.protobuf.BoolValue enable_sql_parsing */ 2:
                    message.enableSqlParsing = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.enableSqlParsing);
                    break;
                case /* bool terminate_ssl */ 3:
                    message.terminateSsl = reader.bool();
                    break;
                case /* envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode upstream_ssl */ 4:
                    message.upstreamSsl = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostgresProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* google.protobuf.BoolValue enable_sql_parsing = 2; */
        if (message.enableSqlParsing)
            BoolValue.internalBinaryWrite(message.enableSqlParsing, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool terminate_ssl = 3; */
        if (message.terminateSsl !== false)
            writer.tag(3, WireType.Varint).bool(message.terminateSsl);
        /* envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode upstream_ssl = 4; */
        if (message.upstreamSsl !== 0)
            writer.tag(4, WireType.Varint).int32(message.upstreamSsl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy
 */
export const PostgresProxy = new PostgresProxy$Type();
