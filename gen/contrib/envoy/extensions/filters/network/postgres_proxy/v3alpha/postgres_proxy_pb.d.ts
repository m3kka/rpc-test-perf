// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/network/postgres_proxy/v3alpha/postgres_proxy.proto (package envoy.extensions.filters.network.postgres_proxy.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy
 */
export declare class PostgresProxy extends Message<PostgresProxy> {
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_postgres_proxy_stats>`.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * Controls whether SQL statements received in Frontend Query messages
   * are parsed. Parsing is required to produce Postgres proxy filter
   * metadata. Defaults to true.
   *
   * @generated from field: google.protobuf.BoolValue enable_sql_parsing = 2;
   */
  enableSqlParsing?: boolean;

  /**
   * Controls whether to terminate SSL session initiated by a client.
   * If the value is false, the Postgres proxy filter will not try to
   * terminate SSL session, but will pass all the packets to the upstream server.
   * If the value is true, the Postgres proxy filter will try to terminate SSL
   * session. In order to do that, the filter chain must use :ref:`starttls transport socket
   * <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.StartTlsConfig>`.
   * If the filter does not manage to terminate the SSL session, it will close the connection from the client.
   * Refer to official documentation for details
   * `SSL Session Encryption Message Flow <https://www.postgresql.org/docs/current/protocol-flow.html#id-1.10.5.7.11>`_.
   *
   * @generated from field: bool terminate_ssl = 3;
   */
  terminateSsl: boolean;

  /**
   * Controls whether to establish upstream SSL connection to the server.
   * Envoy will try to establish upstream SSL connection to the server only when
   * Postgres filter is able to read Postgres payload in clear-text. It happens when
   * a client established a clear-text connection to Envoy or when a client established
   * SSL connection to Envoy and Postgres filter is configured to terminate SSL.
   * In order for upstream encryption to work, the corresponding cluster must be configured to use
   * :ref:`starttls transport socket <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig>`.
   * Defaults to ``SSL_DISABLE``.
   *
   * @generated from field: envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode upstream_ssl = 4;
   */
  upstreamSsl: PostgresProxy_SSLMode;

  constructor(data?: PartialMessage<PostgresProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresProxy;

  static equals(a: PostgresProxy | PlainMessage<PostgresProxy> | undefined, b: PostgresProxy | PlainMessage<PostgresProxy> | undefined): boolean;
}

/**
 * Upstream SSL operational modes.
 *
 * @generated from enum envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy.SSLMode
 */
export declare enum PostgresProxy_SSLMode {
  /**
   * Do not encrypt upstream connection to the server.
   *
   * @generated from enum value: DISABLE = 0;
   */
  DISABLE = 0,

  /**
   * Establish upstream SSL connection to the server. If the server does not
   * accept the request for SSL connection, the session is terminated.
   *
   * @generated from enum value: REQUIRE = 1;
   */
  REQUIRE = 1,
}

