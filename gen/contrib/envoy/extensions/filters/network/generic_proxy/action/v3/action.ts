// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/generic_proxy/action/v3/action.proto" (package "envoy.extensions.filters.network.generic_proxy.action.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../../../../google/protobuf/any";
import { Metadata } from "../../../../../../../../envoy/config/core/v3/base";
import { WeightedCluster } from "../../../../../../../../envoy/config/route/v3/route_components";
// [#protodoc-title: Generic Proxy Route Action Configuration]

/**
 * Configuration for the route match action.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction
 */
export interface RouteAction {
    /**
     * The name of the route action. This should be unique across all route actions.
     *
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf oneof: cluster_specifier
     */
    clusterSpecifier: {
        oneofKind: "cluster";
        /**
         * Indicates the upstream cluster to which the request should be routed.
         *
         * @generated from protobuf field: string cluster = 1;
         */
        cluster: string;
    } | {
        oneofKind: "weightedClusters";
        /**
         * [#not-implemented-hide:]
         * Multiple upstream clusters can be specified for a given route. The request is routed to one
         * of the upstream clusters based on weights assigned to each cluster.
         * Currently ClusterWeight only supports the name and weight fields.
         *
         * @generated from protobuf field: envoy.config.route.v3.WeightedCluster weighted_clusters = 2;
         */
        weightedClusters: WeightedCluster;
    } | {
        oneofKind: undefined;
    };
    /**
     * Route metadata.
     *
     * @generated from protobuf field: envoy.config.core.v3.Metadata metadata = 3;
     */
    metadata?: Metadata;
    /**
     * Route level config for L7 generic filters. The key should be the related :ref:`extension name
     * <envoy_v3_api_field_config.core.v3.TypedExtensionConfig.name>` in the :ref:`generic filters
     * <envoy_v3_api_field_extensions.filters.network.generic_proxy.v3.GenericProxy.filters>`.
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> per_filter_config = 4;
     */
    perFilterConfig: {
        [key: string]: Any;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class RouteAction$Type extends MessageType<RouteAction> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction", [
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "cluster", kind: "scalar", oneof: "clusterSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "weighted_clusters", kind: "message", oneof: "clusterSpecifier", T: () => WeightedCluster },
            { no: 3, name: "metadata", kind: "message", T: () => Metadata },
            { no: 4, name: "per_filter_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ]);
    }
    create(value?: PartialMessage<RouteAction>): RouteAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.clusterSpecifier = { oneofKind: undefined };
        message.perFilterConfig = {};
        if (value !== undefined)
            reflectionMergePartial<RouteAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteAction): RouteAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string cluster */ 1:
                    message.clusterSpecifier = {
                        oneofKind: "cluster",
                        cluster: reader.string()
                    };
                    break;
                case /* envoy.config.route.v3.WeightedCluster weighted_clusters */ 2:
                    message.clusterSpecifier = {
                        oneofKind: "weightedClusters",
                        weightedClusters: WeightedCluster.internalBinaryRead(reader, reader.uint32(), options, (message.clusterSpecifier as any).weightedClusters)
                    };
                    break;
                case /* envoy.config.core.v3.Metadata metadata */ 3:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* map<string, google.protobuf.Any> per_filter_config */ 4:
                    this.binaryReadMap4(message.perFilterConfig, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: RouteAction["perFilterConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RouteAction["perFilterConfig"] | undefined, val: RouteAction["perFilterConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Any.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.per_filter_config");
            }
        }
        map[key ?? ""] = val ?? Any.create();
    }
    internalBinaryWrite(message: RouteAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string cluster = 1; */
        if (message.clusterSpecifier.oneofKind === "cluster")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterSpecifier.cluster);
        /* envoy.config.route.v3.WeightedCluster weighted_clusters = 2; */
        if (message.clusterSpecifier.oneofKind === "weightedClusters")
            WeightedCluster.internalBinaryWrite(message.clusterSpecifier.weightedClusters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.Metadata metadata = 3; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Any> per_filter_config = 4; */
        for (let k of globalThis.Object.keys(message.perFilterConfig)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Any.internalBinaryWrite(message.perFilterConfig[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction
 */
export const RouteAction = new RouteAction$Type();
