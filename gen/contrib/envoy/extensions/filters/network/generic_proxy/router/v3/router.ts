// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/generic_proxy/router/v3/router.proto" (package "envoy.extensions.filters.network.generic_proxy.router.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Router for generic proxy]
// [#extension: envoy.filters.generic.router]

/**
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.router.v3.Router
 */
export interface Router {
}
// @generated message type with reflection information, may provide speed optimized methods
class Router$Type extends MessageType<Router> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.router.v3.Router", []);
    }
    create(value?: PartialMessage<Router>): Router {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Router>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Router): Router {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Router, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.router.v3.Router
 */
export const Router = new Router$Type();
