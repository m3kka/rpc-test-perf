// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/network/generic_proxy/v3/route.proto (package envoy.extensions.filters.network.generic_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Matcher } from "../../../../../../../xds/type/matcher/v3/matcher_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.generic_proxy.v3.VirtualHost
 */
export const VirtualHost = proto3.makeMessageType(
  "envoy.extensions.filters.network.generic_proxy.v3.VirtualHost",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hosts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "routes", kind: "message", T: Matcher },
  ],
);

/**
 * The generic proxy makes use of the `xds matching API` for routing configurations.
 *
 * In the below example, we combine a top level tree matcher with a linear matcher to match
 * the incoming requests, and send the matching requests to v1 of the upstream service.
 *
 * .. code-block:: yaml
 *
 *   name: example
 *   routes:
 *     matcher_tree:
 *       input:
 *         name: request-service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.ServiceMatchInput
 *       exact_match_map:
 *         map:
 *           service_name_0:
 *             matcher:
 *               matcher_list:
 *                 matchers:
 *                 - predicate:
 *                     and_matcher:
 *                       predicate:
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: version
 *                           value_match:
 *                             exact: v1
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: user
 *                           value_match:
 *                             exact: john
 *                   on_match:
 *                     action:
 *                       name: route
 *                       typed_config:
 *                         "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.action.v3.routeAction
 *                         cluster: cluster_0
 *
 * @generated from message envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration
 */
export const RouteConfiguration = proto3.makeMessageType(
  "envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: Matcher },
    { no: 3, name: "virtual_hosts", kind: "message", T: VirtualHost, repeated: true },
  ],
);

