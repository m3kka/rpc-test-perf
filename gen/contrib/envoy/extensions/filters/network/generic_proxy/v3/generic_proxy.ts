// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/generic_proxy/v3/generic_proxy.proto" (package "envoy.extensions.filters.network.generic_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConfigSource } from "../../../../../../../envoy/config/core/v3/config_source";
import { HttpConnectionManager_Tracing } from "../../../../../../../envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager";
import { RouteConfiguration } from "./route";
import { TypedExtensionConfig } from "../../../../../../../envoy/config/core/v3/extension";
// [#protodoc-title: Generic Proxy]
// Generic proxy.
// [#extension: envoy.filters.network.generic_proxy]

/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.v3.GenericProxy
 */
export interface GenericProxy {
    /**
     * The human readable prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The codec which encodes and decodes the application protocol.
     * [#extension-category: envoy.generic_proxy.codecs]
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig codec_config = 2;
     */
    codecConfig?: TypedExtensionConfig;
    /**
     * @generated from protobuf oneof: route_specifier
     */
    routeSpecifier: {
        oneofKind: "genericRds";
        /**
         * The generic proxies route table will be dynamically loaded via the meta RDS API.
         *
         * @generated from protobuf field: envoy.extensions.filters.network.generic_proxy.v3.GenericRds generic_rds = 3;
         */
        genericRds: GenericRds;
    } | {
        oneofKind: "routeConfig";
        /**
         * The route table for the generic proxy is static and is specified in this property.
         *
         * @generated from protobuf field: envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration route_config = 4;
         */
        routeConfig: RouteConfiguration;
    } | {
        oneofKind: undefined;
    };
    /**
     * A list of individual Layer-7 filters that make up the filter chain for requests made to the
     * proxy. Order matters as the filters are processed sequentially as request events
     * happen.
     * [#extension-category: envoy.generic_proxy.filters]
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.TypedExtensionConfig filters = 5;
     */
    filters: TypedExtensionConfig[];
    /**
     * Tracing configuration for the generic proxy.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing tracing = 6;
     */
    tracing?: HttpConnectionManager_Tracing;
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.v3.GenericRds
 */
export interface GenericRds {
    /**
     * Configuration source specifier for RDS.
     *
     * @generated from protobuf field: envoy.config.core.v3.ConfigSource config_source = 1;
     */
    configSource?: ConfigSource;
    /**
     * The name of the route configuration. This name will be passed to the RDS API. This allows an
     * Envoy configuration with multiple generic proxies to use different route configurations.
     *
     * @generated from protobuf field: string route_config_name = 2;
     */
    routeConfigName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GenericProxy$Type extends MessageType<GenericProxy> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.v3.GenericProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "codec_config", kind: "message", T: () => TypedExtensionConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "generic_rds", kind: "message", oneof: "routeSpecifier", T: () => GenericRds },
            { no: 4, name: "route_config", kind: "message", oneof: "routeSpecifier", T: () => RouteConfiguration },
            { no: 5, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TypedExtensionConfig },
            { no: 6, name: "tracing", kind: "message", T: () => HttpConnectionManager_Tracing }
        ]);
    }
    create(value?: PartialMessage<GenericProxy>): GenericProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.routeSpecifier = { oneofKind: undefined };
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<GenericProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericProxy): GenericProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.config.core.v3.TypedExtensionConfig codec_config */ 2:
                    message.codecConfig = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.codecConfig);
                    break;
                case /* envoy.extensions.filters.network.generic_proxy.v3.GenericRds generic_rds */ 3:
                    message.routeSpecifier = {
                        oneofKind: "genericRds",
                        genericRds: GenericRds.internalBinaryRead(reader, reader.uint32(), options, (message.routeSpecifier as any).genericRds)
                    };
                    break;
                case /* envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration route_config */ 4:
                    message.routeSpecifier = {
                        oneofKind: "routeConfig",
                        routeConfig: RouteConfiguration.internalBinaryRead(reader, reader.uint32(), options, (message.routeSpecifier as any).routeConfig)
                    };
                    break;
                case /* repeated envoy.config.core.v3.TypedExtensionConfig filters */ 5:
                    message.filters.push(TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing tracing */ 6:
                    message.tracing = HttpConnectionManager_Tracing.internalBinaryRead(reader, reader.uint32(), options, message.tracing);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.config.core.v3.TypedExtensionConfig codec_config = 2; */
        if (message.codecConfig)
            TypedExtensionConfig.internalBinaryWrite(message.codecConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.generic_proxy.v3.GenericRds generic_rds = 3; */
        if (message.routeSpecifier.oneofKind === "genericRds")
            GenericRds.internalBinaryWrite(message.routeSpecifier.genericRds, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration route_config = 4; */
        if (message.routeSpecifier.oneofKind === "routeConfig")
            RouteConfiguration.internalBinaryWrite(message.routeSpecifier.routeConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.TypedExtensionConfig filters = 5; */
        for (let i = 0; i < message.filters.length; i++)
            TypedExtensionConfig.internalBinaryWrite(message.filters[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing tracing = 6; */
        if (message.tracing)
            HttpConnectionManager_Tracing.internalBinaryWrite(message.tracing, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.v3.GenericProxy
 */
export const GenericProxy = new GenericProxy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenericRds$Type extends MessageType<GenericRds> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.v3.GenericRds", [
            { no: 1, name: "config_source", kind: "message", T: () => ConfigSource, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "route_config_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<GenericRds>): GenericRds {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeConfigName = "";
        if (value !== undefined)
            reflectionMergePartial<GenericRds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericRds): GenericRds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.ConfigSource config_source */ 1:
                    message.configSource = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.configSource);
                    break;
                case /* string route_config_name */ 2:
                    message.routeConfigName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericRds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.ConfigSource config_source = 1; */
        if (message.configSource)
            ConfigSource.internalBinaryWrite(message.configSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string route_config_name = 2; */
        if (message.routeConfigName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routeConfigName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.v3.GenericRds
 */
export const GenericRds = new GenericRds$Type();
