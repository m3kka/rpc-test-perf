// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/generic_proxy/v3/route.proto" (package "envoy.extensions.filters.network.generic_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Matcher } from "../../../../../../../xds/type/matcher/v3/matcher";
// [#protodoc-title: Generic Proxy Route Configuration]

/**
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.v3.VirtualHost
 */
export interface VirtualHost {
    /**
     * The name of the virtual host.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * A list of hosts that will be matched to this virtual host. Wildcard hosts are supported in
     * the suffix or prefix form.
     *
     * Host search order:
     *  1. Exact names: ``www.foo.com``.
     *  2. Suffix wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
     *  3. Prefix wildcards: ``foo.*`` or ``foo-*``.
     *  4. Special wildcard ``*`` matching any host and will be the default virtual host.
     *
     * .. note::
     *
     *   The wildcard will not match the empty string.
     *   e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``.
     *   The longest wildcards match first.
     *   Only a single virtual host in the entire route configuration can match on ``*``. A domain
     *   must be unique across all virtual hosts or the config will fail to load.
     *
     * @generated from protobuf field: repeated string hosts = 2;
     */
    hosts: string[];
    /**
     * The match tree to use when resolving route actions for incoming requests.
     *
     * @generated from protobuf field: xds.type.matcher.v3.Matcher routes = 3;
     */
    routes?: Matcher;
}
/**
 * The generic proxy makes use of the `xds matching API` for routing configurations.
 *
 * In the below example, we combine a top level tree matcher with a linear matcher to match
 * the incoming requests, and send the matching requests to v1 of the upstream service.
 *
 * .. code-block:: yaml
 *
 *   name: example
 *   routes:
 *     matcher_tree:
 *       input:
 *         name: request-service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.ServiceMatchInput
 *       exact_match_map:
 *         map:
 *           service_name_0:
 *             matcher:
 *               matcher_list:
 *                 matchers:
 *                 - predicate:
 *                     and_matcher:
 *                       predicate:
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: version
 *                           value_match:
 *                             exact: v1
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: user
 *                           value_match:
 *                             exact: john
 *                   on_match:
 *                     action:
 *                       name: route
 *                       typed_config:
 *                         "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.action.v3.routeAction
 *                         cluster: cluster_0
 *
 * @generated from protobuf message envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration
 */
export interface RouteConfiguration {
    /**
     * The name of the route configuration. For example, it might match route_config_name in
     * envoy.extensions.filters.network.generic_proxy.v3.Rds.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The match tree to use when resolving route actions for incoming requests.
     * If no any virtual host is configured in the ``virtual_hosts`` field or no special wildcard
     * virtual host is configured, the ``routes`` field will be used as the default route table.
     * If both the wildcard virtual host and ``routes`` are configured, the configuration will fail
     * to load.
     *
     * @generated from protobuf field: xds.type.matcher.v3.Matcher routes = 2;
     */
    routes?: Matcher;
    /**
     * An array of virtual hosts that make up the route table.
     *
     * @generated from protobuf field: repeated envoy.extensions.filters.network.generic_proxy.v3.VirtualHost virtual_hosts = 3;
     */
    virtualHosts: VirtualHost[];
}
// @generated message type with reflection information, may provide speed optimized methods
class VirtualHost$Type extends MessageType<VirtualHost> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.v3.VirtualHost", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "hosts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "routes", kind: "message", T: () => Matcher, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<VirtualHost>): VirtualHost {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.hosts = [];
        if (value !== undefined)
            reflectionMergePartial<VirtualHost>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualHost): VirtualHost {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string hosts */ 2:
                    message.hosts.push(reader.string());
                    break;
                case /* xds.type.matcher.v3.Matcher routes */ 3:
                    message.routes = Matcher.internalBinaryRead(reader, reader.uint32(), options, message.routes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualHost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string hosts = 2; */
        for (let i = 0; i < message.hosts.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.hosts[i]);
        /* xds.type.matcher.v3.Matcher routes = 3; */
        if (message.routes)
            Matcher.internalBinaryWrite(message.routes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.v3.VirtualHost
 */
export const VirtualHost = new VirtualHost$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteConfiguration$Type extends MessageType<RouteConfiguration> {
    constructor() {
        super("envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "routes", kind: "message", T: () => Matcher },
            { no: 3, name: "virtual_hosts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VirtualHost }
        ]);
    }
    create(value?: PartialMessage<RouteConfiguration>): RouteConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.virtualHosts = [];
        if (value !== undefined)
            reflectionMergePartial<RouteConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteConfiguration): RouteConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* xds.type.matcher.v3.Matcher routes */ 2:
                    message.routes = Matcher.internalBinaryRead(reader, reader.uint32(), options, message.routes);
                    break;
                case /* repeated envoy.extensions.filters.network.generic_proxy.v3.VirtualHost virtual_hosts */ 3:
                    message.virtualHosts.push(VirtualHost.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* xds.type.matcher.v3.Matcher routes = 2; */
        if (message.routes)
            Matcher.internalBinaryWrite(message.routes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.extensions.filters.network.generic_proxy.v3.VirtualHost virtual_hosts = 3; */
        for (let i = 0; i < message.virtualHosts.length; i++)
            VirtualHost.internalBinaryWrite(message.virtualHosts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration
 */
export const RouteConfiguration = new RouteConfiguration$Type();
