// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/network/rocketmq_proxy/v3/route.proto (package envoy.extensions.filters.network.rocketmq_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { StringMatcher } from "../../../../../../../envoy/type/matcher/v3/string_pb.js";
import type { HeaderMatcher } from "../../../../../../../envoy/config/route/v3/route_components_pb.js";
import type { Metadata } from "../../../../../../../envoy/config/core/v3/base_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration
 */
export declare class RouteConfiguration extends Message<RouteConfiguration> {
  /**
   * The name of the route configuration.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   *
   * @generated from field: repeated envoy.extensions.filters.network.rocketmq_proxy.v3.Route routes = 2;
   */
  routes: Route[];

  constructor(data?: PartialMessage<RouteConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static equals(a: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined, b: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.rocketmq_proxy.v3.Route
 */
export declare class Route extends Message<Route> {
  /**
   * Route matching parameters.
   *
   * @generated from field: envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch match = 1;
   */
  match?: RouteMatch;

  /**
   * Route request to some upstream cluster.
   *
   * @generated from field: envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction route = 2;
   */
  route?: RouteAction;

  constructor(data?: PartialMessage<Route>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.rocketmq_proxy.v3.Route";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Route;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Route;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Route;

  static equals(a: Route | PlainMessage<Route> | undefined, b: Route | PlainMessage<Route> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch
 */
export declare class RouteMatch extends Message<RouteMatch> {
  /**
   * The name of the topic.
   *
   * @generated from field: envoy.type.matcher.v3.StringMatcher topic = 1;
   */
  topic?: StringMatcher;

  /**
   * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
   * headers against all the specified headers in the route config. A match will happen if all the
   * headers in the route are present in the request with the same values (or based on presence if
   * the value field is not in the config).
   *
   * @generated from field: repeated envoy.config.route.v3.HeaderMatcher headers = 2;
   */
  headers: HeaderMatcher[];

  constructor(data?: PartialMessage<RouteMatch>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteMatch;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteMatch;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteMatch;

  static equals(a: RouteMatch | PlainMessage<RouteMatch> | undefined, b: RouteMatch | PlainMessage<RouteMatch> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction
 */
export declare class RouteAction extends Message<RouteAction> {
  /**
   * Indicates the upstream cluster to which the request should be routed.
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * Optional endpoint metadata match criteria used by the subset load balancer.
   *
   * @generated from field: envoy.config.core.v3.Metadata metadata_match = 2;
   */
  metadataMatch?: Metadata;

  constructor(data?: PartialMessage<RouteAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteAction;

  static equals(a: RouteAction | PlainMessage<RouteAction> | undefined, b: RouteAction | PlainMessage<RouteAction> | undefined): boolean;
}

