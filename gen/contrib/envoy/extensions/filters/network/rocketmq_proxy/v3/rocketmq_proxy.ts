// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/rocketmq_proxy/v3/rocketmq_proxy.proto" (package "envoy.extensions.filters.network.rocketmq_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { RouteConfiguration } from "./route";
// [#protodoc-title: RocketMQ Proxy]
// RocketMQ Proxy :ref:`configuration overview <config_network_filters_rocketmq_proxy>`.
// [#extension: envoy.filters.network.rocketmq_proxy]

/**
 * @generated from protobuf message envoy.extensions.filters.network.rocketmq_proxy.v3.RocketmqProxy
 */
export interface RocketmqProxy {
    /**
     * The human readable prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The route table for the connection manager is specified in this property.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration route_config = 2;
     */
    routeConfig?: RouteConfiguration;
    /**
     * The largest duration transient object expected to live, more than 10s is recommended.
     *
     * @generated from protobuf field: google.protobuf.Duration transient_object_life_span = 3;
     */
    transientObjectLifeSpan?: Duration;
    /**
     * If develop_mode is enabled, this proxy plugin may work without dedicated traffic intercepting
     * facility without considering backward compatibility of exiting RocketMQ client SDK.
     *
     * @generated from protobuf field: bool develop_mode = 4;
     */
    developMode: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RocketmqProxy$Type extends MessageType<RocketmqProxy> {
    constructor() {
        super("envoy.extensions.filters.network.rocketmq_proxy.v3.RocketmqProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "route_config", kind: "message", T: () => RouteConfiguration },
            { no: 3, name: "transient_object_life_span", kind: "message", T: () => Duration },
            { no: 4, name: "develop_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RocketmqProxy>): RocketmqProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.developMode = false;
        if (value !== undefined)
            reflectionMergePartial<RocketmqProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RocketmqProxy): RocketmqProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration route_config */ 2:
                    message.routeConfig = RouteConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.routeConfig);
                    break;
                case /* google.protobuf.Duration transient_object_life_span */ 3:
                    message.transientObjectLifeSpan = Duration.internalBinaryRead(reader, reader.uint32(), options, message.transientObjectLifeSpan);
                    break;
                case /* bool develop_mode */ 4:
                    message.developMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RocketmqProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration route_config = 2; */
        if (message.routeConfig)
            RouteConfiguration.internalBinaryWrite(message.routeConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration transient_object_life_span = 3; */
        if (message.transientObjectLifeSpan)
            Duration.internalBinaryWrite(message.transientObjectLifeSpan, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool develop_mode = 4; */
        if (message.developMode !== false)
            writer.tag(4, WireType.Varint).bool(message.developMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.rocketmq_proxy.v3.RocketmqProxy
 */
export const RocketmqProxy = new RocketmqProxy$Type();
