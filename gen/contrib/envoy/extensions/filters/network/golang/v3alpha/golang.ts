// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/golang/v3alpha/golang.proto" (package "envoy.extensions.filters.network.golang.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../../../google/protobuf/any";
// [#protodoc-title: Golang network filter]
// 
// Golang network filter :ref:`configuration overview <config_network_filters_golang>`.
// [#extension: envoy.filters.network.golang]

/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.network.golang.v3alpha.Config
 */
export interface Config {
    /**
     * Bool ``true`` if this filter must be the last filter in a filter chain, ``false`` otherwise.
     *
     * @generated from protobuf field: bool is_terminal_filter = 1;
     */
    isTerminalFilter: boolean;
    /**
     * Globally unique ID for a dynamic library file.
     *
     * @generated from protobuf field: string library_id = 2;
     */
    libraryId: string;
    /**
     * Path to a dynamic library implementing the
     * :repo:`DownstreamFilter API <contrib/golang/common/go/api.DownstreamFilter>`
     * interface.
     * [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
     *
     * @generated from protobuf field: string library_path = 3;
     */
    libraryPath: string;
    /**
     * Globally unique name of the Go plugin.
     *
     * This name **must** be consistent with the name registered in ``network::RegisterNetworkFilterConfigFactory``
     *
     *
     * @generated from protobuf field: string plugin_name = 4;
     */
    pluginName: string;
    /**
     * Configuration for the Go plugin.
     *
     * .. note::
     *     This configuration is only parsed in the go plugin, and is therefore not validated
     *     by Envoy.
     *
     *     See the :repo:`DownstreamFilter API <contrib/golang/common/go/api/filter.go>`
     *     for more information about how the plugin's configuration data can be accessed.
     *
     *
     * @generated from protobuf field: google.protobuf.Any plugin_config = 5;
     */
    pluginConfig?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("envoy.extensions.filters.network.golang.v3alpha.Config", [
            { no: 1, name: "is_terminal_filter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "library_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "library_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 4, name: "plugin_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 5, name: "plugin_config", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isTerminalFilter = false;
        message.libraryId = "";
        message.libraryPath = "";
        message.pluginName = "";
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_terminal_filter */ 1:
                    message.isTerminalFilter = reader.bool();
                    break;
                case /* string library_id */ 2:
                    message.libraryId = reader.string();
                    break;
                case /* string library_path */ 3:
                    message.libraryPath = reader.string();
                    break;
                case /* string plugin_name */ 4:
                    message.pluginName = reader.string();
                    break;
                case /* google.protobuf.Any plugin_config */ 5:
                    message.pluginConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.pluginConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_terminal_filter = 1; */
        if (message.isTerminalFilter !== false)
            writer.tag(1, WireType.Varint).bool(message.isTerminalFilter);
        /* string library_id = 2; */
        if (message.libraryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.libraryId);
        /* string library_path = 3; */
        if (message.libraryPath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.libraryPath);
        /* string plugin_name = 4; */
        if (message.pluginName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pluginName);
        /* google.protobuf.Any plugin_config = 5; */
        if (message.pluginConfig)
            Any.internalBinaryWrite(message.pluginConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.golang.v3alpha.Config
 */
export const Config = new Config$Type();
