// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/sip_proxy/tra/v3alpha/tra.proto" (package "envoy.extensions.filters.network.sip_proxy.tra.v3alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TraService } from "./tra";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TraServiceResponse } from "./tra";
import type { TraServiceRequest } from "./tra";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: TRA]

/**
 * @generated from protobuf service envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraService
 */
export interface ITraServiceClient {
    /**
     * @generated from protobuf rpc: Create(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    create(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse>;
    /**
     * @generated from protobuf rpc: Update(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    update(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse>;
    /**
     * @generated from protobuf rpc: Retrieve(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    retrieve(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse>;
    /**
     * @generated from protobuf rpc: Delete(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    delete(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse>;
    /**
     * @generated from protobuf rpc: Subscribe(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (stream envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    subscribe(input: TraServiceRequest, options?: RpcOptions): ServerStreamingCall<TraServiceRequest, TraServiceResponse>;
}
// [#protodoc-title: TRA]

/**
 * @generated from protobuf service envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraService
 */
export class TraServiceClient implements ITraServiceClient, ServiceInfo {
    typeName = TraService.typeName;
    methods = TraService.methods;
    options = TraService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    create(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TraServiceRequest, TraServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    update(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TraServiceRequest, TraServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Retrieve(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    retrieve(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TraServiceRequest, TraServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    delete(input: TraServiceRequest, options?: RpcOptions): UnaryCall<TraServiceRequest, TraServiceResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TraServiceRequest, TraServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Subscribe(envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest) returns (stream envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse);
     */
    subscribe(input: TraServiceRequest, options?: RpcOptions): ServerStreamingCall<TraServiceRequest, TraServiceResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TraServiceRequest, TraServiceResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
