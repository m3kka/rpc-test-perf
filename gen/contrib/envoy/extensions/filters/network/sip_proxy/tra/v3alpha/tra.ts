// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/sip_proxy/tra/v3alpha/tra.proto" (package "envoy.extensions.filters.network.sip_proxy.tra.v3alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../../../google/protobuf/duration";
import { ApiVersion } from "../../../../../../../../envoy/config/core/v3/config_source";
import { GrpcService } from "../../../../../../../../envoy/config/core/v3/grpc_service";
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig
 */
export interface TraServiceConfig {
    /**
     * Specifies the gRPC service that hosts the rate limit service. The client
     * will connect to this cluster when it needs to make rate limit service
     * requests.
     *
     * @generated from protobuf field: envoy.config.core.v3.GrpcService grpc_service = 1;
     */
    grpcService?: GrpcService;
    /**
     * API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
     * version of messages used on the wire.
     *
     * @generated from protobuf field: envoy.config.core.v3.ApiVersion transport_api_version = 2;
     */
    transportApiVersion: ApiVersion;
    /**
     * @generated from protobuf field: google.protobuf.Duration timeout = 3;
     */
    timeout?: Duration;
}
/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest
 */
export interface TraServiceRequest {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "createRequest";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest create_request = 2;
         */
        createRequest: CreateRequest;
    } | {
        oneofKind: "updateRequest";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest update_request = 3;
         */
        updateRequest: UpdateRequest;
    } | {
        oneofKind: "retrieveRequest";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest retrieve_request = 4;
         */
        retrieveRequest: RetrieveRequest;
    } | {
        oneofKind: "deleteRequest";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest delete_request = 5;
         */
        deleteRequest: DeleteRequest;
    } | {
        oneofKind: "subscribeRequest";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest subscribe_request = 6;
         */
        subscribeRequest: SubscribeRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * [#next-free-field: 9]
 *
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse
 */
export interface TraServiceResponse {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: int32 ret = 2;
     */
    ret: number;
    /**
     * @generated from protobuf field: string reason = 3;
     */
    reason: string;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "createResponse";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse create_response = 4;
         */
        createResponse: CreateResponse;
    } | {
        oneofKind: "updateResponse";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse update_response = 5;
         */
        updateResponse: UpdateResponse;
    } | {
        oneofKind: "retrieveResponse";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse retrieve_response = 6;
         */
        retrieveResponse: RetrieveResponse;
    } | {
        oneofKind: "deleteResponse";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse delete_response = 7;
         */
        deleteResponse: DeleteResponse;
    } | {
        oneofKind: "subscribeResponse";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse subscribe_response = 8;
         */
        subscribeResponse: SubscribeResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest
 */
export interface CreateRequest {
    /**
     * @generated from protobuf field: map<string, string> data = 1;
     */
    data: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<string, string> context = 2;
     */
    context: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse
 */
export interface CreateResponse {
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest
 */
export interface UpdateRequest {
    /**
     * @generated from protobuf field: map<string, string> data = 1;
     */
    data: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<string, string> context = 2;
     */
    context: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse
 */
export interface UpdateResponse {
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest
 */
export interface RetrieveRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: map<string, string> context = 2;
     */
    context: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse
 */
export interface RetrieveResponse {
    /**
     * @generated from protobuf field: map<string, string> data = 1;
     */
    data: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: map<string, string> context = 2;
     */
    context: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse
 */
export interface DeleteResponse {
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest
 */
export interface SubscribeRequest {
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse
 */
export interface SubscribeResponse {
    /**
     * @generated from protobuf field: map<string, string> data = 1;
     */
    data: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class TraServiceConfig$Type extends MessageType<TraServiceConfig> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig", [
            { no: 1, name: "grpc_service", kind: "message", T: () => GrpcService, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "transport_api_version", kind: "enum", T: () => ["envoy.config.core.v3.ApiVersion", ApiVersion], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "timeout", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<TraServiceConfig>): TraServiceConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transportApiVersion = 0;
        if (value !== undefined)
            reflectionMergePartial<TraServiceConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraServiceConfig): TraServiceConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.GrpcService grpc_service */ 1:
                    message.grpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.grpcService);
                    break;
                case /* envoy.config.core.v3.ApiVersion transport_api_version */ 2:
                    message.transportApiVersion = reader.int32();
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraServiceConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.GrpcService grpc_service = 1; */
        if (message.grpcService)
            GrpcService.internalBinaryWrite(message.grpcService, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.ApiVersion transport_api_version = 2; */
        if (message.transportApiVersion !== 0)
            writer.tag(2, WireType.Varint).int32(message.transportApiVersion);
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig
 */
export const TraServiceConfig = new TraServiceConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraServiceRequest$Type extends MessageType<TraServiceRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create_request", kind: "message", oneof: "request", T: () => CreateRequest },
            { no: 3, name: "update_request", kind: "message", oneof: "request", T: () => UpdateRequest },
            { no: 4, name: "retrieve_request", kind: "message", oneof: "request", T: () => RetrieveRequest },
            { no: 5, name: "delete_request", kind: "message", oneof: "request", T: () => DeleteRequest },
            { no: 6, name: "subscribe_request", kind: "message", oneof: "request", T: () => SubscribeRequest }
        ]);
    }
    create(value?: PartialMessage<TraServiceRequest>): TraServiceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TraServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraServiceRequest): TraServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest create_request */ 2:
                    message.request = {
                        oneofKind: "createRequest",
                        createRequest: CreateRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).createRequest)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest update_request */ 3:
                    message.request = {
                        oneofKind: "updateRequest",
                        updateRequest: UpdateRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).updateRequest)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest retrieve_request */ 4:
                    message.request = {
                        oneofKind: "retrieveRequest",
                        retrieveRequest: RetrieveRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).retrieveRequest)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest delete_request */ 5:
                    message.request = {
                        oneofKind: "deleteRequest",
                        deleteRequest: DeleteRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).deleteRequest)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest subscribe_request */ 6:
                    message.request = {
                        oneofKind: "subscribeRequest",
                        subscribeRequest: SubscribeRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).subscribeRequest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest create_request = 2; */
        if (message.request.oneofKind === "createRequest")
            CreateRequest.internalBinaryWrite(message.request.createRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest update_request = 3; */
        if (message.request.oneofKind === "updateRequest")
            UpdateRequest.internalBinaryWrite(message.request.updateRequest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest retrieve_request = 4; */
        if (message.request.oneofKind === "retrieveRequest")
            RetrieveRequest.internalBinaryWrite(message.request.retrieveRequest, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest delete_request = 5; */
        if (message.request.oneofKind === "deleteRequest")
            DeleteRequest.internalBinaryWrite(message.request.deleteRequest, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest subscribe_request = 6; */
        if (message.request.oneofKind === "subscribeRequest")
            SubscribeRequest.internalBinaryWrite(message.request.subscribeRequest, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest
 */
export const TraServiceRequest = new TraServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraServiceResponse$Type extends MessageType<TraServiceResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ret", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "create_response", kind: "message", oneof: "response", T: () => CreateResponse },
            { no: 5, name: "update_response", kind: "message", oneof: "response", T: () => UpdateResponse },
            { no: 6, name: "retrieve_response", kind: "message", oneof: "response", T: () => RetrieveResponse },
            { no: 7, name: "delete_response", kind: "message", oneof: "response", T: () => DeleteResponse },
            { no: 8, name: "subscribe_response", kind: "message", oneof: "response", T: () => SubscribeResponse }
        ]);
    }
    create(value?: PartialMessage<TraServiceResponse>): TraServiceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.ret = 0;
        message.reason = "";
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TraServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraServiceResponse): TraServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* int32 ret */ 2:
                    message.ret = reader.int32();
                    break;
                case /* string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse create_response */ 4:
                    message.response = {
                        oneofKind: "createResponse",
                        createResponse: CreateResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).createResponse)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse update_response */ 5:
                    message.response = {
                        oneofKind: "updateResponse",
                        updateResponse: UpdateResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).updateResponse)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse retrieve_response */ 6:
                    message.response = {
                        oneofKind: "retrieveResponse",
                        retrieveResponse: RetrieveResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).retrieveResponse)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse delete_response */ 7:
                    message.response = {
                        oneofKind: "deleteResponse",
                        deleteResponse: DeleteResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).deleteResponse)
                    };
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse subscribe_response */ 8:
                    message.response = {
                        oneofKind: "subscribeResponse",
                        subscribeResponse: SubscribeResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subscribeResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* int32 ret = 2; */
        if (message.ret !== 0)
            writer.tag(2, WireType.Varint).int32(message.ret);
        /* string reason = 3; */
        if (message.reason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse create_response = 4; */
        if (message.response.oneofKind === "createResponse")
            CreateResponse.internalBinaryWrite(message.response.createResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse update_response = 5; */
        if (message.response.oneofKind === "updateResponse")
            UpdateResponse.internalBinaryWrite(message.response.updateResponse, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse retrieve_response = 6; */
        if (message.response.oneofKind === "retrieveResponse")
            RetrieveResponse.internalBinaryWrite(message.response.retrieveResponse, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse delete_response = 7; */
        if (message.response.oneofKind === "deleteResponse")
            DeleteResponse.internalBinaryWrite(message.response.deleteResponse, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse subscribe_response = 8; */
        if (message.response.oneofKind === "subscribeResponse")
            SubscribeResponse.internalBinaryWrite(message.response.subscribeResponse, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse
 */
export const TraServiceResponse = new TraServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequest$Type extends MessageType<CreateRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "context", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CreateRequest>): CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        message.context = {};
        if (value !== undefined)
            reflectionMergePartial<CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequest): CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                case /* map<string, string> context */ 2:
                    this.binaryReadMap2(message.context, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: CreateRequest["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateRequest["data"] | undefined, val: CreateRequest["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.data");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap2(map: CreateRequest["context"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateRequest["context"] | undefined, val: CreateRequest["context"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.context");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> data = 1; */
        for (let k of globalThis.Object.keys(message.data))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.data[k]).join();
        /* map<string, string> context = 2; */
        for (let k of globalThis.Object.keys(message.context))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.context[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest
 */
export const CreateRequest = new CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse", []);
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends MessageType<UpdateRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "context", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<UpdateRequest>): UpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        message.context = {};
        if (value !== undefined)
            reflectionMergePartial<UpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequest): UpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                case /* map<string, string> context */ 2:
                    this.binaryReadMap2(message.context, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: UpdateRequest["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UpdateRequest["data"] | undefined, val: UpdateRequest["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.data");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap2(map: UpdateRequest["context"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UpdateRequest["context"] | undefined, val: UpdateRequest["context"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.context");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: UpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> data = 1; */
        for (let k of globalThis.Object.keys(message.data))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.data[k]).join();
        /* map<string, string> context = 2; */
        for (let k of globalThis.Object.keys(message.context))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.context[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest
 */
export const UpdateRequest = new UpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends MessageType<UpdateResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse", []);
    }
    create(value?: PartialMessage<UpdateResponse>): UpdateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResponse): UpdateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse
 */
export const UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveRequest$Type extends MessageType<RetrieveRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "context", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<RetrieveRequest>): RetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.context = {};
        if (value !== undefined)
            reflectionMergePartial<RetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveRequest): RetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* map<string, string> context */ 2:
                    this.binaryReadMap2(message.context, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: RetrieveRequest["context"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RetrieveRequest["context"] | undefined, val: RetrieveRequest["context"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.context");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: RetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* map<string, string> context = 2; */
        for (let k of globalThis.Object.keys(message.context))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.context[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest
 */
export const RetrieveRequest = new RetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveResponse$Type extends MessageType<RetrieveResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<RetrieveResponse>): RetrieveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        if (value !== undefined)
            reflectionMergePartial<RetrieveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveResponse): RetrieveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: RetrieveResponse["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RetrieveResponse["data"] | undefined, val: RetrieveResponse["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.data");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: RetrieveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> data = 1; */
        for (let k of globalThis.Object.keys(message.data))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.data[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse
 */
export const RetrieveResponse = new RetrieveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "context", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.context = {};
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* map<string, string> context */ 2:
                    this.binaryReadMap2(message.context, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: DeleteRequest["context"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DeleteRequest["context"] | undefined, val: DeleteRequest["context"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.context");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* map<string, string> context = 2; */
        for (let k of globalThis.Object.keys(message.context))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.context[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResponse$Type extends MessageType<DeleteResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse", []);
    }
    create(value?: PartialMessage<DeleteResponse>): DeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResponse): DeleteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse
 */
export const DeleteResponse = new DeleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest", []);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeResponse$Type extends MessageType<SubscribeResponse> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<SubscribeResponse>): SubscribeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        if (value !== undefined)
            reflectionMergePartial<SubscribeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeResponse): SubscribeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: SubscribeResponse["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SubscribeResponse["data"] | undefined, val: SubscribeResponse["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.data");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: SubscribeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> data = 1; */
        for (let k of globalThis.Object.keys(message.data))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.data[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse
 */
export const SubscribeResponse = new SubscribeResponse$Type();
/**
 * @generated ServiceType for protobuf service envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraService
 */
export const TraService = new ServiceType("envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraService", [
    { name: "Create", options: {}, I: TraServiceRequest, O: TraServiceResponse },
    { name: "Update", options: {}, I: TraServiceRequest, O: TraServiceResponse },
    { name: "Retrieve", options: {}, I: TraServiceRequest, O: TraServiceResponse },
    { name: "Delete", options: {}, I: TraServiceRequest, O: TraServiceResponse },
    { name: "Subscribe", serverStreaming: true, options: {}, I: TraServiceRequest, O: TraServiceResponse }
]);
