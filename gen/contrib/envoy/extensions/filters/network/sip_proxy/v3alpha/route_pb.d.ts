// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/network/sip_proxy/v3alpha/route.proto (package envoy.extensions.filters.network.sip_proxy.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration
 */
export declare class RouteConfiguration extends Message<RouteConfiguration> {
  /**
   * The name of the route configuration. Reserved for future use in asynchronous route discovery.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   *
   * @generated from field: repeated envoy.extensions.filters.network.sip_proxy.v3alpha.Route routes = 2;
   */
  routes: Route[];

  constructor(data?: PartialMessage<RouteConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static equals(a: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined, b: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.Route
 */
export declare class Route extends Message<Route> {
  /**
   * Route matching parameters.
   *
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch match = 1;
   */
  match?: RouteMatch;

  /**
   * Route request to some upstream cluster.
   *
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction route = 2;
   */
  route?: RouteAction;

  constructor(data?: PartialMessage<Route>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.Route";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Route;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Route;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Route;

  static equals(a: Route | PlainMessage<Route> | undefined, b: Route | PlainMessage<Route> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch
 */
export declare class RouteMatch extends Message<RouteMatch> {
  /**
   * @generated from oneof envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch.match_specifier
   */
  matchSpecifier: {
    /**
     * The domain from Request URI or Route Header.
     *
     * @generated from field: string domain = 1;
     */
    value: string;
    case: "domain";
  } | { case: undefined; value?: undefined };

  /**
   * The header to get match parameter, default is "Route".
   *
   * @generated from field: string header = 2;
   */
  header: string;

  /**
   * The parameter to get domain, default is "host".
   *
   * @generated from field: string parameter = 3;
   */
  parameter: string;

  constructor(data?: PartialMessage<RouteMatch>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteMatch;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteMatch;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteMatch;

  static equals(a: RouteMatch | PlainMessage<RouteMatch> | undefined, b: RouteMatch | PlainMessage<RouteMatch> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction
 */
export declare class RouteAction extends Message<RouteAction> {
  /**
   * @generated from oneof envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction.cluster_specifier
   */
  clusterSpecifier: {
    /**
     * Indicates a single upstream cluster to which the request should be routed
     * to.
     *
     * @generated from field: string cluster = 1;
     */
    value: string;
    case: "cluster";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RouteAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteAction;

  static equals(a: RouteAction | PlainMessage<RouteAction> | undefined, b: RouteAction | PlainMessage<RouteAction> | undefined): boolean;
}

