// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/filters/network/sip_proxy/v3alpha/route.proto" (package "envoy.extensions.filters.network.sip_proxy.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Sip Proxy Route Configuration]

/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration
 */
export interface RouteConfiguration {
    /**
     * The name of the route configuration. Reserved for future use in asynchronous route discovery.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The list of routes that will be matched, in order, against incoming requests. The first route
     * that matches will be used.
     *
     * @generated from protobuf field: repeated envoy.extensions.filters.network.sip_proxy.v3alpha.Route routes = 2;
     */
    routes: Route[];
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.Route
 */
export interface Route {
    /**
     * Route matching parameters.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch match = 1;
     */
    match?: RouteMatch;
    /**
     * Route request to some upstream cluster.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction route = 2;
     */
    route?: RouteAction;
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch
 */
export interface RouteMatch {
    /**
     * @generated from protobuf oneof: match_specifier
     */
    matchSpecifier: {
        oneofKind: "domain";
        /**
         * The domain from Request URI or Route Header.
         *
         * @generated from protobuf field: string domain = 1;
         */
        domain: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * The header to get match parameter, default is "Route".
     *
     * @generated from protobuf field: string header = 2;
     */
    header: string;
    /**
     * The parameter to get domain, default is "host".
     *
     * @generated from protobuf field: string parameter = 3;
     */
    parameter: string;
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction
 */
export interface RouteAction {
    /**
     * @generated from protobuf oneof: cluster_specifier
     */
    clusterSpecifier: {
        oneofKind: "cluster";
        /**
         * Indicates a single upstream cluster to which the request should be routed
         * to.
         *
         * @generated from protobuf field: string cluster = 1;
         */
        cluster: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class RouteConfiguration$Type extends MessageType<RouteConfiguration> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Route }
        ]);
    }
    create(value?: PartialMessage<RouteConfiguration>): RouteConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<RouteConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteConfiguration): RouteConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.extensions.filters.network.sip_proxy.v3alpha.Route routes */ 2:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.extensions.filters.network.sip_proxy.v3alpha.Route routes = 2; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration
 */
export const RouteConfiguration = new RouteConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Route$Type extends MessageType<Route> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.v3alpha.Route", [
            { no: 1, name: "match", kind: "message", T: () => RouteMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "route", kind: "message", T: () => RouteAction, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Route>): Route {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Route): Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch match */ 1:
                    message.match = RouteMatch.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction route */ 2:
                    message.route = RouteAction.internalBinaryRead(reader, reader.uint32(), options, message.route);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch match = 1; */
        if (message.match)
            RouteMatch.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction route = 2; */
        if (message.route)
            RouteAction.internalBinaryWrite(message.route, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.Route
 */
export const Route = new Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteMatch$Type extends MessageType<RouteMatch> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch", [
            { no: 1, name: "domain", kind: "scalar", oneof: "matchSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "header", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parameter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RouteMatch>): RouteMatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchSpecifier = { oneofKind: undefined };
        message.header = "";
        message.parameter = "";
        if (value !== undefined)
            reflectionMergePartial<RouteMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteMatch): RouteMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain */ 1:
                    message.matchSpecifier = {
                        oneofKind: "domain",
                        domain: reader.string()
                    };
                    break;
                case /* string header */ 2:
                    message.header = reader.string();
                    break;
                case /* string parameter */ 3:
                    message.parameter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain = 1; */
        if (message.matchSpecifier.oneofKind === "domain")
            writer.tag(1, WireType.LengthDelimited).string(message.matchSpecifier.domain);
        /* string header = 2; */
        if (message.header !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.header);
        /* string parameter = 3; */
        if (message.parameter !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.parameter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch
 */
export const RouteMatch = new RouteMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteAction$Type extends MessageType<RouteAction> {
    constructor() {
        super("envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction", [
            { no: 1, name: "cluster", kind: "scalar", oneof: "clusterSpecifier", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<RouteAction>): RouteAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RouteAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteAction): RouteAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster */ 1:
                    message.clusterSpecifier = {
                        oneofKind: "cluster",
                        cluster: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster = 1; */
        if (message.clusterSpecifier.oneofKind === "cluster")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterSpecifier.cluster);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction
 */
export const RouteAction = new RouteAction$Type();
