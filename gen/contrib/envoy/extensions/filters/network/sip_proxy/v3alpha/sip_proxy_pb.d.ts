// @generated by protoc-gen-es v1.5.1
// @generated from file contrib/envoy/extensions/filters/network/sip_proxy/v3alpha/sip_proxy.proto (package envoy.extensions.filters.network.sip_proxy.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RouteConfiguration } from "./route_pb.js";
import type { TraServiceConfig } from "../tra/v3alpha/tra_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.SipProxy
 */
export declare class SipProxy extends Message<SipProxy> {
  /**
   * The human readable prefix to use when emitting statistics.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The route table for the connection manager is static and is specified in this property.
   *
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration route_config = 2;
   */
  routeConfig?: RouteConfiguration;

  /**
   * A list of individual Sip filters that make up the filter chain for requests made to the
   * Sip proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no sip_filters are specified, a default Sip router filter
   * (``envoy.filters.sip.router``) is used.
   * [#extension-category: envoy.sip_proxy.filters]
   *
   * @generated from field: repeated envoy.extensions.filters.network.sip_proxy.v3alpha.SipFilter sip_filters = 3;
   */
  sipFilters: SipFilter[];

  /**
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.SipProxy.SipSettings settings = 4;
   */
  settings?: SipProxy_SipSettings;

  constructor(data?: PartialMessage<SipProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.SipProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipProxy;

  static equals(a: SipProxy | PlainMessage<SipProxy> | undefined, b: SipProxy | PlainMessage<SipProxy> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.SipProxy.SipSettings
 */
export declare class SipProxy_SipSettings extends Message<SipProxy_SipSettings> {
  /**
   * transaction timeout timer [Timer B] unit is milliseconds, default value 64*T1.
   *
   * Session Initiation Protocol (SIP) timer summary
   *
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer   | Default value           | Section  | Meaning                                                                      |
   * +=========+=========================+==========+==============================================================================+
   * | T1      | 500 ms                  | 17.1.1.1 | Round-trip time (RTT) estimate                                               |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | T2      | 4 sec                   | 17.1.2.2 | Maximum re-transmission interval for non-INVITE requests and INVITE responses|
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | T4      | 5 sec                   | 17.1.2.2 | Maximum duration that a message can remain in the network                    |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer A | initially T1            | 17.1.1.2 | INVITE request re-transmission interval, for UDP only                        |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer B | 64*T1                   | 17.1.1.2 | INVITE transaction timeout timer                                             |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer D | > 32 sec. for UDP       | 17.1.1.2 | Wait time for response re-transmissions                                      |
   * |         | 0 sec. for TCP and SCTP |          |                                                                              |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer E | initially T1            | 17.1.2.2 | Non-INVITE request re-transmission interval, UDP only                        |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer F | 64*T1                   | 17.1.2.2 | Non-INVITE transaction timeout timer                                         |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer G | initially T1            | 17.2.1   | INVITE response re-transmission interval                                     |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer H | 64*T1                   | 17.2.1   | Wait time for ACK receipt                                                    |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer I | T4 for UDP              | 17.2.1   | Wait time for ACK re-transmissions                                           |
   * |         | 0 sec. for TCP and SCTP |          |                                                                              |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer J | 64*T1 for UDP           | 17.2.2   | Wait time for re-transmissions of non-INVITE requests                        |
   * |         | 0 sec. for TCP and SCTP |          |                                                                              |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   * | Timer K | T4 for UDP              | 17.1.2.2 | Wait time for response re-transmissions                                      |
   * |         | 0 sec. for TCP and SCTP |          |                                                                              |
   * +---------+-------------------------+----------+------------------------------------------------------------------------------+
   *
   * @generated from field: google.protobuf.Duration transaction_timeout = 1;
   */
  transactionTimeout?: Duration;

  /**
   * The service to match for ep insert
   *
   * @generated from field: repeated envoy.extensions.filters.network.sip_proxy.v3alpha.LocalService local_services = 2;
   */
  localServices: LocalService[];

  /**
   * @generated from field: envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig tra_service_config = 3;
   */
  traServiceConfig?: TraServiceConfig;

  /**
   * Whether via header is operated, including add via for request and pop via for response
   * False: sip service proxy
   * True:  sip load balancer
   *
   * @generated from field: bool operate_via = 4;
   */
  operateVia: boolean;

  constructor(data?: PartialMessage<SipProxy_SipSettings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.SipProxy.SipSettings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipProxy_SipSettings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipProxy_SipSettings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipProxy_SipSettings;

  static equals(a: SipProxy_SipSettings | PlainMessage<SipProxy_SipSettings> | undefined, b: SipProxy_SipSettings | PlainMessage<SipProxy_SipSettings> | undefined): boolean;
}

/**
 * SipFilter configures a Sip filter.
 *
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.SipFilter
 */
export declare class SipFilter extends Message<SipFilter> {
  /**
   * The name of the filter to instantiate. The name must match a supported
   * filter. The built-in filters are:
   *
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   *
   * @generated from oneof envoy.extensions.filters.network.sip_proxy.v3alpha.SipFilter.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Any typed_config = 3;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SipFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.SipFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipFilter;

  static equals(a: SipFilter | PlainMessage<SipFilter> | undefined, b: SipFilter | PlainMessage<SipFilter> | undefined): boolean;
}

/**
 * SipProtocolOptions specifies Sip upstream protocol options. This object is used in
 * :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
 * keyed by the name ``envoy.filters.network.sip_proxy``.
 *
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.SipProtocolOptions
 */
export declare class SipProtocolOptions extends Message<SipProtocolOptions> {
  /**
   * All sip messages in one dialog should go to the same endpoint.
   *
   * @generated from field: bool session_affinity = 1;
   */
  sessionAffinity: boolean;

  /**
   * The Register with Authorization header should go to the same endpoint which send out the 401 Unauthorized.
   *
   * @generated from field: bool registration_affinity = 2;
   */
  registrationAffinity: boolean;

  /**
   * Customized affinity
   *
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinity customized_affinity = 3;
   */
  customizedAffinity?: CustomizedAffinity;

  constructor(data?: PartialMessage<SipProtocolOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.SipProtocolOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipProtocolOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipProtocolOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipProtocolOptions;

  static equals(a: SipProtocolOptions | PlainMessage<SipProtocolOptions> | undefined, b: SipProtocolOptions | PlainMessage<SipProtocolOptions> | undefined): boolean;
}

/**
 * For affinity
 *
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinity
 */
export declare class CustomizedAffinity extends Message<CustomizedAffinity> {
  /**
   * Affinity rules to conclude the upstream endpoint
   *
   * @generated from field: repeated envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinityEntry entries = 1;
   */
  entries: CustomizedAffinityEntry[];

  /**
   * Configures whether load balance should be stopped or continued after affinity handling.
   *
   * @generated from field: bool stop_load_balance = 2;
   */
  stopLoadBalance: boolean;

  constructor(data?: PartialMessage<CustomizedAffinity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomizedAffinity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomizedAffinity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomizedAffinity;

  static equals(a: CustomizedAffinity | PlainMessage<CustomizedAffinity> | undefined, b: CustomizedAffinity | PlainMessage<CustomizedAffinity> | undefined): boolean;
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinityEntry
 */
export declare class CustomizedAffinityEntry extends Message<CustomizedAffinityEntry> {
  /**
   * The header name to match, e.g. "From", if not specified, default is "Route"
   *
   * @generated from field: string header = 1;
   */
  header: string;

  /**
   * Affinity key for TRA query/subscribe, e.g. "lskpmc", if key_name is "text" means use the header content as key.
   *
   * @generated from field: string key_name = 2;
   */
  keyName: string;

  /**
   * Whether subscribe to TRA is required
   *
   * @generated from field: bool subscribe = 3;
   */
  subscribe: boolean;

  /**
   * Whether query to TRA is required
   *
   * @generated from field: bool query = 4;
   */
  query: boolean;

  /**
   * Local cache
   *
   * @generated from field: envoy.extensions.filters.network.sip_proxy.v3alpha.Cache cache = 5;
   */
  cache?: Cache;

  constructor(data?: PartialMessage<CustomizedAffinityEntry>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.CustomizedAffinityEntry";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomizedAffinityEntry;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomizedAffinityEntry;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomizedAffinityEntry;

  static equals(a: CustomizedAffinityEntry | PlainMessage<CustomizedAffinityEntry> | undefined, b: CustomizedAffinityEntry | PlainMessage<CustomizedAffinityEntry> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.Cache
 */
export declare class Cache extends Message<Cache> {
  /**
   * Affinity local cache item max number
   *
   * @generated from field: int32 max_cache_item = 1;
   */
  maxCacheItem: number;

  /**
   * Whether query result can be added to local cache
   *
   * @generated from field: bool add_query_to_cache = 2;
   */
  addQueryToCache: boolean;

  constructor(data?: PartialMessage<Cache>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.Cache";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cache;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cache;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cache;

  static equals(a: Cache | PlainMessage<Cache> | undefined, b: Cache | PlainMessage<Cache> | undefined): boolean;
}

/**
 * Local Service
 *
 * @generated from message envoy.extensions.filters.network.sip_proxy.v3alpha.LocalService
 */
export declare class LocalService extends Message<LocalService> {
  /**
   * The domain need to matched
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * The parameter to get domain
   *
   * @generated from field: string parameter = 2;
   */
  parameter: string;

  constructor(data?: PartialMessage<LocalService>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.sip_proxy.v3alpha.LocalService";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalService;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalService;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalService;

  static equals(a: LocalService | PlainMessage<LocalService> | undefined, b: LocalService | PlainMessage<LocalService> | undefined): boolean;
}

