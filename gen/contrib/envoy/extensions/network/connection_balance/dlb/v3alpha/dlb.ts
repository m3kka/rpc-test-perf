// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/network/connection_balance/dlb/v3alpha/dlb.proto" (package "envoy.extensions.network.connection_balance.dlb.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Dlb connection balancer configuration]
// DLB :ref:`configuration overview <config_connection_balance_dlb>`.
// [#extension: envoy.network.connection_balance.dlb]

/**
 * The Dlb is a hardware managed system of queues and arbiters connecting producers and consumers. It is a PCIE device
 * in the CPU package. It interacts with software running on cores and potentially other devices. The Dlb implements the
 * following balancing features:
 *
 * -  Lock-free multi-producer/multi-consumer operation.
 * -  Multiple priorities for varying traffic types.
 * -  Various distribution schemes.
 *
 * Dlb connection balancer uses Dlb hardware to balance connections, and can significantly reduce latency.
 *
 * As the Dlb connection balancer provides assistance from dedicated Dlb hardware, it can be used for a proxy with a large number of connections
 * (e.g., a gateway).
 *
 * @generated from protobuf message envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb
 */
export interface Dlb {
    /**
     * The ID of the Dlb hardware, start from 0.
     * If not specified, use the first available device as default.
     *
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * Maximum number of retries when sending to DLB device fails.
     * No retry as default.
     *
     * @generated from protobuf field: uint32 max_retries = 2;
     */
    maxRetries: number;
    /**
     * @generated from protobuf field: envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb.FallbackPolicy fallback_policy = 3;
     */
    fallbackPolicy: Dlb_FallbackPolicy;
}
/**
 * The fallback policy if any error occurs.
 * The default policy is None.
 *
 * @generated from protobuf enum envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb.FallbackPolicy
 */
export enum Dlb_FallbackPolicy {
    /**
     * No fallback policy.
     *
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * Fall back to Nop Connection Balance.
     *
     * @generated from protobuf enum value: NopConnectionBalance = 1;
     */
    NopConnectionBalance = 1,
    /**
     * Fall back to Exact Connection Balance.
     *
     * @generated from protobuf enum value: ExactConnectionBalance = 2;
     */
    ExactConnectionBalance = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Dlb$Type extends MessageType<Dlb> {
    constructor() {
        super("envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_retries", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "fallback_policy", kind: "enum", T: () => ["envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb.FallbackPolicy", Dlb_FallbackPolicy] }
        ]);
    }
    create(value?: PartialMessage<Dlb>): Dlb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.maxRetries = 0;
        message.fallbackPolicy = 0;
        if (value !== undefined)
            reflectionMergePartial<Dlb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dlb): Dlb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* uint32 max_retries */ 2:
                    message.maxRetries = reader.uint32();
                    break;
                case /* envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb.FallbackPolicy fallback_policy */ 3:
                    message.fallbackPolicy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dlb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* uint32 max_retries = 2; */
        if (message.maxRetries !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxRetries);
        /* envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb.FallbackPolicy fallback_policy = 3; */
        if (message.fallbackPolicy !== 0)
            writer.tag(3, WireType.Varint).int32(message.fallbackPolicy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb
 */
export const Dlb = new Dlb$Type();
