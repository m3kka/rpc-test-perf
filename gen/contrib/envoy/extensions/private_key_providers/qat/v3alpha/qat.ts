// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/private_key_providers/qat/v3alpha/qat.proto" (package "envoy.extensions.private_key_providers.qat.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../google/protobuf/duration";
import { DataSource } from "../../../../../../envoy/config/core/v3/base";
// [#protodoc-title: `QAT` private key provider]
// [#extension: envoy.tls.key_providers.qat]

// This message specifies how the private key provider is configured.
// The private key provider provides RSA sign and decrypt operation
// hardware acceleration.

/**
 * @generated from protobuf message envoy.extensions.private_key_providers.qat.v3alpha.QatPrivateKeyMethodConfig
 */
export interface QatPrivateKeyMethodConfig {
    /**
     * Private key to use in the private key provider. If set to inline_bytes or
     * inline_string, the value needs to be the private key in PEM format.
     *
     * @generated from protobuf field: envoy.config.core.v3.DataSource private_key = 1;
     */
    privateKey?: DataSource;
    /**
     * How long to wait before polling the hardware accelerator after a
     * request has been submitted there. Having a small value leads to
     * quicker answers from the hardware but causes more polling loop
     * spins, leading to potentially larger CPU usage. The duration needs
     * to be set to a value greater than or equal to 1 millisecond.
     *
     * @generated from protobuf field: google.protobuf.Duration poll_delay = 2;
     */
    pollDelay?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class QatPrivateKeyMethodConfig$Type extends MessageType<QatPrivateKeyMethodConfig> {
    constructor() {
        super("envoy.extensions.private_key_providers.qat.v3alpha.QatPrivateKeyMethodConfig", [
            { no: 1, name: "private_key", kind: "message", T: () => DataSource, options: { "udpa.annotations.sensitive": true } },
            { no: 2, name: "poll_delay", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, gte: { nanos: 1000000 } } } } }
        ]);
    }
    create(value?: PartialMessage<QatPrivateKeyMethodConfig>): QatPrivateKeyMethodConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QatPrivateKeyMethodConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QatPrivateKeyMethodConfig): QatPrivateKeyMethodConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.DataSource private_key */ 1:
                    message.privateKey = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.privateKey);
                    break;
                case /* google.protobuf.Duration poll_delay */ 2:
                    message.pollDelay = Duration.internalBinaryRead(reader, reader.uint32(), options, message.pollDelay);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QatPrivateKeyMethodConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.DataSource private_key = 1; */
        if (message.privateKey)
            DataSource.internalBinaryWrite(message.privateKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration poll_delay = 2; */
        if (message.pollDelay)
            Duration.internalBinaryWrite(message.pollDelay, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.private_key_providers.qat.v3alpha.QatPrivateKeyMethodConfig
 */
export const QatPrivateKeyMethodConfig = new QatPrivateKeyMethodConfig$Type();
