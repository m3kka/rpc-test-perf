// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/regex_engines/hyperscan/v3alpha/hyperscan.proto" (package "envoy.extensions.regex_engines.hyperscan.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Hyperscan]
// [#extension: envoy.regex_engines.hyperscan]

/**
 * `Hyperscan <https://github.com/intel/hyperscan>`_ regex engine. The engine uses hybrid automata
 * techniques to allow simultaneous matching of large numbers of regular expressions across streams
 * of data.
 *
 * The engine follows PCRE pattern syntax, and the regex string must adhere to the documented
 * `pattern support <https://intel.github.io/hyperscan/dev-reference/compilation.html#pattern-support>`_.
 * The syntax is not compatible with the default RE2 regex engine. Depending on configured
 * expressions, swapping regex engine may cause match rules to no longer be valid.
 *
 * @generated from protobuf message envoy.extensions.regex_engines.hyperscan.v3alpha.Hyperscan
 */
export interface Hyperscan {
}
// @generated message type with reflection information, may provide speed optimized methods
class Hyperscan$Type extends MessageType<Hyperscan> {
    constructor() {
        super("envoy.extensions.regex_engines.hyperscan.v3alpha.Hyperscan", []);
    }
    create(value?: PartialMessage<Hyperscan>): Hyperscan {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Hyperscan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hyperscan): Hyperscan {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Hyperscan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.regex_engines.hyperscan.v3alpha.Hyperscan
 */
export const Hyperscan = new Hyperscan$Type();
