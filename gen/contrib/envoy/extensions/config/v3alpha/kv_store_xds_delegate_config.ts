// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "contrib/envoy/extensions/config/v3alpha/kv_store_xds_delegate_config.proto" (package "envoy.extensions.config.v3alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeyValueStoreConfig } from "../../../../../envoy/config/common/key_value/v3/config";
/**
 * [#extension: envoy.xds_delegates.kv_store]
 *
 * Configuration for a KeyValueStore-based XdsResourcesDelegate implementation. This implementation
 * updates the underlying KV store with xDS resources received from the configured management
 * servers, enabling configuration to be persisted locally and used on startup in case connectivity
 * with the xDS management servers could not be established.
 *
 * The KV Store based delegate's handling of wildcard resources (empty resource list or "*") is
 * designed for use with O(100) resources or fewer, so it's not currently advised to use this
 * feature for large configurations with heavy use of wildcard resources.
 *
 * @generated from protobuf message envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig
 */
export interface KeyValueStoreXdsDelegateConfig {
    /**
     * Configuration for the KeyValueStore that holds the xDS resources.
     * [#allow-fully-qualified-name:]
     *
     * @generated from protobuf field: envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_store_config = 1;
     */
    keyValueStoreConfig?: KeyValueStoreConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class KeyValueStoreXdsDelegateConfig$Type extends MessageType<KeyValueStoreXdsDelegateConfig> {
    constructor() {
        super("envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig", [
            { no: 1, name: "key_value_store_config", kind: "message", T: () => KeyValueStoreConfig }
        ]);
    }
    create(value?: PartialMessage<KeyValueStoreXdsDelegateConfig>): KeyValueStoreXdsDelegateConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<KeyValueStoreXdsDelegateConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyValueStoreXdsDelegateConfig): KeyValueStoreXdsDelegateConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_store_config */ 1:
                    message.keyValueStoreConfig = KeyValueStoreConfig.internalBinaryRead(reader, reader.uint32(), options, message.keyValueStoreConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeyValueStoreXdsDelegateConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_store_config = 1; */
        if (message.keyValueStoreConfig)
            KeyValueStoreConfig.internalBinaryWrite(message.keyValueStoreConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig
 */
export const KeyValueStoreXdsDelegateConfig = new KeyValueStoreXdsDelegateConfig$Type();
