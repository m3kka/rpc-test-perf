// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/tracing/v2/custom_tag.proto" (package "envoy.type.tracing.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MetadataKey } from "../../metadata/v2/metadata";
import { MetadataKind } from "../../metadata/v2/metadata";
// [#protodoc-title: Custom Tag]

/**
 * Describes custom tags for the active span.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.type.tracing.v2.CustomTag
 */
export interface CustomTag {
    /**
     * Used to populate the tag name.
     *
     * @generated from protobuf field: string tag = 1;
     */
    tag: string;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "literal";
        /**
         * A literal custom tag.
         *
         * @generated from protobuf field: envoy.type.tracing.v2.CustomTag.Literal literal = 2;
         */
        literal: CustomTag_Literal;
    } | {
        oneofKind: "environment";
        /**
         * An environment custom tag.
         *
         * @generated from protobuf field: envoy.type.tracing.v2.CustomTag.Environment environment = 3;
         */
        environment: CustomTag_Environment;
    } | {
        oneofKind: "requestHeader";
        /**
         * A request header custom tag.
         *
         * @generated from protobuf field: envoy.type.tracing.v2.CustomTag.Header request_header = 4;
         */
        requestHeader: CustomTag_Header;
    } | {
        oneofKind: "metadata";
        /**
         * A custom tag to obtain tag value from the metadata.
         *
         * @generated from protobuf field: envoy.type.tracing.v2.CustomTag.Metadata metadata = 5;
         */
        metadata: CustomTag_Metadata;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Literal type custom tag with static value for the tag value.
 *
 * @generated from protobuf message envoy.type.tracing.v2.CustomTag.Literal
 */
export interface CustomTag_Literal {
    /**
     * Static literal value to populate the tag value.
     *
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * Environment type custom tag with environment name and default value.
 *
 * @generated from protobuf message envoy.type.tracing.v2.CustomTag.Environment
 */
export interface CustomTag_Environment {
    /**
     * Environment variable name to obtain the value to populate the tag value.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * When the environment variable is not found,
     * the tag value will be populated with this default value if specified,
     * otherwise no tag will be populated.
     *
     * @generated from protobuf field: string default_value = 2;
     */
    defaultValue: string;
}
/**
 * Header type custom tag with header name and default value.
 *
 * @generated from protobuf message envoy.type.tracing.v2.CustomTag.Header
 */
export interface CustomTag_Header {
    /**
     * Header name to obtain the value to populate the tag value.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * When the header does not exist,
     * the tag value will be populated with this default value if specified,
     * otherwise no tag will be populated.
     *
     * @generated from protobuf field: string default_value = 2;
     */
    defaultValue: string;
}
/**
 * Metadata type custom tag using
 * :ref:`MetadataKey <envoy_api_msg_type.metadata.v2.MetadataKey>` to retrieve the protobuf value
 * from :ref:`Metadata <envoy_api_msg_core.Metadata>`, and populate the tag value with
 * `the canonical JSON <https://developers.google.com/protocol-buffers/docs/proto3#json>`_
 * representation of it.
 *
 * @generated from protobuf message envoy.type.tracing.v2.CustomTag.Metadata
 */
export interface CustomTag_Metadata {
    /**
     * Specify what kind of metadata to obtain tag value from.
     *
     * @generated from protobuf field: envoy.type.metadata.v2.MetadataKind kind = 1;
     */
    kind?: MetadataKind;
    /**
     * Metadata key to define the path to retrieve the tag value.
     *
     * @generated from protobuf field: envoy.type.metadata.v2.MetadataKey metadata_key = 2;
     */
    metadataKey?: MetadataKey;
    /**
     * When no valid metadata is found,
     * the tag value would be populated with this default value if specified,
     * otherwise no tag would be populated.
     *
     * @generated from protobuf field: string default_value = 3;
     */
    defaultValue: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CustomTag$Type extends MessageType<CustomTag> {
    constructor() {
        super("envoy.type.tracing.v2.CustomTag", [
            { no: 1, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "literal", kind: "message", oneof: "type", T: () => CustomTag_Literal },
            { no: 3, name: "environment", kind: "message", oneof: "type", T: () => CustomTag_Environment },
            { no: 4, name: "request_header", kind: "message", oneof: "type", T: () => CustomTag_Header },
            { no: 5, name: "metadata", kind: "message", oneof: "type", T: () => CustomTag_Metadata }
        ]);
    }
    create(value?: PartialMessage<CustomTag>): CustomTag {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tag = "";
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CustomTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomTag): CustomTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag */ 1:
                    message.tag = reader.string();
                    break;
                case /* envoy.type.tracing.v2.CustomTag.Literal literal */ 2:
                    message.type = {
                        oneofKind: "literal",
                        literal: CustomTag_Literal.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).literal)
                    };
                    break;
                case /* envoy.type.tracing.v2.CustomTag.Environment environment */ 3:
                    message.type = {
                        oneofKind: "environment",
                        environment: CustomTag_Environment.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).environment)
                    };
                    break;
                case /* envoy.type.tracing.v2.CustomTag.Header request_header */ 4:
                    message.type = {
                        oneofKind: "requestHeader",
                        requestHeader: CustomTag_Header.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).requestHeader)
                    };
                    break;
                case /* envoy.type.tracing.v2.CustomTag.Metadata metadata */ 5:
                    message.type = {
                        oneofKind: "metadata",
                        metadata: CustomTag_Metadata.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).metadata)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag = 1; */
        if (message.tag !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tag);
        /* envoy.type.tracing.v2.CustomTag.Literal literal = 2; */
        if (message.type.oneofKind === "literal")
            CustomTag_Literal.internalBinaryWrite(message.type.literal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.tracing.v2.CustomTag.Environment environment = 3; */
        if (message.type.oneofKind === "environment")
            CustomTag_Environment.internalBinaryWrite(message.type.environment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.tracing.v2.CustomTag.Header request_header = 4; */
        if (message.type.oneofKind === "requestHeader")
            CustomTag_Header.internalBinaryWrite(message.type.requestHeader, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.tracing.v2.CustomTag.Metadata metadata = 5; */
        if (message.type.oneofKind === "metadata")
            CustomTag_Metadata.internalBinaryWrite(message.type.metadata, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.tracing.v2.CustomTag
 */
export const CustomTag = new CustomTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomTag_Literal$Type extends MessageType<CustomTag_Literal> {
    constructor() {
        super("envoy.type.tracing.v2.CustomTag.Literal", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<CustomTag_Literal>): CustomTag_Literal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CustomTag_Literal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomTag_Literal): CustomTag_Literal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomTag_Literal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.tracing.v2.CustomTag.Literal
 */
export const CustomTag_Literal = new CustomTag_Literal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomTag_Environment$Type extends MessageType<CustomTag_Environment> {
    constructor() {
        super("envoy.type.tracing.v2.CustomTag.Environment", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "default_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomTag_Environment>): CustomTag_Environment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.defaultValue = "";
        if (value !== undefined)
            reflectionMergePartial<CustomTag_Environment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomTag_Environment): CustomTag_Environment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string default_value */ 2:
                    message.defaultValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomTag_Environment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string default_value = 2; */
        if (message.defaultValue !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.tracing.v2.CustomTag.Environment
 */
export const CustomTag_Environment = new CustomTag_Environment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomTag_Header$Type extends MessageType<CustomTag_Header> {
    constructor() {
        super("envoy.type.tracing.v2.CustomTag.Header", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1", wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } },
            { no: 2, name: "default_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomTag_Header>): CustomTag_Header {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.defaultValue = "";
        if (value !== undefined)
            reflectionMergePartial<CustomTag_Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomTag_Header): CustomTag_Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string default_value */ 2:
                    message.defaultValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomTag_Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string default_value = 2; */
        if (message.defaultValue !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.tracing.v2.CustomTag.Header
 */
export const CustomTag_Header = new CustomTag_Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomTag_Metadata$Type extends MessageType<CustomTag_Metadata> {
    constructor() {
        super("envoy.type.tracing.v2.CustomTag.Metadata", [
            { no: 1, name: "kind", kind: "message", T: () => MetadataKind },
            { no: 2, name: "metadata_key", kind: "message", T: () => MetadataKey },
            { no: 3, name: "default_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomTag_Metadata>): CustomTag_Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.defaultValue = "";
        if (value !== undefined)
            reflectionMergePartial<CustomTag_Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomTag_Metadata): CustomTag_Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.metadata.v2.MetadataKind kind */ 1:
                    message.kind = MetadataKind.internalBinaryRead(reader, reader.uint32(), options, message.kind);
                    break;
                case /* envoy.type.metadata.v2.MetadataKey metadata_key */ 2:
                    message.metadataKey = MetadataKey.internalBinaryRead(reader, reader.uint32(), options, message.metadataKey);
                    break;
                case /* string default_value */ 3:
                    message.defaultValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomTag_Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.metadata.v2.MetadataKind kind = 1; */
        if (message.kind)
            MetadataKind.internalBinaryWrite(message.kind, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.metadata.v2.MetadataKey metadata_key = 2; */
        if (message.metadataKey)
            MetadataKey.internalBinaryWrite(message.metadataKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string default_value = 3; */
        if (message.defaultValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.defaultValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.tracing.v2.CustomTag.Metadata
 */
export const CustomTag_Metadata = new CustomTag_Metadata$Type();
