// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/matcher/v3/metadata.proto" (package "envoy.type.matcher.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ValueMatcher } from "./value";
// [#protodoc-title: Metadata matcher]

// MetadataMatcher provides a general interface to check if a given value is matched in
// :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`. It uses `filter` and `path` to retrieve the value
// from the Metadata and then check if it's matched to the specified value.
// 
// For example, for the following Metadata:
// 
// .. code-block:: yaml
// 
//    filter_metadata:
//      envoy.filters.http.rbac:
//        fields:
//          a:
//            struct_value:
//              fields:
//                b:
//                  struct_value:
//                    fields:
//                      c:
//                        string_value: pro
//                t:
//                  list_value:
//                    values:
//                      - string_value: m
//                      - string_value: n
// 
// The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
// from the Metadata which is matched to the specified prefix match.
// 
// .. code-block:: yaml
// 
//    filter: envoy.filters.http.rbac
//    path:
//    - key: a
//    - key: b
//    - key: c
//    value:
//      string_match:
//        prefix: pr
// 
// The following MetadataMatcher is matched as the code will match one of the string values in the
// list at the path [a, t].
// 
// .. code-block:: yaml
// 
//    filter: envoy.filters.http.rbac
//    path:
//    - key: a
//    - key: t
//    value:
//      list_match:
//        one_of:
//          string_match:
//            exact: m
// 
// An example use of MetadataMatcher is specifying additional metadata in envoy.filters.http.rbac to
// enforce access control based on dynamic metadata in a request. See :ref:`Permission
// <envoy_v3_api_msg_config.rbac.v3.Permission>` and :ref:`Principal
// <envoy_v3_api_msg_config.rbac.v3.Principal>`.

/**
 * [#next-major-version: MetadataMatcher should use StructMatcher]
 *
 * @generated from protobuf message envoy.type.matcher.v3.MetadataMatcher
 */
export interface MetadataMatcher {
    /**
     * The filter name to retrieve the Struct from the Metadata.
     *
     * @generated from protobuf field: string filter = 1;
     */
    filter: string;
    /**
     * The path to retrieve the Value from the Struct.
     *
     * @generated from protobuf field: repeated envoy.type.matcher.v3.MetadataMatcher.PathSegment path = 2;
     */
    path: MetadataMatcher_PathSegment[];
    /**
     * The MetadataMatcher is matched if the value retrieved by path is matched to this value.
     *
     * @generated from protobuf field: envoy.type.matcher.v3.ValueMatcher value = 3;
     */
    value?: ValueMatcher;
    /**
     * If true, the match result will be inverted.
     *
     * @generated from protobuf field: bool invert = 4;
     */
    invert: boolean;
}
/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that
 * if the segment key refers to a list, it has to be the last segment in a path.
 *
 * @generated from protobuf message envoy.type.matcher.v3.MetadataMatcher.PathSegment
 */
export interface MetadataMatcher_PathSegment {
    /**
     * @generated from protobuf oneof: segment
     */
    segment: {
        oneofKind: "key";
        /**
         * If specified, use the key to retrieve the value in a Struct.
         *
         * @generated from protobuf field: string key = 1;
         */
        key: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class MetadataMatcher$Type extends MessageType<MetadataMatcher> {
    constructor() {
        super("envoy.type.matcher.v3.MetadataMatcher", [
            { no: 1, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetadataMatcher_PathSegment, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "value", kind: "message", T: () => ValueMatcher, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "invert", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.MetadataMatcher" } });
    }
    create(value?: PartialMessage<MetadataMatcher>): MetadataMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filter = "";
        message.path = [];
        message.invert = false;
        if (value !== undefined)
            reflectionMergePartial<MetadataMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataMatcher): MetadataMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filter */ 1:
                    message.filter = reader.string();
                    break;
                case /* repeated envoy.type.matcher.v3.MetadataMatcher.PathSegment path */ 2:
                    message.path.push(MetadataMatcher_PathSegment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.type.matcher.v3.ValueMatcher value */ 3:
                    message.value = ValueMatcher.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                case /* bool invert */ 4:
                    message.invert = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filter = 1; */
        if (message.filter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filter);
        /* repeated envoy.type.matcher.v3.MetadataMatcher.PathSegment path = 2; */
        for (let i = 0; i < message.path.length; i++)
            MetadataMatcher_PathSegment.internalBinaryWrite(message.path[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.v3.ValueMatcher value = 3; */
        if (message.value)
            ValueMatcher.internalBinaryWrite(message.value, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool invert = 4; */
        if (message.invert !== false)
            writer.tag(4, WireType.Varint).bool(message.invert);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.MetadataMatcher
 */
export const MetadataMatcher = new MetadataMatcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataMatcher_PathSegment$Type extends MessageType<MetadataMatcher_PathSegment> {
    constructor() {
        super("envoy.type.matcher.v3.MetadataMatcher.PathSegment", [
            { no: 1, name: "key", kind: "scalar", oneof: "segment", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.MetadataMatcher.PathSegment" } });
    }
    create(value?: PartialMessage<MetadataMatcher_PathSegment>): MetadataMatcher_PathSegment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.segment = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MetadataMatcher_PathSegment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataMatcher_PathSegment): MetadataMatcher_PathSegment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.segment = {
                        oneofKind: "key",
                        key: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataMatcher_PathSegment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.segment.oneofKind === "key")
            writer.tag(1, WireType.LengthDelimited).string(message.segment.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.MetadataMatcher.PathSegment
 */
export const MetadataMatcher_PathSegment = new MetadataMatcher_PathSegment$Type();
