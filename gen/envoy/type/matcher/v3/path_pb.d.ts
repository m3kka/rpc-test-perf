// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/v3/path.proto (package envoy.type.matcher.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { StringMatcher } from "./string_pb.js";

/**
 * Specifies the way to match a path on HTTP request.
 *
 * @generated from message envoy.type.matcher.v3.PathMatcher
 */
export declare class PathMatcher extends Message<PathMatcher> {
  /**
   * @generated from oneof envoy.type.matcher.v3.PathMatcher.rule
   */
  rule: {
    /**
     * The ``path`` must match the URL path portion of the :path header. The query and fragment
     * string (if present) are removed in the URL path portion.
     * For example, the path ``/data`` will match the ``:path`` header ``/data#fragment?param=value``.
     *
     * @generated from field: envoy.type.matcher.v3.StringMatcher path = 1;
     */
    value: StringMatcher;
    case: "path";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PathMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.PathMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathMatcher;

  static equals(a: PathMatcher | PlainMessage<PathMatcher> | undefined, b: PathMatcher | PlainMessage<PathMatcher> | undefined): boolean;
}

