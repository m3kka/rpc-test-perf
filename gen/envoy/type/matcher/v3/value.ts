// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/matcher/v3/value.proto" (package "envoy.type.matcher.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringMatcher } from "./string";
import { DoubleMatcher } from "./number";
// [#protodoc-title: Value matcher]

/**
 * Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.
 * StructValue is not supported and is always not matched.
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.type.matcher.v3.ValueMatcher
 */
export interface ValueMatcher {
    /**
     * @generated from protobuf oneof: match_pattern
     */
    matchPattern: {
        oneofKind: "nullMatch";
        /**
         * If specified, a match occurs if and only if the target value is a NullValue.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.ValueMatcher.NullMatch null_match = 1;
         */
        nullMatch: ValueMatcher_NullMatch;
    } | {
        oneofKind: "doubleMatch";
        /**
         * If specified, a match occurs if and only if the target value is a double value and is
         * matched to this field.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.DoubleMatcher double_match = 2;
         */
        doubleMatch: DoubleMatcher;
    } | {
        oneofKind: "stringMatch";
        /**
         * If specified, a match occurs if and only if the target value is a string value and is
         * matched to this field.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.StringMatcher string_match = 3;
         */
        stringMatch: StringMatcher;
    } | {
        oneofKind: "boolMatch";
        /**
         * If specified, a match occurs if and only if the target value is a bool value and is equal
         * to this field.
         *
         * @generated from protobuf field: bool bool_match = 4;
         */
        boolMatch: boolean;
    } | {
        oneofKind: "presentMatch";
        /**
         * If specified, value match will be performed based on whether the path is referring to a
         * valid primitive value in the metadata. If the path is referring to a non-primitive value,
         * the result is always not matched.
         *
         * @generated from protobuf field: bool present_match = 5;
         */
        presentMatch: boolean;
    } | {
        oneofKind: "listMatch";
        /**
         * If specified, a match occurs if and only if the target value is a list value and
         * is matched to this field.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.ListMatcher list_match = 6;
         */
        listMatch: ListMatcher;
    } | {
        oneofKind: undefined;
    };
}
/**
 * NullMatch is an empty message to specify a null value.
 *
 * @generated from protobuf message envoy.type.matcher.v3.ValueMatcher.NullMatch
 */
export interface ValueMatcher_NullMatch {
}
/**
 * Specifies the way to match a list value.
 *
 * @generated from protobuf message envoy.type.matcher.v3.ListMatcher
 */
export interface ListMatcher {
    /**
     * @generated from protobuf oneof: match_pattern
     */
    matchPattern: {
        oneofKind: "oneOf";
        /**
         * If specified, at least one of the values in the list must match the value specified.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.ValueMatcher one_of = 1;
         */
        oneOf: ValueMatcher;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ValueMatcher$Type extends MessageType<ValueMatcher> {
    constructor() {
        super("envoy.type.matcher.v3.ValueMatcher", [
            { no: 1, name: "null_match", kind: "message", oneof: "matchPattern", T: () => ValueMatcher_NullMatch },
            { no: 2, name: "double_match", kind: "message", oneof: "matchPattern", T: () => DoubleMatcher },
            { no: 3, name: "string_match", kind: "message", oneof: "matchPattern", T: () => StringMatcher },
            { no: 4, name: "bool_match", kind: "scalar", oneof: "matchPattern", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "present_match", kind: "scalar", oneof: "matchPattern", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "list_match", kind: "message", oneof: "matchPattern", T: () => ListMatcher }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.ValueMatcher" } });
    }
    create(value?: PartialMessage<ValueMatcher>): ValueMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchPattern = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ValueMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValueMatcher): ValueMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.matcher.v3.ValueMatcher.NullMatch null_match */ 1:
                    message.matchPattern = {
                        oneofKind: "nullMatch",
                        nullMatch: ValueMatcher_NullMatch.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).nullMatch)
                    };
                    break;
                case /* envoy.type.matcher.v3.DoubleMatcher double_match */ 2:
                    message.matchPattern = {
                        oneofKind: "doubleMatch",
                        doubleMatch: DoubleMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).doubleMatch)
                    };
                    break;
                case /* envoy.type.matcher.v3.StringMatcher string_match */ 3:
                    message.matchPattern = {
                        oneofKind: "stringMatch",
                        stringMatch: StringMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).stringMatch)
                    };
                    break;
                case /* bool bool_match */ 4:
                    message.matchPattern = {
                        oneofKind: "boolMatch",
                        boolMatch: reader.bool()
                    };
                    break;
                case /* bool present_match */ 5:
                    message.matchPattern = {
                        oneofKind: "presentMatch",
                        presentMatch: reader.bool()
                    };
                    break;
                case /* envoy.type.matcher.v3.ListMatcher list_match */ 6:
                    message.matchPattern = {
                        oneofKind: "listMatch",
                        listMatch: ListMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).listMatch)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValueMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.matcher.v3.ValueMatcher.NullMatch null_match = 1; */
        if (message.matchPattern.oneofKind === "nullMatch")
            ValueMatcher_NullMatch.internalBinaryWrite(message.matchPattern.nullMatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.v3.DoubleMatcher double_match = 2; */
        if (message.matchPattern.oneofKind === "doubleMatch")
            DoubleMatcher.internalBinaryWrite(message.matchPattern.doubleMatch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.v3.StringMatcher string_match = 3; */
        if (message.matchPattern.oneofKind === "stringMatch")
            StringMatcher.internalBinaryWrite(message.matchPattern.stringMatch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool bool_match = 4; */
        if (message.matchPattern.oneofKind === "boolMatch")
            writer.tag(4, WireType.Varint).bool(message.matchPattern.boolMatch);
        /* bool present_match = 5; */
        if (message.matchPattern.oneofKind === "presentMatch")
            writer.tag(5, WireType.Varint).bool(message.matchPattern.presentMatch);
        /* envoy.type.matcher.v3.ListMatcher list_match = 6; */
        if (message.matchPattern.oneofKind === "listMatch")
            ListMatcher.internalBinaryWrite(message.matchPattern.listMatch, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.ValueMatcher
 */
export const ValueMatcher = new ValueMatcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValueMatcher_NullMatch$Type extends MessageType<ValueMatcher_NullMatch> {
    constructor() {
        super("envoy.type.matcher.v3.ValueMatcher.NullMatch", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.ValueMatcher.NullMatch" } });
    }
    create(value?: PartialMessage<ValueMatcher_NullMatch>): ValueMatcher_NullMatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ValueMatcher_NullMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValueMatcher_NullMatch): ValueMatcher_NullMatch {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ValueMatcher_NullMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.ValueMatcher.NullMatch
 */
export const ValueMatcher_NullMatch = new ValueMatcher_NullMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMatcher$Type extends MessageType<ListMatcher> {
    constructor() {
        super("envoy.type.matcher.v3.ListMatcher", [
            { no: 1, name: "one_of", kind: "message", oneof: "matchPattern", T: () => ValueMatcher }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.ListMatcher" } });
    }
    create(value?: PartialMessage<ListMatcher>): ListMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchPattern = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ListMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMatcher): ListMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.matcher.v3.ValueMatcher one_of */ 1:
                    message.matchPattern = {
                        oneofKind: "oneOf",
                        oneOf: ValueMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).oneOf)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.matcher.v3.ValueMatcher one_of = 1; */
        if (message.matchPattern.oneofKind === "oneOf")
            ValueMatcher.internalBinaryWrite(message.matchPattern.oneOf, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.ListMatcher
 */
export const ListMatcher = new ListMatcher$Type();
