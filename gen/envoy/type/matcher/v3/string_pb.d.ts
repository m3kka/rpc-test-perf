// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/v3/string.proto (package envoy.type.matcher.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RegexMatcher } from "./regex_pb.js";

/**
 * Specifies the way to match a string.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.type.matcher.v3.StringMatcher
 */
export declare class StringMatcher extends Message<StringMatcher> {
  /**
   * @generated from oneof envoy.type.matcher.v3.StringMatcher.match_pattern
   */
  matchPattern: {
    /**
     * The input string must match exactly the string specified here.
     *
     * Examples:
     *
     * * ``abc`` only matches the value ``abc``.
     *
     * @generated from field: string exact = 1;
     */
    value: string;
    case: "exact";
  } | {
    /**
     * The input string must have the prefix specified here.
     * Note: empty prefix is not allowed, please use regex instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``abc.xyz``
     *
     * @generated from field: string prefix = 2;
     */
    value: string;
    case: "prefix";
  } | {
    /**
     * The input string must have the suffix specified here.
     * Note: empty prefix is not allowed, please use regex instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``xyz.abc``
     *
     * @generated from field: string suffix = 3;
     */
    value: string;
    case: "suffix";
  } | {
    /**
     * The input string must match the regular expression specified here.
     *
     * @generated from field: envoy.type.matcher.v3.RegexMatcher safe_regex = 5;
     */
    value: RegexMatcher;
    case: "safeRegex";
  } | {
    /**
     * The input string must have the substring specified here.
     * Note: empty contains match is not allowed, please use regex instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``xyz.abc.def``
     *
     * @generated from field: string contains = 7;
     */
    value: string;
    case: "contains";
  } | { case: undefined; value?: undefined };

  /**
   * If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This
   * has no effect for the safe_regex match.
   * For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if set to true.
   *
   * @generated from field: bool ignore_case = 6;
   */
  ignoreCase: boolean;

  constructor(data?: PartialMessage<StringMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.StringMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringMatcher;

  static equals(a: StringMatcher | PlainMessage<StringMatcher> | undefined, b: StringMatcher | PlainMessage<StringMatcher> | undefined): boolean;
}

/**
 * Specifies a list of ways to match a string.
 *
 * @generated from message envoy.type.matcher.v3.ListStringMatcher
 */
export declare class ListStringMatcher extends Message<ListStringMatcher> {
  /**
   * @generated from field: repeated envoy.type.matcher.v3.StringMatcher patterns = 1;
   */
  patterns: StringMatcher[];

  constructor(data?: PartialMessage<ListStringMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.ListStringMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStringMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStringMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStringMatcher;

  static equals(a: ListStringMatcher | PlainMessage<ListStringMatcher> | undefined, b: ListStringMatcher | PlainMessage<ListStringMatcher> | undefined): boolean;
}

