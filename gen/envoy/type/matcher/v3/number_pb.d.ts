// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/v3/number.proto (package envoy.type.matcher.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DoubleRange } from "../../v3/range_pb.js";

/**
 * Specifies the way to match a double value.
 *
 * @generated from message envoy.type.matcher.v3.DoubleMatcher
 */
export declare class DoubleMatcher extends Message<DoubleMatcher> {
  /**
   * @generated from oneof envoy.type.matcher.v3.DoubleMatcher.match_pattern
   */
  matchPattern: {
    /**
     * If specified, the input double value must be in the range specified here.
     * Note: The range is using half-open interval semantics [start, end).
     *
     * @generated from field: envoy.type.v3.DoubleRange range = 1;
     */
    value: DoubleRange;
    case: "range";
  } | {
    /**
     * If specified, the input double value must be equal to the value specified here.
     *
     * @generated from field: double exact = 2;
     */
    value: number;
    case: "exact";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DoubleMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.DoubleMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoubleMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoubleMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoubleMatcher;

  static equals(a: DoubleMatcher | PlainMessage<DoubleMatcher> | undefined, b: DoubleMatcher | PlainMessage<DoubleMatcher> | undefined): boolean;
}

