// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/v3/metadata.proto (package envoy.type.matcher.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ValueMatcher } from "./value_pb.js";

/**
 * [#next-major-version: MetadataMatcher should use StructMatcher]
 *
 * @generated from message envoy.type.matcher.v3.MetadataMatcher
 */
export declare class MetadataMatcher extends Message<MetadataMatcher> {
  /**
   * The filter name to retrieve the Struct from the Metadata.
   *
   * @generated from field: string filter = 1;
   */
  filter: string;

  /**
   * The path to retrieve the Value from the Struct.
   *
   * @generated from field: repeated envoy.type.matcher.v3.MetadataMatcher.PathSegment path = 2;
   */
  path: MetadataMatcher_PathSegment[];

  /**
   * The MetadataMatcher is matched if the value retrieved by path is matched to this value.
   *
   * @generated from field: envoy.type.matcher.v3.ValueMatcher value = 3;
   */
  value?: ValueMatcher;

  /**
   * If true, the match result will be inverted.
   *
   * @generated from field: bool invert = 4;
   */
  invert: boolean;

  constructor(data?: PartialMessage<MetadataMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.MetadataMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataMatcher;

  static equals(a: MetadataMatcher | PlainMessage<MetadataMatcher> | undefined, b: MetadataMatcher | PlainMessage<MetadataMatcher> | undefined): boolean;
}

/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that
 * if the segment key refers to a list, it has to be the last segment in a path.
 *
 * @generated from message envoy.type.matcher.v3.MetadataMatcher.PathSegment
 */
export declare class MetadataMatcher_PathSegment extends Message<MetadataMatcher_PathSegment> {
  /**
   * @generated from oneof envoy.type.matcher.v3.MetadataMatcher.PathSegment.segment
   */
  segment: {
    /**
     * If specified, use the key to retrieve the value in a Struct.
     *
     * @generated from field: string key = 1;
     */
    value: string;
    case: "key";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<MetadataMatcher_PathSegment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.matcher.v3.MetadataMatcher.PathSegment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataMatcher_PathSegment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataMatcher_PathSegment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataMatcher_PathSegment;

  static equals(a: MetadataMatcher_PathSegment | PlainMessage<MetadataMatcher_PathSegment> | undefined, b: MetadataMatcher_PathSegment | PlainMessage<MetadataMatcher_PathSegment> | undefined): boolean;
}

