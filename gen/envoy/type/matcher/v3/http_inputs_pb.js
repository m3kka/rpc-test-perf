// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/v3/http_inputs.proto (package envoy.type.matcher.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Match input indicates that matching should be done on a specific request header.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.request_headers]
 *
 * @generated from message envoy.type.matcher.v3.HttpRequestHeaderMatchInput
 */
export const HttpRequestHeaderMatchInput = proto3.makeMessageType(
  "envoy.type.matcher.v3.HttpRequestHeaderMatchInput",
  () => [
    { no: 1, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Match input indicates that matching should be done on a specific request trailer.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.request_trailers]
 *
 * @generated from message envoy.type.matcher.v3.HttpRequestTrailerMatchInput
 */
export const HttpRequestTrailerMatchInput = proto3.makeMessageType(
  "envoy.type.matcher.v3.HttpRequestTrailerMatchInput",
  () => [
    { no: 1, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Match input indicating that matching should be done on a specific response header.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the response contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.response_headers]
 *
 * @generated from message envoy.type.matcher.v3.HttpResponseHeaderMatchInput
 */
export const HttpResponseHeaderMatchInput = proto3.makeMessageType(
  "envoy.type.matcher.v3.HttpResponseHeaderMatchInput",
  () => [
    { no: 1, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Match input indicates that matching should be done on a specific response trailer.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.response_trailers]
 *
 * @generated from message envoy.type.matcher.v3.HttpResponseTrailerMatchInput
 */
export const HttpResponseTrailerMatchInput = proto3.makeMessageType(
  "envoy.type.matcher.v3.HttpResponseTrailerMatchInput",
  () => [
    { no: 1, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Match input indicates that matching should be done on a specific query parameter.
 * The resulting input string will be the first query parameter for the value
 * 'query_param'.
 * [#extension: envoy.matching.inputs.query_params]
 *
 * @generated from message envoy.type.matcher.v3.HttpRequestQueryParamMatchInput
 */
export const HttpRequestQueryParamMatchInput = proto3.makeMessageType(
  "envoy.type.matcher.v3.HttpRequestQueryParamMatchInput",
  () => [
    { no: 1, name: "query_param", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

