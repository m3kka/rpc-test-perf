// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/matcher/v3/string.proto" (package "envoy.type.matcher.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RegexMatcher } from "./regex";
// [#protodoc-title: String matcher]

/**
 * Specifies the way to match a string.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.type.matcher.v3.StringMatcher
 */
export interface StringMatcher {
    /**
     * @generated from protobuf oneof: match_pattern
     */
    matchPattern: {
        oneofKind: "exact";
        /**
         * The input string must match exactly the string specified here.
         *
         * Examples:
         *
         * * ``abc`` only matches the value ``abc``.
         *
         * @generated from protobuf field: string exact = 1;
         */
        exact: string;
    } | {
        oneofKind: "prefix";
        /**
         * The input string must have the prefix specified here.
         * Note: empty prefix is not allowed, please use regex instead.
         *
         * Examples:
         *
         * * ``abc`` matches the value ``abc.xyz``
         *
         * @generated from protobuf field: string prefix = 2;
         */
        prefix: string;
    } | {
        oneofKind: "suffix";
        /**
         * The input string must have the suffix specified here.
         * Note: empty prefix is not allowed, please use regex instead.
         *
         * Examples:
         *
         * * ``abc`` matches the value ``xyz.abc``
         *
         * @generated from protobuf field: string suffix = 3;
         */
        suffix: string;
    } | {
        oneofKind: "safeRegex";
        /**
         * The input string must match the regular expression specified here.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.RegexMatcher safe_regex = 5;
         */
        safeRegex: RegexMatcher;
    } | {
        oneofKind: "contains";
        /**
         * The input string must have the substring specified here.
         * Note: empty contains match is not allowed, please use regex instead.
         *
         * Examples:
         *
         * * ``abc`` matches the value ``xyz.abc.def``
         *
         * @generated from protobuf field: string contains = 7;
         */
        contains: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This
     * has no effect for the safe_regex match.
     * For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if set to true.
     *
     * @generated from protobuf field: bool ignore_case = 6;
     */
    ignoreCase: boolean;
}
/**
 * Specifies a list of ways to match a string.
 *
 * @generated from protobuf message envoy.type.matcher.v3.ListStringMatcher
 */
export interface ListStringMatcher {
    /**
     * @generated from protobuf field: repeated envoy.type.matcher.v3.StringMatcher patterns = 1;
     */
    patterns: StringMatcher[];
}
// @generated message type with reflection information, may provide speed optimized methods
class StringMatcher$Type extends MessageType<StringMatcher> {
    constructor() {
        super("envoy.type.matcher.v3.StringMatcher", [
            { no: 1, name: "exact", kind: "scalar", oneof: "matchPattern", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "prefix", kind: "scalar", oneof: "matchPattern", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "suffix", kind: "scalar", oneof: "matchPattern", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 5, name: "safe_regex", kind: "message", oneof: "matchPattern", T: () => RegexMatcher, options: { "validate.rules": { message: { required: true } } } },
            { no: 7, name: "contains", kind: "scalar", oneof: "matchPattern", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 6, name: "ignore_case", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.StringMatcher" } });
    }
    create(value?: PartialMessage<StringMatcher>): StringMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchPattern = { oneofKind: undefined };
        message.ignoreCase = false;
        if (value !== undefined)
            reflectionMergePartial<StringMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringMatcher): StringMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string exact */ 1:
                    message.matchPattern = {
                        oneofKind: "exact",
                        exact: reader.string()
                    };
                    break;
                case /* string prefix */ 2:
                    message.matchPattern = {
                        oneofKind: "prefix",
                        prefix: reader.string()
                    };
                    break;
                case /* string suffix */ 3:
                    message.matchPattern = {
                        oneofKind: "suffix",
                        suffix: reader.string()
                    };
                    break;
                case /* envoy.type.matcher.v3.RegexMatcher safe_regex */ 5:
                    message.matchPattern = {
                        oneofKind: "safeRegex",
                        safeRegex: RegexMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).safeRegex)
                    };
                    break;
                case /* string contains */ 7:
                    message.matchPattern = {
                        oneofKind: "contains",
                        contains: reader.string()
                    };
                    break;
                case /* bool ignore_case */ 6:
                    message.ignoreCase = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string exact = 1; */
        if (message.matchPattern.oneofKind === "exact")
            writer.tag(1, WireType.LengthDelimited).string(message.matchPattern.exact);
        /* string prefix = 2; */
        if (message.matchPattern.oneofKind === "prefix")
            writer.tag(2, WireType.LengthDelimited).string(message.matchPattern.prefix);
        /* string suffix = 3; */
        if (message.matchPattern.oneofKind === "suffix")
            writer.tag(3, WireType.LengthDelimited).string(message.matchPattern.suffix);
        /* envoy.type.matcher.v3.RegexMatcher safe_regex = 5; */
        if (message.matchPattern.oneofKind === "safeRegex")
            RegexMatcher.internalBinaryWrite(message.matchPattern.safeRegex, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string contains = 7; */
        if (message.matchPattern.oneofKind === "contains")
            writer.tag(7, WireType.LengthDelimited).string(message.matchPattern.contains);
        /* bool ignore_case = 6; */
        if (message.ignoreCase !== false)
            writer.tag(6, WireType.Varint).bool(message.ignoreCase);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.StringMatcher
 */
export const StringMatcher = new StringMatcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStringMatcher$Type extends MessageType<ListStringMatcher> {
    constructor() {
        super("envoy.type.matcher.v3.ListStringMatcher", [
            { no: 1, name: "patterns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.matcher.ListStringMatcher" } });
    }
    create(value?: PartialMessage<ListStringMatcher>): ListStringMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.patterns = [];
        if (value !== undefined)
            reflectionMergePartial<ListStringMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStringMatcher): ListStringMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.type.matcher.v3.StringMatcher patterns */ 1:
                    message.patterns.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStringMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.type.matcher.v3.StringMatcher patterns = 1; */
        for (let i = 0; i < message.patterns.length; i++)
            StringMatcher.internalBinaryWrite(message.patterns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.v3.ListStringMatcher
 */
export const ListStringMatcher = new ListStringMatcher$Type();
