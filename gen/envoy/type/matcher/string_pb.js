// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/string.proto (package envoy.type.matcher, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { RegexMatcher } from "./regex_pb.js";

/**
 * Specifies the way to match a string.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.type.matcher.StringMatcher
 */
export const StringMatcher = proto3.makeMessageType(
  "envoy.type.matcher.StringMatcher",
  () => [
    { no: 1, name: "exact", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
    { no: 2, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
    { no: 3, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
    { no: 4, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
    { no: 5, name: "safe_regex", kind: "message", T: RegexMatcher, oneof: "match_pattern" },
    { no: 6, name: "ignore_case", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Specifies a list of ways to match a string.
 *
 * @generated from message envoy.type.matcher.ListStringMatcher
 */
export const ListStringMatcher = proto3.makeMessageType(
  "envoy.type.matcher.ListStringMatcher",
  () => [
    { no: 1, name: "patterns", kind: "message", T: StringMatcher, repeated: true },
  ],
);

