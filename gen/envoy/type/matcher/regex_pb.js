// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/matcher/regex.proto (package envoy.type.matcher, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, UInt32Value } from "@bufbuild/protobuf";

/**
 * A regex matcher designed for safety when used with untrusted input.
 *
 * @generated from message envoy.type.matcher.RegexMatcher
 */
export const RegexMatcher = proto3.makeMessageType(
  "envoy.type.matcher.RegexMatcher",
  () => [
    { no: 1, name: "google_re2", kind: "message", T: RegexMatcher_GoogleRE2, oneof: "engine_type" },
    { no: 2, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex string must adhere to
 * the documented `syntax <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed
 * to complete execution in linear time as well as limit the amount of memory used.
 *
 * Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level``
 * and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or
 * complexity that a compiled regex can have before an exception is thrown or a warning is
 * logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and
 * ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning).
 *
 * Envoy emits two stats for tracking the program size of regexes: the histogram `re2.program_size`,
 * which records the program size, and the counter `re2.exceeded_warn_level`, which is incremented
 * each time the program size exceeds the warn level threshold.
 *
 * @generated from message envoy.type.matcher.RegexMatcher.GoogleRE2
 */
export const RegexMatcher_GoogleRE2 = proto3.makeMessageType(
  "envoy.type.matcher.RegexMatcher.GoogleRE2",
  () => [
    { no: 1, name: "max_program_size", kind: "message", T: UInt32Value },
  ],
  {localName: "RegexMatcher_GoogleRE2"},
);

/**
 * Describes how to match a string and then produce a new string using a regular
 * expression and a substitution string.
 *
 * @generated from message envoy.type.matcher.RegexMatchAndSubstitute
 */
export const RegexMatchAndSubstitute = proto3.makeMessageType(
  "envoy.type.matcher.RegexMatchAndSubstitute",
  () => [
    { no: 1, name: "pattern", kind: "message", T: RegexMatcher },
    { no: 2, name: "substitution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

