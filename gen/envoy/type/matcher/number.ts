// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/matcher/number.proto" (package "envoy.type.matcher", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DoubleRange } from "../range";
// [#protodoc-title: Number matcher]

/**
 * Specifies the way to match a double value.
 *
 * @generated from protobuf message envoy.type.matcher.DoubleMatcher
 */
export interface DoubleMatcher {
    /**
     * @generated from protobuf oneof: match_pattern
     */
    matchPattern: {
        oneofKind: "range";
        /**
         * If specified, the input double value must be in the range specified here.
         * Note: The range is using half-open interval semantics [start, end).
         *
         * @generated from protobuf field: envoy.type.DoubleRange range = 1;
         */
        range: DoubleRange;
    } | {
        oneofKind: "exact";
        /**
         * If specified, the input double value must be equal to the value specified here.
         *
         * @generated from protobuf field: double exact = 2;
         */
        exact: number;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class DoubleMatcher$Type extends MessageType<DoubleMatcher> {
    constructor() {
        super("envoy.type.matcher.DoubleMatcher", [
            { no: 1, name: "range", kind: "message", oneof: "matchPattern", T: () => DoubleRange },
            { no: 2, name: "exact", kind: "scalar", oneof: "matchPattern", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleMatcher>): DoubleMatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchPattern = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DoubleMatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleMatcher): DoubleMatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.DoubleRange range */ 1:
                    message.matchPattern = {
                        oneofKind: "range",
                        range: DoubleRange.internalBinaryRead(reader, reader.uint32(), options, (message.matchPattern as any).range)
                    };
                    break;
                case /* double exact */ 2:
                    message.matchPattern = {
                        oneofKind: "exact",
                        exact: reader.double()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleMatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.DoubleRange range = 1; */
        if (message.matchPattern.oneofKind === "range")
            DoubleRange.internalBinaryWrite(message.matchPattern.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double exact = 2; */
        if (message.matchPattern.oneofKind === "exact")
            writer.tag(2, WireType.Bit64).double(message.matchPattern.exact);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.matcher.DoubleMatcher
 */
export const DoubleMatcher = new DoubleMatcher$Type();
