// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/percent.proto (package envoy.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Identifies a percentage, in the range [0.0, 100.0].
 *
 * @generated from message envoy.type.Percent
 */
export const Percent = proto3.makeMessageType(
  "envoy.type.Percent",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * A fractional percentage is used in cases in which for performance reasons performing floating
 * point to integer conversions during randomness calculations is undesirable. The message includes
 * both a numerator and denominator that together determine the final fractional value.
 *
 * * **Example**: 1/100 = 1%.
 * * **Example**: 3/10000 = 0.03%.
 *
 * @generated from message envoy.type.FractionalPercent
 */
export const FractionalPercent = proto3.makeMessageType(
  "envoy.type.FractionalPercent",
  () => [
    { no: 1, name: "numerator", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "denominator", kind: "enum", T: proto3.getEnumType(FractionalPercent_DenominatorType) },
  ],
);

/**
 * Fraction percentages support several fixed denominator values.
 *
 * @generated from enum envoy.type.FractionalPercent.DenominatorType
 */
export const FractionalPercent_DenominatorType = proto3.makeEnum(
  "envoy.type.FractionalPercent.DenominatorType",
  [
    {no: 0, name: "HUNDRED"},
    {no: 1, name: "TEN_THOUSAND"},
    {no: 2, name: "MILLION"},
  ],
);

