// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/metadata/v3/metadata.proto" (package "envoy.type.metadata.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Metadata]

/**
 * MetadataKey provides a general interface using ``key`` and ``path`` to retrieve value from
 * :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`.
 *
 * For example, for the following Metadata:
 *
 * .. code-block:: yaml
 *
 *    filter_metadata:
 *      envoy.xxx:
 *        prop:
 *          foo: bar
 *          xyz:
 *            hello: envoy
 *
 * The following MetadataKey will retrieve a string value "bar" from the Metadata.
 *
 * .. code-block:: yaml
 *
 *    key: envoy.xxx
 *    path:
 *    - key: prop
 *    - key: foo
 *
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKey
 */
export interface MetadataKey {
    /**
     * The key name of Metadata to retrieve the Struct from the metadata.
     * Typically, it represents a builtin subsystem or custom extension.
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
     * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
     * which depends on the particular scenario.
     *
     * Note: Due to that only the key type segment is supported, the path can not specify a list
     * unless the list is the last segment.
     *
     * @generated from protobuf field: repeated envoy.type.metadata.v3.MetadataKey.PathSegment path = 2;
     */
    path: MetadataKey_PathSegment[];
}
/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Currently it is only supported to specify the key, i.e. field name, as one segment of a path.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKey.PathSegment
 */
export interface MetadataKey_PathSegment {
    /**
     * @generated from protobuf oneof: segment
     */
    segment: {
        oneofKind: "key";
        /**
         * If specified, use the key to retrieve the value in a Struct.
         *
         * @generated from protobuf field: string key = 1;
         */
        key: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Describes what kind of metadata.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKind
 */
export interface MetadataKind {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "request";
        /**
         * Request kind of metadata.
         *
         * @generated from protobuf field: envoy.type.metadata.v3.MetadataKind.Request request = 1;
         */
        request: MetadataKind_Request;
    } | {
        oneofKind: "route";
        /**
         * Route kind of metadata.
         *
         * @generated from protobuf field: envoy.type.metadata.v3.MetadataKind.Route route = 2;
         */
        route: MetadataKind_Route;
    } | {
        oneofKind: "cluster";
        /**
         * Cluster kind of metadata.
         *
         * @generated from protobuf field: envoy.type.metadata.v3.MetadataKind.Cluster cluster = 3;
         */
        cluster: MetadataKind_Cluster;
    } | {
        oneofKind: "host";
        /**
         * Host kind of metadata.
         *
         * @generated from protobuf field: envoy.type.metadata.v3.MetadataKind.Host host = 4;
         */
        host: MetadataKind_Host;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Represents dynamic metadata associated with the request.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKind.Request
 */
export interface MetadataKind_Request {
}
/**
 * Represents metadata from :ref:`the route<envoy_v3_api_field_config.route.v3.Route.metadata>`.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKind.Route
 */
export interface MetadataKind_Route {
}
/**
 * Represents metadata from :ref:`the upstream cluster<envoy_v3_api_field_config.cluster.v3.Cluster.metadata>`.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKind.Cluster
 */
export interface MetadataKind_Cluster {
}
/**
 * Represents metadata from :ref:`the upstream
 * host<envoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata>`.
 *
 * @generated from protobuf message envoy.type.metadata.v3.MetadataKind.Host
 */
export interface MetadataKind_Host {
}
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKey$Type extends MessageType<MetadataKey> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKey", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetadataKey_PathSegment, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKey" } });
    }
    create(value?: PartialMessage<MetadataKey>): MetadataKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.path = [];
        if (value !== undefined)
            reflectionMergePartial<MetadataKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKey): MetadataKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* repeated envoy.type.metadata.v3.MetadataKey.PathSegment path */ 2:
                    message.path.push(MetadataKey_PathSegment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* repeated envoy.type.metadata.v3.MetadataKey.PathSegment path = 2; */
        for (let i = 0; i < message.path.length; i++)
            MetadataKey_PathSegment.internalBinaryWrite(message.path[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKey
 */
export const MetadataKey = new MetadataKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKey_PathSegment$Type extends MessageType<MetadataKey_PathSegment> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKey.PathSegment", [
            { no: 1, name: "key", kind: "scalar", oneof: "segment", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKey.PathSegment" } });
    }
    create(value?: PartialMessage<MetadataKey_PathSegment>): MetadataKey_PathSegment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.segment = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MetadataKey_PathSegment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKey_PathSegment): MetadataKey_PathSegment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.segment = {
                        oneofKind: "key",
                        key: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataKey_PathSegment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.segment.oneofKind === "key")
            writer.tag(1, WireType.LengthDelimited).string(message.segment.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKey.PathSegment
 */
export const MetadataKey_PathSegment = new MetadataKey_PathSegment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKind$Type extends MessageType<MetadataKind> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKind", [
            { no: 1, name: "request", kind: "message", oneof: "kind", T: () => MetadataKind_Request },
            { no: 2, name: "route", kind: "message", oneof: "kind", T: () => MetadataKind_Route },
            { no: 3, name: "cluster", kind: "message", oneof: "kind", T: () => MetadataKind_Cluster },
            { no: 4, name: "host", kind: "message", oneof: "kind", T: () => MetadataKind_Host }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKind" } });
    }
    create(value?: PartialMessage<MetadataKind>): MetadataKind {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MetadataKind>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKind): MetadataKind {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.metadata.v3.MetadataKind.Request request */ 1:
                    message.kind = {
                        oneofKind: "request",
                        request: MetadataKind_Request.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).request)
                    };
                    break;
                case /* envoy.type.metadata.v3.MetadataKind.Route route */ 2:
                    message.kind = {
                        oneofKind: "route",
                        route: MetadataKind_Route.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).route)
                    };
                    break;
                case /* envoy.type.metadata.v3.MetadataKind.Cluster cluster */ 3:
                    message.kind = {
                        oneofKind: "cluster",
                        cluster: MetadataKind_Cluster.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).cluster)
                    };
                    break;
                case /* envoy.type.metadata.v3.MetadataKind.Host host */ 4:
                    message.kind = {
                        oneofKind: "host",
                        host: MetadataKind_Host.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).host)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataKind, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.metadata.v3.MetadataKind.Request request = 1; */
        if (message.kind.oneofKind === "request")
            MetadataKind_Request.internalBinaryWrite(message.kind.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.metadata.v3.MetadataKind.Route route = 2; */
        if (message.kind.oneofKind === "route")
            MetadataKind_Route.internalBinaryWrite(message.kind.route, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.metadata.v3.MetadataKind.Cluster cluster = 3; */
        if (message.kind.oneofKind === "cluster")
            MetadataKind_Cluster.internalBinaryWrite(message.kind.cluster, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.metadata.v3.MetadataKind.Host host = 4; */
        if (message.kind.oneofKind === "host")
            MetadataKind_Host.internalBinaryWrite(message.kind.host, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKind
 */
export const MetadataKind = new MetadataKind$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKind_Request$Type extends MessageType<MetadataKind_Request> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKind.Request", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKind.Request" } });
    }
    create(value?: PartialMessage<MetadataKind_Request>): MetadataKind_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetadataKind_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKind_Request): MetadataKind_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MetadataKind_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKind.Request
 */
export const MetadataKind_Request = new MetadataKind_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKind_Route$Type extends MessageType<MetadataKind_Route> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKind.Route", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKind.Route" } });
    }
    create(value?: PartialMessage<MetadataKind_Route>): MetadataKind_Route {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetadataKind_Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKind_Route): MetadataKind_Route {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MetadataKind_Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKind.Route
 */
export const MetadataKind_Route = new MetadataKind_Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKind_Cluster$Type extends MessageType<MetadataKind_Cluster> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKind.Cluster", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKind.Cluster" } });
    }
    create(value?: PartialMessage<MetadataKind_Cluster>): MetadataKind_Cluster {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetadataKind_Cluster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKind_Cluster): MetadataKind_Cluster {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MetadataKind_Cluster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKind.Cluster
 */
export const MetadataKind_Cluster = new MetadataKind_Cluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataKind_Host$Type extends MessageType<MetadataKind_Host> {
    constructor() {
        super("envoy.type.metadata.v3.MetadataKind.Host", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.metadata.v2.MetadataKind.Host" } });
    }
    create(value?: PartialMessage<MetadataKind_Host>): MetadataKind_Host {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetadataKind_Host>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataKind_Host): MetadataKind_Host {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MetadataKind_Host, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.metadata.v3.MetadataKind.Host
 */
export const MetadataKind_Host = new MetadataKind_Host$Type();
