// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/v3/semantic_version.proto" (package "envoy.type.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Semantic version]

/**
 * Envoy uses SemVer (https://semver.org/). Major/minor versions indicate
 * expected behaviors and APIs, the patch version field is used only
 * for security fixes and can be generally ignored.
 *
 * @generated from protobuf message envoy.type.v3.SemanticVersion
 */
export interface SemanticVersion {
    /**
     * @generated from protobuf field: uint32 major_number = 1;
     */
    majorNumber: number;
    /**
     * @generated from protobuf field: uint32 minor_number = 2;
     */
    minorNumber: number;
    /**
     * @generated from protobuf field: uint32 patch = 3;
     */
    patch: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SemanticVersion$Type extends MessageType<SemanticVersion> {
    constructor() {
        super("envoy.type.v3.SemanticVersion", [
            { no: 1, name: "major_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "minor_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "patch", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.SemanticVersion" } });
    }
    create(value?: PartialMessage<SemanticVersion>): SemanticVersion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.majorNumber = 0;
        message.minorNumber = 0;
        message.patch = 0;
        if (value !== undefined)
            reflectionMergePartial<SemanticVersion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SemanticVersion): SemanticVersion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 major_number */ 1:
                    message.majorNumber = reader.uint32();
                    break;
                case /* uint32 minor_number */ 2:
                    message.minorNumber = reader.uint32();
                    break;
                case /* uint32 patch */ 3:
                    message.patch = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SemanticVersion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 major_number = 1; */
        if (message.majorNumber !== 0)
            writer.tag(1, WireType.Varint).uint32(message.majorNumber);
        /* uint32 minor_number = 2; */
        if (message.minorNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.minorNumber);
        /* uint32 patch = 3; */
        if (message.patch !== 0)
            writer.tag(3, WireType.Varint).uint32(message.patch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.SemanticVersion
 */
export const SemanticVersion = new SemanticVersion$Type();
