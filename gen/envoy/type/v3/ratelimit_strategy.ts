// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/v3/ratelimit_strategy.proto" (package "envoy.type.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RateLimitUnit } from "./ratelimit_unit";
import { TokenBucket } from "./token_bucket";
// [#protodoc-title: Rate Limit Strategies]

/**
 * @generated from protobuf message envoy.type.v3.RateLimitStrategy
 */
export interface RateLimitStrategy {
    /**
     * @generated from protobuf oneof: strategy
     */
    strategy: {
        oneofKind: "blanketRule";
        /**
         * Allow or Deny the requests.
         * If unset, allow all.
         *
         * @generated from protobuf field: envoy.type.v3.RateLimitStrategy.BlanketRule blanket_rule = 1;
         */
        blanketRule: RateLimitStrategy_BlanketRule;
    } | {
        oneofKind: "requestsPerTimeUnit";
        /**
         * Best-effort limit of the number of requests per time unit, f.e. requests per second.
         * Does not prescribe any specific rate limiting algorithm, see :ref:`RequestsPerTimeUnit
         * <envoy_v3_api_msg_type.v3.RateLimitStrategy.RequestsPerTimeUnit>` for details.
         *
         * @generated from protobuf field: envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit requests_per_time_unit = 2;
         */
        requestsPerTimeUnit: RateLimitStrategy_RequestsPerTimeUnit;
    } | {
        oneofKind: "tokenBucket";
        /**
         * Limit the requests by consuming tokens from the Token Bucket.
         * Allow the same number of requests as the number of tokens available in
         * the token bucket.
         *
         * @generated from protobuf field: envoy.type.v3.TokenBucket token_bucket = 3;
         */
        tokenBucket: TokenBucket;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Best-effort limit of the number of requests per time unit.
 *
 * Allows to specify the desired requests per second (RPS, QPS), requests per minute (QPM, RPM),
 * etc., without specifying a rate limiting algorithm implementation.
 *
 * ``RequestsPerTimeUnit`` strategy does not demand any specific rate limiting algorithm to be
 * used (in contrast to the :ref:`TokenBucket <envoy_v3_api_msg_type.v3.TokenBucket>`,
 * for example). It implies that the implementation details of rate limiting algorithm are
 * irrelevant as long as the configured number of "requests per time unit" is achieved.
 *
 * Note that the ``TokenBucket`` is still a valid implementation of the ``RequestsPerTimeUnit``
 * strategy, and may be chosen to enforce the rate limit. However, there's no guarantee it will be
 * the ``TokenBucket`` in particular, and not the Leaky Bucket, the Sliding Window, or any other
 * rate limiting algorithm that fulfills the requirements.
 *
 * @generated from protobuf message envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit
 */
export interface RateLimitStrategy_RequestsPerTimeUnit {
    /**
     * The desired number of requests per :ref:`time_unit
     * <envoy_v3_api_field_type.v3.RateLimitStrategy.RequestsPerTimeUnit.time_unit>` to allow.
     * If set to ``0``, deny all (equivalent to ``BlanketRule.DENY_ALL``).
     *
     * .. note::
     *   Note that the algorithm implementation determines the course of action for the requests
     *   over the limit. As long as the ``requests_per_time_unit`` converges on the desired value,
     *   it's allowed to treat this field as a soft-limit: allow bursts, redistribute the allowance
     *   over time, etc.
     *
     *
     * @generated from protobuf field: uint64 requests_per_time_unit = 1;
     */
    requestsPerTimeUnit: bigint;
    /**
     * The unit of time. Ignored when :ref:`requests_per_time_unit
     * <envoy_v3_api_field_type.v3.RateLimitStrategy.RequestsPerTimeUnit.requests_per_time_unit>`
     * is ``0`` (deny all).
     *
     * @generated from protobuf field: envoy.type.v3.RateLimitUnit time_unit = 2;
     */
    timeUnit: RateLimitUnit;
}
/**
 * Choose between allow all and deny all.
 *
 * @generated from protobuf enum envoy.type.v3.RateLimitStrategy.BlanketRule
 */
export enum RateLimitStrategy_BlanketRule {
    /**
     * @generated from protobuf enum value: ALLOW_ALL = 0;
     */
    ALLOW_ALL = 0,
    /**
     * @generated from protobuf enum value: DENY_ALL = 1;
     */
    DENY_ALL = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitStrategy$Type extends MessageType<RateLimitStrategy> {
    constructor() {
        super("envoy.type.v3.RateLimitStrategy", [
            { no: 1, name: "blanket_rule", kind: "enum", oneof: "strategy", T: () => ["envoy.type.v3.RateLimitStrategy.BlanketRule", RateLimitStrategy_BlanketRule], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "requests_per_time_unit", kind: "message", oneof: "strategy", T: () => RateLimitStrategy_RequestsPerTimeUnit },
            { no: 3, name: "token_bucket", kind: "message", oneof: "strategy", T: () => TokenBucket }
        ]);
    }
    create(value?: PartialMessage<RateLimitStrategy>): RateLimitStrategy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.strategy = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RateLimitStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitStrategy): RateLimitStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.v3.RateLimitStrategy.BlanketRule blanket_rule */ 1:
                    message.strategy = {
                        oneofKind: "blanketRule",
                        blanketRule: reader.int32()
                    };
                    break;
                case /* envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit requests_per_time_unit */ 2:
                    message.strategy = {
                        oneofKind: "requestsPerTimeUnit",
                        requestsPerTimeUnit: RateLimitStrategy_RequestsPerTimeUnit.internalBinaryRead(reader, reader.uint32(), options, (message.strategy as any).requestsPerTimeUnit)
                    };
                    break;
                case /* envoy.type.v3.TokenBucket token_bucket */ 3:
                    message.strategy = {
                        oneofKind: "tokenBucket",
                        tokenBucket: TokenBucket.internalBinaryRead(reader, reader.uint32(), options, (message.strategy as any).tokenBucket)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimitStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.v3.RateLimitStrategy.BlanketRule blanket_rule = 1; */
        if (message.strategy.oneofKind === "blanketRule")
            writer.tag(1, WireType.Varint).int32(message.strategy.blanketRule);
        /* envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit requests_per_time_unit = 2; */
        if (message.strategy.oneofKind === "requestsPerTimeUnit")
            RateLimitStrategy_RequestsPerTimeUnit.internalBinaryWrite(message.strategy.requestsPerTimeUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.v3.TokenBucket token_bucket = 3; */
        if (message.strategy.oneofKind === "tokenBucket")
            TokenBucket.internalBinaryWrite(message.strategy.tokenBucket, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.RateLimitStrategy
 */
export const RateLimitStrategy = new RateLimitStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitStrategy_RequestsPerTimeUnit$Type extends MessageType<RateLimitStrategy_RequestsPerTimeUnit> {
    constructor() {
        super("envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit", [
            { no: 1, name: "requests_per_time_unit", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "time_unit", kind: "enum", T: () => ["envoy.type.v3.RateLimitUnit", RateLimitUnit], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<RateLimitStrategy_RequestsPerTimeUnit>): RateLimitStrategy_RequestsPerTimeUnit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestsPerTimeUnit = 0n;
        message.timeUnit = 0;
        if (value !== undefined)
            reflectionMergePartial<RateLimitStrategy_RequestsPerTimeUnit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitStrategy_RequestsPerTimeUnit): RateLimitStrategy_RequestsPerTimeUnit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 requests_per_time_unit */ 1:
                    message.requestsPerTimeUnit = reader.uint64().toBigInt();
                    break;
                case /* envoy.type.v3.RateLimitUnit time_unit */ 2:
                    message.timeUnit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimitStrategy_RequestsPerTimeUnit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 requests_per_time_unit = 1; */
        if (message.requestsPerTimeUnit !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.requestsPerTimeUnit);
        /* envoy.type.v3.RateLimitUnit time_unit = 2; */
        if (message.timeUnit !== 0)
            writer.tag(2, WireType.Varint).int32(message.timeUnit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.RateLimitStrategy.RequestsPerTimeUnit
 */
export const RateLimitStrategy_RequestsPerTimeUnit = new RateLimitStrategy_RequestsPerTimeUnit$Type();
