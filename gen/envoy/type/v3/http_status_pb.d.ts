// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/v3/http_status.proto (package envoy.type.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * HTTP response codes supported in Envoy.
 * For more details: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
 *
 * @generated from enum envoy.type.v3.StatusCode
 */
export declare enum StatusCode {
  /**
   * Empty - This code not part of the HTTP status code specification, but it is needed for proto
   * `enum` type.
   *
   * @generated from enum value: Empty = 0;
   */
  Empty = 0,

  /**
   * @generated from enum value: Continue = 100;
   */
  Continue = 100,

  /**
   * @generated from enum value: OK = 200;
   */
  OK = 200,

  /**
   * @generated from enum value: Created = 201;
   */
  Created = 201,

  /**
   * @generated from enum value: Accepted = 202;
   */
  Accepted = 202,

  /**
   * @generated from enum value: NonAuthoritativeInformation = 203;
   */
  NonAuthoritativeInformation = 203,

  /**
   * @generated from enum value: NoContent = 204;
   */
  NoContent = 204,

  /**
   * @generated from enum value: ResetContent = 205;
   */
  ResetContent = 205,

  /**
   * @generated from enum value: PartialContent = 206;
   */
  PartialContent = 206,

  /**
   * @generated from enum value: MultiStatus = 207;
   */
  MultiStatus = 207,

  /**
   * @generated from enum value: AlreadyReported = 208;
   */
  AlreadyReported = 208,

  /**
   * @generated from enum value: IMUsed = 226;
   */
  IMUsed = 226,

  /**
   * @generated from enum value: MultipleChoices = 300;
   */
  MultipleChoices = 300,

  /**
   * @generated from enum value: MovedPermanently = 301;
   */
  MovedPermanently = 301,

  /**
   * @generated from enum value: Found = 302;
   */
  Found = 302,

  /**
   * @generated from enum value: SeeOther = 303;
   */
  SeeOther = 303,

  /**
   * @generated from enum value: NotModified = 304;
   */
  NotModified = 304,

  /**
   * @generated from enum value: UseProxy = 305;
   */
  UseProxy = 305,

  /**
   * @generated from enum value: TemporaryRedirect = 307;
   */
  TemporaryRedirect = 307,

  /**
   * @generated from enum value: PermanentRedirect = 308;
   */
  PermanentRedirect = 308,

  /**
   * @generated from enum value: BadRequest = 400;
   */
  BadRequest = 400,

  /**
   * @generated from enum value: Unauthorized = 401;
   */
  Unauthorized = 401,

  /**
   * @generated from enum value: PaymentRequired = 402;
   */
  PaymentRequired = 402,

  /**
   * @generated from enum value: Forbidden = 403;
   */
  Forbidden = 403,

  /**
   * @generated from enum value: NotFound = 404;
   */
  NotFound = 404,

  /**
   * @generated from enum value: MethodNotAllowed = 405;
   */
  MethodNotAllowed = 405,

  /**
   * @generated from enum value: NotAcceptable = 406;
   */
  NotAcceptable = 406,

  /**
   * @generated from enum value: ProxyAuthenticationRequired = 407;
   */
  ProxyAuthenticationRequired = 407,

  /**
   * @generated from enum value: RequestTimeout = 408;
   */
  RequestTimeout = 408,

  /**
   * @generated from enum value: Conflict = 409;
   */
  Conflict = 409,

  /**
   * @generated from enum value: Gone = 410;
   */
  Gone = 410,

  /**
   * @generated from enum value: LengthRequired = 411;
   */
  LengthRequired = 411,

  /**
   * @generated from enum value: PreconditionFailed = 412;
   */
  PreconditionFailed = 412,

  /**
   * @generated from enum value: PayloadTooLarge = 413;
   */
  PayloadTooLarge = 413,

  /**
   * @generated from enum value: URITooLong = 414;
   */
  URITooLong = 414,

  /**
   * @generated from enum value: UnsupportedMediaType = 415;
   */
  UnsupportedMediaType = 415,

  /**
   * @generated from enum value: RangeNotSatisfiable = 416;
   */
  RangeNotSatisfiable = 416,

  /**
   * @generated from enum value: ExpectationFailed = 417;
   */
  ExpectationFailed = 417,

  /**
   * @generated from enum value: MisdirectedRequest = 421;
   */
  MisdirectedRequest = 421,

  /**
   * @generated from enum value: UnprocessableEntity = 422;
   */
  UnprocessableEntity = 422,

  /**
   * @generated from enum value: Locked = 423;
   */
  Locked = 423,

  /**
   * @generated from enum value: FailedDependency = 424;
   */
  FailedDependency = 424,

  /**
   * @generated from enum value: UpgradeRequired = 426;
   */
  UpgradeRequired = 426,

  /**
   * @generated from enum value: PreconditionRequired = 428;
   */
  PreconditionRequired = 428,

  /**
   * @generated from enum value: TooManyRequests = 429;
   */
  TooManyRequests = 429,

  /**
   * @generated from enum value: RequestHeaderFieldsTooLarge = 431;
   */
  RequestHeaderFieldsTooLarge = 431,

  /**
   * @generated from enum value: InternalServerError = 500;
   */
  InternalServerError = 500,

  /**
   * @generated from enum value: NotImplemented = 501;
   */
  NotImplemented = 501,

  /**
   * @generated from enum value: BadGateway = 502;
   */
  BadGateway = 502,

  /**
   * @generated from enum value: ServiceUnavailable = 503;
   */
  ServiceUnavailable = 503,

  /**
   * @generated from enum value: GatewayTimeout = 504;
   */
  GatewayTimeout = 504,

  /**
   * @generated from enum value: HTTPVersionNotSupported = 505;
   */
  HTTPVersionNotSupported = 505,

  /**
   * @generated from enum value: VariantAlsoNegotiates = 506;
   */
  VariantAlsoNegotiates = 506,

  /**
   * @generated from enum value: InsufficientStorage = 507;
   */
  InsufficientStorage = 507,

  /**
   * @generated from enum value: LoopDetected = 508;
   */
  LoopDetected = 508,

  /**
   * @generated from enum value: NotExtended = 510;
   */
  NotExtended = 510,

  /**
   * @generated from enum value: NetworkAuthenticationRequired = 511;
   */
  NetworkAuthenticationRequired = 511,
}

/**
 * HTTP status.
 *
 * @generated from message envoy.type.v3.HttpStatus
 */
export declare class HttpStatus extends Message<HttpStatus> {
  /**
   * Supplies HTTP response code.
   *
   * @generated from field: envoy.type.v3.StatusCode code = 1;
   */
  code: StatusCode;

  constructor(data?: PartialMessage<HttpStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.v3.HttpStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpStatus;

  static equals(a: HttpStatus | PlainMessage<HttpStatus> | undefined, b: HttpStatus | PlainMessage<HttpStatus> | undefined): boolean;
}

