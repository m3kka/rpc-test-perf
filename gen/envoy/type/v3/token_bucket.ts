// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/v3/token_bucket.proto" (package "envoy.type.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { UInt32Value } from "../../../google/protobuf/wrappers";
// [#protodoc-title: Token bucket]

/**
 * Configures a token bucket, typically used for rate limiting.
 *
 * @generated from protobuf message envoy.type.v3.TokenBucket
 */
export interface TokenBucket {
    /**
     * The maximum tokens that the bucket can hold. This is also the number of tokens that the bucket
     * initially contains.
     *
     * @generated from protobuf field: uint32 max_tokens = 1;
     */
    maxTokens: number;
    /**
     * The number of tokens added to the bucket during each fill interval. If not specified, defaults
     * to a single token.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value tokens_per_fill = 2;
     */
    tokensPerFill?: UInt32Value;
    /**
     * The fill interval that tokens are added to the bucket. During each fill interval
     * ``tokens_per_fill`` are added to the bucket. The bucket will never contain more than
     * ``max_tokens`` tokens.
     *
     * @generated from protobuf field: google.protobuf.Duration fill_interval = 3;
     */
    fillInterval?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class TokenBucket$Type extends MessageType<TokenBucket> {
    constructor() {
        super("envoy.type.v3.TokenBucket", [
            { no: 1, name: "max_tokens", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { gt: 0 } } } },
            { no: 2, name: "tokens_per_fill", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gt: 0 } } } },
            { no: 3, name: "fill_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, gt: {} } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.TokenBucket" } });
    }
    create(value?: PartialMessage<TokenBucket>): TokenBucket {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxTokens = 0;
        if (value !== undefined)
            reflectionMergePartial<TokenBucket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenBucket): TokenBucket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 max_tokens */ 1:
                    message.maxTokens = reader.uint32();
                    break;
                case /* google.protobuf.UInt32Value tokens_per_fill */ 2:
                    message.tokensPerFill = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.tokensPerFill);
                    break;
                case /* google.protobuf.Duration fill_interval */ 3:
                    message.fillInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.fillInterval);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenBucket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 max_tokens = 1; */
        if (message.maxTokens !== 0)
            writer.tag(1, WireType.Varint).uint32(message.maxTokens);
        /* google.protobuf.UInt32Value tokens_per_fill = 2; */
        if (message.tokensPerFill)
            UInt32Value.internalBinaryWrite(message.tokensPerFill, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration fill_interval = 3; */
        if (message.fillInterval)
            Duration.internalBinaryWrite(message.fillInterval, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.TokenBucket
 */
export const TokenBucket = new TokenBucket$Type();
