// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/v3/token_bucket.proto (package envoy.type.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Configures a token bucket, typically used for rate limiting.
 *
 * @generated from message envoy.type.v3.TokenBucket
 */
export declare class TokenBucket extends Message<TokenBucket> {
  /**
   * The maximum tokens that the bucket can hold. This is also the number of tokens that the bucket
   * initially contains.
   *
   * @generated from field: uint32 max_tokens = 1;
   */
  maxTokens: number;

  /**
   * The number of tokens added to the bucket during each fill interval. If not specified, defaults
   * to a single token.
   *
   * @generated from field: google.protobuf.UInt32Value tokens_per_fill = 2;
   */
  tokensPerFill?: number;

  /**
   * The fill interval that tokens are added to the bucket. During each fill interval
   * ``tokens_per_fill`` are added to the bucket. The bucket will never contain more than
   * ``max_tokens`` tokens.
   *
   * @generated from field: google.protobuf.Duration fill_interval = 3;
   */
  fillInterval?: Duration;

  constructor(data?: PartialMessage<TokenBucket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.v3.TokenBucket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenBucket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenBucket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenBucket;

  static equals(a: TokenBucket | PlainMessage<TokenBucket> | undefined, b: TokenBucket | PlainMessage<TokenBucket> | undefined): boolean;
}

