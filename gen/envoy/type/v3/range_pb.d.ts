// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/type/v3/range.proto (package envoy.type.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Specifies the int64 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.v3.Int64Range
 */
export declare class Int64Range extends Message<Int64Range> {
  /**
   * start of the range (inclusive)
   *
   * @generated from field: int64 start = 1;
   */
  start: bigint;

  /**
   * end of the range (exclusive)
   *
   * @generated from field: int64 end = 2;
   */
  end: bigint;

  constructor(data?: PartialMessage<Int64Range>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.v3.Int64Range";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int64Range;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int64Range;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int64Range;

  static equals(a: Int64Range | PlainMessage<Int64Range> | undefined, b: Int64Range | PlainMessage<Int64Range> | undefined): boolean;
}

/**
 * Specifies the int32 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.v3.Int32Range
 */
export declare class Int32Range extends Message<Int32Range> {
  /**
   * start of the range (inclusive)
   *
   * @generated from field: int32 start = 1;
   */
  start: number;

  /**
   * end of the range (exclusive)
   *
   * @generated from field: int32 end = 2;
   */
  end: number;

  constructor(data?: PartialMessage<Int32Range>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.v3.Int32Range";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int32Range;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int32Range;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int32Range;

  static equals(a: Int32Range | PlainMessage<Int32Range> | undefined, b: Int32Range | PlainMessage<Int32Range> | undefined): boolean;
}

/**
 * Specifies the double start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.v3.DoubleRange
 */
export declare class DoubleRange extends Message<DoubleRange> {
  /**
   * start of the range (inclusive)
   *
   * @generated from field: double start = 1;
   */
  start: number;

  /**
   * end of the range (exclusive)
   *
   * @generated from field: double end = 2;
   */
  end: number;

  constructor(data?: PartialMessage<DoubleRange>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.type.v3.DoubleRange";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoubleRange;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoubleRange;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoubleRange;

  static equals(a: DoubleRange | PlainMessage<DoubleRange> | undefined, b: DoubleRange | PlainMessage<DoubleRange> | undefined): boolean;
}

