// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/type/v3/range.proto" (package "envoy.type.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Range]

/**
 * Specifies the int64 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from protobuf message envoy.type.v3.Int64Range
 */
export interface Int64Range {
    /**
     * start of the range (inclusive)
     *
     * @generated from protobuf field: int64 start = 1;
     */
    start: bigint;
    /**
     * end of the range (exclusive)
     *
     * @generated from protobuf field: int64 end = 2;
     */
    end: bigint;
}
/**
 * Specifies the int32 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from protobuf message envoy.type.v3.Int32Range
 */
export interface Int32Range {
    /**
     * start of the range (inclusive)
     *
     * @generated from protobuf field: int32 start = 1;
     */
    start: number;
    /**
     * end of the range (exclusive)
     *
     * @generated from protobuf field: int32 end = 2;
     */
    end: number;
}
/**
 * Specifies the double start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from protobuf message envoy.type.v3.DoubleRange
 */
export interface DoubleRange {
    /**
     * start of the range (inclusive)
     *
     * @generated from protobuf field: double start = 1;
     */
    start: number;
    /**
     * end of the range (exclusive)
     *
     * @generated from protobuf field: double end = 2;
     */
    end: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Int64Range$Type extends MessageType<Int64Range> {
    constructor() {
        super("envoy.type.v3.Int64Range", [
            { no: 1, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.Int64Range" } });
    }
    create(value?: PartialMessage<Int64Range>): Int64Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = 0n;
        message.end = 0n;
        if (value !== undefined)
            reflectionMergePartial<Int64Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Int64Range): Int64Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start */ 1:
                    message.start = reader.int64().toBigInt();
                    break;
                case /* int64 end */ 2:
                    message.end = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Int64Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start = 1; */
        if (message.start !== 0n)
            writer.tag(1, WireType.Varint).int64(message.start);
        /* int64 end = 2; */
        if (message.end !== 0n)
            writer.tag(2, WireType.Varint).int64(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.Int64Range
 */
export const Int64Range = new Int64Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int32Range$Type extends MessageType<Int32Range> {
    constructor() {
        super("envoy.type.v3.Int32Range", [
            { no: 1, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.Int32Range" } });
    }
    create(value?: PartialMessage<Int32Range>): Int32Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = 0;
        message.end = 0;
        if (value !== undefined)
            reflectionMergePartial<Int32Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Int32Range): Int32Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* int32 end */ 2:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Int32Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* int32 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.Int32Range
 */
export const Int32Range = new Int32Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleRange$Type extends MessageType<DoubleRange> {
    constructor() {
        super("envoy.type.v3.DoubleRange", [
            { no: 1, name: "start", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "end", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.type.DoubleRange" } });
    }
    create(value?: PartialMessage<DoubleRange>): DoubleRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = 0;
        message.end = 0;
        if (value !== undefined)
            reflectionMergePartial<DoubleRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleRange): DoubleRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double start */ 1:
                    message.start = reader.double();
                    break;
                case /* double end */ 2:
                    message.end = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Bit64).double(message.start);
        /* double end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Bit64).double(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.type.v3.DoubleRange
 */
export const DoubleRange = new DoubleRange$Type();
