// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.proto" (package "envoy.extensions.load_balancing_policies.pick_first.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Pick First Load Balancing Policy]
// [#not-implemented-hide:]

/**
 * This configuration allows the built-in PICK_FIRST LB policy to be configured
 * via the LB policy extension point.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst
 */
export interface PickFirst {
    /**
     * If set to true, instructs the LB policy to shuffle the list of addresses
     * received from the name resolver before attempting to connect to them.
     *
     * @generated from protobuf field: bool shuffle_address_list = 1;
     */
    shuffleAddressList: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class PickFirst$Type extends MessageType<PickFirst> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst", [
            { no: 1, name: "shuffle_address_list", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PickFirst>): PickFirst {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.shuffleAddressList = false;
        if (value !== undefined)
            reflectionMergePartial<PickFirst>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PickFirst): PickFirst {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool shuffle_address_list */ 1:
                    message.shuffleAddressList = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PickFirst, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool shuffle_address_list = 1; */
        if (message.shuffleAddressList !== false)
            writer.tag(1, WireType.Varint).bool(message.shuffleAddressList);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst
 */
export const PickFirst = new PickFirst$Type();
