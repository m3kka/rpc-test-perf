// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/round_robin/v3/round_robin.proto" (package "envoy.extensions.load_balancing_policies.round_robin.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LocalityLbConfig } from "../../common/v3/common";
import { SlowStartConfig } from "../../common/v3/common";
// [#protodoc-title: Round Robin Load Balancing Policy]
// [#extension: envoy.load_balancing_policies.round_robin]

/**
 * This configuration allows the built-in ROUND_ROBIN LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin
 */
export interface RoundRobin {
    /**
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 1;
     */
    slowStartConfig?: SlowStartConfig;
    /**
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 2;
     */
    localityLbConfig?: LocalityLbConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class RoundRobin$Type extends MessageType<RoundRobin> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin", [
            { no: 1, name: "slow_start_config", kind: "message", T: () => SlowStartConfig },
            { no: 2, name: "locality_lb_config", kind: "message", T: () => LocalityLbConfig }
        ]);
    }
    create(value?: PartialMessage<RoundRobin>): RoundRobin {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoundRobin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoundRobin): RoundRobin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config */ 1:
                    message.slowStartConfig = SlowStartConfig.internalBinaryRead(reader, reader.uint32(), options, message.slowStartConfig);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config */ 2:
                    message.localityLbConfig = LocalityLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.localityLbConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoundRobin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 1; */
        if (message.slowStartConfig)
            SlowStartConfig.internalBinaryWrite(message.slowStartConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 2; */
        if (message.localityLbConfig)
            LocalityLbConfig.internalBinaryWrite(message.localityLbConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin
 */
export const RoundRobin = new RoundRobin$Type();
