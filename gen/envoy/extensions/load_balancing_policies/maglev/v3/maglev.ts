// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/maglev/v3/maglev.proto" (package "envoy.extensions.load_balancing_policies.maglev.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LocalityLbConfig_LocalityWeightedLbConfig } from "../../common/v3/common";
import { ConsistentHashingLbConfig } from "../../common/v3/common";
import { UInt64Value } from "../../../../../google/protobuf/wrappers";
// [#protodoc-title: Maglev Load Balancing Policy]
// [#extension: envoy.load_balancing_policies.maglev]

/**
 * This configuration allows the built-in Maglev LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` and :ref:`Maglev<arch_overview_load_balancing_types_maglev>` for more information.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.maglev.v3.Maglev
 */
export interface Maglev {
    /**
     * The table size for Maglev hashing. Maglev aims for "minimal disruption" rather than an absolute guarantee.
     * Minimal disruption means that when the set of upstream hosts change, a connection will likely be sent to the same
     * upstream as it was before. Increasing the table size reduces the amount of disruption.
     * The table size must be prime number limited to 5000011. If it is not specified, the default is 65537.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value table_size = 1;
     */
    tableSize?: UInt64Value;
    /**
     * Common configuration for hashing-based load balancing policies.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config = 2;
     */
    consistentHashingLbConfig?: ConsistentHashingLbConfig;
    /**
     * Enable locality weighted load balancing for maglev lb explicitly.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 3;
     */
    localityWeightedLbConfig?: LocalityLbConfig_LocalityWeightedLbConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class Maglev$Type extends MessageType<Maglev> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.maglev.v3.Maglev", [
            { no: 1, name: "table_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lte: "5000011" } } } },
            { no: 2, name: "consistent_hashing_lb_config", kind: "message", T: () => ConsistentHashingLbConfig },
            { no: 3, name: "locality_weighted_lb_config", kind: "message", T: () => LocalityLbConfig_LocalityWeightedLbConfig }
        ]);
    }
    create(value?: PartialMessage<Maglev>): Maglev {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Maglev>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Maglev): Maglev {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt64Value table_size */ 1:
                    message.tableSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.tableSize);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config */ 2:
                    message.consistentHashingLbConfig = ConsistentHashingLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.consistentHashingLbConfig);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config */ 3:
                    message.localityWeightedLbConfig = LocalityLbConfig_LocalityWeightedLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.localityWeightedLbConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Maglev, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt64Value table_size = 1; */
        if (message.tableSize)
            UInt64Value.internalBinaryWrite(message.tableSize, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config = 2; */
        if (message.consistentHashingLbConfig)
            ConsistentHashingLbConfig.internalBinaryWrite(message.consistentHashingLbConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 3; */
        if (message.localityWeightedLbConfig)
            LocalityLbConfig_LocalityWeightedLbConfig.internalBinaryWrite(message.localityWeightedLbConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.maglev.v3.Maglev
 */
export const Maglev = new Maglev$Type();
