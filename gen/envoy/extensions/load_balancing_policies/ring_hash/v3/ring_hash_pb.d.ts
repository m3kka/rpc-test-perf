// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto (package envoy.extensions.load_balancing_policies.ring_hash.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ConsistentHashingLbConfig, LocalityLbConfig_LocalityWeightedLbConfig } from "../../common/v3/common_pb.js";

/**
 * This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash
 */
export declare class RingHash extends Message<RingHash> {
  /**
   * The hash function used to hash hosts onto the ketama ring. The value defaults to
   * :ref:`XX_HASH<envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.
   *
   * @generated from field: envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1;
   */
  hashFunction: RingHash_HashFunction;

  /**
   * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
   * provided host) the better the request distribution will reflect the desired weights. Defaults
   * to 1024 entries, and limited to 8M entries. See also
   * :ref:`maximum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size>`.
   *
   * @generated from field: google.protobuf.UInt64Value minimum_ring_size = 2;
   */
  minimumRingSize?: bigint;

  /**
   * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
   * to further constrain resource use. See also
   * :ref:`minimum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size>`.
   *
   * @generated from field: google.protobuf.UInt64Value maximum_ring_size = 3;
   */
  maximumRingSize?: bigint;

  /**
   * If set to `true`, the cluster will use hostname instead of the resolved
   * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
   *
   * ..note::
   *   This is deprecated and please use :ref:`consistent_hashing_lb_config
   *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
   *
   * @generated from field: bool use_hostname_for_hashing = 4 [deprecated = true];
   * @deprecated
   */
  useHostnameForHashing: boolean;

  /**
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   *
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   *
   * If weights are specified on the hosts, they are respected.
   *
   * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
   * being probed, so use a higher value if you require better performance.
   *
   * ..note::
   *   This is deprecated and please use :ref:`consistent_hashing_lb_config
   *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
   *
   * @generated from field: google.protobuf.UInt32Value hash_balance_factor = 5 [deprecated = true];
   * @deprecated
   */
  hashBalanceFactor?: number;

  /**
   * Common configuration for hashing-based load balancing policies.
   *
   * @generated from field: envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config = 6;
   */
  consistentHashingLbConfig?: ConsistentHashingLbConfig;

  /**
   * Enable locality weighted load balancing for ring hash lb explicitly.
   *
   * @generated from field: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 7;
   */
  localityWeightedLbConfig?: LocalityLbConfig_LocalityWeightedLbConfig;

  constructor(data?: PartialMessage<RingHash>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RingHash;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RingHash;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RingHash;

  static equals(a: RingHash | PlainMessage<RingHash> | undefined, b: RingHash | PlainMessage<RingHash> | undefined): boolean;
}

/**
 * The hash function used to hash hosts onto the ketama ring.
 *
 * @generated from enum envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction
 */
export declare enum RingHash_HashFunction {
  /**
   * Currently defaults to XX_HASH.
   *
   * @generated from enum value: DEFAULT_HASH = 0;
   */
  DEFAULT_HASH = 0,

  /**
   * Use `xxHash <https://github.com/Cyan4973/xxHash>`_.
   *
   * @generated from enum value: XX_HASH = 1;
   */
  XX_HASH = 1,

  /**
   * Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
   * std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
   * on Linux and not macOS.
   *
   * @generated from enum value: MURMUR_HASH_2 = 2;
   */
  MURMUR_HASH_2 = 2,
}

