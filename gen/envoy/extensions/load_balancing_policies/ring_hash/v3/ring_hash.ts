// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto" (package "envoy.extensions.load_balancing_policies.ring_hash.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LocalityLbConfig_LocalityWeightedLbConfig } from "../../common/v3/common";
import { ConsistentHashingLbConfig } from "../../common/v3/common";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { UInt64Value } from "../../../../../google/protobuf/wrappers";
// [#protodoc-title: Ring Hash Load Balancing Policy]
// [#extension: envoy.load_balancing_policies.ring_hash]

/**
 * This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash
 */
export interface RingHash {
    /**
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH<envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1;
     */
    hashFunction: RingHash_HashFunction;
    /**
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size>`.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value minimum_ring_size = 2;
     */
    minimumRingSize?: UInt64Value;
    /**
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size>`.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value maximum_ring_size = 3;
     */
    maximumRingSize?: UInt64Value;
    /**
     * If set to `true`, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     *
     * ..note::
     *   This is deprecated and please use :ref:`consistent_hashing_lb_config
     *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
     *
     * @deprecated
     * @generated from protobuf field: bool use_hostname_for_hashing = 4 [deprecated = true];
     */
    useHostnameForHashing: boolean;
    /**
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     *
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     *
     * If weights are specified on the hosts, they are respected.
     *
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     *
     * ..note::
     *   This is deprecated and please use :ref:`consistent_hashing_lb_config
     *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.UInt32Value hash_balance_factor = 5 [deprecated = true];
     */
    hashBalanceFactor?: UInt32Value;
    /**
     * Common configuration for hashing-based load balancing policies.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config = 6;
     */
    consistentHashingLbConfig?: ConsistentHashingLbConfig;
    /**
     * Enable locality weighted load balancing for ring hash lb explicitly.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 7;
     */
    localityWeightedLbConfig?: LocalityLbConfig_LocalityWeightedLbConfig;
}
/**
 * The hash function used to hash hosts onto the ketama ring.
 *
 * @generated from protobuf enum envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction
 */
export enum RingHash_HashFunction {
    /**
     * Currently defaults to XX_HASH.
     *
     * @generated from protobuf enum value: DEFAULT_HASH = 0;
     */
    DEFAULT_HASH = 0,
    /**
     * Use `xxHash <https://github.com/Cyan4973/xxHash>`_.
     *
     * @generated from protobuf enum value: XX_HASH = 1;
     */
    XX_HASH = 1,
    /**
     * Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
     * std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
     * on Linux and not macOS.
     *
     * @generated from protobuf enum value: MURMUR_HASH_2 = 2;
     */
    MURMUR_HASH_2 = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RingHash$Type extends MessageType<RingHash> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash", [
            { no: 1, name: "hash_function", kind: "enum", T: () => ["envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction", RingHash_HashFunction], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "minimum_ring_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lte: "8388608" } } } },
            { no: 3, name: "maximum_ring_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lte: "8388608" } } } },
            { no: 4, name: "use_hostname_for_hashing", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 5, name: "hash_balance_factor", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 100 } }, "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 6, name: "consistent_hashing_lb_config", kind: "message", T: () => ConsistentHashingLbConfig },
            { no: 7, name: "locality_weighted_lb_config", kind: "message", T: () => LocalityLbConfig_LocalityWeightedLbConfig }
        ]);
    }
    create(value?: PartialMessage<RingHash>): RingHash {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hashFunction = 0;
        message.useHostnameForHashing = false;
        if (value !== undefined)
            reflectionMergePartial<RingHash>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RingHash): RingHash {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function */ 1:
                    message.hashFunction = reader.int32();
                    break;
                case /* google.protobuf.UInt64Value minimum_ring_size */ 2:
                    message.minimumRingSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.minimumRingSize);
                    break;
                case /* google.protobuf.UInt64Value maximum_ring_size */ 3:
                    message.maximumRingSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maximumRingSize);
                    break;
                case /* bool use_hostname_for_hashing = 4 [deprecated = true];*/ 4:
                    message.useHostnameForHashing = reader.bool();
                    break;
                case /* google.protobuf.UInt32Value hash_balance_factor = 5 [deprecated = true];*/ 5:
                    message.hashBalanceFactor = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.hashBalanceFactor);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config */ 6:
                    message.consistentHashingLbConfig = ConsistentHashingLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.consistentHashingLbConfig);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config */ 7:
                    message.localityWeightedLbConfig = LocalityLbConfig_LocalityWeightedLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.localityWeightedLbConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RingHash, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1; */
        if (message.hashFunction !== 0)
            writer.tag(1, WireType.Varint).int32(message.hashFunction);
        /* google.protobuf.UInt64Value minimum_ring_size = 2; */
        if (message.minimumRingSize)
            UInt64Value.internalBinaryWrite(message.minimumRingSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value maximum_ring_size = 3; */
        if (message.maximumRingSize)
            UInt64Value.internalBinaryWrite(message.maximumRingSize, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool use_hostname_for_hashing = 4 [deprecated = true]; */
        if (message.useHostnameForHashing !== false)
            writer.tag(4, WireType.Varint).bool(message.useHostnameForHashing);
        /* google.protobuf.UInt32Value hash_balance_factor = 5 [deprecated = true]; */
        if (message.hashBalanceFactor)
            UInt32Value.internalBinaryWrite(message.hashBalanceFactor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig consistent_hashing_lb_config = 6; */
        if (message.consistentHashingLbConfig)
            ConsistentHashingLbConfig.internalBinaryWrite(message.consistentHashingLbConfig, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 7; */
        if (message.localityWeightedLbConfig)
            LocalityLbConfig_LocalityWeightedLbConfig.internalBinaryWrite(message.localityWeightedLbConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash
 */
export const RingHash = new RingHash$Type();
