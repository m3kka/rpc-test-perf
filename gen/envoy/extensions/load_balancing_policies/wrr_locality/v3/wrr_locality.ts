// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.proto" (package "envoy.extensions.load_balancing_policies.wrr_locality.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadBalancingPolicy } from "../../../../config/cluster/v3/cluster";
// [#protodoc-title: Weighted Round Robin Locality-Picking Load Balancing Policy]
// [#not-implemented-hide:]

/**
 * Configuration for the wrr_locality LB policy. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality
 */
export interface WrrLocality {
    /**
     * The child LB policy to create for endpoint-picking within the chosen locality.
     *
     * @generated from protobuf field: envoy.config.cluster.v3.LoadBalancingPolicy endpoint_picking_policy = 1;
     */
    endpointPickingPolicy?: LoadBalancingPolicy;
}
// @generated message type with reflection information, may provide speed optimized methods
class WrrLocality$Type extends MessageType<WrrLocality> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality", [
            { no: 1, name: "endpoint_picking_policy", kind: "message", T: () => LoadBalancingPolicy, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<WrrLocality>): WrrLocality {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WrrLocality>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WrrLocality): WrrLocality {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.cluster.v3.LoadBalancingPolicy endpoint_picking_policy */ 1:
                    message.endpointPickingPolicy = LoadBalancingPolicy.internalBinaryRead(reader, reader.uint32(), options, message.endpointPickingPolicy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WrrLocality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.cluster.v3.LoadBalancingPolicy endpoint_picking_policy = 1; */
        if (message.endpointPickingPolicy)
            LoadBalancingPolicy.internalBinaryWrite(message.endpointPickingPolicy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality
 */
export const WrrLocality = new WrrLocality$Type();
