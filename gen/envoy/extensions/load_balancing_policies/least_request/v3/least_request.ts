// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/least_request/v3/least_request.proto" (package "envoy.extensions.load_balancing_policies.least_request.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LocalityLbConfig } from "../../common/v3/common";
import { SlowStartConfig } from "../../common/v3/common";
import { RuntimeDouble } from "../../../../config/core/v3/base";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
// [#protodoc-title: Least Request Load Balancing Policy]
// [#extension: envoy.load_balancing_policies.least_request]

/**
 * This configuration allows the built-in LEAST_REQUEST LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest
 */
export interface LeastRequest {
    /**
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value choice_count = 1;
     */
    choiceCount?: UInt32Value;
    /**
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     *
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     *
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     *
     * `active_request_bias` must be greater than or equal to 0.0.
     *
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     *
     * When `active_request_bias > 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     *
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     *
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     *
     * @generated from protobuf field: envoy.config.core.v3.RuntimeDouble active_request_bias = 2;
     */
    activeRequestBias?: RuntimeDouble;
    /**
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;
     */
    slowStartConfig?: SlowStartConfig;
    /**
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     *
     * @generated from protobuf field: envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;
     */
    localityLbConfig?: LocalityLbConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class LeastRequest$Type extends MessageType<LeastRequest> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest", [
            { no: 1, name: "choice_count", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 2 } } } },
            { no: 2, name: "active_request_bias", kind: "message", T: () => RuntimeDouble },
            { no: 3, name: "slow_start_config", kind: "message", T: () => SlowStartConfig },
            { no: 4, name: "locality_lb_config", kind: "message", T: () => LocalityLbConfig }
        ]);
    }
    create(value?: PartialMessage<LeastRequest>): LeastRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LeastRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeastRequest): LeastRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value choice_count */ 1:
                    message.choiceCount = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.choiceCount);
                    break;
                case /* envoy.config.core.v3.RuntimeDouble active_request_bias */ 2:
                    message.activeRequestBias = RuntimeDouble.internalBinaryRead(reader, reader.uint32(), options, message.activeRequestBias);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config */ 3:
                    message.slowStartConfig = SlowStartConfig.internalBinaryRead(reader, reader.uint32(), options, message.slowStartConfig);
                    break;
                case /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config */ 4:
                    message.localityLbConfig = LocalityLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.localityLbConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeastRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value choice_count = 1; */
        if (message.choiceCount)
            UInt32Value.internalBinaryWrite(message.choiceCount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.RuntimeDouble active_request_bias = 2; */
        if (message.activeRequestBias)
            RuntimeDouble.internalBinaryWrite(message.activeRequestBias, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3; */
        if (message.slowStartConfig)
            SlowStartConfig.internalBinaryWrite(message.slowStartConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4; */
        if (message.localityLbConfig)
            LocalityLbConfig.internalBinaryWrite(message.localityLbConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest
 */
export const LeastRequest = new LeastRequest$Type();
