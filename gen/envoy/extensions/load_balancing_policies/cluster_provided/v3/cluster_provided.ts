// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/load_balancing_policies/cluster_provided/v3/cluster_provided.proto" (package "envoy.extensions.load_balancing_policies.cluster_provided.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Cluster Provided Load Balancing Policy]
// [#extension: envoy.load_balancing_policies.cluster_provided]

/**
 * The cluster provided load balancing policy allows cluster to specify its own load balancing.
 * If this extension is configured, the target cluster must provide load balancer when the cluster
 * is created.
 *
 * ..note::
 *   Cluster provided load balancing policy could not be used as sub-policy of other hierarchical
 *   load balancing policies, such as subset load balancing policy.
 *
 * @generated from protobuf message envoy.extensions.load_balancing_policies.cluster_provided.v3.ClusterProvided
 */
export interface ClusterProvided {
}
// @generated message type with reflection information, may provide speed optimized methods
class ClusterProvided$Type extends MessageType<ClusterProvided> {
    constructor() {
        super("envoy.extensions.load_balancing_policies.cluster_provided.v3.ClusterProvided", []);
    }
    create(value?: PartialMessage<ClusterProvided>): ClusterProvided {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClusterProvided>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterProvided): ClusterProvided {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ClusterProvided, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.load_balancing_policies.cluster_provided.v3.ClusterProvided
 */
export const ClusterProvided = new ClusterProvided$Type();
