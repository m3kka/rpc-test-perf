// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.proto (package envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, Duration, FloatValue, proto3 } from "@bufbuild/protobuf";

/**
 * Configuration for the client_side_weighted_round_robin LB policy.
 *
 * This policy differs from the built-in ROUND_ROBIN policy in terms of
 * how the endpoint weights are determined. In the ROUND_ROBIN policy,
 * the endpoint weights are sent by the control plane via EDS. However,
 * in this policy, the endpoint weights are instead determined via qps (queries
 * per second), eps (errors per second), and utilization metrics sent by the
 * endpoint using the Open Request Cost Aggregation (ORCA) protocol. Utilization
 * is determined by using the ORCA application_utilization field, if set, or
 * else falling back to the cpu_utilization field. All queries count toward qps,
 * regardless of result. Only failed queries count toward eps. A config
 * parameter error_utilization_penalty controls the penalty to adjust endpoint
 * weights using eps and qps. The weight of a given endpoint is computed as:
 *   qps / (utilization + eps/qps * error_utilization_penalty)
 *
 * See the :ref:`load balancing architecture overview<arch_overview_load_balancing_types>` for more information.
 *
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3.ClientSideWeightedRoundRobin
 */
export const ClientSideWeightedRoundRobin = proto3.makeMessageType(
  "envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3.ClientSideWeightedRoundRobin",
  () => [
    { no: 1, name: "enable_oob_load_report", kind: "message", T: BoolValue },
    { no: 2, name: "oob_reporting_period", kind: "message", T: Duration },
    { no: 3, name: "blackout_period", kind: "message", T: Duration },
    { no: 4, name: "weight_expiration_period", kind: "message", T: Duration },
    { no: 5, name: "weight_update_period", kind: "message", T: Duration },
    { no: 6, name: "error_utilization_penalty", kind: "message", T: FloatValue },
  ],
);

