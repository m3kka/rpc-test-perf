// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.proto (package envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Configuration for the client_side_weighted_round_robin LB policy.
 *
 * This policy differs from the built-in ROUND_ROBIN policy in terms of
 * how the endpoint weights are determined. In the ROUND_ROBIN policy,
 * the endpoint weights are sent by the control plane via EDS. However,
 * in this policy, the endpoint weights are instead determined via qps (queries
 * per second), eps (errors per second), and utilization metrics sent by the
 * endpoint using the Open Request Cost Aggregation (ORCA) protocol. Utilization
 * is determined by using the ORCA application_utilization field, if set, or
 * else falling back to the cpu_utilization field. All queries count toward qps,
 * regardless of result. Only failed queries count toward eps. A config
 * parameter error_utilization_penalty controls the penalty to adjust endpoint
 * weights using eps and qps. The weight of a given endpoint is computed as:
 *   qps / (utilization + eps/qps * error_utilization_penalty)
 *
 * See the :ref:`load balancing architecture overview<arch_overview_load_balancing_types>` for more information.
 *
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3.ClientSideWeightedRoundRobin
 */
export declare class ClientSideWeightedRoundRobin extends Message<ClientSideWeightedRoundRobin> {
  /**
   * Whether to enable out-of-band utilization reporting collection from
   * the endpoints. By default, per-request utilization reporting is used.
   *
   * @generated from field: google.protobuf.BoolValue enable_oob_load_report = 1;
   */
  enableOobLoadReport?: boolean;

  /**
   * Load reporting interval to request from the server. Note that the
   * server may not provide reports as frequently as the client requests.
   * Used only when enable_oob_load_report is true. Default is 10 seconds.
   *
   * @generated from field: google.protobuf.Duration oob_reporting_period = 2;
   */
  oobReportingPeriod?: Duration;

  /**
   * A given endpoint must report load metrics continuously for at least
   * this long before the endpoint weight will be used. This avoids
   * churn when the set of endpoint addresses changes. Takes effect
   * both immediately after we establish a connection to an endpoint and
   * after weight_expiration_period has caused us to stop using the most
   * recent load metrics. Default is 10 seconds.
   *
   * @generated from field: google.protobuf.Duration blackout_period = 3;
   */
  blackoutPeriod?: Duration;

  /**
   * If a given endpoint has not reported load metrics in this long,
   * then we stop using the reported weight. This ensures that we do
   * not continue to use very stale weights. Once we stop using a stale
   * value, if we later start seeing fresh reports again, the
   * blackout_period applies. Defaults to 3 minutes.
   *
   * @generated from field: google.protobuf.Duration weight_expiration_period = 4;
   */
  weightExpirationPeriod?: Duration;

  /**
   * How often endpoint weights are recalculated. Values less than 100ms are
   * capped at 100ms. Default is 1 second.
   *
   * @generated from field: google.protobuf.Duration weight_update_period = 5;
   */
  weightUpdatePeriod?: Duration;

  /**
   * The multiplier used to adjust endpoint weights with the error rate
   * calculated as eps/qps. Configuration is rejected if this value is negative.
   * Default is 1.0.
   *
   * @generated from field: google.protobuf.FloatValue error_utilization_penalty = 6;
   */
  errorUtilizationPenalty?: number;

  constructor(data?: PartialMessage<ClientSideWeightedRoundRobin>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.load_balancing_policies.client_side_weighted_round_robin.v3.ClientSideWeightedRoundRobin";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientSideWeightedRoundRobin;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientSideWeightedRoundRobin;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientSideWeightedRoundRobin;

  static equals(a: ClientSideWeightedRoundRobin | PlainMessage<ClientSideWeightedRoundRobin> | undefined, b: ClientSideWeightedRoundRobin | PlainMessage<ClientSideWeightedRoundRobin> | undefined): boolean;
}

