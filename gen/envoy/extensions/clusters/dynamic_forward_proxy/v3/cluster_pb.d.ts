// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/clusters/dynamic_forward_proxy/v3/cluster.proto (package envoy.extensions.clusters.dynamic_forward_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DnsCacheConfig } from "../../../common/dynamic_forward_proxy/v3/dns_cache_pb.js";
import type { Cluster_LbPolicy } from "../../../../config/cluster/v3/cluster_pb.js";
import type { SocketAddress } from "../../../../config/core/v3/address_pb.js";

/**
 * Configuration for the dynamic forward proxy cluster. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.clusters.dynamic_forward_proxy]
 *
 * @generated from message envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
 */
export declare class ClusterConfig extends Message<ClusterConfig> {
  /**
   * @generated from oneof envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.cluster_implementation_specifier
   */
  clusterImplementationSpecifier: {
    /**
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * <envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config>`.
     *
     * @generated from field: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1;
     */
    value: DnsCacheConfig;
    case: "dnsCacheConfig";
  } | {
    /**
     * Configuration for sub clusters, when this configuration is enabled,
     * Envoy will create an independent sub cluster dynamically for each host:port.
     * Most of the configuration of a sub cluster is inherited from the current cluster,
     * i.e. health_checks, dns_resolvers and etc.
     * And the load_assignment will be set to the only one endpoint, host:port.
     *
     * Compared to the dns_cache_config, it has the following advantages:
     *
     * 1. sub clusters will be created with the STRICT_DNS DiscoveryType,
     *    so that Envoy will use all of the IPs resolved from the host.
     *
     * 2. each sub cluster is full featured cluster, with lb_policy and health check and etc enabled.
     *
     *
     * @generated from field: envoy.extensions.clusters.dynamic_forward_proxy.v3.SubClustersConfig sub_clusters_config = 4;
     */
    value: SubClustersConfig;
    case: "subClustersConfig";
  } | { case: undefined; value?: undefined };

  /**
   * If true allow the cluster configuration to disable the auto_sni and auto_san_validation options
   * in the :ref:`cluster's upstream_http_protocol_options
   * <envoy_v3_api_field_config.cluster.v3.Cluster.upstream_http_protocol_options>`
   *
   * @generated from field: bool allow_insecure_cluster_options = 2;
   */
  allowInsecureClusterOptions: boolean;

  /**
   * If true allow HTTP/2 and HTTP/3 connections to be reused for requests to different
   * origins than the connection was initially created for. This will only happen when the
   * resolved address for the new connection matches the peer address of the connection and
   * the TLS certificate is also valid for the new hostname. For example, if a connection
   * has previously been established to foo.example.com at IP 1.2.3.4 with a certificate
   * that is valid for `*.example.com`, then this connection could be used for requests to
   * bar.example.com if that also resolved to 1.2.3.4.
   *
   * .. note::
   *   By design, this feature will maximize reuse of connections. This means that instead
   *   opening a new connection when an existing connection reaches the maximum number of
   *   concurrent streams, requests will instead be sent to the existing connection.
   *
   * .. note::
   *   The coalesced connections might be to upstreams that would not be otherwise
   *   selected by Envoy. See the section `Connection Reuse in RFC 7540
   *   <https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.1>`_
   *
   *
   * @generated from field: bool allow_coalesced_connections = 3;
   */
  allowCoalescedConnections: boolean;

  constructor(data?: PartialMessage<ClusterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterConfig;

  static equals(a: ClusterConfig | PlainMessage<ClusterConfig> | undefined, b: ClusterConfig | PlainMessage<ClusterConfig> | undefined): boolean;
}

/**
 * Configuration for sub clusters. Hard code STRICT_DNS cluster type now.
 *
 * @generated from message envoy.extensions.clusters.dynamic_forward_proxy.v3.SubClustersConfig
 */
export declare class SubClustersConfig extends Message<SubClustersConfig> {
  /**
   * The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
   * when picking a host in a sub cluster. Note that CLUSTER_PROVIDED is not allowed here.
   *
   * @generated from field: envoy.config.cluster.v3.Cluster.LbPolicy lb_policy = 1;
   */
  lbPolicy: Cluster_LbPolicy;

  /**
   * The maximum number of sub clusters that the DFP cluster will hold. If not specified defaults to 1024.
   *
   * @generated from field: google.protobuf.UInt32Value max_sub_clusters = 2;
   */
  maxSubClusters?: number;

  /**
   * The TTL for sub clusters that are unused. Sub clusters that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   *
   * @generated from field: google.protobuf.Duration sub_cluster_ttl = 3;
   */
  subClusterTtl?: Duration;

  /**
   * Sub clusters that should be created & warmed upon creation. This might provide a
   * performance improvement, in the form of cache hits, for sub clusters that are going to be
   * warmed during steady state and are known at config load time.
   *
   * @generated from field: repeated envoy.config.core.v3.SocketAddress preresolve_clusters = 4;
   */
  preresolveClusters: SocketAddress[];

  constructor(data?: PartialMessage<SubClustersConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.clusters.dynamic_forward_proxy.v3.SubClustersConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubClustersConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubClustersConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubClustersConfig;

  static equals(a: SubClustersConfig | PlainMessage<SubClustersConfig> | undefined, b: SubClustersConfig | PlainMessage<SubClustersConfig> | undefined): boolean;
}

