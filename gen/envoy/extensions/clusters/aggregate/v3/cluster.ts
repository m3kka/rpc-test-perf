// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/clusters/aggregate/v3/cluster.proto" (package "envoy.extensions.clusters.aggregate.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Aggregate cluster configuration]

/**
 * Configuration for the aggregate cluster. See the :ref:`architecture overview
 * <arch_overview_aggregate_cluster>` for more information.
 * [#extension: envoy.clusters.aggregate]
 *
 * @generated from protobuf message envoy.extensions.clusters.aggregate.v3.ClusterConfig
 */
export interface ClusterConfig {
    /**
     * Load balancing clusters in aggregate cluster. Clusters are prioritized based on the order they
     * appear in this list.
     *
     * @generated from protobuf field: repeated string clusters = 1;
     */
    clusters: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ClusterConfig$Type extends MessageType<ClusterConfig> {
    constructor() {
        super("envoy.extensions.clusters.aggregate.v3.ClusterConfig", [
            { no: 1, name: "clusters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.cluster.aggregate.v2alpha.ClusterConfig" } });
    }
    create(value?: PartialMessage<ClusterConfig>): ClusterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusters = [];
        if (value !== undefined)
            reflectionMergePartial<ClusterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterConfig): ClusterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string clusters */ 1:
                    message.clusters.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string clusters = 1; */
        for (let i = 0; i < message.clusters.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.clusters[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.clusters.aggregate.v3.ClusterConfig
 */
export const ClusterConfig = new ClusterConfig$Type();
