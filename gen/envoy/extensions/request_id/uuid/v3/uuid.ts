// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/request_id/uuid/v3/uuid.proto" (package "envoy.extensions.request_id.uuid.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
// [#protodoc-title: UUID]
// [#extension: envoy.request_id.uuid]

/**
 * Configuration for the default UUID request ID extension which has the following behavior:
 *
 * 1. Request ID is propagated using the :ref:`x-request-id
 *    <config_http_conn_man_headers_x-request-id>` header.
 *
 * 2. Request ID is a universally unique identifier `(UUID4)
 *    <https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)>`_.
 *
 * 3. Tracing decision (sampled, forced, etc) is set in 14th nibble of the UUID. By default this will
 *    overwrite existing UUIDs received in the ``x-request-id`` header if the trace sampling decision
 *    is changed. The 14th nibble of the UUID4 has been chosen because it is fixed to '4' by the
 *    standard. Thus, '4' indicates a default UUID and no trace status. This nibble is swapped to:
 *
 *      a. '9': Sampled.
 *      b. 'a': Force traced due to server-side override.
 *      c. 'b': Force traced due to client-side request ID joining.
 *
 *    See the :ref:`x-request-id <config_http_conn_man_headers_x-request-id>` documentation for
 *    more information.
 *
 * @generated from protobuf message envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig
 */
export interface UuidRequestIdConfig {
    /**
     * Whether the implementation alters the UUID to contain the trace sampling decision as per the
     * ``UuidRequestIdConfig`` message documentation. This defaults to true. If disabled no
     * modification to the UUID will be performed. It is important to note that if disabled,
     * stable sampling of traces, access logs, etc. will no longer work and only random sampling will
     * be possible.
     *
     * @generated from protobuf field: google.protobuf.BoolValue pack_trace_reason = 1;
     */
    packTraceReason?: BoolValue;
    /**
     * Set whether to use :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` for sampling or not.
     * This defaults to true. See the :ref:`context propagation <arch_overview_tracing_context_propagation>`
     * overview for more information.
     *
     * @generated from protobuf field: google.protobuf.BoolValue use_request_id_for_trace_sampling = 2;
     */
    useRequestIdForTraceSampling?: BoolValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class UuidRequestIdConfig$Type extends MessageType<UuidRequestIdConfig> {
    constructor() {
        super("envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig", [
            { no: 1, name: "pack_trace_reason", kind: "message", T: () => BoolValue },
            { no: 2, name: "use_request_id_for_trace_sampling", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<UuidRequestIdConfig>): UuidRequestIdConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UuidRequestIdConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UuidRequestIdConfig): UuidRequestIdConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.BoolValue pack_trace_reason */ 1:
                    message.packTraceReason = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.packTraceReason);
                    break;
                case /* google.protobuf.BoolValue use_request_id_for_trace_sampling */ 2:
                    message.useRequestIdForTraceSampling = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.useRequestIdForTraceSampling);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UuidRequestIdConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.BoolValue pack_trace_reason = 1; */
        if (message.packTraceReason)
            BoolValue.internalBinaryWrite(message.packTraceReason, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue use_request_id_for_trace_sampling = 2; */
        if (message.useRequestIdForTraceSampling)
            BoolValue.internalBinaryWrite(message.useRequestIdForTraceSampling, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig
 */
export const UuidRequestIdConfig = new UuidRequestIdConfig$Type();
