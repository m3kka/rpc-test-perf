// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/health_checkers/thrift/v3/thrift.proto" (package "envoy.extensions.health_checkers.thrift.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProtocolType } from "../../../filters/network/thrift_proxy/v3/thrift_proxy";
import { TransportType } from "../../../filters/network/thrift_proxy/v3/thrift_proxy";
// [#protodoc-title: Thrift]
// Thrift health checker :ref:`configuration overview <config_health_checkers_thrift>`.
// [#extension: envoy.health_checkers.thrift]

/**
 * @generated from protobuf message envoy.extensions.health_checkers.thrift.v3.Thrift
 */
export interface Thrift {
    /**
     * Specifies the method name that will be set on each health check request dispatched to an upstream host.
     * Note that method name is case sensitive.
     *
     * @generated from protobuf field: string method_name = 1;
     */
    methodName: string;
    /**
     * Configures the transport type to be used with the health checks. Note that
     * :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`
     * is not supported, and we don't honor :ref:`ThriftProtocolOptions<envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions>`
     * since it's possible to set to :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
     * [#extension-category: envoy.filters.network]
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 2;
     */
    transport: TransportType;
    /**
     * Configures the protocol type to be used with the health checks. Note that
     * :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
     * and :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>`
     * are not supported, and we don't honor :ref:`ThriftProtocolOptions<envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions>`
     * since it's possible to set to :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
     * or :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>`.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 3;
     */
    protocol: ProtocolType;
}
// @generated message type with reflection information, may provide speed optimized methods
class Thrift$Type extends MessageType<Thrift> {
    constructor() {
        super("envoy.extensions.health_checkers.thrift.v3.Thrift", [
            { no: 1, name: "method_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "transport", kind: "enum", T: () => ["envoy.extensions.filters.network.thrift_proxy.v3.TransportType", TransportType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "protocol", kind: "enum", T: () => ["envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType", ProtocolType], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<Thrift>): Thrift {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.methodName = "";
        message.transport = 0;
        message.protocol = 0;
        if (value !== undefined)
            reflectionMergePartial<Thrift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Thrift): Thrift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method_name */ 1:
                    message.methodName = reader.string();
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport */ 2:
                    message.transport = reader.int32();
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol */ 3:
                    message.protocol = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Thrift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method_name = 1; */
        if (message.methodName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.methodName);
        /* envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 2; */
        if (message.transport !== 0)
            writer.tag(2, WireType.Varint).int32(message.transport);
        /* envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 3; */
        if (message.protocol !== 0)
            writer.tag(3, WireType.Varint).int32(message.protocol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.health_checkers.thrift.v3.Thrift
 */
export const Thrift = new Thrift$Type();
