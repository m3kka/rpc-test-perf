// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/watchdog/profile_action/v3/profile_action.proto" (package "envoy.extensions.watchdog.profile_action.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../google/protobuf/duration";
// [#protodoc-title: Watchdog Action that does CPU profiling.]
// [#extension: envoy.watchdog.profile_action]

/**
 * Configuration for the profile watchdog action.
 *
 * @generated from protobuf message envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig
 */
export interface ProfileActionConfig {
    /**
     * How long the profile should last. If not set defaults to 5 seconds.
     *
     * @generated from protobuf field: google.protobuf.Duration profile_duration = 1;
     */
    profileDuration?: Duration;
    /**
     * File path to the directory to output profiles.
     *
     * @generated from protobuf field: string profile_path = 2;
     */
    profilePath: string;
    /**
     * Limits the max number of profiles that can be generated by this action
     * over its lifetime to avoid filling the disk.
     * If not set (i.e. it's 0), a default of 10 will be used.
     *
     * @generated from protobuf field: uint64 max_profiles = 3;
     */
    maxProfiles: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class ProfileActionConfig$Type extends MessageType<ProfileActionConfig> {
    constructor() {
        super("envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig", [
            { no: 1, name: "profile_duration", kind: "message", T: () => Duration },
            { no: 2, name: "profile_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "max_profiles", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileActionConfig>): ProfileActionConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.profilePath = "";
        message.maxProfiles = 0n;
        if (value !== undefined)
            reflectionMergePartial<ProfileActionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileActionConfig): ProfileActionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration profile_duration */ 1:
                    message.profileDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.profileDuration);
                    break;
                case /* string profile_path */ 2:
                    message.profilePath = reader.string();
                    break;
                case /* uint64 max_profiles */ 3:
                    message.maxProfiles = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileActionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration profile_duration = 1; */
        if (message.profileDuration)
            Duration.internalBinaryWrite(message.profileDuration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string profile_path = 2; */
        if (message.profilePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.profilePath);
        /* uint64 max_profiles = 3; */
        if (message.maxProfiles !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.maxProfiles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig
 */
export const ProfileActionConfig = new ProfileActionConfig$Type();
