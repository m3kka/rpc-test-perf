// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/quic/server_preferred_address/v3/fixed_server_preferred_address_config.proto" (package "envoy.extensions.quic.server_preferred_address.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: QUIC server preferred address config]
// [#extension: envoy.quic.server_preferred_address.fixed]

/**
 * Configuration for FixedServerPreferredAddressConfig.
 *
 * [#comment:TODO(danzh2010): discuss with API shepherds before removing WiP status.]
 *
 * @generated from protobuf message envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig
 */
export interface FixedServerPreferredAddressConfig {
    /**
     * @generated from protobuf oneof: ipv4_type
     */
    ipv4Type: {
        oneofKind: "ipv4Address";
        /**
         * String representation of IPv4 address, i.e. "127.0.0.2".
         * If not specified, none will be configured.
         *
         * @generated from protobuf field: string ipv4_address = 1;
         */
        ipv4Address: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: ipv6_type
     */
    ipv6Type: {
        oneofKind: "ipv6Address";
        /**
         * String representation of IPv6 address, i.e. "::1".
         * If not specified, none will be configured.
         *
         * @generated from protobuf field: string ipv6_address = 2;
         */
        ipv6Address: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class FixedServerPreferredAddressConfig$Type extends MessageType<FixedServerPreferredAddressConfig> {
    constructor() {
        super("envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig", [
            { no: 1, name: "ipv4_address", kind: "scalar", oneof: "ipv4Type", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ipv6_address", kind: "scalar", oneof: "ipv6Type", T: 9 /*ScalarType.STRING*/ }
        ], { "xds.annotations.v3.message_status": { workInProgress: true } });
    }
    create(value?: PartialMessage<FixedServerPreferredAddressConfig>): FixedServerPreferredAddressConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ipv4Type = { oneofKind: undefined };
        message.ipv6Type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FixedServerPreferredAddressConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedServerPreferredAddressConfig): FixedServerPreferredAddressConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ipv4_address */ 1:
                    message.ipv4Type = {
                        oneofKind: "ipv4Address",
                        ipv4Address: reader.string()
                    };
                    break;
                case /* string ipv6_address */ 2:
                    message.ipv6Type = {
                        oneofKind: "ipv6Address",
                        ipv6Address: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedServerPreferredAddressConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ipv4_address = 1; */
        if (message.ipv4Type.oneofKind === "ipv4Address")
            writer.tag(1, WireType.LengthDelimited).string(message.ipv4Type.ipv4Address);
        /* string ipv6_address = 2; */
        if (message.ipv6Type.oneofKind === "ipv6Address")
            writer.tag(2, WireType.LengthDelimited).string(message.ipv6Type.ipv6Address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig
 */
export const FixedServerPreferredAddressConfig = new FixedServerPreferredAddressConfig$Type();
