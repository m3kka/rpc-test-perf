// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/transport_sockets/http_11_proxy/v3/upstream_http_11_connect.proto" (package "envoy.extensions.transport_sockets.http_11_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TransportSocket } from "../../../../config/core/v3/base";
// [#protodoc-title: Upstream HTTP/1.1 Proxy]
// [#extension: envoy.transport_sockets.http_11_proxy]

/**
 * Configuration for HTTP/1.1 proxy transport sockets.
 * This is intended for use in Envoy Mobile, though may eventually be extended
 * for upstream Envoy use.
 * If this transport socket is configured, and an intermediate filter adds the
 * stream info necessary for proxying to the stream info (as the test filter
 * does :repo:`here <test/integration/filters/header_to_proxy_filter.cc>`) then
 *
 * * Upstream connections will be directed to the specified proxy address rather
 *   than the host's address
 * * Upstream TLS connections will have a raw HTTP/1.1 CONNECT header prefaced
 *   to the payload, and 200 response stripped (if less than 200 bytes)
 * * Plaintext HTTP/1.1 connections will be sent with a fully qualified URL.
 *
 * This transport socket is not compatible with HTTP/3, plaintext HTTP/2, or raw TCP.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport
 */
export interface Http11ProxyUpstreamTransport {
    /**
     * The underlying transport socket being wrapped.
     *
     * @generated from protobuf field: envoy.config.core.v3.TransportSocket transport_socket = 1;
     */
    transportSocket?: TransportSocket;
}
// @generated message type with reflection information, may provide speed optimized methods
class Http11ProxyUpstreamTransport$Type extends MessageType<Http11ProxyUpstreamTransport> {
    constructor() {
        super("envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport", [
            { no: 1, name: "transport_socket", kind: "message", T: () => TransportSocket, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Http11ProxyUpstreamTransport>): Http11ProxyUpstreamTransport {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Http11ProxyUpstreamTransport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http11ProxyUpstreamTransport): Http11ProxyUpstreamTransport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.TransportSocket transport_socket */ 1:
                    message.transportSocket = TransportSocket.internalBinaryRead(reader, reader.uint32(), options, message.transportSocket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http11ProxyUpstreamTransport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.TransportSocket transport_socket = 1; */
        if (message.transportSocket)
            TransportSocket.internalBinaryWrite(message.transportSocket, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport
 */
export const Http11ProxyUpstreamTransport = new Http11ProxyUpstreamTransport$Type();
