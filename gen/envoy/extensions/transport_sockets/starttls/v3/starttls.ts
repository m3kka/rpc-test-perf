// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/transport_sockets/starttls/v3/starttls.proto" (package "envoy.extensions.transport_sockets.starttls.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UpstreamTlsContext } from "../../tls/v3/tls";
import { DownstreamTlsContext } from "../../tls/v3/tls";
import { RawBuffer } from "../../raw_buffer/v3/raw_buffer";
// [#protodoc-title: StartTls]
// [#extension: envoy.transport_sockets.starttls]

// StartTls transport socket addresses situations when a protocol starts in clear-text and
// negotiates an in-band switch to TLS. StartTls transport socket is protocol agnostic. In the
// case of downstream StartTls a network filter is required which understands protocol exchange
// and a state machine to signal to the StartTls transport socket when a switch to TLS is
// required. Similarly, upstream StartTls requires the owner of an upstream transport socket to
// manage the state machine necessary to properly coordinate negotiation with the upstream and
// signal to the transport socket when a switch to secure transport is required.

/**
 * Configuration for a downstream StartTls transport socket.
 * StartTls transport socket wraps two sockets:
 * * raw_buffer socket which is used at the beginning of the session
 * * TLS socket used when a protocol negotiates a switch to encrypted traffic.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.starttls.v3.StartTlsConfig
 */
export interface StartTlsConfig {
    /**
     * (optional) Configuration for clear-text socket used at the beginning of the session.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config = 1;
     */
    cleartextSocketConfig?: RawBuffer;
    /**
     * Configuration for a downstream TLS socket.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext tls_socket_config = 2;
     */
    tlsSocketConfig?: DownstreamTlsContext;
}
/**
 * Configuration for an upstream StartTls transport socket.
 * StartTls transport socket wraps two sockets:
 * * raw_buffer socket which is used at the beginning of the session
 * * TLS socket used when a protocol negotiates a switch to encrypted traffic.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig
 */
export interface UpstreamStartTlsConfig {
    /**
     * (optional) Configuration for clear-text socket used at the beginning of the session.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config = 1;
     */
    cleartextSocketConfig?: RawBuffer;
    /**
     * Configuration for an upstream TLS socket.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext tls_socket_config = 2;
     */
    tlsSocketConfig?: UpstreamTlsContext;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartTlsConfig$Type extends MessageType<StartTlsConfig> {
    constructor() {
        super("envoy.extensions.transport_sockets.starttls.v3.StartTlsConfig", [
            { no: 1, name: "cleartext_socket_config", kind: "message", T: () => RawBuffer },
            { no: 2, name: "tls_socket_config", kind: "message", T: () => DownstreamTlsContext, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<StartTlsConfig>): StartTlsConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartTlsConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTlsConfig): StartTlsConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config */ 1:
                    message.cleartextSocketConfig = RawBuffer.internalBinaryRead(reader, reader.uint32(), options, message.cleartextSocketConfig);
                    break;
                case /* envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext tls_socket_config */ 2:
                    message.tlsSocketConfig = DownstreamTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.tlsSocketConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTlsConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config = 1; */
        if (message.cleartextSocketConfig)
            RawBuffer.internalBinaryWrite(message.cleartextSocketConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext tls_socket_config = 2; */
        if (message.tlsSocketConfig)
            DownstreamTlsContext.internalBinaryWrite(message.tlsSocketConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.starttls.v3.StartTlsConfig
 */
export const StartTlsConfig = new StartTlsConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpstreamStartTlsConfig$Type extends MessageType<UpstreamStartTlsConfig> {
    constructor() {
        super("envoy.extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig", [
            { no: 1, name: "cleartext_socket_config", kind: "message", T: () => RawBuffer },
            { no: 2, name: "tls_socket_config", kind: "message", T: () => UpstreamTlsContext, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<UpstreamStartTlsConfig>): UpstreamStartTlsConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpstreamStartTlsConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpstreamStartTlsConfig): UpstreamStartTlsConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config */ 1:
                    message.cleartextSocketConfig = RawBuffer.internalBinaryRead(reader, reader.uint32(), options, message.cleartextSocketConfig);
                    break;
                case /* envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext tls_socket_config */ 2:
                    message.tlsSocketConfig = UpstreamTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.tlsSocketConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpstreamStartTlsConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer cleartext_socket_config = 1; */
        if (message.cleartextSocketConfig)
            RawBuffer.internalBinaryWrite(message.cleartextSocketConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext tls_socket_config = 2; */
        if (message.tlsSocketConfig)
            UpstreamTlsContext.internalBinaryWrite(message.tlsSocketConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig
 */
export const UpstreamStartTlsConfig = new UpstreamStartTlsConfig$Type();
