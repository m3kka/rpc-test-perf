// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/transport_sockets/internal_upstream/v3/internal_upstream.proto" (package "envoy.extensions.transport_sockets.internal_upstream.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MetadataKind } from "../../../../type/metadata/v3/metadata";
import { TransportSocket } from "../../../../config/core/v3/base";
// [#protodoc-title: Internal Upstream]
// [#extension: envoy.transport_sockets.internal_upstream]

/**
 * Configuration for the internal upstream address. An internal address defines
 * a loopback user space socket residing in the same proxy instance. This
 * extension allows passing additional structured state across the user space
 * socket in addition to the regular byte stream. The purpose is to facilitate
 * communication between filters on the downstream and the upstream internal
 * connections. All filter state objects that are shared with the upstream
 * connection are also shared with the downstream internal connection using
 * this transport socket.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport
 */
export interface InternalUpstreamTransport {
    /**
     * Specifies the metadata namespaces and values to insert into the downstream
     * internal connection dynamic metadata when an internal address is used as a
     * host. If the destination name is repeated across two metadata source
     * locations, and both locations contain the metadata with the given name,
     * then the latter in the list overrides the former.
     *
     * @generated from protobuf field: repeated envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;
     */
    passthroughMetadata: InternalUpstreamTransport_MetadataValueSource[];
    /**
     * The underlying transport socket being wrapped.
     *
     * @generated from protobuf field: envoy.config.core.v3.TransportSocket transport_socket = 3;
     */
    transportSocket?: TransportSocket;
}
/**
 * Describes the location of the imported metadata value.
 * If the metadata with the given name is not present at the source location,
 * then no metadata is passed through for this particular instance.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource
 */
export interface InternalUpstreamTransport_MetadataValueSource {
    /**
     * Specifies what kind of metadata.
     *
     * @generated from protobuf field: envoy.type.metadata.v3.MetadataKind kind = 1;
     */
    kind?: MetadataKind;
    /**
     * Name is the filter namespace used in the dynamic metadata.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class InternalUpstreamTransport$Type extends MessageType<InternalUpstreamTransport> {
    constructor() {
        super("envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport", [
            { no: 1, name: "passthrough_metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InternalUpstreamTransport_MetadataValueSource },
            { no: 3, name: "transport_socket", kind: "message", T: () => TransportSocket, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<InternalUpstreamTransport>): InternalUpstreamTransport {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.passthroughMetadata = [];
        if (value !== undefined)
            reflectionMergePartial<InternalUpstreamTransport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InternalUpstreamTransport): InternalUpstreamTransport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata */ 1:
                    message.passthroughMetadata.push(InternalUpstreamTransport_MetadataValueSource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.core.v3.TransportSocket transport_socket */ 3:
                    message.transportSocket = TransportSocket.internalBinaryRead(reader, reader.uint32(), options, message.transportSocket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InternalUpstreamTransport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1; */
        for (let i = 0; i < message.passthroughMetadata.length; i++)
            InternalUpstreamTransport_MetadataValueSource.internalBinaryWrite(message.passthroughMetadata[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.TransportSocket transport_socket = 3; */
        if (message.transportSocket)
            TransportSocket.internalBinaryWrite(message.transportSocket, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport
 */
export const InternalUpstreamTransport = new InternalUpstreamTransport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InternalUpstreamTransport_MetadataValueSource$Type extends MessageType<InternalUpstreamTransport_MetadataValueSource> {
    constructor() {
        super("envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource", [
            { no: 1, name: "kind", kind: "message", T: () => MetadataKind, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<InternalUpstreamTransport_MetadataValueSource>): InternalUpstreamTransport_MetadataValueSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<InternalUpstreamTransport_MetadataValueSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InternalUpstreamTransport_MetadataValueSource): InternalUpstreamTransport_MetadataValueSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.metadata.v3.MetadataKind kind */ 1:
                    message.kind = MetadataKind.internalBinaryRead(reader, reader.uint32(), options, message.kind);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InternalUpstreamTransport_MetadataValueSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.metadata.v3.MetadataKind kind = 1; */
        if (message.kind)
            MetadataKind.internalBinaryWrite(message.kind, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource
 */
export const InternalUpstreamTransport_MetadataValueSource = new InternalUpstreamTransport_MetadataValueSource$Type();
