// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/transport_sockets/tls/v3/tls.proto (package envoy.extensions.transport_sockets.tls.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { CertificateProviderPluginInstance, CertificateValidationContext, TlsCertificate, TlsParameters, TlsSessionTicketKeys } from "./common_pb.js";
import { SdsSecretConfig } from "./secret_pb.js";
import { CidrRange } from "../../../../config/core/v3/address_pb.js";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension_pb.js";

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
 */
export const UpstreamTlsContext = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext",
  () => [
    { no: 1, name: "common_tls_context", kind: "message", T: CommonTlsContext },
    { no: 2, name: "sni", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allow_renegotiation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "max_session_keys", kind: "message", T: UInt32Value },
    { no: 5, name: "enforce_rsa_key_usage", kind: "message", T: BoolValue },
  ],
);

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
 */
export const DownstreamTlsContext = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext",
  () => [
    { no: 1, name: "common_tls_context", kind: "message", T: CommonTlsContext },
    { no: 2, name: "require_client_certificate", kind: "message", T: BoolValue },
    { no: 3, name: "require_sni", kind: "message", T: BoolValue },
    { no: 4, name: "session_ticket_keys", kind: "message", T: TlsSessionTicketKeys, oneof: "session_ticket_keys_type" },
    { no: 5, name: "session_ticket_keys_sds_secret_config", kind: "message", T: SdsSecretConfig, oneof: "session_ticket_keys_type" },
    { no: 7, name: "disable_stateless_session_resumption", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "session_ticket_keys_type" },
    { no: 6, name: "session_timeout", kind: "message", T: Duration },
    { no: 8, name: "ocsp_staple_policy", kind: "enum", T: proto3.getEnumType(DownstreamTlsContext_OcspStaplePolicy) },
    { no: 9, name: "full_scan_certs_on_sni_mismatch", kind: "message", T: BoolValue },
  ],
);

/**
 * @generated from enum envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext.OcspStaplePolicy
 */
export const DownstreamTlsContext_OcspStaplePolicy = proto3.makeEnum(
  "envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext.OcspStaplePolicy",
  [
    {no: 0, name: "LENIENT_STAPLING"},
    {no: 1, name: "STRICT_STAPLING"},
    {no: 2, name: "MUST_STAPLE"},
  ],
);

/**
 * TLS key log configuration.
 * The key log file format is "format used by NSS for its SSLKEYLOGFILE debugging output" (text taken from openssl man page)
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.TlsKeyLog
 */
export const TlsKeyLog = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.TlsKeyLog",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "local_address_range", kind: "message", T: CidrRange, repeated: true },
    { no: 3, name: "remote_address_range", kind: "message", T: CidrRange, repeated: true },
  ],
);

/**
 * TLS context shared by both client and server TLS contexts.
 * [#next-free-field: 16]
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.CommonTlsContext
 */
export const CommonTlsContext = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.CommonTlsContext",
  () => [
    { no: 1, name: "tls_params", kind: "message", T: TlsParameters },
    { no: 2, name: "tls_certificates", kind: "message", T: TlsCertificate, repeated: true },
    { no: 6, name: "tls_certificate_sds_secret_configs", kind: "message", T: SdsSecretConfig, repeated: true },
    { no: 14, name: "tls_certificate_provider_instance", kind: "message", T: CertificateProviderPluginInstance },
    { no: 9, name: "tls_certificate_certificate_provider", kind: "message", T: CommonTlsContext_CertificateProvider },
    { no: 11, name: "tls_certificate_certificate_provider_instance", kind: "message", T: CommonTlsContext_CertificateProviderInstance },
    { no: 3, name: "validation_context", kind: "message", T: CertificateValidationContext, oneof: "validation_context_type" },
    { no: 7, name: "validation_context_sds_secret_config", kind: "message", T: SdsSecretConfig, oneof: "validation_context_type" },
    { no: 8, name: "combined_validation_context", kind: "message", T: CommonTlsContext_CombinedCertificateValidationContext, oneof: "validation_context_type" },
    { no: 10, name: "validation_context_certificate_provider", kind: "message", T: CommonTlsContext_CertificateProvider, oneof: "validation_context_type" },
    { no: 12, name: "validation_context_certificate_provider_instance", kind: "message", T: CommonTlsContext_CertificateProviderInstance, oneof: "validation_context_type" },
    { no: 4, name: "alpn_protocols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "custom_handshaker", kind: "message", T: TypedExtensionConfig },
    { no: 15, name: "key_log", kind: "message", T: TlsKeyLog },
  ],
);

/**
 * Config for Certificate provider to get certificates. This provider should allow certificates to be
 * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
 *
 * DEPRECATED: This message is not currently used, but if we ever do need it, we will want to
 * move it out of CommonTlsContext and into common.proto, similar to the existing
 * CertificateProviderPluginInstance message.
 *
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider
 */
export const CommonTlsContext_CertificateProvider = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "typed_config", kind: "message", T: TypedExtensionConfig, oneof: "config" },
  ],
  {localName: "CommonTlsContext_CertificateProvider"},
);

/**
 * Similar to CertificateProvider above, but allows the provider instances to be configured on
 * the client side instead of being sent from the control plane.
 *
 * DEPRECATED: This message was moved outside of CommonTlsContext
 * and now lives in common.proto.
 *
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance
 */
export const CommonTlsContext_CertificateProviderInstance = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance",
  () => [
    { no: 1, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "certificate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "CommonTlsContext_CertificateProviderInstance"},
);

/**
 * @generated from message envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext
 */
export const CommonTlsContext_CombinedCertificateValidationContext = proto3.makeMessageType(
  "envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext",
  () => [
    { no: 1, name: "default_validation_context", kind: "message", T: CertificateValidationContext },
    { no: 2, name: "validation_context_sds_secret_config", kind: "message", T: SdsSecretConfig },
    { no: 3, name: "validation_context_certificate_provider", kind: "message", T: CommonTlsContext_CertificateProvider },
    { no: 4, name: "validation_context_certificate_provider_instance", kind: "message", T: CommonTlsContext_CertificateProviderInstance },
  ],
  {localName: "CommonTlsContext_CombinedCertificateValidationContext"},
);

