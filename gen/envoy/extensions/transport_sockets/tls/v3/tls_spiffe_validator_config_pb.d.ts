// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto (package envoy.extensions.transport_sockets.tls.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DataSource } from "../../../../config/core/v3/base_pb.js";

/**
 * Configuration specific to the `SPIFFE <https://github.com/spiffe/spiffe>`_ certificate validator.
 *
 * Example:
 *
 * .. validated-code-block:: yaml
 *   :type-name: envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext
 *
 *   custom_validator_config:
 *     name: envoy.tls.cert_validator.spiffe
 *     typed_config:
 *       "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
 *       trust_domains:
 *       - name: foo.com
 *         trust_bundle:
 *           filename: "foo.pem"
 *       - name: envoy.com
 *         trust_bundle:
 *           filename: "envoy.pem"
 *
 * In this example, a presented peer certificate whose SAN matches ``spiffe://foo.com/**`` is validated against
 * the "foo.pem" x.509 certificate. All the trust bundles are isolated from each other, so no trust domain can mint
 * a SVID belonging to another trust domain. That means, in this example, a SVID signed by ``envoy.com``'s CA with ``spiffe://foo.com/**``
 * SAN would be rejected since Envoy selects the trust bundle according to the presented SAN before validate the certificate.
 *
 * Note that SPIFFE validator inherits and uses the following options from :ref:`CertificateValidationContext <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.CertificateValidationContext>`.
 *
 * - :ref:`allow_expired_certificate <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.allow_expired_certificate>` to allow expired certificates.
 * - :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.
 *
 *
 * @generated from message envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
 */
export declare class SPIFFECertValidatorConfig extends Message<SPIFFECertValidatorConfig> {
  /**
   * This field specifies trust domains used for validating incoming X.509-SVID(s).
   *
   * @generated from field: repeated envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain trust_domains = 1;
   */
  trustDomains: SPIFFECertValidatorConfig_TrustDomain[];

  constructor(data?: PartialMessage<SPIFFECertValidatorConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SPIFFECertValidatorConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SPIFFECertValidatorConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SPIFFECertValidatorConfig;

  static equals(a: SPIFFECertValidatorConfig | PlainMessage<SPIFFECertValidatorConfig> | undefined, b: SPIFFECertValidatorConfig | PlainMessage<SPIFFECertValidatorConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain
 */
export declare class SPIFFECertValidatorConfig_TrustDomain extends Message<SPIFFECertValidatorConfig_TrustDomain> {
  /**
   * Name of the trust domain, ``example.com``, ``foo.bar.gov`` for example.
   * Note that this must *not* have "spiffe://" prefix.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Specify a data source holding x.509 trust bundle used for validating incoming SVID(s) in this trust domain.
   *
   * @generated from field: envoy.config.core.v3.DataSource trust_bundle = 2;
   */
  trustBundle?: DataSource;

  constructor(data?: PartialMessage<SPIFFECertValidatorConfig_TrustDomain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SPIFFECertValidatorConfig_TrustDomain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SPIFFECertValidatorConfig_TrustDomain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SPIFFECertValidatorConfig_TrustDomain;

  static equals(a: SPIFFECertValidatorConfig_TrustDomain | PlainMessage<SPIFFECertValidatorConfig_TrustDomain> | undefined, b: SPIFFECertValidatorConfig_TrustDomain | PlainMessage<SPIFFECertValidatorConfig_TrustDomain> | undefined): boolean;
}

