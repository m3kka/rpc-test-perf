// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/transport_sockets/quic/v3/quic_transport.proto" (package "envoy.extensions.transport_sockets.quic.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UpstreamTlsContext } from "../../tls/v3/tls";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
import { DownstreamTlsContext } from "../../tls/v3/tls";
// [#protodoc-title: quic transport]
// [#comment:#extension: envoy.transport_sockets.quic]

/**
 * Configuration for Downstream QUIC transport socket. This provides Google's implementation of Google QUIC and IETF QUIC to Envoy.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport
 */
export interface QuicDownstreamTransport {
    /**
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext downstream_tls_context = 1;
     */
    downstreamTlsContext?: DownstreamTlsContext;
    /**
     * If false, QUIC will tell TLS to reject any early data and to stop issuing 0-RTT credentials with resumption session tickets. This will prevent clients from sending 0-RTT requests.
     * Default to true.
     *
     * @generated from protobuf field: google.protobuf.BoolValue enable_early_data = 2;
     */
    enableEarlyData?: BoolValue;
}
/**
 * Configuration for Upstream QUIC transport socket. This provides Google's implementation of Google QUIC and IETF QUIC to Envoy.
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport
 */
export interface QuicUpstreamTransport {
    /**
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext upstream_tls_context = 1;
     */
    upstreamTlsContext?: UpstreamTlsContext;
}
// @generated message type with reflection information, may provide speed optimized methods
class QuicDownstreamTransport$Type extends MessageType<QuicDownstreamTransport> {
    constructor() {
        super("envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport", [
            { no: 1, name: "downstream_tls_context", kind: "message", T: () => DownstreamTlsContext, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "enable_early_data", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<QuicDownstreamTransport>): QuicDownstreamTransport {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QuicDownstreamTransport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuicDownstreamTransport): QuicDownstreamTransport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext downstream_tls_context */ 1:
                    message.downstreamTlsContext = DownstreamTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.downstreamTlsContext);
                    break;
                case /* google.protobuf.BoolValue enable_early_data */ 2:
                    message.enableEarlyData = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.enableEarlyData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuicDownstreamTransport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext downstream_tls_context = 1; */
        if (message.downstreamTlsContext)
            DownstreamTlsContext.internalBinaryWrite(message.downstreamTlsContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue enable_early_data = 2; */
        if (message.enableEarlyData)
            BoolValue.internalBinaryWrite(message.enableEarlyData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport
 */
export const QuicDownstreamTransport = new QuicDownstreamTransport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuicUpstreamTransport$Type extends MessageType<QuicUpstreamTransport> {
    constructor() {
        super("envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport", [
            { no: 1, name: "upstream_tls_context", kind: "message", T: () => UpstreamTlsContext, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<QuicUpstreamTransport>): QuicUpstreamTransport {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QuicUpstreamTransport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuicUpstreamTransport): QuicUpstreamTransport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext upstream_tls_context */ 1:
                    message.upstreamTlsContext = UpstreamTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.upstreamTlsContext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuicUpstreamTransport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext upstream_tls_context = 1; */
        if (message.upstreamTlsContext)
            UpstreamTlsContext.internalBinaryWrite(message.upstreamTlsContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport
 */
export const QuicUpstreamTransport = new QuicUpstreamTransport$Type();
