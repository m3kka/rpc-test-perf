// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/transport_sockets/alts/v3/alts.proto (package envoy.extensions.transport_sockets.alts.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Configuration for ALTS transport socket. This provides Google's ALTS protocol to Envoy.
 * Store the peer identity in dynamic metadata, namespace is "envoy.transport_socket.peer_information", key is "peer_identity".
 * https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security/
 *
 * @generated from message envoy.extensions.transport_sockets.alts.v3.Alts
 */
export declare class Alts extends Message<Alts> {
  /**
   * The location of a handshaker service, this is usually 169.254.169.254:8080
   * on GCE.
   *
   * @generated from field: string handshaker_service = 1;
   */
  handshakerService: string;

  /**
   * The acceptable service accounts from peer, peers not in the list will be rejected in the
   * handshake validation step. If empty, no validation will be performed.
   *
   * @generated from field: repeated string peer_service_accounts = 2;
   */
  peerServiceAccounts: string[];

  constructor(data?: PartialMessage<Alts>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.transport_sockets.alts.v3.Alts";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alts;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alts;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alts;

  static equals(a: Alts | PlainMessage<Alts> | undefined, b: Alts | PlainMessage<Alts> | undefined): boolean;
}

