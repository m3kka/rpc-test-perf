// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/transport_sockets/s2a/v3/s2a.proto" (package "envoy.extensions.transport_sockets.s2a.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * [#not-implemented-hide:]
 * Configuration for S2A transport socket. This allows Envoy clients to
 * configure how to offload mTLS handshakes to the S2A service.
 * https://github.com/google/s2a-go#readme
 *
 * @generated from protobuf message envoy.extensions.transport_sockets.s2a.v3.S2AConfiguration
 */
export interface S2AConfiguration {
    /**
     * The address of the S2A. This can be an IP address or a hostname,
     * followed by a port number.
     *
     * @generated from protobuf field: string s2a_address = 1 [json_name = "s2aAddress"];
     */
    s2AAddress: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class S2AConfiguration$Type extends MessageType<S2AConfiguration> {
    constructor() {
        super("envoy.extensions.transport_sockets.s2a.v3.S2AConfiguration", [
            { no: 1, name: "s2a_address", kind: "scalar", jsonName: "s2aAddress", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<S2AConfiguration>): S2AConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.s2AAddress = "";
        if (value !== undefined)
            reflectionMergePartial<S2AConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: S2AConfiguration): S2AConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string s2a_address = 1 [json_name = "s2aAddress"];*/ 1:
                    message.s2AAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: S2AConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string s2a_address = 1 [json_name = "s2aAddress"]; */
        if (message.s2AAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.s2AAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.transport_sockets.s2a.v3.S2AConfiguration
 */
export const S2AConfiguration = new S2AConfiguration$Type();
