// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/common/ratelimit/v3/ratelimit.proto" (package "envoy.extensions.common.ratelimit.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TokenBucket } from "../../../../type/v3/token_bucket";
import { RateLimitUnit } from "../../../../type/v3/ratelimit_unit";
/**
 * A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
 * determine the final rate limit key and overall allowed limit. Here are some examples of how
 * they might be used for the domain "envoy".
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
 * configuration supplies a default limit for the *remote_address* key. If there is a desire to
 * raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
 * configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"]
 *
 * What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
 * configured that way in the service).
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
 * Like (1) we can raise/block specific IP addresses if we want with an override configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"]
 *
 * What it does: Limits all traffic for an authenticated client "foo"
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]
 *
 * What it does: Limits traffic to a specific path for an authenticated client "foo"
 *
 * The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
 * This enables building complex application scenarios with a generic backend.
 *
 * Optionally the descriptor can contain a limit override under a "limit" key, that specifies
 * the number of requests per unit to use instead of the number configured in the
 * rate limiting service.
 *
 * @generated from protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor
 */
export interface RateLimitDescriptor {
    /**
     * Descriptor entries.
     *
     * @generated from protobuf field: repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;
     */
    entries: RateLimitDescriptor_Entry[];
    /**
     * Optional rate limit override to supply to the ratelimit service.
     *
     * @generated from protobuf field: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride limit = 2;
     */
    limit?: RateLimitDescriptor_RateLimitOverride;
}
/**
 * @generated from protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
 */
export interface RateLimitDescriptor_Entry {
    /**
     * Descriptor key.
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * Descriptor value.
     *
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * Override rate limit to apply to this descriptor instead of the limit
 * configured in the rate limit service. See :ref:`rate limit override
 * <config_http_filters_rate_limit_rate_limit_override>` for more information.
 *
 * @generated from protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
 */
export interface RateLimitDescriptor_RateLimitOverride {
    /**
     * The number of requests per unit of time.
     *
     * @generated from protobuf field: uint32 requests_per_unit = 1;
     */
    requestsPerUnit: number;
    /**
     * The unit of time.
     *
     * @generated from protobuf field: envoy.type.v3.RateLimitUnit unit = 2;
     */
    unit: RateLimitUnit;
}
/**
 * @generated from protobuf message envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor
 */
export interface LocalRateLimitDescriptor {
    /**
     * Descriptor entries.
     *
     * @generated from protobuf field: repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;
     */
    entries: RateLimitDescriptor_Entry[];
    /**
     * Token Bucket algorithm for local ratelimiting.
     *
     * @generated from protobuf field: envoy.type.v3.TokenBucket token_bucket = 2;
     */
    tokenBucket?: TokenBucket;
}
// [#protodoc-title: Common rate limit components]

/**
 * Defines the version of the standard to use for X-RateLimit headers.
 *
 * @generated from protobuf enum envoy.extensions.common.ratelimit.v3.XRateLimitHeadersRFCVersion
 */
export enum XRateLimitHeadersRFCVersion {
    /**
     * X-RateLimit headers disabled.
     *
     * @generated from protobuf enum value: OFF = 0;
     */
    OFF = 0,
    /**
     * Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_ where 3 headers will be added:
     *
     * * ``X-RateLimit-Limit`` - indicates the request-quota associated to the
     *   client in the current time-window followed by the description of the
     *   quota policy. The value is returned by the maximum tokens of the token bucket.
     * * ``X-RateLimit-Remaining`` - indicates the remaining requests in the
     *   current time-window. The value is returned by the remaining tokens in the token bucket.
     * * ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
     *   the current time-window. The value is returned by the remaining fill interval of the token bucket.
     *
     * @generated from protobuf enum value: DRAFT_VERSION_03 = 1;
     */
    DRAFT_VERSION_03 = 1
}
/**
 * @generated from protobuf enum envoy.extensions.common.ratelimit.v3.VhRateLimitsOptions
 */
export enum VhRateLimitsOptions {
    /**
     * Use the virtual host rate limits unless the route has a rate limit policy.
     *
     * @generated from protobuf enum value: OVERRIDE = 0;
     */
    OVERRIDE = 0,
    /**
     * Use the virtual host rate limits even if the route has a rate limit policy.
     *
     * @generated from protobuf enum value: INCLUDE = 1;
     */
    INCLUDE = 1,
    /**
     * Ignore the virtual host rate limits even if the route does not have a rate limit policy.
     *
     * @generated from protobuf enum value: IGNORE = 2;
     */
    IGNORE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitDescriptor$Type extends MessageType<RateLimitDescriptor> {
    constructor() {
        super("envoy.extensions.common.ratelimit.v3.RateLimitDescriptor", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RateLimitDescriptor_Entry, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "limit", kind: "message", T: () => RateLimitDescriptor_RateLimitOverride }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ratelimit.RateLimitDescriptor" } });
    }
    create(value?: PartialMessage<RateLimitDescriptor>): RateLimitDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<RateLimitDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitDescriptor): RateLimitDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries */ 1:
                    message.entries.push(RateLimitDescriptor_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride limit */ 2:
                    message.limit = RateLimitDescriptor_RateLimitOverride.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimitDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            RateLimitDescriptor_Entry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride limit = 2; */
        if (message.limit)
            RateLimitDescriptor_RateLimitOverride.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor
 */
export const RateLimitDescriptor = new RateLimitDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitDescriptor_Entry$Type extends MessageType<RateLimitDescriptor_Entry> {
    constructor() {
        super("envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ratelimit.RateLimitDescriptor.Entry" } });
    }
    create(value?: PartialMessage<RateLimitDescriptor_Entry>): RateLimitDescriptor_Entry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<RateLimitDescriptor_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitDescriptor_Entry): RateLimitDescriptor_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimitDescriptor_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
 */
export const RateLimitDescriptor_Entry = new RateLimitDescriptor_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitDescriptor_RateLimitOverride$Type extends MessageType<RateLimitDescriptor_RateLimitOverride> {
    constructor() {
        super("envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride", [
            { no: 1, name: "requests_per_unit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unit", kind: "enum", T: () => ["envoy.type.v3.RateLimitUnit", RateLimitUnit], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<RateLimitDescriptor_RateLimitOverride>): RateLimitDescriptor_RateLimitOverride {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestsPerUnit = 0;
        message.unit = 0;
        if (value !== undefined)
            reflectionMergePartial<RateLimitDescriptor_RateLimitOverride>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitDescriptor_RateLimitOverride): RateLimitDescriptor_RateLimitOverride {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 requests_per_unit */ 1:
                    message.requestsPerUnit = reader.uint32();
                    break;
                case /* envoy.type.v3.RateLimitUnit unit */ 2:
                    message.unit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimitDescriptor_RateLimitOverride, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 requests_per_unit = 1; */
        if (message.requestsPerUnit !== 0)
            writer.tag(1, WireType.Varint).uint32(message.requestsPerUnit);
        /* envoy.type.v3.RateLimitUnit unit = 2; */
        if (message.unit !== 0)
            writer.tag(2, WireType.Varint).int32(message.unit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
 */
export const RateLimitDescriptor_RateLimitOverride = new RateLimitDescriptor_RateLimitOverride$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocalRateLimitDescriptor$Type extends MessageType<LocalRateLimitDescriptor> {
    constructor() {
        super("envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RateLimitDescriptor_Entry, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "token_bucket", kind: "message", T: () => TokenBucket, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<LocalRateLimitDescriptor>): LocalRateLimitDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<LocalRateLimitDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocalRateLimitDescriptor): LocalRateLimitDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries */ 1:
                    message.entries.push(RateLimitDescriptor_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.type.v3.TokenBucket token_bucket */ 2:
                    message.tokenBucket = TokenBucket.internalBinaryRead(reader, reader.uint32(), options, message.tokenBucket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocalRateLimitDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            RateLimitDescriptor_Entry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.v3.TokenBucket token_bucket = 2; */
        if (message.tokenBucket)
            TokenBucket.internalBinaryWrite(message.tokenBucket, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor
 */
export const LocalRateLimitDescriptor = new LocalRateLimitDescriptor$Type();
