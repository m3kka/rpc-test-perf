// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/common/ratelimit/v3/ratelimit.proto (package envoy.extensions.common.ratelimit.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RateLimitUnit } from "../../../../type/v3/ratelimit_unit_pb.js";
import type { TokenBucket } from "../../../../type/v3/token_bucket_pb.js";

/**
 * Defines the version of the standard to use for X-RateLimit headers.
 *
 * @generated from enum envoy.extensions.common.ratelimit.v3.XRateLimitHeadersRFCVersion
 */
export declare enum XRateLimitHeadersRFCVersion {
  /**
   * X-RateLimit headers disabled.
   *
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_ where 3 headers will be added:
   *
   * * ``X-RateLimit-Limit`` - indicates the request-quota associated to the
   *   client in the current time-window followed by the description of the
   *   quota policy. The value is returned by the maximum tokens of the token bucket.
   * * ``X-RateLimit-Remaining`` - indicates the remaining requests in the
   *   current time-window. The value is returned by the remaining tokens in the token bucket.
   * * ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
   *   the current time-window. The value is returned by the remaining fill interval of the token bucket.
   *
   * @generated from enum value: DRAFT_VERSION_03 = 1;
   */
  DRAFT_VERSION_03 = 1,
}

/**
 * @generated from enum envoy.extensions.common.ratelimit.v3.VhRateLimitsOptions
 */
export declare enum VhRateLimitsOptions {
  /**
   * Use the virtual host rate limits unless the route has a rate limit policy.
   *
   * @generated from enum value: OVERRIDE = 0;
   */
  OVERRIDE = 0,

  /**
   * Use the virtual host rate limits even if the route has a rate limit policy.
   *
   * @generated from enum value: INCLUDE = 1;
   */
  INCLUDE = 1,

  /**
   * Ignore the virtual host rate limits even if the route does not have a rate limit policy.
   *
   * @generated from enum value: IGNORE = 2;
   */
  IGNORE = 2,
}

/**
 * A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
 * determine the final rate limit key and overall allowed limit. Here are some examples of how
 * they might be used for the domain "envoy".
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
 * configuration supplies a default limit for the *remote_address* key. If there is a desire to
 * raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
 * configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"]
 *
 * What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
 * configured that way in the service).
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
 * Like (1) we can raise/block specific IP addresses if we want with an override configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"]
 *
 * What it does: Limits all traffic for an authenticated client "foo"
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]
 *
 * What it does: Limits traffic to a specific path for an authenticated client "foo"
 *
 * The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
 * This enables building complex application scenarios with a generic backend.
 *
 * Optionally the descriptor can contain a limit override under a "limit" key, that specifies
 * the number of requests per unit to use instead of the number configured in the
 * rate limiting service.
 *
 * @generated from message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor
 */
export declare class RateLimitDescriptor extends Message<RateLimitDescriptor> {
  /**
   * Descriptor entries.
   *
   * @generated from field: repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;
   */
  entries: RateLimitDescriptor_Entry[];

  /**
   * Optional rate limit override to supply to the ratelimit service.
   *
   * @generated from field: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride limit = 2;
   */
  limit?: RateLimitDescriptor_RateLimitOverride;

  constructor(data?: PartialMessage<RateLimitDescriptor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitDescriptor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitDescriptor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitDescriptor;

  static equals(a: RateLimitDescriptor | PlainMessage<RateLimitDescriptor> | undefined, b: RateLimitDescriptor | PlainMessage<RateLimitDescriptor> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
 */
export declare class RateLimitDescriptor_Entry extends Message<RateLimitDescriptor_Entry> {
  /**
   * Descriptor key.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Descriptor value.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<RateLimitDescriptor_Entry>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitDescriptor_Entry;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitDescriptor_Entry;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitDescriptor_Entry;

  static equals(a: RateLimitDescriptor_Entry | PlainMessage<RateLimitDescriptor_Entry> | undefined, b: RateLimitDescriptor_Entry | PlainMessage<RateLimitDescriptor_Entry> | undefined): boolean;
}

/**
 * Override rate limit to apply to this descriptor instead of the limit
 * configured in the rate limit service. See :ref:`rate limit override
 * <config_http_filters_rate_limit_rate_limit_override>` for more information.
 *
 * @generated from message envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
 */
export declare class RateLimitDescriptor_RateLimitOverride extends Message<RateLimitDescriptor_RateLimitOverride> {
  /**
   * The number of requests per unit of time.
   *
   * @generated from field: uint32 requests_per_unit = 1;
   */
  requestsPerUnit: number;

  /**
   * The unit of time.
   *
   * @generated from field: envoy.type.v3.RateLimitUnit unit = 2;
   */
  unit: RateLimitUnit;

  constructor(data?: PartialMessage<RateLimitDescriptor_RateLimitOverride>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitDescriptor_RateLimitOverride;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitDescriptor_RateLimitOverride;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitDescriptor_RateLimitOverride;

  static equals(a: RateLimitDescriptor_RateLimitOverride | PlainMessage<RateLimitDescriptor_RateLimitOverride> | undefined, b: RateLimitDescriptor_RateLimitOverride | PlainMessage<RateLimitDescriptor_RateLimitOverride> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor
 */
export declare class LocalRateLimitDescriptor extends Message<LocalRateLimitDescriptor> {
  /**
   * Descriptor entries.
   *
   * @generated from field: repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;
   */
  entries: RateLimitDescriptor_Entry[];

  /**
   * Token Bucket algorithm for local ratelimiting.
   *
   * @generated from field: envoy.type.v3.TokenBucket token_bucket = 2;
   */
  tokenBucket?: TokenBucket;

  constructor(data?: PartialMessage<LocalRateLimitDescriptor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalRateLimitDescriptor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalRateLimitDescriptor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalRateLimitDescriptor;

  static equals(a: LocalRateLimitDescriptor | PlainMessage<LocalRateLimitDescriptor> | undefined, b: LocalRateLimitDescriptor | PlainMessage<LocalRateLimitDescriptor> | undefined): boolean;
}

