// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/common/async_files/v3/async_file_manager.proto" (package "envoy.extensions.common.async_files.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: AsyncFileManager configuration]

/**
 * Configuration to instantiate or select a singleton ``AsyncFileManager``.
 *
 * @generated from protobuf message envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
 */
export interface AsyncFileManagerConfig {
    /**
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     *
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: manager_type
     */
    managerType: {
        oneofKind: "threadPool";
        /**
         * Configuration for a thread-pool based async file manager.
         *
         * @generated from protobuf field: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;
         */
        threadPool: AsyncFileManagerConfig_ThreadPool;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool
 */
export interface AsyncFileManagerConfig_ThreadPool {
    /**
     * The number of threads to use. If unset or zero, will default to the number
     * of concurrent threads the hardware supports. This default is subject to
     * change if performance analysis suggests it.
     *
     * @generated from protobuf field: uint32 thread_count = 1;
     */
    threadCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class AsyncFileManagerConfig$Type extends MessageType<AsyncFileManagerConfig> {
    constructor() {
        super("envoy.extensions.common.async_files.v3.AsyncFileManagerConfig", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "thread_pool", kind: "message", oneof: "managerType", T: () => AsyncFileManagerConfig_ThreadPool }
        ]);
    }
    create(value?: PartialMessage<AsyncFileManagerConfig>): AsyncFileManagerConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.managerType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<AsyncFileManagerConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncFileManagerConfig): AsyncFileManagerConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool */ 2:
                    message.managerType = {
                        oneofKind: "threadPool",
                        threadPool: AsyncFileManagerConfig_ThreadPool.internalBinaryRead(reader, reader.uint32(), options, (message.managerType as any).threadPool)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsyncFileManagerConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2; */
        if (message.managerType.oneofKind === "threadPool")
            AsyncFileManagerConfig_ThreadPool.internalBinaryWrite(message.managerType.threadPool, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
 */
export const AsyncFileManagerConfig = new AsyncFileManagerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsyncFileManagerConfig_ThreadPool$Type extends MessageType<AsyncFileManagerConfig_ThreadPool> {
    constructor() {
        super("envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool", [
            { no: 1, name: "thread_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 1024 } } } }
        ]);
    }
    create(value?: PartialMessage<AsyncFileManagerConfig_ThreadPool>): AsyncFileManagerConfig_ThreadPool {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.threadCount = 0;
        if (value !== undefined)
            reflectionMergePartial<AsyncFileManagerConfig_ThreadPool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncFileManagerConfig_ThreadPool): AsyncFileManagerConfig_ThreadPool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 thread_count */ 1:
                    message.threadCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsyncFileManagerConfig_ThreadPool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 thread_count = 1; */
        if (message.threadCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.threadCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool
 */
export const AsyncFileManagerConfig_ThreadPool = new AsyncFileManagerConfig_ThreadPool$Type();
