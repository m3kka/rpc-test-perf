// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/common/matching/v3/extension_matcher.proto (package envoy.extensions.common.matching.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Matcher } from "../../../../config/common/matcher/v3/matcher_pb.js";
import { Matcher as Matcher$1 } from "../../../../../xds/type/matcher/v3/matcher_pb.js";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension_pb.js";

/**
 * Wrapper around an existing extension that provides an associated matcher. This allows
 * decorating an existing extension with a matcher, which can be used to match against
 * relevant protocol data.
 *
 * @generated from message envoy.extensions.common.matching.v3.ExtensionWithMatcher
 */
export const ExtensionWithMatcher = proto3.makeMessageType(
  "envoy.extensions.common.matching.v3.ExtensionWithMatcher",
  () => [
    { no: 1, name: "matcher", kind: "message", T: Matcher },
    { no: 3, name: "xds_matcher", kind: "message", T: Matcher$1 },
    { no: 2, name: "extension_config", kind: "message", T: TypedExtensionConfig },
  ],
);

/**
 * Extra settings on a per virtualhost/route/weighted-cluster level.
 *
 * @generated from message envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute
 */
export const ExtensionWithMatcherPerRoute = proto3.makeMessageType(
  "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute",
  () => [
    { no: 1, name: "xds_matcher", kind: "message", T: Matcher$1 },
  ],
);

