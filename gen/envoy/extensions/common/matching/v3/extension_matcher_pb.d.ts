// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/common/matching/v3/extension_matcher.proto (package envoy.extensions.common.matching.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Matcher } from "../../../../config/common/matcher/v3/matcher_pb.js";
import type { Matcher as Matcher$1 } from "../../../../../xds/type/matcher/v3/matcher_pb.js";
import type { TypedExtensionConfig } from "../../../../config/core/v3/extension_pb.js";

/**
 * Wrapper around an existing extension that provides an associated matcher. This allows
 * decorating an existing extension with a matcher, which can be used to match against
 * relevant protocol data.
 *
 * @generated from message envoy.extensions.common.matching.v3.ExtensionWithMatcher
 */
export declare class ExtensionWithMatcher extends Message<ExtensionWithMatcher> {
  /**
   * The associated matcher. This is deprecated in favor of xds_matcher.
   *
   * @generated from field: envoy.config.common.matcher.v3.Matcher matcher = 1 [deprecated = true];
   * @deprecated
   */
  matcher?: Matcher;

  /**
   * The associated matcher.
   *
   * @generated from field: xds.type.matcher.v3.Matcher xds_matcher = 3;
   */
  xdsMatcher?: Matcher$1;

  /**
   * The underlying extension config.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig extension_config = 2;
   */
  extensionConfig?: TypedExtensionConfig;

  constructor(data?: PartialMessage<ExtensionWithMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.matching.v3.ExtensionWithMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionWithMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionWithMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionWithMatcher;

  static equals(a: ExtensionWithMatcher | PlainMessage<ExtensionWithMatcher> | undefined, b: ExtensionWithMatcher | PlainMessage<ExtensionWithMatcher> | undefined): boolean;
}

/**
 * Extra settings on a per virtualhost/route/weighted-cluster level.
 *
 * @generated from message envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute
 */
export declare class ExtensionWithMatcherPerRoute extends Message<ExtensionWithMatcherPerRoute> {
  /**
   * Matcher override.
   *
   * @generated from field: xds.type.matcher.v3.Matcher xds_matcher = 1;
   */
  xdsMatcher?: Matcher$1;

  constructor(data?: PartialMessage<ExtensionWithMatcherPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionWithMatcherPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionWithMatcherPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionWithMatcherPerRoute;

  static equals(a: ExtensionWithMatcherPerRoute | PlainMessage<ExtensionWithMatcherPerRoute> | undefined, b: ExtensionWithMatcherPerRoute | PlainMessage<ExtensionWithMatcherPerRoute> | undefined): boolean;
}

