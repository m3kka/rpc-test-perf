// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto (package envoy.extensions.common.dynamic_forward_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Cluster_DnsLookupFamily, Cluster_RefreshRate } from "../../../../config/cluster/v3/cluster_pb.js";
import type { DnsResolutionConfig } from "../../../../config/core/v3/resolver_pb.js";
import type { TypedExtensionConfig } from "../../../../config/core/v3/extension_pb.js";
import type { SocketAddress } from "../../../../config/core/v3/address_pb.js";
import type { KeyValueStoreConfig } from "../../../../config/common/key_value/v3/config_pb.js";

/**
 * Configuration of circuit breakers for resolver.
 *
 * @generated from message envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers
 */
export declare class DnsCacheCircuitBreakers extends Message<DnsCacheCircuitBreakers> {
  /**
   * The maximum number of pending requests that Envoy will allow to the
   * resolver. If not specified, the default is 1024.
   *
   * @generated from field: google.protobuf.UInt32Value max_pending_requests = 1;
   */
  maxPendingRequests?: number;

  constructor(data?: PartialMessage<DnsCacheCircuitBreakers>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsCacheCircuitBreakers;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsCacheCircuitBreakers;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsCacheCircuitBreakers;

  static equals(a: DnsCacheCircuitBreakers | PlainMessage<DnsCacheCircuitBreakers> | undefined, b: DnsCacheCircuitBreakers | PlainMessage<DnsCacheCircuitBreakers> | undefined): boolean;
}

/**
 * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#next-free-field: 15]
 *
 * @generated from message envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig
 */
export declare class DnsCacheConfig extends Message<DnsCacheConfig> {
  /**
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The DNS lookup family to use during resolution.
   *
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   *
   * @generated from field: envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2;
   */
  dnsLookupFamily: Cluster_DnsLookupFamily;

  /**
   * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
   *
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   *
   * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
   * at a minimum of ``dns_min_refresh_rate``.
   *
   * @generated from field: google.protobuf.Duration dns_refresh_rate = 3;
   */
  dnsRefreshRate?: Duration;

  /**
   * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
   * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
   * ``dns_min_refresh_rate`` defaults to 5s and must also be >= 5s.
   *
   * @generated from field: google.protobuf.Duration dns_min_refresh_rate = 14;
   */
  dnsMinRefreshRate?: Duration;

  /**
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   *
   * .. note:
   *
   *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *
   *  .. note:
   *
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   *
   * @generated from field: google.protobuf.Duration host_ttl = 4;
   */
  hostTtl?: Duration;

  /**
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   *
   * .. note:
   *
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   *
   * @generated from field: google.protobuf.UInt32Value max_hosts = 5;
   */
  maxHosts?: number;

  /**
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   *
   * @generated from field: envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;
   */
  dnsFailureRefreshRate?: Cluster_RefreshRate;

  /**
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
   *
   * @generated from field: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;
   */
  dnsCacheCircuitBreaker?: DnsCacheCircuitBreakers;

  /**
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * This field is deprecated in favor of ``dns_resolution_config``
   * which aggregates all of the DNS resolver configuration in a single message.
   *
   * @generated from field: bool use_tcp_for_dns_lookups = 8 [deprecated = true];
   * @deprecated
   */
  useTcpForDnsLookups: boolean;

  /**
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config>`.
   *
   * @generated from field: envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true];
   * @deprecated
   */
  dnsResolutionConfig?: DnsResolutionConfig;

  /**
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig <envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig>`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config>`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;
   */
  typedDnsResolverConfig?: TypedExtensionConfig;

  /**
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   *
   * @generated from field: repeated envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;
   */
  preresolveHostnames: SocketAddress[];

  /**
   * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
   * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
   * Setting this timeout will ensure that queries succeed or fail within the specified time frame
   * and are then retried using the standard refresh rates. Defaults to 5s if not set.
   *
   * @generated from field: google.protobuf.Duration dns_query_timeout = 11;
   */
  dnsQueryTimeout?: Duration;

  /**
   * Configuration to flush the DNS cache to long term storage.
   *
   * @generated from field: envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;
   */
  keyValueConfig?: KeyValueStoreConfig;

  constructor(data?: PartialMessage<DnsCacheConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsCacheConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsCacheConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsCacheConfig;

  static equals(a: DnsCacheConfig | PlainMessage<DnsCacheConfig> | undefined, b: DnsCacheConfig | PlainMessage<DnsCacheConfig> | undefined): boolean;
}

