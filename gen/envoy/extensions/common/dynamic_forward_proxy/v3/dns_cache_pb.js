// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto (package envoy.extensions.common.dynamic_forward_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { Cluster_DnsLookupFamily, Cluster_RefreshRate } from "../../../../config/cluster/v3/cluster_pb.js";
import { DnsResolutionConfig } from "../../../../config/core/v3/resolver_pb.js";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension_pb.js";
import { SocketAddress } from "../../../../config/core/v3/address_pb.js";
import { KeyValueStoreConfig } from "../../../../config/common/key_value/v3/config_pb.js";

/**
 * Configuration of circuit breakers for resolver.
 *
 * @generated from message envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers
 */
export const DnsCacheCircuitBreakers = proto3.makeMessageType(
  "envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers",
  () => [
    { no: 1, name: "max_pending_requests", kind: "message", T: UInt32Value },
  ],
);

/**
 * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#next-free-field: 15]
 *
 * @generated from message envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig
 */
export const DnsCacheConfig = proto3.makeMessageType(
  "envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dns_lookup_family", kind: "enum", T: proto3.getEnumType(Cluster_DnsLookupFamily) },
    { no: 3, name: "dns_refresh_rate", kind: "message", T: Duration },
    { no: 14, name: "dns_min_refresh_rate", kind: "message", T: Duration },
    { no: 4, name: "host_ttl", kind: "message", T: Duration },
    { no: 5, name: "max_hosts", kind: "message", T: UInt32Value },
    { no: 6, name: "dns_failure_refresh_rate", kind: "message", T: Cluster_RefreshRate },
    { no: 7, name: "dns_cache_circuit_breaker", kind: "message", T: DnsCacheCircuitBreakers },
    { no: 8, name: "use_tcp_for_dns_lookups", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "dns_resolution_config", kind: "message", T: DnsResolutionConfig },
    { no: 12, name: "typed_dns_resolver_config", kind: "message", T: TypedExtensionConfig },
    { no: 10, name: "preresolve_hostnames", kind: "message", T: SocketAddress, repeated: true },
    { no: 11, name: "dns_query_timeout", kind: "message", T: Duration },
    { no: 13, name: "key_value_config", kind: "message", T: KeyValueStoreConfig },
  ],
);

