// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto (package envoy.extensions.filters.http.header_to_metadata.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RegexMatchAndSubstitute } from "../../../../../type/matcher/v3/regex_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.header_to_metadata.v3.Config
 */
export declare class Config extends Message<Config> {
  /**
   * The list of rules to apply to requests.
   *
   * @generated from field: repeated envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule request_rules = 1;
   */
  requestRules: Config_Rule[];

  /**
   * The list of rules to apply to responses.
   *
   * @generated from field: repeated envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule response_rules = 2;
   */
  responseRules: Config_Rule[];

  constructor(data?: PartialMessage<Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_to_metadata.v3.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config;

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean;
}

/**
 * @generated from enum envoy.extensions.filters.http.header_to_metadata.v3.Config.ValueType
 */
export declare enum Config_ValueType {
  /**
   * @generated from enum value: STRING = 0;
   */
  STRING = 0,

  /**
   * @generated from enum value: NUMBER = 1;
   */
  NUMBER = 1,

  /**
   * The value is a serialized `protobuf.Value
   * <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
   *
   * @generated from enum value: PROTOBUF_VALUE = 2;
   */
  PROTOBUF_VALUE = 2,
}

/**
 * ValueEncode defines the encoding algorithm.
 *
 * @generated from enum envoy.extensions.filters.http.header_to_metadata.v3.Config.ValueEncode
 */
export declare enum Config_ValueEncode {
  /**
   * The value is not encoded.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
   * Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
   * non-ASCII characters in the header.
   *
   * @generated from enum value: BASE64 = 1;
   */
  BASE64 = 1,
}

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair
 */
export declare class Config_KeyValuePair extends Message<Config_KeyValuePair> {
  /**
   * The namespace — if this is empty, the filter's namespace will be used.
   *
   * @generated from field: string metadata_namespace = 1;
   */
  metadataNamespace: string;

  /**
   * The key to use within the namespace.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * The value to pair with the given key.
   *
   * When used for a
   * :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`
   * case, if value is non-empty it'll be used instead of the header value. If both are empty, no metadata is added.
   *
   * When used for a :ref:`on_header_missing <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing>`
   * case, a non-empty value must be provided otherwise no metadata is added.
   *
   * @generated from field: string value = 3;
   */
  value: string;

  /**
   * If present, the header's value will be matched and substituted with this. If there is no match or substitution, the header value
   * is used as-is.
   *
   * This is only used for :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`.
   *
   * Note: if the ``value`` field is non-empty this field should be empty.
   *
   * @generated from field: envoy.type.matcher.v3.RegexMatchAndSubstitute regex_value_rewrite = 6;
   */
  regexValueRewrite?: RegexMatchAndSubstitute;

  /**
   * The value's type — defaults to string.
   *
   * @generated from field: envoy.extensions.filters.http.header_to_metadata.v3.Config.ValueType type = 4;
   */
  type: Config_ValueType;

  /**
   * How is the value encoded, default is NONE (not encoded).
   * The value will be decoded accordingly before storing to metadata.
   *
   * @generated from field: envoy.extensions.filters.http.header_to_metadata.v3.Config.ValueEncode encode = 5;
   */
  encode: Config_ValueEncode;

  constructor(data?: PartialMessage<Config_KeyValuePair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config_KeyValuePair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config_KeyValuePair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config_KeyValuePair;

  static equals(a: Config_KeyValuePair | PlainMessage<Config_KeyValuePair> | undefined, b: Config_KeyValuePair | PlainMessage<Config_KeyValuePair> | undefined): boolean;
}

/**
 * A Rule defines what metadata to apply when a header is present or missing.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule
 */
export declare class Config_Rule extends Message<Config_Rule> {
  /**
   * Specifies that a match will be performed on the value of a header or a cookie.
   *
   * The header to be extracted.
   *
   * @generated from field: string header = 1;
   */
  header: string;

  /**
   * The cookie to be extracted.
   *
   * @generated from field: string cookie = 5;
   */
  cookie: string;

  /**
   * If the header or cookie is present, apply this metadata KeyValuePair.
   *
   * If the value in the KeyValuePair is non-empty, it'll be used instead
   * of the header or cookie value.
   *
   * @generated from field: envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair on_header_present = 2;
   */
  onHeaderPresent?: Config_KeyValuePair;

  /**
   * If the header or cookie is not present, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set, since it'll be used in lieu
   * of the missing header or cookie value.
   *
   * @generated from field: envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair on_header_missing = 3;
   */
  onHeaderMissing?: Config_KeyValuePair;

  /**
   * Whether or not to remove the header after a rule is applied.
   *
   * This prevents headers from leaking.
   * This field is not supported in case of a cookie.
   *
   * @generated from field: bool remove = 4;
   */
  remove: boolean;

  constructor(data?: PartialMessage<Config_Rule>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config_Rule;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config_Rule;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config_Rule;

  static equals(a: Config_Rule | PlainMessage<Config_Rule> | undefined, b: Config_Rule | PlainMessage<Config_Rule> | undefined): boolean;
}

