// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/compressor/v3/compressor.proto (package envoy.extensions.filters.http.compressor.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RuntimeFeatureFlag } from "../../../../../config/core/v3/base_pb.js";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.http.compressor.v3.Compressor
 */
export declare class Compressor extends Message<Compressor> {
  /**
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   *
   * @generated from field: google.protobuf.UInt32Value content_length = 1 [deprecated = true];
   * @deprecated
   */
  contentLength?: number;

  /**
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   *
   * @generated from field: repeated string content_type = 2 [deprecated = true];
   * @deprecated
   */
  contentType: string[];

  /**
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   *
   * @generated from field: bool disable_on_etag_header = 3 [deprecated = true];
   * @deprecated
   */
  disableOnEtagHeader: boolean;

  /**
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   *
   * .. attention::
   *
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   *
   * @generated from field: bool remove_accept_encoding_header = 4 [deprecated = true];
   * @deprecated
   */
  removeAcceptEncodingHeader: boolean;

  /**
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter, unless overridden by
   * CompressorPerRoute. If not specified, defaults to enabled.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];
   * @deprecated
   */
  runtimeEnabled?: RuntimeFeatureFlag;

  /**
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor<envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`
   * is included in Envoy.
   * [#extension-category: envoy.compression.compressor]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;
   */
  compressorLibrary?: TypedExtensionConfig;

  /**
   * Configuration for request compression. Compression is disabled by default if left empty.
   *
   * @generated from field: envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;
   */
  requestDirectionConfig?: Compressor_RequestDirectionConfig;

  /**
   * Configuration for response compression. Compression is enabled by default if left empty.
   *
   * .. attention::
   *
   *    If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
   *    such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
   *    ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
   *
   *    Also all the statistics related to response compression will be rooted in
   *    ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*``
   *    instead of
   *    ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*``.
   *
   * @generated from field: envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;
   */
  responseDirectionConfig?: Compressor_ResponseDirectionConfig;

  /**
   * If true, chooses this compressor first to do compression when the q-values in `Accept-Encoding` are same.
   * The last compressor which enables choose_first will be chosen if multiple compressor filters in the chain have choose_first as true.
   *
   * @generated from field: bool choose_first = 9;
   */
  chooseFirst: boolean;

  constructor(data?: PartialMessage<Compressor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.Compressor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Compressor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Compressor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Compressor;

  static equals(a: Compressor | PlainMessage<Compressor> | undefined, b: Compressor | PlainMessage<Compressor> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig
 */
export declare class Compressor_CommonDirectionConfig extends Message<Compressor_CommonDirectionConfig> {
  /**
   * Runtime flag that controls whether compression is enabled or not for the direction this
   * common config is put in. If set to false, the filter will operate as a pass-through filter
   * in the chosen direction, unless overridden by CompressorPerRoute.
   * If the field is omitted, the filter will be enabled.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;
   */
  enabled?: RuntimeFeatureFlag;

  /**
   * Minimum value of Content-Length header of request or response messages (depending on the direction
   * this common config is put in), in bytes, which will trigger compression. The default value is 30.
   *
   * @generated from field: google.protobuf.UInt32Value min_content_length = 2;
   */
  minContentLength?: number;

  /**
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   *
   * @generated from field: repeated string content_type = 3;
   */
  contentType: string[];

  constructor(data?: PartialMessage<Compressor_CommonDirectionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Compressor_CommonDirectionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Compressor_CommonDirectionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Compressor_CommonDirectionConfig;

  static equals(a: Compressor_CommonDirectionConfig | PlainMessage<Compressor_CommonDirectionConfig> | undefined, b: Compressor_CommonDirectionConfig | PlainMessage<Compressor_CommonDirectionConfig> | undefined): boolean;
}

/**
 * Configuration for filter behavior on the request direction.
 *
 * @generated from message envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig
 */
export declare class Compressor_RequestDirectionConfig extends Message<Compressor_RequestDirectionConfig> {
  /**
   * @generated from field: envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;
   */
  commonConfig?: Compressor_CommonDirectionConfig;

  constructor(data?: PartialMessage<Compressor_RequestDirectionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Compressor_RequestDirectionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Compressor_RequestDirectionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Compressor_RequestDirectionConfig;

  static equals(a: Compressor_RequestDirectionConfig | PlainMessage<Compressor_RequestDirectionConfig> | undefined, b: Compressor_RequestDirectionConfig | PlainMessage<Compressor_RequestDirectionConfig> | undefined): boolean;
}

/**
 * Configuration for filter behavior on the response direction.
 *
 * @generated from message envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig
 */
export declare class Compressor_ResponseDirectionConfig extends Message<Compressor_ResponseDirectionConfig> {
  /**
   * @generated from field: envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;
   */
  commonConfig?: Compressor_CommonDirectionConfig;

  /**
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   *
   * @generated from field: bool disable_on_etag_header = 2;
   */
  disableOnEtagHeader: boolean;

  /**
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   *
   * .. attention::
   *
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   *
   * @generated from field: bool remove_accept_encoding_header = 3;
   */
  removeAcceptEncodingHeader: boolean;

  constructor(data?: PartialMessage<Compressor_ResponseDirectionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Compressor_ResponseDirectionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Compressor_ResponseDirectionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Compressor_ResponseDirectionConfig;

  static equals(a: Compressor_ResponseDirectionConfig | PlainMessage<Compressor_ResponseDirectionConfig> | undefined, b: Compressor_ResponseDirectionConfig | PlainMessage<Compressor_ResponseDirectionConfig> | undefined): boolean;
}

/**
 * Per-route overrides of `ResponseDirectionConfig`. Anything added here should be optional,
 * to allow overriding arbitrary subsets of configuration. Omitted fields must have no affect.
 *
 * @generated from message envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides
 */
export declare class ResponseDirectionOverrides extends Message<ResponseDirectionOverrides> {
  constructor(data?: PartialMessage<ResponseDirectionOverrides>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseDirectionOverrides;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseDirectionOverrides;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseDirectionOverrides;

  static equals(a: ResponseDirectionOverrides | PlainMessage<ResponseDirectionOverrides> | undefined, b: ResponseDirectionOverrides | PlainMessage<ResponseDirectionOverrides> | undefined): boolean;
}

/**
 * Per-route overrides. As per-route overrides are needed, they should be
 * added here, mirroring the structure of `Compressor`. All fields should be
 * optional, to allow overriding arbitrary subsets of configuration.
 *
 * @generated from message envoy.extensions.filters.http.compressor.v3.CompressorOverrides
 */
export declare class CompressorOverrides extends Message<CompressorOverrides> {
  /**
   * If present, response compression is enabled.
   *
   * @generated from field: envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides response_direction_config = 1;
   */
  responseDirectionConfig?: ResponseDirectionOverrides;

  constructor(data?: PartialMessage<CompressorOverrides>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.CompressorOverrides";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompressorOverrides;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompressorOverrides;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompressorOverrides;

  static equals(a: CompressorOverrides | PlainMessage<CompressorOverrides> | undefined, b: CompressorOverrides | PlainMessage<CompressorOverrides> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.compressor.v3.CompressorPerRoute
 */
export declare class CompressorPerRoute extends Message<CompressorPerRoute> {
  /**
   * @generated from oneof envoy.extensions.filters.http.compressor.v3.CompressorPerRoute.override
   */
  override: {
    /**
     * If set, the filter will operate as a pass-through filter.
     * Overrides Compressor.runtime_enabled and CommonDirectionConfig.enabled.
     *
     * @generated from field: bool disabled = 1;
     */
    value: boolean;
    case: "disabled";
  } | {
    /**
     * Per-route overrides. Fields set here will override corresponding fields in `Compressor`.
     *
     * @generated from field: envoy.extensions.filters.http.compressor.v3.CompressorOverrides overrides = 2;
     */
    value: CompressorOverrides;
    case: "overrides";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CompressorPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompressorPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompressorPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompressorPerRoute;

  static equals(a: CompressorPerRoute | PlainMessage<CompressorPerRoute> | undefined, b: CompressorPerRoute | PlainMessage<CompressorPerRoute> | undefined): boolean;
}

