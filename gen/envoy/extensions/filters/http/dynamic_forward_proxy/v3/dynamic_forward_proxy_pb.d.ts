// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto (package envoy.extensions.filters.http.dynamic_forward_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v3/dns_cache_pb.js";

/**
 * Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.filters.http.dynamic_forward_proxy]
 *
 * @generated from message envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
 */
export declare class FilterConfig extends Message<FilterConfig> {
  /**
   * @generated from oneof envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.implementation_specifier
   */
  implementationSpecifier: {
    /**
     * The DNS cache configuration that the filter will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy cluster configuration
     * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
     *
     * @generated from field: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1;
     */
    value: DnsCacheConfig;
    case: "dnsCacheConfig";
  } | {
    /**
     * The configuration that the filter will use, when the related dynamic forward proxy cluster enabled
     * sub clusters.
     *
     * @generated from field: envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig sub_cluster_config = 3;
     */
    value: SubClusterConfig;
    case: "subClusterConfig";
  } | { case: undefined; value?: undefined };

  /**
   * When this flag is set, the filter will add the resolved upstream address in the filter
   * state. The state should be saved with key
   * ``envoy.stream.upstream_address`` (See
   * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
   *
   * @generated from field: bool save_upstream_address = 2;
   */
  saveUpstreamAddress: boolean;

  constructor(data?: PartialMessage<FilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterConfig;

  static equals(a: FilterConfig | PlainMessage<FilterConfig> | undefined, b: FilterConfig | PlainMessage<FilterConfig> | undefined): boolean;
}

/**
 * Per route Configuration for the dynamic forward proxy HTTP filter.
 *
 * @generated from message envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
 */
export declare class PerRouteConfig extends Message<PerRouteConfig> {
  /**
   * @generated from oneof envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.host_rewrite_specifier
   */
  hostRewriteSpecifier: {
    /**
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     *
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     *
     * @generated from field: string host_rewrite_literal = 1;
     */
    value: string;
    case: "hostRewriteLiteral";
  } | {
    /**
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     *
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     *
     * .. note::
     *
     *   If the header appears multiple times only the first value is used.
     *
     * @generated from field: string host_rewrite_header = 2;
     */
    value: string;
    case: "hostRewriteHeader";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PerRouteConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerRouteConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerRouteConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerRouteConfig;

  static equals(a: PerRouteConfig | PlainMessage<PerRouteConfig> | undefined, b: PerRouteConfig | PlainMessage<PerRouteConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig
 */
export declare class SubClusterConfig extends Message<SubClusterConfig> {
  /**
   * The timeout used for sub cluster initialization. Defaults to 5s if not set.
   *
   * @generated from field: google.protobuf.Duration cluster_init_timeout = 3;
   */
  clusterInitTimeout?: Duration;

  constructor(data?: PartialMessage<SubClusterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubClusterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubClusterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubClusterConfig;

  static equals(a: SubClusterConfig | PlainMessage<SubClusterConfig> | undefined, b: SubClusterConfig | PlainMessage<SubClusterConfig> | undefined): boolean;
}

