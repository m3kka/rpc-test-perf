// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto" (package "envoy.extensions.filters.http.dynamic_forward_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../google/protobuf/duration";
import { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v3/dns_cache";
// [#protodoc-title: Dynamic forward proxy]

/**
 * Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.filters.http.dynamic_forward_proxy]
 *
 * @generated from protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
 */
export interface FilterConfig {
    /**
     * @generated from protobuf oneof: implementation_specifier
     */
    implementationSpecifier: {
        oneofKind: "dnsCacheConfig";
        /**
         * The DNS cache configuration that the filter will attach to. Note this configuration must
         * match that of associated :ref:`dynamic forward proxy cluster configuration
         * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
         *
         * @generated from protobuf field: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1;
         */
        dnsCacheConfig: DnsCacheConfig;
    } | {
        oneofKind: "subClusterConfig";
        /**
         * The configuration that the filter will use, when the related dynamic forward proxy cluster enabled
         * sub clusters.
         *
         * @generated from protobuf field: envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig sub_cluster_config = 3;
         */
        subClusterConfig: SubClusterConfig;
    } | {
        oneofKind: undefined;
    };
    /**
     * When this flag is set, the filter will add the resolved upstream address in the filter
     * state. The state should be saved with key
     * ``envoy.stream.upstream_address`` (See
     * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
     *
     * @generated from protobuf field: bool save_upstream_address = 2;
     */
    saveUpstreamAddress: boolean;
}
/**
 * Per route Configuration for the dynamic forward proxy HTTP filter.
 *
 * @generated from protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
 */
export interface PerRouteConfig {
    /**
     * @generated from protobuf oneof: host_rewrite_specifier
     */
    hostRewriteSpecifier: {
        oneofKind: "hostRewriteLiteral";
        /**
         * Indicates that before DNS lookup, the host header will be swapped with
         * this value. If not set or empty, the original host header value
         * will be used and no rewrite will happen.
         *
         * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
         * option shouldn't be used with
         * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
         * value set here would be used for DNS lookups whereas the value set in the HCM would be used
         * for host header forwarding which is not the desired outcome.
         *
         * @generated from protobuf field: string host_rewrite_literal = 1;
         */
        hostRewriteLiteral: string;
    } | {
        oneofKind: "hostRewriteHeader";
        /**
         * Indicates that before DNS lookup, the host header will be swapped with
         * the value of this header. If not set or empty, the original host header
         * value will be used and no rewrite will happen.
         *
         * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
         * option shouldn't be used with
         * :ref:`HCM host rewrite header <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`
         * given that the value set here would be used for DNS lookups whereas the value set in the HCM
         * would be used for host header forwarding which is not the desired outcome.
         *
         * .. note::
         *
         *   If the header appears multiple times only the first value is used.
         *
         * @generated from protobuf field: string host_rewrite_header = 2;
         */
        hostRewriteHeader: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig
 */
export interface SubClusterConfig {
    /**
     * The timeout used for sub cluster initialization. Defaults to 5s if not set.
     *
     * @generated from protobuf field: google.protobuf.Duration cluster_init_timeout = 3;
     */
    clusterInitTimeout?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterConfig$Type extends MessageType<FilterConfig> {
    constructor() {
        super("envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig", [
            { no: 1, name: "dns_cache_config", kind: "message", oneof: "implementationSpecifier", T: () => DnsCacheConfig },
            { no: 3, name: "sub_cluster_config", kind: "message", oneof: "implementationSpecifier", T: () => SubClusterConfig },
            { no: 2, name: "save_upstream_address", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig" } });
    }
    create(value?: PartialMessage<FilterConfig>): FilterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.implementationSpecifier = { oneofKind: undefined };
        message.saveUpstreamAddress = false;
        if (value !== undefined)
            reflectionMergePartial<FilterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterConfig): FilterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config */ 1:
                    message.implementationSpecifier = {
                        oneofKind: "dnsCacheConfig",
                        dnsCacheConfig: DnsCacheConfig.internalBinaryRead(reader, reader.uint32(), options, (message.implementationSpecifier as any).dnsCacheConfig)
                    };
                    break;
                case /* envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig sub_cluster_config */ 3:
                    message.implementationSpecifier = {
                        oneofKind: "subClusterConfig",
                        subClusterConfig: SubClusterConfig.internalBinaryRead(reader, reader.uint32(), options, (message.implementationSpecifier as any).subClusterConfig)
                    };
                    break;
                case /* bool save_upstream_address */ 2:
                    message.saveUpstreamAddress = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1; */
        if (message.implementationSpecifier.oneofKind === "dnsCacheConfig")
            DnsCacheConfig.internalBinaryWrite(message.implementationSpecifier.dnsCacheConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig sub_cluster_config = 3; */
        if (message.implementationSpecifier.oneofKind === "subClusterConfig")
            SubClusterConfig.internalBinaryWrite(message.implementationSpecifier.subClusterConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool save_upstream_address = 2; */
        if (message.saveUpstreamAddress !== false)
            writer.tag(2, WireType.Varint).bool(message.saveUpstreamAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
 */
export const FilterConfig = new FilterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerRouteConfig$Type extends MessageType<PerRouteConfig> {
    constructor() {
        super("envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig", [
            { no: 1, name: "host_rewrite_literal", kind: "scalar", oneof: "hostRewriteSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "host_rewrite_header", kind: "scalar", oneof: "hostRewriteSpecifier", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.dynamic_forward_proxy.v2alpha.PerRouteConfig" } });
    }
    create(value?: PartialMessage<PerRouteConfig>): PerRouteConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hostRewriteSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PerRouteConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerRouteConfig): PerRouteConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host_rewrite_literal */ 1:
                    message.hostRewriteSpecifier = {
                        oneofKind: "hostRewriteLiteral",
                        hostRewriteLiteral: reader.string()
                    };
                    break;
                case /* string host_rewrite_header */ 2:
                    message.hostRewriteSpecifier = {
                        oneofKind: "hostRewriteHeader",
                        hostRewriteHeader: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerRouteConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host_rewrite_literal = 1; */
        if (message.hostRewriteSpecifier.oneofKind === "hostRewriteLiteral")
            writer.tag(1, WireType.LengthDelimited).string(message.hostRewriteSpecifier.hostRewriteLiteral);
        /* string host_rewrite_header = 2; */
        if (message.hostRewriteSpecifier.oneofKind === "hostRewriteHeader")
            writer.tag(2, WireType.LengthDelimited).string(message.hostRewriteSpecifier.hostRewriteHeader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
 */
export const PerRouteConfig = new PerRouteConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubClusterConfig$Type extends MessageType<SubClusterConfig> {
    constructor() {
        super("envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig", [
            { no: 3, name: "cluster_init_timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } }
        ]);
    }
    create(value?: PartialMessage<SubClusterConfig>): SubClusterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubClusterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubClusterConfig): SubClusterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration cluster_init_timeout */ 3:
                    message.clusterInitTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.clusterInitTimeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubClusterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration cluster_init_timeout = 3; */
        if (message.clusterInitTimeout)
            Duration.internalBinaryWrite(message.clusterInitTimeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig
 */
export const SubClusterConfig = new SubClusterConfig$Type();
