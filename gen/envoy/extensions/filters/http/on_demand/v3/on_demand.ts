// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/on_demand/v3/on_demand.proto" (package "envoy.extensions.filters.http.on_demand.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../google/protobuf/duration";
import { ConfigSource } from "../../../../../config/core/v3/config_source";
// [#protodoc-title: On Demand Discovery]
// On Demand Discovery :ref:`configuration overview <config_http_filters_on_demand>`.
// [#extension: envoy.filters.http.on_demand]
// 
// .. warning::
// 
//    Envoy currently only supports On-demand CDS when using Incremental-xDS and not State-of-the-World.
// 

/**
 * Configuration of on-demand CDS.
 *
 * @generated from protobuf message envoy.extensions.filters.http.on_demand.v3.OnDemandCds
 */
export interface OnDemandCds {
    /**
     * A configuration source for the service that will be used for
     * on-demand cluster discovery.
     *
     * @generated from protobuf field: envoy.config.core.v3.ConfigSource source = 1;
     */
    source?: ConfigSource;
    /**
     * xdstp:// resource locator for on-demand cluster collection.
     *
     * @generated from protobuf field: string resources_locator = 2;
     */
    resourcesLocator: string;
    /**
     * The timeout for on demand cluster lookup. If not set, defaults to 5 seconds.
     *
     * @generated from protobuf field: google.protobuf.Duration timeout = 3;
     */
    timeout?: Duration;
}
/**
 * On Demand Discovery filter config.
 *
 * @generated from protobuf message envoy.extensions.filters.http.on_demand.v3.OnDemand
 */
export interface OnDemand {
    /**
     * An optional configuration for on-demand cluster discovery
     * service. If not specified, the on-demand cluster discovery will
     * be disabled. When it's specified, the filter will pause the
     * request to an unknown cluster and will begin a cluster discovery
     * process. When the discovery is finished (successfully or not), the
     * request will be resumed for further processing.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds = 1;
     */
    odcds?: OnDemandCds;
}
/**
 * Per-route configuration for On Demand Discovery.
 *
 * @generated from protobuf message envoy.extensions.filters.http.on_demand.v3.PerRouteConfig
 */
export interface PerRouteConfig {
    /**
     * An optional configuration for on-demand cluster discovery
     * service. If not specified, the on-demand cluster discovery will
     * be disabled. When it's specified, the filter will pause the
     * request to an unknown cluster and will begin a cluster discovery
     * process. When the discovery is finished (successfully or not), the
     * request will be resumed for further processing.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds = 1;
     */
    odcds?: OnDemandCds;
}
// @generated message type with reflection information, may provide speed optimized methods
class OnDemandCds$Type extends MessageType<OnDemandCds> {
    constructor() {
        super("envoy.extensions.filters.http.on_demand.v3.OnDemandCds", [
            { no: 1, name: "source", kind: "message", T: () => ConfigSource, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "resources_locator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timeout", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<OnDemandCds>): OnDemandCds {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourcesLocator = "";
        if (value !== undefined)
            reflectionMergePartial<OnDemandCds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OnDemandCds): OnDemandCds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.ConfigSource source */ 1:
                    message.source = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* string resources_locator */ 2:
                    message.resourcesLocator = reader.string();
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OnDemandCds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.ConfigSource source = 1; */
        if (message.source)
            ConfigSource.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string resources_locator = 2; */
        if (message.resourcesLocator !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourcesLocator);
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.on_demand.v3.OnDemandCds
 */
export const OnDemandCds = new OnDemandCds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OnDemand$Type extends MessageType<OnDemand> {
    constructor() {
        super("envoy.extensions.filters.http.on_demand.v3.OnDemand", [
            { no: 1, name: "odcds", kind: "message", T: () => OnDemandCds }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.on_demand.v2.OnDemand" } });
    }
    create(value?: PartialMessage<OnDemand>): OnDemand {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OnDemand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OnDemand): OnDemand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds */ 1:
                    message.odcds = OnDemandCds.internalBinaryRead(reader, reader.uint32(), options, message.odcds);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OnDemand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds = 1; */
        if (message.odcds)
            OnDemandCds.internalBinaryWrite(message.odcds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.on_demand.v3.OnDemand
 */
export const OnDemand = new OnDemand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerRouteConfig$Type extends MessageType<PerRouteConfig> {
    constructor() {
        super("envoy.extensions.filters.http.on_demand.v3.PerRouteConfig", [
            { no: 1, name: "odcds", kind: "message", T: () => OnDemandCds }
        ]);
    }
    create(value?: PartialMessage<PerRouteConfig>): PerRouteConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PerRouteConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerRouteConfig): PerRouteConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds */ 1:
                    message.odcds = OnDemandCds.internalBinaryRead(reader, reader.uint32(), options, message.odcds);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerRouteConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.on_demand.v3.OnDemandCds odcds = 1; */
        if (message.odcds)
            OnDemandCds.internalBinaryWrite(message.odcds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.on_demand.v3.PerRouteConfig
 */
export const PerRouteConfig = new PerRouteConfig$Type();
