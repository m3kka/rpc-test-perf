// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/alternate_protocols_cache/v3/alternate_protocols_cache.proto (package envoy.extensions.filters.http.alternate_protocols_cache.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AlternateProtocolsCacheOptions } from "../../../../../config/core/v3/protocol_pb.js";

/**
 * Configuration for the alternate protocols cache HTTP filter.
 * [#extension: envoy.filters.http.alternate_protocols_cache]
 *
 * @generated from message envoy.extensions.filters.http.alternate_protocols_cache.v3.FilterConfig
 */
export declare class FilterConfig extends Message<FilterConfig> {
  /**
   * If set, causes the use of the alternate protocols cache, which is responsible for
   * parsing and caching HTTP Alt-Svc headers. This enables the use of HTTP/3 for upstream
   * servers that advertise supporting it.
   * TODO(RyanTheOptimist): Make this field required when HTTP/3 is enabled via auto_http.
   *
   * @generated from field: envoy.config.core.v3.AlternateProtocolsCacheOptions alternate_protocols_cache_options = 1;
   */
  alternateProtocolsCacheOptions?: AlternateProtocolsCacheOptions;

  constructor(data?: PartialMessage<FilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.alternate_protocols_cache.v3.FilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterConfig;

  static equals(a: FilterConfig | PlainMessage<FilterConfig> | undefined, b: FilterConfig | PlainMessage<FilterConfig> | undefined): boolean;
}

