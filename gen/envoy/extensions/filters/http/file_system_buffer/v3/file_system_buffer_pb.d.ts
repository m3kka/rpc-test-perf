// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/file_system_buffer/v3/file_system_buffer.proto (package envoy.extensions.filters.http.file_system_buffer.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AsyncFileManagerConfig } from "../../../../common/async_files/v3/async_file_manager_pb.js";

/**
 * The behavior of the filter for a stream.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior
 */
export declare class BufferBehavior extends Message<BufferBehavior> {
  /**
   * @generated from oneof envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.behavior
   */
  behavior: {
    /**
     * Don't inject ``content-length`` header.
     * Output immediately, buffer only if output is slower than input.
     *
     * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.StreamWhenPossible stream_when_possible = 1;
     */
    value: BufferBehavior_StreamWhenPossible;
    case: "streamWhenPossible";
  } | {
    /**
     * Never buffer, do nothing.
     *
     * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Bypass bypass = 2;
     */
    value: BufferBehavior_Bypass;
    case: "bypass";
  } | {
    /**
     * If ``content-length`` is not present, buffer the entire input,
     * inject ``content-length`` header, then output.
     * If ``content-length`` is already present, act like ``stream_when_possible``.
     *
     * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.InjectContentLengthIfNecessary inject_content_length_if_necessary = 3;
     */
    value: BufferBehavior_InjectContentLengthIfNecessary;
    case: "injectContentLengthIfNecessary";
  } | {
    /**
     * Always buffer the entire input, and inject ``content-length``,
     * overwriting any provided content-length header.
     *
     * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBufferAndAlwaysInjectContentLength fully_buffer_and_always_inject_content_length = 4;
     */
    value: BufferBehavior_FullyBufferAndAlwaysInjectContentLength;
    case: "fullyBufferAndAlwaysInjectContentLength";
  } | {
    /**
     * Always buffer the entire input, do not modify ``content-length``.
     *
     * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBuffer fully_buffer = 5;
     */
    value: BufferBehavior_FullyBuffer;
    case: "fullyBuffer";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<BufferBehavior>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior;

  static equals(a: BufferBehavior | PlainMessage<BufferBehavior> | undefined, b: BufferBehavior | PlainMessage<BufferBehavior> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.StreamWhenPossible
 */
export declare class BufferBehavior_StreamWhenPossible extends Message<BufferBehavior_StreamWhenPossible> {
  constructor(data?: PartialMessage<BufferBehavior_StreamWhenPossible>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.StreamWhenPossible";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior_StreamWhenPossible;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior_StreamWhenPossible;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior_StreamWhenPossible;

  static equals(a: BufferBehavior_StreamWhenPossible | PlainMessage<BufferBehavior_StreamWhenPossible> | undefined, b: BufferBehavior_StreamWhenPossible | PlainMessage<BufferBehavior_StreamWhenPossible> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Bypass
 */
export declare class BufferBehavior_Bypass extends Message<BufferBehavior_Bypass> {
  constructor(data?: PartialMessage<BufferBehavior_Bypass>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Bypass";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior_Bypass;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior_Bypass;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior_Bypass;

  static equals(a: BufferBehavior_Bypass | PlainMessage<BufferBehavior_Bypass> | undefined, b: BufferBehavior_Bypass | PlainMessage<BufferBehavior_Bypass> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.InjectContentLengthIfNecessary
 */
export declare class BufferBehavior_InjectContentLengthIfNecessary extends Message<BufferBehavior_InjectContentLengthIfNecessary> {
  constructor(data?: PartialMessage<BufferBehavior_InjectContentLengthIfNecessary>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.InjectContentLengthIfNecessary";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior_InjectContentLengthIfNecessary;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior_InjectContentLengthIfNecessary;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior_InjectContentLengthIfNecessary;

  static equals(a: BufferBehavior_InjectContentLengthIfNecessary | PlainMessage<BufferBehavior_InjectContentLengthIfNecessary> | undefined, b: BufferBehavior_InjectContentLengthIfNecessary | PlainMessage<BufferBehavior_InjectContentLengthIfNecessary> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBufferAndAlwaysInjectContentLength
 */
export declare class BufferBehavior_FullyBufferAndAlwaysInjectContentLength extends Message<BufferBehavior_FullyBufferAndAlwaysInjectContentLength> {
  constructor(data?: PartialMessage<BufferBehavior_FullyBufferAndAlwaysInjectContentLength>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBufferAndAlwaysInjectContentLength";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior_FullyBufferAndAlwaysInjectContentLength;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior_FullyBufferAndAlwaysInjectContentLength;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior_FullyBufferAndAlwaysInjectContentLength;

  static equals(a: BufferBehavior_FullyBufferAndAlwaysInjectContentLength | PlainMessage<BufferBehavior_FullyBufferAndAlwaysInjectContentLength> | undefined, b: BufferBehavior_FullyBufferAndAlwaysInjectContentLength | PlainMessage<BufferBehavior_FullyBufferAndAlwaysInjectContentLength> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBuffer
 */
export declare class BufferBehavior_FullyBuffer extends Message<BufferBehavior_FullyBuffer> {
  constructor(data?: PartialMessage<BufferBehavior_FullyBuffer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBuffer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferBehavior_FullyBuffer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferBehavior_FullyBuffer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferBehavior_FullyBuffer;

  static equals(a: BufferBehavior_FullyBuffer | PlainMessage<BufferBehavior_FullyBuffer> | undefined, b: BufferBehavior_FullyBuffer | PlainMessage<BufferBehavior_FullyBuffer> | undefined): boolean;
}

/**
 * The configuration for one direction of the filter behavior.
 *
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig
 */
export declare class StreamConfig extends Message<StreamConfig> {
  /**
   * Whether to bypass / stream / fully buffer / etc.
   * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
   *
   * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;
   */
  behavior?: BufferBehavior;

  /**
   * The amount stored in the memory buffer before buffering to disk.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
   *
   * @generated from field: google.protobuf.UInt64Value memory_buffer_bytes_limit = 2;
   */
  memoryBufferBytesLimit?: bigint;

  /**
   * The maximum storage (excluding memory) to be buffered in this filter.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
   *
   * @generated from field: google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;
   */
  storageBufferBytesLimit?: bigint;

  /**
   * The maximum amount that can be queued for writing to storage, above which the
   * source is requested to pause. If unset, defaults to the same value as
   * ``memory_buffer_bytes_limit``.
   *
   * For example, assuming the recipient is not consuming data at all, if
   * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
   * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
   * then:
   *
   * * Any request less than 32MiB will eventually pass through without ever attempting
   *   to write to disk.
   * * Any request with over 32MiB buffered will start trying to write to disk.
   *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
   *   watermark signal is sent to the source.
   * * Any stream whose total size exceeds
   *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
   *   (Note, if the recipient *is* consuming data then it is possible for such an
   *   oversized request to pass through the buffer filter, provided the recipient
   *   isn't consuming data too slowly.)
   *
   * The low watermark signal is sent when the memory buffer is at size
   * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
   *
   * @generated from field: google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;
   */
  storageBufferQueueHighWatermarkBytes?: bigint;

  constructor(data?: PartialMessage<StreamConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamConfig;

  static equals(a: StreamConfig | PlainMessage<StreamConfig> | undefined, b: StreamConfig | PlainMessage<StreamConfig> | undefined): boolean;
}

/**
 * A :ref:`file system buffer <config_http_filters_file_system_buffer>` filter configuration.
 *
 * Route-specific configs override only the fields they explicitly include; unset
 * fields inherit from the vhost or listener-level config, or, if never set,
 * and not required, use a default value.
 *
 * @generated from message envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig
 */
export declare class FileSystemBufferFilterConfig extends Message<FileSystemBufferFilterConfig> {
  /**
   * A configuration for an AsyncFileManager.
   *
   * If unset in route, vhost and listener, and the behavior is not ``bypass``
   * in both directions, an Internal Server Error response will be sent.
   *
   * @generated from field: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1;
   */
  managerConfig?: AsyncFileManagerConfig;

  /**
   * An optional path to which the unlinked files should be written - this may
   * determine which physical storage device will be used.
   *
   * If unset in route, vhost and listener, will use the environment variable
   * ``TMPDIR``, or, if that's also unset, will use ``/tmp``.
   *
   * @generated from field: google.protobuf.StringValue storage_buffer_path = 2;
   */
  storageBufferPath?: string;

  /**
   * Optional configuration for how to buffer (or not) requests.
   * If unset in route, vhost and listener, ``StreamConfig`` default values will be used
   * (with behavior ``stream_when_possible``)
   *
   * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig request = 3;
   */
  request?: StreamConfig;

  /**
   * Optional configuration for how to buffer (or not) responses.
   * If unset in route, vhost and listener, ``StreamConfig`` default values will be used
   * (with behavior ``stream_when_possible``)
   *
   * @generated from field: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig response = 4;
   */
  response?: StreamConfig;

  constructor(data?: PartialMessage<FileSystemBufferFilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileSystemBufferFilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileSystemBufferFilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileSystemBufferFilterConfig;

  static equals(a: FileSystemBufferFilterConfig | PlainMessage<FileSystemBufferFilterConfig> | undefined, b: FileSystemBufferFilterConfig | PlainMessage<FileSystemBufferFilterConfig> | undefined): boolean;
}

