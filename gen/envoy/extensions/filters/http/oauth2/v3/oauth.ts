// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/oauth2/v3/oauth.proto" (package "envoy.extensions.filters.http.oauth2.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HeaderMatcher } from "../../../../../config/route/v3/route_components";
import { PathMatcher } from "../../../../../type/matcher/v3/path";
import { HttpUri } from "../../../../../config/core/v3/http_uri";
import { SdsSecretConfig } from "../../../../transport_sockets/tls/v3/secret";
// [#protodoc-title: OAuth]
// OAuth :ref:`configuration overview <config_http_filters_oauth>`.
// [#extension: envoy.filters.http.oauth2]
// 

/**
 * @generated from protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials
 */
export interface OAuth2Credentials {
    /**
     * The client_id to be used in the authorize calls. This value will be URL encoded when sent to the OAuth server.
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * The secret used to retrieve the access token. This value will be URL encoded when sent to the OAuth server.
     *
     * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig token_secret = 2;
     */
    tokenSecret?: SdsSecretConfig;
    /**
     * @generated from protobuf oneof: token_formation
     */
    tokenFormation: {
        oneofKind: "hmacSecret";
        /**
         * If present, the secret token will be a HMAC using the provided secret.
         *
         * @generated from protobuf field: envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig hmac_secret = 3;
         */
        hmacSecret: SdsSecretConfig;
    } | {
        oneofKind: undefined;
    };
    /**
     * The cookie names used in OAuth filters flow.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames cookie_names = 4;
     */
    cookieNames?: OAuth2Credentials_CookieNames;
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames
 */
export interface OAuth2Credentials_CookieNames {
    /**
     * Cookie name to hold OAuth bearer token value. When the authentication server validates the
     * client and returns an authorization token back to the OAuth filter, no matter what format
     * that token is, if :ref:`forward_bearer_token <envoy_v3_api_field_extensions.filters.http.oauth2.v3.OAuth2Config.forward_bearer_token>`
     * is set to true the filter will send over the bearer token as a cookie with this name to the
     * upstream. Defaults to ``BearerToken``.
     *
     * @generated from protobuf field: string bearer_token = 1;
     */
    bearerToken: string;
    /**
     * Cookie name to hold OAuth HMAC value. Defaults to ``OauthHMAC``.
     *
     * @generated from protobuf field: string oauth_hmac = 2;
     */
    oauthHmac: string;
    /**
     * Cookie name to hold OAuth expiry value. Defaults to ``OauthExpires``.
     *
     * @generated from protobuf field: string oauth_expires = 3;
     */
    oauthExpires: string;
    /**
     * Cookie name to hold the id token. Defaults to ``IdToken``.
     *
     * @generated from protobuf field: string id_token = 4;
     */
    idToken: string;
    /**
     * Cookie name to hold the refresh token. Defaults to ``RefreshToken``.
     *
     * @generated from protobuf field: string refresh_token = 5;
     */
    refreshToken: string;
}
/**
 * OAuth config
 *
 * [#next-free-field: 12]
 *
 * @generated from protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Config
 */
export interface OAuth2Config {
    /**
     * Endpoint on the authorization server to retrieve the access token from.
     *
     * @generated from protobuf field: envoy.config.core.v3.HttpUri token_endpoint = 1;
     */
    tokenEndpoint?: HttpUri;
    /**
     * The endpoint redirect to for authorization in response to unauthorized requests.
     *
     * @generated from protobuf field: string authorization_endpoint = 2;
     */
    authorizationEndpoint: string;
    /**
     * Credentials used for OAuth.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials credentials = 3;
     */
    credentials?: OAuth2Credentials;
    /**
     * The redirect URI passed to the authorization endpoint. Supports header formatting
     * tokens. For more information, including details on header value syntax, see the
     * documentation on :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`.
     *
     * This URI should not contain any query parameters.
     *
     * @generated from protobuf field: string redirect_uri = 4;
     */
    redirectUri: string;
    /**
     * Matching criteria used to determine whether a path appears to be the result of a redirect from the authorization server.
     *
     * @generated from protobuf field: envoy.type.matcher.v3.PathMatcher redirect_path_matcher = 5;
     */
    redirectPathMatcher?: PathMatcher;
    /**
     * The path to sign a user out, clearing their credential cookies.
     *
     * @generated from protobuf field: envoy.type.matcher.v3.PathMatcher signout_path = 6;
     */
    signoutPath?: PathMatcher;
    /**
     * Forward the OAuth token as a Bearer to upstream web service.
     *
     * @generated from protobuf field: bool forward_bearer_token = 7;
     */
    forwardBearerToken: boolean;
    /**
     * Any request that matches any of the provided matchers will be passed through without OAuth validation.
     *
     * @generated from protobuf field: repeated envoy.config.route.v3.HeaderMatcher pass_through_matcher = 8;
     */
    passThroughMatcher: HeaderMatcher[];
    /**
     * Optional list of OAuth scopes to be claimed in the authorization request. If not specified,
     * defaults to "user" scope.
     * OAuth RFC https://tools.ietf.org/html/rfc6749#section-3.3
     *
     * @generated from protobuf field: repeated string auth_scopes = 9;
     */
    authScopes: string[];
    /**
     * Optional resource parameter for authorization request
     * RFC: https://tools.ietf.org/html/rfc8707
     *
     * @generated from protobuf field: repeated string resources = 10;
     */
    resources: string[];
    /**
     * Defines how ``client_id`` and ``client_secret`` are sent in OAuth client to OAuth server requests.
     * RFC https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1
     *
     * @generated from protobuf field: envoy.extensions.filters.http.oauth2.v3.OAuth2Config.AuthType auth_type = 11;
     */
    authType: OAuth2Config_AuthType;
}
/**
 * @generated from protobuf enum envoy.extensions.filters.http.oauth2.v3.OAuth2Config.AuthType
 */
export enum OAuth2Config_AuthType {
    /**
     * The ``client_id`` and ``client_secret`` will be sent in the URL encoded request body.
     * This type should only be used when Auth server does not support Basic authentication.
     *
     * @generated from protobuf enum value: URL_ENCODED_BODY = 0;
     */
    URL_ENCODED_BODY = 0,
    /**
     * The ``client_id`` and ``client_secret`` will be sent using HTTP Basic authentication scheme.
     *
     * @generated from protobuf enum value: BASIC_AUTH = 1;
     */
    BASIC_AUTH = 1
}
/**
 * Filter config.
 *
 * @generated from protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2
 */
export interface OAuth2 {
    /**
     * Leave this empty to disable OAuth2 for a specific route, using per filter config.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.oauth2.v3.OAuth2Config config = 1;
     */
    config?: OAuth2Config;
}
// @generated message type with reflection information, may provide speed optimized methods
class OAuth2Credentials$Type extends MessageType<OAuth2Credentials> {
    constructor() {
        super("envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "token_secret", kind: "message", T: () => SdsSecretConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "hmac_secret", kind: "message", oneof: "tokenFormation", T: () => SdsSecretConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "cookie_names", kind: "message", T: () => OAuth2Credentials_CookieNames }
        ]);
    }
    create(value?: PartialMessage<OAuth2Credentials>): OAuth2Credentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        message.tokenFormation = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<OAuth2Credentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuth2Credentials): OAuth2Credentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig token_secret */ 2:
                    message.tokenSecret = SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, message.tokenSecret);
                    break;
                case /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig hmac_secret */ 3:
                    message.tokenFormation = {
                        oneofKind: "hmacSecret",
                        hmacSecret: SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, (message.tokenFormation as any).hmacSecret)
                    };
                    break;
                case /* envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames cookie_names */ 4:
                    message.cookieNames = OAuth2Credentials_CookieNames.internalBinaryRead(reader, reader.uint32(), options, message.cookieNames);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuth2Credentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig token_secret = 2; */
        if (message.tokenSecret)
            SdsSecretConfig.internalBinaryWrite(message.tokenSecret, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig hmac_secret = 3; */
        if (message.tokenFormation.oneofKind === "hmacSecret")
            SdsSecretConfig.internalBinaryWrite(message.tokenFormation.hmacSecret, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames cookie_names = 4; */
        if (message.cookieNames)
            OAuth2Credentials_CookieNames.internalBinaryWrite(message.cookieNames, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials
 */
export const OAuth2Credentials = new OAuth2Credentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuth2Credentials_CookieNames$Type extends MessageType<OAuth2Credentials_CookieNames> {
    constructor() {
        super("envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames", [
            { no: 1, name: "bearer_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 2, name: "oauth_hmac", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 3, name: "oauth_expires", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 4, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 5, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<OAuth2Credentials_CookieNames>): OAuth2Credentials_CookieNames {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bearerToken = "";
        message.oauthHmac = "";
        message.oauthExpires = "";
        message.idToken = "";
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<OAuth2Credentials_CookieNames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuth2Credentials_CookieNames): OAuth2Credentials_CookieNames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bearer_token */ 1:
                    message.bearerToken = reader.string();
                    break;
                case /* string oauth_hmac */ 2:
                    message.oauthHmac = reader.string();
                    break;
                case /* string oauth_expires */ 3:
                    message.oauthExpires = reader.string();
                    break;
                case /* string id_token */ 4:
                    message.idToken = reader.string();
                    break;
                case /* string refresh_token */ 5:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuth2Credentials_CookieNames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bearer_token = 1; */
        if (message.bearerToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bearerToken);
        /* string oauth_hmac = 2; */
        if (message.oauthHmac !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oauthHmac);
        /* string oauth_expires = 3; */
        if (message.oauthExpires !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.oauthExpires);
        /* string id_token = 4; */
        if (message.idToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.idToken);
        /* string refresh_token = 5; */
        if (message.refreshToken !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames
 */
export const OAuth2Credentials_CookieNames = new OAuth2Credentials_CookieNames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuth2Config$Type extends MessageType<OAuth2Config> {
    constructor() {
        super("envoy.extensions.filters.http.oauth2.v3.OAuth2Config", [
            { no: 1, name: "token_endpoint", kind: "message", T: () => HttpUri },
            { no: 2, name: "authorization_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "credentials", kind: "message", T: () => OAuth2Credentials, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 5, name: "redirect_path_matcher", kind: "message", T: () => PathMatcher, options: { "validate.rules": { message: { required: true } } } },
            { no: 6, name: "signout_path", kind: "message", T: () => PathMatcher, options: { "validate.rules": { message: { required: true } } } },
            { no: 7, name: "forward_bearer_token", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "pass_through_matcher", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderMatcher },
            { no: 9, name: "auth_scopes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "resources", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "auth_type", kind: "enum", T: () => ["envoy.extensions.filters.http.oauth2.v3.OAuth2Config.AuthType", OAuth2Config_AuthType], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<OAuth2Config>): OAuth2Config {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authorizationEndpoint = "";
        message.redirectUri = "";
        message.forwardBearerToken = false;
        message.passThroughMatcher = [];
        message.authScopes = [];
        message.resources = [];
        message.authType = 0;
        if (value !== undefined)
            reflectionMergePartial<OAuth2Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuth2Config): OAuth2Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.HttpUri token_endpoint */ 1:
                    message.tokenEndpoint = HttpUri.internalBinaryRead(reader, reader.uint32(), options, message.tokenEndpoint);
                    break;
                case /* string authorization_endpoint */ 2:
                    message.authorizationEndpoint = reader.string();
                    break;
                case /* envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials credentials */ 3:
                    message.credentials = OAuth2Credentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                case /* string redirect_uri */ 4:
                    message.redirectUri = reader.string();
                    break;
                case /* envoy.type.matcher.v3.PathMatcher redirect_path_matcher */ 5:
                    message.redirectPathMatcher = PathMatcher.internalBinaryRead(reader, reader.uint32(), options, message.redirectPathMatcher);
                    break;
                case /* envoy.type.matcher.v3.PathMatcher signout_path */ 6:
                    message.signoutPath = PathMatcher.internalBinaryRead(reader, reader.uint32(), options, message.signoutPath);
                    break;
                case /* bool forward_bearer_token */ 7:
                    message.forwardBearerToken = reader.bool();
                    break;
                case /* repeated envoy.config.route.v3.HeaderMatcher pass_through_matcher */ 8:
                    message.passThroughMatcher.push(HeaderMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string auth_scopes */ 9:
                    message.authScopes.push(reader.string());
                    break;
                case /* repeated string resources */ 10:
                    message.resources.push(reader.string());
                    break;
                case /* envoy.extensions.filters.http.oauth2.v3.OAuth2Config.AuthType auth_type */ 11:
                    message.authType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuth2Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.HttpUri token_endpoint = 1; */
        if (message.tokenEndpoint)
            HttpUri.internalBinaryWrite(message.tokenEndpoint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string authorization_endpoint = 2; */
        if (message.authorizationEndpoint !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authorizationEndpoint);
        /* envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials credentials = 3; */
        if (message.credentials)
            OAuth2Credentials.internalBinaryWrite(message.credentials, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string redirect_uri = 4; */
        if (message.redirectUri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.redirectUri);
        /* envoy.type.matcher.v3.PathMatcher redirect_path_matcher = 5; */
        if (message.redirectPathMatcher)
            PathMatcher.internalBinaryWrite(message.redirectPathMatcher, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.v3.PathMatcher signout_path = 6; */
        if (message.signoutPath)
            PathMatcher.internalBinaryWrite(message.signoutPath, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool forward_bearer_token = 7; */
        if (message.forwardBearerToken !== false)
            writer.tag(7, WireType.Varint).bool(message.forwardBearerToken);
        /* repeated envoy.config.route.v3.HeaderMatcher pass_through_matcher = 8; */
        for (let i = 0; i < message.passThroughMatcher.length; i++)
            HeaderMatcher.internalBinaryWrite(message.passThroughMatcher[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated string auth_scopes = 9; */
        for (let i = 0; i < message.authScopes.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.authScopes[i]);
        /* repeated string resources = 10; */
        for (let i = 0; i < message.resources.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.resources[i]);
        /* envoy.extensions.filters.http.oauth2.v3.OAuth2Config.AuthType auth_type = 11; */
        if (message.authType !== 0)
            writer.tag(11, WireType.Varint).int32(message.authType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2Config
 */
export const OAuth2Config = new OAuth2Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuth2$Type extends MessageType<OAuth2> {
    constructor() {
        super("envoy.extensions.filters.http.oauth2.v3.OAuth2", [
            { no: 1, name: "config", kind: "message", T: () => OAuth2Config }
        ]);
    }
    create(value?: PartialMessage<OAuth2>): OAuth2 {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OAuth2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuth2): OAuth2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.oauth2.v3.OAuth2Config config */ 1:
                    message.config = OAuth2Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuth2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.oauth2.v3.OAuth2Config config = 1; */
        if (message.config)
            OAuth2Config.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.oauth2.v3.OAuth2
 */
export const OAuth2 = new OAuth2$Type();
