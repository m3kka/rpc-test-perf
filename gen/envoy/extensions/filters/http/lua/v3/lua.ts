// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/lua/v3/lua.proto" (package "envoy.extensions.filters.http.lua.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DataSource } from "../../../../../config/core/v3/base";
// [#protodoc-title: Lua]
// Lua :ref:`configuration overview <config_http_filters_lua>`.
// [#extension: envoy.filters.http.lua]

/**
 * @generated from protobuf message envoy.extensions.filters.http.lua.v3.Lua
 */
export interface Lua {
    /**
     * The Lua code that Envoy will execute. This can be a very small script that
     * further loads code from disk if desired. Note that if JSON configuration is used, the code must
     * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
     * strings so complex scripts can be easily expressed inline in the configuration.
     *
     * This field is deprecated. Please use
     * :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`.
     * Only one of :ref:`inline_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.inline_code>`
     * or :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`
     * can be set for the Lua filter.
     *
     * @deprecated
     * @generated from protobuf field: string inline_code = 1 [deprecated = true];
     */
    inlineCode: string;
    /**
     * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
     * <envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute>`. The Lua source codes can be
     * loaded from inline string or local files.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *   source_codes:
     *     hello.lua:
     *       inline_string: |
     *         function envoy_on_response(response_handle)
     *           -- Do something.
     *         end
     *     world.lua:
     *       filename: /etc/lua/world.lua
     *
     *
     * @generated from protobuf field: map<string, envoy.config.core.v3.DataSource> source_codes = 2;
     */
    sourceCodes: {
        [key: string]: DataSource;
    };
    /**
     * The default Lua code that Envoy will execute. If no per route config is provided
     * for the request, this Lua code will be applied.
     *
     * @generated from protobuf field: envoy.config.core.v3.DataSource default_source_code = 3;
     */
    defaultSourceCode?: DataSource;
    /**
     * Optional additional prefix to use when emitting statistics. By default
     * metrics are emitted in *.lua.* namespace. If multiple lua filters are
     * configured in a filter chain, the stats from each filter instance can
     * be emitted using custom stat prefix to distinguish emitted
     * statistics. For example:
     *
     * .. code-block:: yaml
     *
     *   http_filters:
     *     - name: envoy.filters.http.lua
     *       typed_config:
     *         "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
     *         stat_prefix: foo_script # This emits lua.foo_script.errors etc.
     *     - name: envoy.filters.http.lua
     *       typed_config:
     *         "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
     *         stat_prefix: bar_script # This emits lua.bar_script.errors etc.
     *
     *
     * @generated from protobuf field: string stat_prefix = 4;
     */
    statPrefix: string;
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.lua.v3.LuaPerRoute
 */
export interface LuaPerRoute {
    /**
     * @generated from protobuf oneof: override
     */
    override: {
        oneofKind: "disabled";
        /**
         * Disable the Lua filter for this particular vhost or route. If disabled is specified in
         * multiple per-filter-configs, the most specific one will be used.
         *
         * @generated from protobuf field: bool disabled = 1;
         */
        disabled: boolean;
    } | {
        oneofKind: "name";
        /**
         * A name of a Lua source code stored in
         * :ref:`Lua.source_codes <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.source_codes>`.
         *
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: "sourceCode";
        /**
         * A configured per-route Lua source code that can be served by RDS or provided inline.
         *
         * @generated from protobuf field: envoy.config.core.v3.DataSource source_code = 3;
         */
        sourceCode: DataSource;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Lua$Type extends MessageType<Lua> {
    constructor() {
        super("envoy.extensions.filters.http.lua.v3.Lua", [
            { no: 1, name: "inline_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 2, name: "source_codes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => DataSource } },
            { no: 3, name: "default_source_code", kind: "message", T: () => DataSource },
            { no: 4, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.lua.v2.Lua" } });
    }
    create(value?: PartialMessage<Lua>): Lua {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inlineCode = "";
        message.sourceCodes = {};
        message.statPrefix = "";
        if (value !== undefined)
            reflectionMergePartial<Lua>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Lua): Lua {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string inline_code = 1 [deprecated = true];*/ 1:
                    message.inlineCode = reader.string();
                    break;
                case /* map<string, envoy.config.core.v3.DataSource> source_codes */ 2:
                    this.binaryReadMap2(message.sourceCodes, reader, options);
                    break;
                case /* envoy.config.core.v3.DataSource default_source_code */ 3:
                    message.defaultSourceCode = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.defaultSourceCode);
                    break;
                case /* string stat_prefix */ 4:
                    message.statPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Lua["sourceCodes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Lua["sourceCodes"] | undefined, val: Lua["sourceCodes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = DataSource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.extensions.filters.http.lua.v3.Lua.source_codes");
            }
        }
        map[key ?? ""] = val ?? DataSource.create();
    }
    internalBinaryWrite(message: Lua, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string inline_code = 1 [deprecated = true]; */
        if (message.inlineCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.inlineCode);
        /* map<string, envoy.config.core.v3.DataSource> source_codes = 2; */
        for (let k of globalThis.Object.keys(message.sourceCodes)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            DataSource.internalBinaryWrite(message.sourceCodes[k], writer, options);
            writer.join().join();
        }
        /* envoy.config.core.v3.DataSource default_source_code = 3; */
        if (message.defaultSourceCode)
            DataSource.internalBinaryWrite(message.defaultSourceCode, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string stat_prefix = 4; */
        if (message.statPrefix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.lua.v3.Lua
 */
export const Lua = new Lua$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuaPerRoute$Type extends MessageType<LuaPerRoute> {
    constructor() {
        super("envoy.extensions.filters.http.lua.v3.LuaPerRoute", [
            { no: 1, name: "disabled", kind: "scalar", oneof: "override", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 2, name: "name", kind: "scalar", oneof: "override", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "source_code", kind: "message", oneof: "override", T: () => DataSource }
        ]);
    }
    create(value?: PartialMessage<LuaPerRoute>): LuaPerRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.override = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<LuaPerRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuaPerRoute): LuaPerRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disabled */ 1:
                    message.override = {
                        oneofKind: "disabled",
                        disabled: reader.bool()
                    };
                    break;
                case /* string name */ 2:
                    message.override = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* envoy.config.core.v3.DataSource source_code */ 3:
                    message.override = {
                        oneofKind: "sourceCode",
                        sourceCode: DataSource.internalBinaryRead(reader, reader.uint32(), options, (message.override as any).sourceCode)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuaPerRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool disabled = 1; */
        if (message.override.oneofKind === "disabled")
            writer.tag(1, WireType.Varint).bool(message.override.disabled);
        /* string name = 2; */
        if (message.override.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.override.name);
        /* envoy.config.core.v3.DataSource source_code = 3; */
        if (message.override.oneofKind === "sourceCode")
            DataSource.internalBinaryWrite(message.override.sourceCode, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.lua.v3.LuaPerRoute
 */
export const LuaPerRoute = new LuaPerRoute$Type();
