// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/bandwidth_limit/v3/bandwidth_limit.proto (package envoy.extensions.filters.http.bandwidth_limit.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RuntimeFeatureFlag } from "../../../../../config/core/v3/base_pb.js";

/**
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit
 */
export declare class BandwidthLimit extends Message<BandwidthLimit> {
  /**
   * The human readable prefix to use when emitting stats.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The enable mode for the bandwidth limit filter.
   * Default is Disabled.
   *
   * @generated from field: envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit.EnableMode enable_mode = 2;
   */
  enableMode: BandwidthLimit_EnableMode;

  /**
   * The limit supplied in KiB/s.
   *
   * .. note::
   *   It's fine for the limit to be unset for the global configuration since the bandwidth limit
   *   can be applied at a the virtual host or route level. Thus, the limit must be set for the
   *   per route configuration otherwise the config will be rejected.
   *
   * .. note::
   *   When using per route configuration, the limit becomes unique to that route.
   *
   *
   * @generated from field: google.protobuf.UInt64Value limit_kbps = 3;
   */
  limitKbps?: bigint;

  /**
   * Optional Fill interval in milliseconds for the token refills. Defaults to 50ms.
   * It must be at least 20ms to avoid too aggressive refills.
   *
   * @generated from field: google.protobuf.Duration fill_interval = 4;
   */
  fillInterval?: Duration;

  /**
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5;
   */
  runtimeEnabled?: RuntimeFeatureFlag;

  /**
   * Enable response trailers.
   *
   * .. note::
   *
   *   If set true, the following 4 trailers will be added, prefixed by ``response_trailer_prefix``:
   *   * bandwidth-request-delay-ms: delay time in milliseconds it took for the request stream transfer including request body transfer time and the time added by the filter.
   *   * bandwidth-response-delay-ms: delay time in milliseconds it took for the response stream transfer including response body transfer time and the time added by the filter.
   *   * bandwidth-request-filter-delay-ms: delay time in milliseconds in request stream transfer added by the filter.
   *   * bandwidth-response-filter-delay-ms: delay time in milliseconds that added by the filter.
   *   If :ref:`enable_mode <envoy_v3_api_field_extensions.filters.http.bandwidth_limit.v3.BandwidthLimit.enable_mode>` is ``DISABLED`` or ``REQUEST``, the trailers will not be set.
   *   If both the request and response delay time is 0, the trailers will not be set.
   *
   *
   * @generated from field: bool enable_response_trailers = 6;
   */
  enableResponseTrailers: boolean;

  /**
   * Optional The prefix for the response trailers.
   *
   * @generated from field: string response_trailer_prefix = 7;
   */
  responseTrailerPrefix: string;

  constructor(data?: PartialMessage<BandwidthLimit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BandwidthLimit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BandwidthLimit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BandwidthLimit;

  static equals(a: BandwidthLimit | PlainMessage<BandwidthLimit> | undefined, b: BandwidthLimit | PlainMessage<BandwidthLimit> | undefined): boolean;
}

/**
 * Defines the mode for the bandwidth limit filter.
 * Values represent bitmask.
 *
 * @generated from enum envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit.EnableMode
 */
export declare enum BandwidthLimit_EnableMode {
  /**
   * Filter is disabled.
   *
   * @generated from enum value: DISABLED = 0;
   */
  DISABLED = 0,

  /**
   * Filter enabled only for incoming traffic.
   *
   * @generated from enum value: REQUEST = 1;
   */
  REQUEST = 1,

  /**
   * Filter enabled only for outgoing traffic.
   *
   * @generated from enum value: RESPONSE = 2;
   */
  RESPONSE = 2,

  /**
   * Filter enabled for both incoming and outgoing traffic.
   *
   * @generated from enum value: REQUEST_AND_RESPONSE = 3;
   */
  REQUEST_AND_RESPONSE = 3,
}

