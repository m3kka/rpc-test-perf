// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/original_src/v3/original_src.proto" (package "envoy.extensions.filters.http.original_src.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Original Src Filter]
// Use the Original source address on upstream connections.

/**
 * The Original Src filter binds upstream connections to the original source address determined
 * for the request. This address could come from something like the Proxy Protocol filter, or it
 * could come from trusted http headers.
 * [#extension: envoy.filters.http.original_src]
 *
 * @generated from protobuf message envoy.extensions.filters.http.original_src.v3.OriginalSrc
 */
export interface OriginalSrc {
    /**
     * Sets the SO_MARK option on the upstream connection's socket to the provided value. Used to
     * ensure that non-local addresses may be routed back through envoy when binding to the original
     * source address. The option will not be applied if the mark is 0.
     *
     * @generated from protobuf field: uint32 mark = 1;
     */
    mark: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class OriginalSrc$Type extends MessageType<OriginalSrc> {
    constructor() {
        super("envoy.extensions.filters.http.original_src.v3.OriginalSrc", [
            { no: 1, name: "mark", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.original_src.v2alpha1.OriginalSrc" } });
    }
    create(value?: PartialMessage<OriginalSrc>): OriginalSrc {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mark = 0;
        if (value !== undefined)
            reflectionMergePartial<OriginalSrc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OriginalSrc): OriginalSrc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 mark */ 1:
                    message.mark = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OriginalSrc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 mark = 1; */
        if (message.mark !== 0)
            writer.tag(1, WireType.Varint).uint32(message.mark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.original_src.v3.OriginalSrc
 */
export const OriginalSrc = new OriginalSrc$Type();
