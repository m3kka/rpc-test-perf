// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/header_mutation/v3/header_mutation.proto (package envoy.extensions.filters.http.header_mutation.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HeaderMutation as HeaderMutation$1 } from "../../../../../config/common/mutation_rules/v3/mutation_rules_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.header_mutation.v3.Mutations
 */
export declare class Mutations extends Message<Mutations> {
  /**
   * The request mutations are applied before the request is forwarded to the upstream cluster.
   *
   * @generated from field: repeated envoy.config.common.mutation_rules.v3.HeaderMutation request_mutations = 1;
   */
  requestMutations: HeaderMutation$1[];

  /**
   * The response mutations are applied before the response is sent to the downstream client.
   *
   * @generated from field: repeated envoy.config.common.mutation_rules.v3.HeaderMutation response_mutations = 2;
   */
  responseMutations: HeaderMutation$1[];

  constructor(data?: PartialMessage<Mutations>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_mutation.v3.Mutations";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mutations;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mutations;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mutations;

  static equals(a: Mutations | PlainMessage<Mutations> | undefined, b: Mutations | PlainMessage<Mutations> | undefined): boolean;
}

/**
 * Per route configuration for the header mutation filter. If this is configured at multiple levels
 * (route level, virtual host level, and route table level), only the most specific one will be used.
 *
 * @generated from message envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute
 */
export declare class HeaderMutationPerRoute extends Message<HeaderMutationPerRoute> {
  /**
   * @generated from field: envoy.extensions.filters.http.header_mutation.v3.Mutations mutations = 1;
   */
  mutations?: Mutations;

  constructor(data?: PartialMessage<HeaderMutationPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMutationPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMutationPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMutationPerRoute;

  static equals(a: HeaderMutationPerRoute | PlainMessage<HeaderMutationPerRoute> | undefined, b: HeaderMutationPerRoute | PlainMessage<HeaderMutationPerRoute> | undefined): boolean;
}

/**
 * Configuration for the header mutation filter. The mutation rules in the filter configuration will
 * always be applied first and then the per-route mutation rules, if both are specified.
 *
 * @generated from message envoy.extensions.filters.http.header_mutation.v3.HeaderMutation
 */
export declare class HeaderMutation extends Message<HeaderMutation> {
  /**
   * @generated from field: envoy.extensions.filters.http.header_mutation.v3.Mutations mutations = 1;
   */
  mutations?: Mutations;

  constructor(data?: PartialMessage<HeaderMutation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.header_mutation.v3.HeaderMutation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMutation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMutation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMutation;

  static equals(a: HeaderMutation | PlainMessage<HeaderMutation> | undefined, b: HeaderMutation | PlainMessage<HeaderMutation> | undefined): boolean;
}

