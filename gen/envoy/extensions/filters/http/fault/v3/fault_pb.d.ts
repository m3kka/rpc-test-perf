// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/fault/v3/fault.proto (package envoy.extensions.filters.http.fault.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { FractionalPercent } from "../../../../../type/v3/percent_pb.js";
import type { FaultDelay, FaultRateLimit } from "../../../common/fault/v3/fault_pb.js";
import type { HeaderMatcher } from "../../../../../config/route/v3/route_components_pb.js";

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.fault.v3.FaultAbort
 */
export declare class FaultAbort extends Message<FaultAbort> {
  /**
   * @generated from oneof envoy.extensions.filters.http.fault.v3.FaultAbort.error_type
   */
  errorType: {
    /**
     * HTTP status code to use to abort the HTTP request.
     *
     * @generated from field: uint32 http_status = 2;
     */
    value: number;
    case: "httpStatus";
  } | {
    /**
     * gRPC status code to use to abort the gRPC request.
     *
     * @generated from field: uint32 grpc_status = 5;
     */
    value: number;
    case: "grpcStatus";
  } | {
    /**
     * Fault aborts are controlled via an HTTP header (if applicable).
     *
     * @generated from field: envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort header_abort = 4;
     */
    value: FaultAbort_HeaderAbort;
    case: "headerAbort";
  } | { case: undefined; value?: undefined };

  /**
   * The percentage of requests/operations/connections that will be aborted with the error code
   * provided.
   *
   * @generated from field: envoy.type.v3.FractionalPercent percentage = 3;
   */
  percentage?: FractionalPercent;

  constructor(data?: PartialMessage<FaultAbort>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.fault.v3.FaultAbort";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FaultAbort;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FaultAbort;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FaultAbort;

  static equals(a: FaultAbort | PlainMessage<FaultAbort> | undefined, b: FaultAbort | PlainMessage<FaultAbort> | undefined): boolean;
}

/**
 * Fault aborts are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 *
 * @generated from message envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort
 */
export declare class FaultAbort_HeaderAbort extends Message<FaultAbort_HeaderAbort> {
  constructor(data?: PartialMessage<FaultAbort_HeaderAbort>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FaultAbort_HeaderAbort;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FaultAbort_HeaderAbort;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FaultAbort_HeaderAbort;

  static equals(a: FaultAbort_HeaderAbort | PlainMessage<FaultAbort_HeaderAbort> | undefined, b: FaultAbort_HeaderAbort | PlainMessage<FaultAbort_HeaderAbort> | undefined): boolean;
}

/**
 * [#next-free-field: 17]
 *
 * @generated from message envoy.extensions.filters.http.fault.v3.HTTPFault
 */
export declare class HTTPFault extends Message<HTTPFault> {
  /**
   * If specified, the filter will inject delays based on the values in the
   * object.
   *
   * @generated from field: envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;
   */
  delay?: FaultDelay;

  /**
   * If specified, the filter will abort requests based on the values in
   * the object. At least ``abort`` or ``delay`` must be specified.
   *
   * @generated from field: envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;
   */
  abort?: FaultAbort;

  /**
   * Specifies the name of the (destination) upstream cluster that the
   * filter should match on. Fault injection will be restricted to requests
   * bound to the specific upstream cluster.
   *
   * @generated from field: string upstream_cluster = 3;
   */
  upstreamCluster: string;

  /**
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * <envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage>` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   *
   * @generated from field: repeated envoy.config.route.v3.HeaderMatcher headers = 4;
   */
  headers: HeaderMatcher[];

  /**
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * <config_http_conn_man_headers_downstream-service-node>` header and compared
   * against downstream_nodes list.
   *
   * @generated from field: repeated string downstream_nodes = 5;
   */
  downstreamNodes: string[];

  /**
   * The maximum number of faults that can be active at a single time via the configured fault
   * filter. Note that because this setting can be overridden at the route level, it's possible
   * for the number of active faults to be greater than this value (if injected via a different
   * route). If not specified, defaults to unlimited. This setting can be overridden via
   * ``runtime <config_http_filters_fault_injection_runtime>`` and any faults that are not injected
   * due to overflow will be indicated via the ``faults_overflow
   * <config_http_filters_fault_injection_stats>`` stat.
   *
   * .. attention::
   *   Like other :ref:`circuit breakers <arch_overview_circuit_break>` in Envoy, this is a fuzzy
   *   limit. It's possible for the number of active faults to rise slightly above the configured
   *   amount due to the implementation details.
   *
   * @generated from field: google.protobuf.UInt32Value max_active_faults = 6;
   */
  maxActiveFaults?: number;

  /**
   * The response rate limit to be applied to the response body of the stream. When configured,
   * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
   * <config_http_filters_fault_injection_runtime>` runtime key.
   *
   * .. attention::
   *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
   *  will each get an independent limit.
   *
   * @generated from field: envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;
   */
  responseRateLimit?: FaultRateLimit;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.delay.fixed_delay_percent
   *
   * @generated from field: string delay_percent_runtime = 8;
   */
  delayPercentRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.abort_percent
   *
   * @generated from field: string abort_percent_runtime = 9;
   */
  abortPercentRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.delay.fixed_duration_ms
   *
   * @generated from field: string delay_duration_runtime = 10;
   */
  delayDurationRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.http_status
   *
   * @generated from field: string abort_http_status_runtime = 11;
   */
  abortHttpStatusRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.max_active_faults
   *
   * @generated from field: string max_active_faults_runtime = 12;
   */
  maxActiveFaultsRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.rate_limit.response_percent
   *
   * @generated from field: string response_rate_limit_percent_runtime = 13;
   */
  responseRateLimitPercentRuntime: string;

  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.grpc_status
   *
   * @generated from field: string abort_grpc_status_runtime = 14;
   */
  abortGrpcStatusRuntime: string;

  /**
   * To control whether stats storage is allocated dynamically for each downstream server.
   * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
   * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
   * Default value is false.
   *
   * @generated from field: bool disable_downstream_cluster_stats = 15;
   */
  disableDownstreamClusterStats: boolean;

  /**
   * When an abort or delay fault is executed, the metadata struct provided here will be added to the
   * request's dynamic metadata under the namespace corresponding to the name of the fault filter.
   * This data can be logged as part of Access Logs using the :ref:`command operator
   * <config_access_log_command_operators>` %DYNAMIC_METADATA(NAMESPACE)%, where NAMESPACE is the name of
   * the fault filter.
   *
   * @generated from field: google.protobuf.Struct filter_metadata = 16;
   */
  filterMetadata?: Struct;

  constructor(data?: PartialMessage<HTTPFault>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.fault.v3.HTTPFault";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPFault;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPFault;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPFault;

  static equals(a: HTTPFault | PlainMessage<HTTPFault> | undefined, b: HTTPFault | PlainMessage<HTTPFault> | undefined): boolean;
}

