// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/cors/v3/cors.proto (package envoy.extensions.filters.http.cors.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { StringMatcher } from "../../../../../type/matcher/v3/string_pb.js";
import type { RuntimeFractionalPercent } from "../../../../../config/core/v3/base_pb.js";

/**
 * Cors filter config. Set this in
 * ref:`http_filters <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http_filters>`
 * to enable the CORS filter.
 *
 * Please note that the :ref:`CorsPolicy <envoy_v3_api_msg_extensions.filters.http.cors.v3.CorsPolicy>`
 * must be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to make the filter work.
 *
 * @generated from message envoy.extensions.filters.http.cors.v3.Cors
 */
export declare class Cors extends Message<Cors> {
  constructor(data?: PartialMessage<Cors>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.cors.v3.Cors";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cors;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cors;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cors;

  static equals(a: Cors | PlainMessage<Cors> | undefined, b: Cors | PlainMessage<Cors> | undefined): boolean;
}

/**
 * Per route configuration for the CORS filter. This configuration should be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to
 * make the filter work.
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.http.cors.v3.CorsPolicy
 */
export declare class CorsPolicy extends Message<CorsPolicy> {
  /**
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   *
   * @generated from field: repeated envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 1;
   */
  allowOriginStringMatch: StringMatcher[];

  /**
   * Specifies the content for the ``access-control-allow-methods`` header.
   *
   * @generated from field: string allow_methods = 2;
   */
  allowMethods: string;

  /**
   * Specifies the content for the ``access-control-allow-headers`` header.
   *
   * @generated from field: string allow_headers = 3;
   */
  allowHeaders: string;

  /**
   * Specifies the content for the ``access-control-expose-headers`` header.
   *
   * @generated from field: string expose_headers = 4;
   */
  exposeHeaders: string;

  /**
   * Specifies the content for the ``access-control-max-age`` header.
   *
   * @generated from field: string max_age = 5;
   */
  maxAge: string;

  /**
   * Specifies whether the resource allows credentials.
   *
   * @generated from field: google.protobuf.BoolValue allow_credentials = 6;
   */
  allowCredentials?: boolean;

  /**
   * Specifies the % of requests for which the CORS filter is enabled.
   *
   * If neither ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
   * filter will be enabled for 100% of the requests.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is
   * specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 7;
   */
  filterEnabled?: RuntimeFractionalPercent;

  /**
   * Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
   * enforced.
   *
   * This field is intended to be used when ``filter_enabled`` is off. That field have to explicitly disable
   * the filter in order for this setting to take effect.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's ``Origin`` to determine if it's valid but will not enforce any policies.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 8;
   */
  shadowEnabled?: RuntimeFractionalPercent;

  /**
   * Specify whether allow requests whose target server's IP address is more private than that from
   * which the request initiator was fetched.
   *
   * More details refer to https://developer.chrome.com/blog/private-network-access-preflight.
   *
   * @generated from field: google.protobuf.BoolValue allow_private_network_access = 9;
   */
  allowPrivateNetworkAccess?: boolean;

  constructor(data?: PartialMessage<CorsPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.cors.v3.CorsPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CorsPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CorsPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CorsPolicy;

  static equals(a: CorsPolicy | PlainMessage<CorsPolicy> | undefined, b: CorsPolicy | PlainMessage<CorsPolicy> | undefined): boolean;
}

