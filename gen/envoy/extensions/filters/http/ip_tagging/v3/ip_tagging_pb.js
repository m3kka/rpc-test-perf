// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto (package envoy.extensions.filters.http.ip_tagging.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { CidrRange } from "../../../../../config/core/v3/address_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.ip_tagging.v3.IPTagging
 */
export const IPTagging = proto3.makeMessageType(
  "envoy.extensions.filters.http.ip_tagging.v3.IPTagging",
  () => [
    { no: 1, name: "request_type", kind: "enum", T: proto3.getEnumType(IPTagging_RequestType) },
    { no: 4, name: "ip_tags", kind: "message", T: IPTagging_IPTag, repeated: true },
  ],
);

/**
 * The type of requests the filter should apply to. The supported types
 * are internal, external or both. The
 * :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
 * used to determine if a request is internal and will result in
 * :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
 * being set. The filter defaults to both, and it will apply to all request types.
 *
 * @generated from enum envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType
 */
export const IPTagging_RequestType = proto3.makeEnum(
  "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType",
  [
    {no: 0, name: "BOTH"},
    {no: 1, name: "INTERNAL"},
    {no: 2, name: "EXTERNAL"},
  ],
);

/**
 * Supplies the IP tag name and the IP address subnets.
 *
 * @generated from message envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag
 */
export const IPTagging_IPTag = proto3.makeMessageType(
  "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag",
  () => [
    { no: 1, name: "ip_tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip_list", kind: "message", T: CidrRange, repeated: true },
  ],
  {localName: "IPTagging_IPTag"},
);

