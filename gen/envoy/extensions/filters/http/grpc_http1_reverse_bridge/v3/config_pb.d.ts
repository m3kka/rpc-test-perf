// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto (package envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * gRPC reverse bridge filter configuration
 *
 * @generated from message envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig
 */
export declare class FilterConfig extends Message<FilterConfig> {
  /**
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   *
   * @generated from field: string content_type = 1;
   */
  contentType: string;

  /**
   * If true, Envoy will assume that the upstream doesn't understand gRPC frames and
   * strip the gRPC frame from the request, and add it back in to the response. This will
   * hide the gRPC semantics from the upstream, allowing it to receive and respond with a
   * simple binary encoded protobuf. In order to calculate the ``Content-Length`` header value, Envoy
   * will buffer the upstream response unless :ref:`response_size_header
   * <envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.response_size_header>`
   * is set, in which case Envoy will use the value of an upstream header to calculate the content
   * length.
   *
   * @generated from field: bool withhold_grpc_frames = 2;
   */
  withholdGrpcFrames: boolean;

  /**
   * When :ref:`withhold_grpc_frames
   * <envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.withhold_grpc_frames>`
   * is true, this option controls how Envoy calculates the ``Content-Length``. When
   * ``response_size_header`` is empty, Envoy will buffer the upstream response to calculate its
   * size. When ``response_size_header`` is set to a non-empty string, Envoy will stream the response
   * to the downstream and it will use the value of the response header with this name to set the
   * ``Content-Length`` header and gRPC frame size. If the header with this name is repeated, only
   * the first value will be used.
   *
   * Envoy will treat the upstream response as an error if this option is specified and the header
   * is missing or if the value does not match the actual response body size.
   *
   * @generated from field: string response_size_header = 3;
   */
  responseSizeHeader: string;

  constructor(data?: PartialMessage<FilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterConfig;

  static equals(a: FilterConfig | PlainMessage<FilterConfig> | undefined, b: FilterConfig | PlainMessage<FilterConfig> | undefined): boolean;
}

/**
 * gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level.
 *
 * @generated from message envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute
 */
export declare class FilterConfigPerRoute extends Message<FilterConfigPerRoute> {
  /**
   * If true, disables gRPC reverse bridge filter for this particular vhost or route.
   * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
   *
   * @generated from field: bool disabled = 1;
   */
  disabled: boolean;

  constructor(data?: PartialMessage<FilterConfigPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterConfigPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterConfigPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterConfigPerRoute;

  static equals(a: FilterConfigPerRoute | PlainMessage<FilterConfigPerRoute> | undefined, b: FilterConfigPerRoute | PlainMessage<FilterConfigPerRoute> | undefined): boolean;
}

