// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/grpc_json_transcoder/v3/transcoder.proto" (package "envoy.extensions.filters.http.grpc_json_transcoder.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: gRPC-JSON transcoder]
// gRPC-JSON transcoder :ref:`configuration overview <config_http_filters_grpc_json_transcoder>`.
// [#extension: envoy.filters.http.grpc_json_transcoder]

/**
 * [#next-free-field: 17]
 * GrpcJsonTranscoder filter configuration.
 * The filter itself can be used per route / per virtual host or on the general level. The most
 * specific one is being used for a given route. If the list of services is empty - filter
 * is considered to be disabled.
 * Note that if specifying the filter per route, first the route is matched, and then transcoding
 * filter is applied. It matters when specifying the route configuration and paths to match the
 * request - for per-route grpc transcoder configs, the original path should be matched, while
 * in other cases, the grpc-like path is expected (the one AFTER the filter is applied).
 *
 * @generated from protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
 */
export interface GrpcJsonTranscoder {
    /**
     * @generated from protobuf oneof: descriptor_set
     */
    descriptorSet: {
        oneofKind: "protoDescriptor";
        /**
         * Supplies the filename of
         * :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
         * services.
         *
         * @generated from protobuf field: string proto_descriptor = 1;
         */
        protoDescriptor: string;
    } | {
        oneofKind: "protoDescriptorBin";
        /**
         * Supplies the binary content of
         * :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
         * services.
         *
         * @generated from protobuf field: bytes proto_descriptor_bin = 4;
         */
        protoDescriptorBin: Uint8Array;
    } | {
        oneofKind: undefined;
    };
    /**
     * A list of strings that
     * supplies the fully qualified service names (i.e. "package_name.service_name") that
     * the transcoder will translate. If the service name doesn't exist in ``proto_descriptor``,
     * Envoy will fail at startup. The ``proto_descriptor`` may contain more services than
     * the service names specified here, but they won't be translated.
     *
     * By default, the filter will pass through requests that do not map to any specified services.
     * If the list of services is empty, filter is considered disabled.
     * However, this behavior changes if
     * :ref:`reject_unknown_method <envoy_v3_api_field_extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions.reject_unknown_method>`
     * is enabled.
     *
     * @generated from protobuf field: repeated string services = 2;
     */
    services: string[];
    /**
     * Control options for response JSON. These options are passed directly to
     * `JsonPrintOptions <https://developers.google.com/protocol-buffers/docs/reference/cpp/
     * google.protobuf.util.json_util#JsonPrintOptions>`_.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions print_options = 3;
     */
    printOptions?: GrpcJsonTranscoder_PrintOptions;
    /**
     * Whether to keep the incoming request route after the outgoing headers have been transformed to
     * the match the upstream gRPC service. Note: This means that routes for gRPC services that are
     * not transcoded cannot be used in combination with ``match_incoming_request_route``.
     *
     * @generated from protobuf field: bool match_incoming_request_route = 5;
     */
    matchIncomingRequestRoute: boolean;
    /**
     * A list of query parameters to be ignored for transcoding method mapping.
     * By default, the transcoder filter will not transcode a request if there are any
     * unknown/invalid query parameters.
     *
     * Example :
     *
     * .. code-block:: proto
     *
     *     service Bookstore {
     *       rpc GetShelf(GetShelfRequest) returns (Shelf) {
     *         option (google.api.http) = {
     *           get: "/shelves/{shelf}"
     *         };
     *       }
     *     }
     *
     *     message GetShelfRequest {
     *       int64 shelf = 1;
     *     }
     *
     *     message Shelf {}
     *
     * The request ``/shelves/100?foo=bar`` will not be mapped to ``GetShelf``` because variable
     * binding for ``foo`` is not defined. Adding ``foo`` to ``ignored_query_parameters`` will allow
     * the same request to be mapped to ``GetShelf``.
     *
     * @generated from protobuf field: repeated string ignored_query_parameters = 6;
     */
    ignoredQueryParameters: string[];
    /**
     * Whether to route methods without the ``google.api.http`` option.
     *
     * Example :
     *
     * .. code-block:: proto
     *
     *     package bookstore;
     *
     *     service Bookstore {
     *       rpc GetShelf(GetShelfRequest) returns (Shelf) {}
     *     }
     *
     *     message GetShelfRequest {
     *       int64 shelf = 1;
     *     }
     *
     *     message Shelf {}
     *
     * The client could ``post`` a json body ``{"shelf": 1234}`` with the path of
     * ``/bookstore.Bookstore/GetShelfRequest`` to call ``GetShelfRequest``.
     *
     * @generated from protobuf field: bool auto_mapping = 7;
     */
    autoMapping: boolean;
    /**
     * Whether to ignore query parameters that cannot be mapped to a corresponding
     * protobuf field. Use this if you cannot control the query parameters and do
     * not know them beforehand. Otherwise use ``ignored_query_parameters``.
     * Defaults to false.
     *
     * @generated from protobuf field: bool ignore_unknown_query_parameters = 8;
     */
    ignoreUnknownQueryParameters: boolean;
    /**
     * Whether to convert gRPC status headers to JSON.
     * When trailer indicates a gRPC error and there was no HTTP body, take ``google.rpc.Status``
     * from the ``grpc-status-details-bin`` header and use it as JSON body.
     * If there was no such header, make ``google.rpc.Status`` out of the ``grpc-status`` and
     * ``grpc-message`` headers.
     * The error details types must be present in the ``proto_descriptor``.
     *
     * For example, if an upstream server replies with headers:
     *
     * .. code-block:: none
     *
     *     grpc-status: 5
     *     grpc-status-details-bin:
     *         CAUaMwoqdHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUucnBjLlJlcXVlc3RJbmZvEgUKA3ItMQ
     *
     * The ``grpc-status-details-bin`` header contains a base64-encoded protobuf message
     * ``google.rpc.Status``. It will be transcoded into:
     *
     * .. code-block:: none
     *
     *     HTTP/1.1 404 Not Found
     *     content-type: application/json
     *
     *     {"code":5,"details":[{"@type":"type.googleapis.com/google.rpc.RequestInfo","requestId":"r-1"}]}
     *
     * In order to transcode the message, the ``google.rpc.RequestInfo`` type from
     * the ``google/rpc/error_details.proto`` should be included in the configured
     * :ref:`proto descriptor set <config_grpc_json_generate_proto_descriptor_set>`.
     *
     * @generated from protobuf field: bool convert_grpc_status = 9;
     */
    convertGrpcStatus: boolean;
    /**
     * URL unescaping policy.
     * This spec is only applied when extracting variable with multiple segments in the URL path.
     * For example, in case of ``/foo/{x=*}/bar/{y=prefix/*}/{z=**}`` ``x`` variable is single segment and ``y`` and ``z`` are multiple segments.
     * For a path with ``/foo/first/bar/prefix/second/third/fourth``, ``x=first``, ``y=prefix/second``, ``z=third/fourth``.
     * If this setting is not specified, the value defaults to :ref:`ALL_CHARACTERS_EXCEPT_RESERVED<envoy_v3_api_enum_value_extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec.ALL_CHARACTERS_EXCEPT_RESERVED>`.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec url_unescape_spec = 10;
     */
    urlUnescapeSpec: GrpcJsonTranscoder_UrlUnescapeSpec;
    /**
     * If true, unescape '+' to space when extracting variables in query parameters.
     * This is to support `HTML 2.0 <https://tools.ietf.org/html/rfc1866#section-8.2.1>`_
     *
     * @generated from protobuf field: bool query_param_unescape_plus = 12;
     */
    queryParamUnescapePlus: boolean;
    /**
     * If true, try to match the custom verb even if it is unregistered. By
     * default, only match when it is registered.
     *
     * According to the http template `syntax <https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L226-L231>`_,
     * the custom verb is **":" LITERAL** at the end of http template.
     *
     * For a request with ``/foo/bar:baz`` and ``:baz`` is not registered in any url_template, here is the behavior change
     * - if the field is not set, ``:baz`` will not be treated as custom verb, so it will match ``/foo/{x=*}``.
     * - if the field is set, ``:baz`` is treated as custom verb,  so it will NOT match ``/foo/{x=*}`` since the template doesn't use any custom verb.
     *
     * @generated from protobuf field: bool match_unregistered_custom_verb = 13;
     */
    matchUnregisteredCustomVerb: boolean;
    /**
     * Configure the behavior when handling requests that cannot be transcoded.
     *
     * By default, the transcoder will silently pass through HTTP requests that are malformed.
     * This includes requests with unknown query parameters, unregister paths, etc.
     *
     * Set these options to enable strict HTTP request validation, resulting in the transcoder rejecting
     * such requests with a ``HTTP 4xx``. See each individual option for more details on the validation.
     * gRPC requests will still silently pass through without transcoding.
     *
     * The benefit is a proper error message to the downstream.
     * If the upstream is a gRPC server, it cannot handle the passed-through HTTP requests and will reset
     * the TCP connection. The downstream will then
     * receive a ``HTTP 503 Service Unavailable`` due to the upstream connection reset.
     * This incorrect error message may conflict with other Envoy components, such as retry policies.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions request_validation_options = 11;
     */
    requestValidationOptions?: GrpcJsonTranscoder_RequestValidationOptions;
    /**
     * Proto enum values are supposed to be in upper cases when used in JSON.
     * Set this to true if your JSON request uses non uppercase enum values.
     *
     * @generated from protobuf field: bool case_insensitive_enum_parsing = 14;
     */
    caseInsensitiveEnumParsing: boolean;
    /**
     * The maximum size of a request body to be transcoded, in bytes. A body exceeding this size will
     * provoke a ``HTTP 413 Request Entity Too Large`` response.
     *
     * Large values may cause envoy to use a lot of memory if there are many concurrent requests.
     *
     * If unset, the current stream buffer size is used.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_request_body_size = 15;
     */
    maxRequestBodySize?: UInt32Value;
    /**
     * The maximum size of a response body to be transcoded, in bytes. A body exceeding this size will
     * provoke a ``HTTP 500 Internal Server Error`` response.
     *
     * Large values may cause envoy to use a lot of memory if there are many concurrent requests.
     *
     * If unset, the current stream buffer size is used.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_response_body_size = 16;
     */
    maxResponseBodySize?: UInt32Value;
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions
 */
export interface GrpcJsonTranscoder_PrintOptions {
    /**
     * Whether to add spaces, line breaks and indentation to make the JSON
     * output easy to read. Defaults to false.
     *
     * @generated from protobuf field: bool add_whitespace = 1;
     */
    addWhitespace: boolean;
    /**
     * Whether to always print primitive fields. By default primitive
     * fields with default values will be omitted in JSON output. For
     * example, an int32 field set to 0 will be omitted. Setting this flag to
     * true will override the default behavior and print primitive fields
     * regardless of their values. Defaults to false.
     *
     * @generated from protobuf field: bool always_print_primitive_fields = 2;
     */
    alwaysPrintPrimitiveFields: boolean;
    /**
     * Whether to always print enums as ints. By default they are rendered
     * as strings. Defaults to false.
     *
     * @generated from protobuf field: bool always_print_enums_as_ints = 3;
     */
    alwaysPrintEnumsAsInts: boolean;
    /**
     * Whether to preserve proto field names. By default protobuf will
     * generate JSON field names using the ``json_name`` option, or lower camel case,
     * in that order. Setting this flag will preserve the original field names. Defaults to false.
     *
     * @generated from protobuf field: bool preserve_proto_field_names = 4;
     */
    preserveProtoFieldNames: boolean;
    /**
     * If true, return all streams as newline-delimited JSON messages instead of as a comma-separated array
     *
     * @generated from protobuf field: bool stream_newline_delimited = 5;
     */
    streamNewlineDelimited: boolean;
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions
 */
export interface GrpcJsonTranscoder_RequestValidationOptions {
    /**
     * By default, a request that cannot be mapped to any specified gRPC
     * :ref:`services <envoy_v3_api_field_extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.services>`
     * will pass-through this filter.
     * When set to true, the request will be rejected with a ``HTTP 404 Not Found``.
     *
     * @generated from protobuf field: bool reject_unknown_method = 1;
     */
    rejectUnknownMethod: boolean;
    /**
     * By default, a request with query parameters that cannot be mapped to the gRPC request message
     * will pass-through this filter.
     * When set to true, the request will be rejected with a ``HTTP 400 Bad Request``.
     *
     * The fields
     * :ref:`ignore_unknown_query_parameters <envoy_v3_api_field_extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.ignore_unknown_query_parameters>`
     * and
     * :ref:`ignored_query_parameters <envoy_v3_api_field_extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.ignored_query_parameters>`
     * have priority over this strict validation behavior.
     *
     * @generated from protobuf field: bool reject_unknown_query_parameters = 2;
     */
    rejectUnknownQueryParameters: boolean;
    // By default, transcoding will default to the value in the body if there
    // are conflict values in the bindings. For example,
    // 
    // post: '/resources/a?id=123'
    // body: {
    //         id: 456,
    // }

    /**
     * "id: 456" in the body will override "id=123" in the binding.
     *
     * If this field is set to true, the request will be rejected if the binding
     * value is different from the body value.
     *
     * @generated from protobuf field: bool reject_binding_body_field_collisions = 3;
     */
    rejectBindingBodyFieldCollisions: boolean;
}
/**
 * @generated from protobuf enum envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec
 */
export enum GrpcJsonTranscoder_UrlUnescapeSpec {
    /**
     * URL path parameters will not decode RFC 6570 reserved characters.
     * For example, segment ``%2f%23/%20%2523`` is unescaped to ``%2f%23/ %23``.
     *
     * @generated from protobuf enum value: ALL_CHARACTERS_EXCEPT_RESERVED = 0;
     */
    ALL_CHARACTERS_EXCEPT_RESERVED = 0,
    /**
     * URL path parameters will be fully URI-decoded except in
     * cases of single segment matches in reserved expansion, where ``%2F`` will be
     * left encoded.
     * For example, segment ``%2f%23/%20%2523`` is unescaped to ``%2f#/ %23``.
     *
     * @generated from protobuf enum value: ALL_CHARACTERS_EXCEPT_SLASH = 1;
     */
    ALL_CHARACTERS_EXCEPT_SLASH = 1,
    /**
     * URL path parameters will be fully URI-decoded.
     * For example, segment ``%2f%23/%20%2523`` is unescaped to ``/#/ %23``.
     *
     * @generated from protobuf enum value: ALL_CHARACTERS = 2;
     */
    ALL_CHARACTERS = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GrpcJsonTranscoder$Type extends MessageType<GrpcJsonTranscoder> {
    constructor() {
        super("envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder", [
            { no: 1, name: "proto_descriptor", kind: "scalar", oneof: "descriptorSet", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "proto_descriptor_bin", kind: "scalar", oneof: "descriptorSet", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "services", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "print_options", kind: "message", T: () => GrpcJsonTranscoder_PrintOptions },
            { no: 5, name: "match_incoming_request_route", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ignored_query_parameters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "auto_mapping", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "ignore_unknown_query_parameters", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "convert_grpc_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "url_unescape_spec", kind: "enum", T: () => ["envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec", GrpcJsonTranscoder_UrlUnescapeSpec], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 12, name: "query_param_unescape_plus", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "match_unregistered_custom_verb", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "request_validation_options", kind: "message", T: () => GrpcJsonTranscoder_RequestValidationOptions },
            { no: 14, name: "case_insensitive_enum_parsing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "max_request_body_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gt: 0 } } } },
            { no: 16, name: "max_response_body_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gt: 0 } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder" } });
    }
    create(value?: PartialMessage<GrpcJsonTranscoder>): GrpcJsonTranscoder {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.descriptorSet = { oneofKind: undefined };
        message.services = [];
        message.matchIncomingRequestRoute = false;
        message.ignoredQueryParameters = [];
        message.autoMapping = false;
        message.ignoreUnknownQueryParameters = false;
        message.convertGrpcStatus = false;
        message.urlUnescapeSpec = 0;
        message.queryParamUnescapePlus = false;
        message.matchUnregisteredCustomVerb = false;
        message.caseInsensitiveEnumParsing = false;
        if (value !== undefined)
            reflectionMergePartial<GrpcJsonTranscoder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcJsonTranscoder): GrpcJsonTranscoder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string proto_descriptor */ 1:
                    message.descriptorSet = {
                        oneofKind: "protoDescriptor",
                        protoDescriptor: reader.string()
                    };
                    break;
                case /* bytes proto_descriptor_bin */ 4:
                    message.descriptorSet = {
                        oneofKind: "protoDescriptorBin",
                        protoDescriptorBin: reader.bytes()
                    };
                    break;
                case /* repeated string services */ 2:
                    message.services.push(reader.string());
                    break;
                case /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions print_options */ 3:
                    message.printOptions = GrpcJsonTranscoder_PrintOptions.internalBinaryRead(reader, reader.uint32(), options, message.printOptions);
                    break;
                case /* bool match_incoming_request_route */ 5:
                    message.matchIncomingRequestRoute = reader.bool();
                    break;
                case /* repeated string ignored_query_parameters */ 6:
                    message.ignoredQueryParameters.push(reader.string());
                    break;
                case /* bool auto_mapping */ 7:
                    message.autoMapping = reader.bool();
                    break;
                case /* bool ignore_unknown_query_parameters */ 8:
                    message.ignoreUnknownQueryParameters = reader.bool();
                    break;
                case /* bool convert_grpc_status */ 9:
                    message.convertGrpcStatus = reader.bool();
                    break;
                case /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec url_unescape_spec */ 10:
                    message.urlUnescapeSpec = reader.int32();
                    break;
                case /* bool query_param_unescape_plus */ 12:
                    message.queryParamUnescapePlus = reader.bool();
                    break;
                case /* bool match_unregistered_custom_verb */ 13:
                    message.matchUnregisteredCustomVerb = reader.bool();
                    break;
                case /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions request_validation_options */ 11:
                    message.requestValidationOptions = GrpcJsonTranscoder_RequestValidationOptions.internalBinaryRead(reader, reader.uint32(), options, message.requestValidationOptions);
                    break;
                case /* bool case_insensitive_enum_parsing */ 14:
                    message.caseInsensitiveEnumParsing = reader.bool();
                    break;
                case /* google.protobuf.UInt32Value max_request_body_size */ 15:
                    message.maxRequestBodySize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxRequestBodySize);
                    break;
                case /* google.protobuf.UInt32Value max_response_body_size */ 16:
                    message.maxResponseBodySize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxResponseBodySize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcJsonTranscoder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string proto_descriptor = 1; */
        if (message.descriptorSet.oneofKind === "protoDescriptor")
            writer.tag(1, WireType.LengthDelimited).string(message.descriptorSet.protoDescriptor);
        /* bytes proto_descriptor_bin = 4; */
        if (message.descriptorSet.oneofKind === "protoDescriptorBin")
            writer.tag(4, WireType.LengthDelimited).bytes(message.descriptorSet.protoDescriptorBin);
        /* repeated string services = 2; */
        for (let i = 0; i < message.services.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.services[i]);
        /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions print_options = 3; */
        if (message.printOptions)
            GrpcJsonTranscoder_PrintOptions.internalBinaryWrite(message.printOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool match_incoming_request_route = 5; */
        if (message.matchIncomingRequestRoute !== false)
            writer.tag(5, WireType.Varint).bool(message.matchIncomingRequestRoute);
        /* repeated string ignored_query_parameters = 6; */
        for (let i = 0; i < message.ignoredQueryParameters.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.ignoredQueryParameters[i]);
        /* bool auto_mapping = 7; */
        if (message.autoMapping !== false)
            writer.tag(7, WireType.Varint).bool(message.autoMapping);
        /* bool ignore_unknown_query_parameters = 8; */
        if (message.ignoreUnknownQueryParameters !== false)
            writer.tag(8, WireType.Varint).bool(message.ignoreUnknownQueryParameters);
        /* bool convert_grpc_status = 9; */
        if (message.convertGrpcStatus !== false)
            writer.tag(9, WireType.Varint).bool(message.convertGrpcStatus);
        /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.UrlUnescapeSpec url_unescape_spec = 10; */
        if (message.urlUnescapeSpec !== 0)
            writer.tag(10, WireType.Varint).int32(message.urlUnescapeSpec);
        /* bool query_param_unescape_plus = 12; */
        if (message.queryParamUnescapePlus !== false)
            writer.tag(12, WireType.Varint).bool(message.queryParamUnescapePlus);
        /* bool match_unregistered_custom_verb = 13; */
        if (message.matchUnregisteredCustomVerb !== false)
            writer.tag(13, WireType.Varint).bool(message.matchUnregisteredCustomVerb);
        /* envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions request_validation_options = 11; */
        if (message.requestValidationOptions)
            GrpcJsonTranscoder_RequestValidationOptions.internalBinaryWrite(message.requestValidationOptions, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool case_insensitive_enum_parsing = 14; */
        if (message.caseInsensitiveEnumParsing !== false)
            writer.tag(14, WireType.Varint).bool(message.caseInsensitiveEnumParsing);
        /* google.protobuf.UInt32Value max_request_body_size = 15; */
        if (message.maxRequestBodySize)
            UInt32Value.internalBinaryWrite(message.maxRequestBodySize, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_response_body_size = 16; */
        if (message.maxResponseBodySize)
            UInt32Value.internalBinaryWrite(message.maxResponseBodySize, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
 */
export const GrpcJsonTranscoder = new GrpcJsonTranscoder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcJsonTranscoder_PrintOptions$Type extends MessageType<GrpcJsonTranscoder_PrintOptions> {
    constructor() {
        super("envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions", [
            { no: 1, name: "add_whitespace", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "always_print_primitive_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "always_print_enums_as_ints", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "preserve_proto_field_names", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "stream_newline_delimited", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder.PrintOptions" } });
    }
    create(value?: PartialMessage<GrpcJsonTranscoder_PrintOptions>): GrpcJsonTranscoder_PrintOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.addWhitespace = false;
        message.alwaysPrintPrimitiveFields = false;
        message.alwaysPrintEnumsAsInts = false;
        message.preserveProtoFieldNames = false;
        message.streamNewlineDelimited = false;
        if (value !== undefined)
            reflectionMergePartial<GrpcJsonTranscoder_PrintOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcJsonTranscoder_PrintOptions): GrpcJsonTranscoder_PrintOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool add_whitespace */ 1:
                    message.addWhitespace = reader.bool();
                    break;
                case /* bool always_print_primitive_fields */ 2:
                    message.alwaysPrintPrimitiveFields = reader.bool();
                    break;
                case /* bool always_print_enums_as_ints */ 3:
                    message.alwaysPrintEnumsAsInts = reader.bool();
                    break;
                case /* bool preserve_proto_field_names */ 4:
                    message.preserveProtoFieldNames = reader.bool();
                    break;
                case /* bool stream_newline_delimited */ 5:
                    message.streamNewlineDelimited = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcJsonTranscoder_PrintOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool add_whitespace = 1; */
        if (message.addWhitespace !== false)
            writer.tag(1, WireType.Varint).bool(message.addWhitespace);
        /* bool always_print_primitive_fields = 2; */
        if (message.alwaysPrintPrimitiveFields !== false)
            writer.tag(2, WireType.Varint).bool(message.alwaysPrintPrimitiveFields);
        /* bool always_print_enums_as_ints = 3; */
        if (message.alwaysPrintEnumsAsInts !== false)
            writer.tag(3, WireType.Varint).bool(message.alwaysPrintEnumsAsInts);
        /* bool preserve_proto_field_names = 4; */
        if (message.preserveProtoFieldNames !== false)
            writer.tag(4, WireType.Varint).bool(message.preserveProtoFieldNames);
        /* bool stream_newline_delimited = 5; */
        if (message.streamNewlineDelimited !== false)
            writer.tag(5, WireType.Varint).bool(message.streamNewlineDelimited);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.PrintOptions
 */
export const GrpcJsonTranscoder_PrintOptions = new GrpcJsonTranscoder_PrintOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcJsonTranscoder_RequestValidationOptions$Type extends MessageType<GrpcJsonTranscoder_RequestValidationOptions> {
    constructor() {
        super("envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions", [
            { no: 1, name: "reject_unknown_method", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "reject_unknown_query_parameters", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "reject_binding_body_field_collisions", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GrpcJsonTranscoder_RequestValidationOptions>): GrpcJsonTranscoder_RequestValidationOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rejectUnknownMethod = false;
        message.rejectUnknownQueryParameters = false;
        message.rejectBindingBodyFieldCollisions = false;
        if (value !== undefined)
            reflectionMergePartial<GrpcJsonTranscoder_RequestValidationOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcJsonTranscoder_RequestValidationOptions): GrpcJsonTranscoder_RequestValidationOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool reject_unknown_method */ 1:
                    message.rejectUnknownMethod = reader.bool();
                    break;
                case /* bool reject_unknown_query_parameters */ 2:
                    message.rejectUnknownQueryParameters = reader.bool();
                    break;
                case /* bool reject_binding_body_field_collisions */ 3:
                    message.rejectBindingBodyFieldCollisions = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcJsonTranscoder_RequestValidationOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool reject_unknown_method = 1; */
        if (message.rejectUnknownMethod !== false)
            writer.tag(1, WireType.Varint).bool(message.rejectUnknownMethod);
        /* bool reject_unknown_query_parameters = 2; */
        if (message.rejectUnknownQueryParameters !== false)
            writer.tag(2, WireType.Varint).bool(message.rejectUnknownQueryParameters);
        /* bool reject_binding_body_field_collisions = 3; */
        if (message.rejectBindingBodyFieldCollisions !== false)
            writer.tag(3, WireType.Varint).bool(message.rejectBindingBodyFieldCollisions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder.RequestValidationOptions
 */
export const GrpcJsonTranscoder_RequestValidationOptions = new GrpcJsonTranscoder_RequestValidationOptions$Type();
