// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/grpc_stats/v3/config.proto (package envoy.extensions.filters.http.grpc_stats.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, BoolValue, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcMethodList } from "../../../../../config/core/v3/grpc_method_list_pb.js";

/**
 * gRPC statistics filter configuration
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
 */
export declare class FilterConfig extends Message<FilterConfig> {
  /**
   * If true, the filter maintains a filter state object with the request and response message
   * counts.
   *
   * @generated from field: bool emit_filter_state = 1;
   */
  emitFilterState: boolean;

  /**
   * @generated from oneof envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.per_method_stat_specifier
   */
  perMethodStatSpecifier: {
    /**
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: ``cluster.<name>.grpc.*``.
     *
     * @generated from field: envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;
     */
    value: GrpcMethodList;
    case: "individualMethodStatsAllowlist";
  } | {
    /**
     * If set to true, emit stats for all service/method names.
     *
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix ``cluster.<name>.grpc``. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     *
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     *
     * .. attention::
     *   If neither ``individual_method_stats_allowlist`` nor ``stats_for_all_methods`` is set, the
     *   behavior will default to ``stats_for_all_methods=false``.
     *
     * @generated from field: google.protobuf.BoolValue stats_for_all_methods = 3;
     */
    value: BoolValue;
    case: "statsForAllMethods";
  } | { case: undefined; value?: undefined };

  /**
   * If true, the filter will gather a histogram for the request time of the upstream.
   * It works with :ref:`stats_for_all_methods
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>`
   * and :ref:`individual_method_stats_allowlist
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist>` the same way
   * request_message_count and response_message_count works.
   *
   * @generated from field: bool enable_upstream_stats = 4;
   */
  enableUpstreamStats: boolean;

  /**
   * If true, the filter will replace dots in the grpc_service_name with underscores before emitting
   * the metrics. Only works when :ref:`stats_for_all_methods
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>`
   * is set to true. It could cause metrics to be merged if the edited service name conflicts with
   * an existing service. For example there are both service "foo.bar" & "foo_bar" running.
   * This config can fix incorrect gRPC metrics with dots because the existing stats tag extractor
   * assumes no dots in the gRPC service name. By default this is set as false.
   *
   * @generated from field: bool replace_dots_in_grpc_service_name = 5;
   */
  replaceDotsInGrpcServiceName: boolean;

  constructor(data?: PartialMessage<FilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_stats.v3.FilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterConfig;

  static equals(a: FilterConfig | PlainMessage<FilterConfig> | undefined, b: FilterConfig | PlainMessage<FilterConfig> | undefined): boolean;
}

/**
 * gRPC statistics filter state object in protobuf form.
 *
 * @generated from message envoy.extensions.filters.http.grpc_stats.v3.FilterObject
 */
export declare class FilterObject extends Message<FilterObject> {
  /**
   * Count of request messages in the request stream.
   *
   * @generated from field: uint64 request_message_count = 1;
   */
  requestMessageCount: bigint;

  /**
   * Count of response messages in the response stream.
   *
   * @generated from field: uint64 response_message_count = 2;
   */
  responseMessageCount: bigint;

  constructor(data?: PartialMessage<FilterObject>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_stats.v3.FilterObject";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterObject;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterObject;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterObject;

  static equals(a: FilterObject | PlainMessage<FilterObject> | undefined, b: FilterObject | PlainMessage<FilterObject> | undefined): boolean;
}

