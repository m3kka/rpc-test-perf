// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/ext_proc/v3/ext_proc.proto (package envoy.extensions.filters.http.ext_proc.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Struct } from "@bufbuild/protobuf";
import { GrpcService } from "../../../../../config/core/v3/grpc_service_pb.js";
import { ProcessingMode } from "./processing_mode_pb.js";
import { HeaderMutationRules } from "../../../../../config/common/mutation_rules/v3/mutation_rules_pb.js";
import { ListStringMatcher } from "../../../../../type/matcher/v3/string_pb.js";

/**
 * The filter communicates with an external gRPC service called an "external processor"
 * that can do a variety of things with the request and response:
 *
 * * Access and modify the HTTP headers on the request, response, or both
 * * Access and modify the HTTP request and response bodies
 * * Access and modify the dynamic stream metadata
 * * Immediately send an HTTP response downstream and terminate other processing
 *
 * The filter communicates with the server using a gRPC bidirectional stream. After the initial
 * request, the external server is in control over what additional data is sent to it
 * and how it should be processed.
 *
 * By implementing the protocol specified by the stream, the external server can choose:
 *
 * * Whether it receives the response message at all
 * * Whether it receives the message body at all, in separate chunks, or as a single buffer
 * * Whether subsequent HTTP requests are transmitted synchronously or whether they are
 *   sent asynchronously.
 * * To modify request or response trailers if they already exist
 * * To add request or response trailers where they are not present
 *
 * The filter supports up to six different processing steps. Each is represented by
 * a gRPC stream message that is sent to the external processor. For each message, the
 * processor must send a matching response.
 *
 * * Request headers: Contains the headers from the original HTTP request.
 * * Request body: Sent in a single message if the BUFFERED or BUFFERED_PARTIAL
 *   mode is chosen, in multiple messages if the STREAMED mode is chosen, and not
 *   at all otherwise.
 * * Request trailers: Delivered if they are present and if the trailer mode is set
 *   to SEND.
 * * Response headers: Contains the headers from the HTTP response. Keep in mind
 *   that if the upstream system sends them before processing the request body that
 *   this message may arrive before the complete body.
 * * Response body: Sent according to the processing mode like the request body.
 * * Response trailers: Delivered according to the processing mode like the
 *   request trailers.
 *
 * By default, the processor sends only the request and response headers messages.
 * This may be changed to include any of the six steps by changing the processing_mode
 * setting of the filter configuration, or by setting the mode_override of any response
 * from the external processor. The latter is only enabled if allow_mode_override is
 * set to true. This way, a processor may, for example, use information
 * in the request header to determine whether the message body must be examined, or whether
 * the proxy should simply stream it straight through.
 *
 * All of this together allows a server to process the filter traffic in fairly
 * sophisticated ways. For example:
 *
 * * A server may choose to examine all or part of the HTTP message bodies depending
 *   on the content of the headers.
 * * A server may choose to immediately reject some messages based on their HTTP
 *   headers (or other dynamic metadata) and more carefully examine others.
 * * A server may asynchronously monitor traffic coming through the filter by inspecting
 *   headers, bodies, or both, and then decide to switch to a synchronous processing
 *   mode, either permanently or temporarily.
 *
 * The protocol itself is based on a bidirectional gRPC stream. Envoy will send the
 * server
 * :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`
 * messages, and the server must reply with
 * :ref:`ProcessingResponse <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>`.
 *
 * Stats about each gRPC call are recorded in a :ref:`dynamic filter state
 * <arch_overview_advanced_filter_state_sharing>` object in a namespace matching the filter
 * name.
 *
 * [#next-free-field: 15]
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
 */
export const ExternalProcessor = proto3.makeMessageType(
  "envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor",
  () => [
    { no: 1, name: "grpc_service", kind: "message", T: GrpcService },
    { no: 2, name: "failure_mode_allow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "processing_mode", kind: "message", T: ProcessingMode },
    { no: 4, name: "async_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "request_attributes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "response_attributes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "message_timeout", kind: "message", T: Duration },
    { no: 8, name: "stat_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "mutation_rules", kind: "message", T: HeaderMutationRules },
    { no: 10, name: "max_message_timeout", kind: "message", T: Duration },
    { no: 11, name: "disable_clear_route_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "forward_rules", kind: "message", T: HeaderForwardingRules },
    { no: 13, name: "filter_metadata", kind: "message", T: Struct },
    { no: 14, name: "allow_mode_override", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * The HeaderForwardingRules structure specifies what headers are
 * allowed to be forwarded to the external processing server.
 *
 * This works as below:
 *
 *   1. If neither ``allowed_headers`` nor ``disallowed_headers`` is set, all headers are forwarded.
 *   2. If both ``allowed_headers`` and ``disallowed_headers`` are set, only headers in the
 *      ``allowed_headers`` but not in the ``disallowed_headers`` are forwarded.
 *   3. If ``allowed_headers`` is set, and ``disallowed_headers`` is not set, only headers in
 *      the ``allowed_headers`` are forwarded.
 *   4. If ``disallowed_headers`` is set, and ``allowed_headers`` is not set, all headers except
 *      headers in the ``disallowed_headers`` are forwarded.
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.HeaderForwardingRules
 */
export const HeaderForwardingRules = proto3.makeMessageType(
  "envoy.extensions.filters.http.ext_proc.v3.HeaderForwardingRules",
  () => [
    { no: 1, name: "allowed_headers", kind: "message", T: ListStringMatcher },
    { no: 2, name: "disallowed_headers", kind: "message", T: ListStringMatcher },
  ],
);

/**
 * Extra settings that may be added to per-route configuration for a
 * virtual host or cluster.
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.ExtProcPerRoute
 */
export const ExtProcPerRoute = proto3.makeMessageType(
  "envoy.extensions.filters.http.ext_proc.v3.ExtProcPerRoute",
  () => [
    { no: 1, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "override" },
    { no: 2, name: "overrides", kind: "message", T: ExtProcOverrides, oneof: "override" },
  ],
);

/**
 * Overrides that may be set on a per-route basis
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.ExtProcOverrides
 */
export const ExtProcOverrides = proto3.makeMessageType(
  "envoy.extensions.filters.http.ext_proc.v3.ExtProcOverrides",
  () => [
    { no: 1, name: "processing_mode", kind: "message", T: ProcessingMode },
    { no: 2, name: "async_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "request_attributes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "response_attributes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "grpc_service", kind: "message", T: GrpcService },
  ],
);

