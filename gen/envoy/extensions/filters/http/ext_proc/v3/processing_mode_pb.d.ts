// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto (package envoy.extensions.filters.http.ext_proc.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.ProcessingMode
 */
export declare class ProcessingMode extends Message<ProcessingMode> {
  /**
   * How to handle the request header. Default is "SEND".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_header_mode = 1;
   */
  requestHeaderMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the response header. Default is "SEND".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_header_mode = 2;
   */
  responseHeaderMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the request body. Default is "NONE".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode = 3;
   */
  requestBodyMode: ProcessingMode_BodySendMode;

  /**
   * How do handle the response body. Default is "NONE".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode = 4;
   */
  responseBodyMode: ProcessingMode_BodySendMode;

  /**
   * How to handle the request trailers. Default is "SKIP".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_trailer_mode = 5;
   */
  requestTrailerMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the response trailers. Default is "SKIP".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_trailer_mode = 6;
   */
  responseTrailerMode: ProcessingMode_HeaderSendMode;

  constructor(data?: PartialMessage<ProcessingMode>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.ext_proc.v3.ProcessingMode";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingMode;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingMode;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingMode;

  static equals(a: ProcessingMode | PlainMessage<ProcessingMode> | undefined, b: ProcessingMode | PlainMessage<ProcessingMode> | undefined): boolean;
}

/**
 * Control how headers and trailers are handled
 *
 * @generated from enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode
 */
export declare enum ProcessingMode_HeaderSendMode {
  /**
   * The default HeaderSendMode depends on which part of the message is being
   * processed. By default, request and response headers are sent,
   * while trailers are skipped.
   *
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * Send the header or trailer.
   *
   * @generated from enum value: SEND = 1;
   */
  SEND = 1,

  /**
   * Do not send the header or trailer.
   *
   * @generated from enum value: SKIP = 2;
   */
  SKIP = 2,
}

/**
 * Control how the request and response bodies are handled
 *
 * @generated from enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode
 */
export declare enum ProcessingMode_BodySendMode {
  /**
   * Do not send the body at all. This is the default.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * Stream the body to the server in pieces as they arrive at the
   * proxy.
   *
   * @generated from enum value: STREAMED = 1;
   */
  STREAMED = 1,

  /**
   * Buffer the message body in memory and send the entire body at once.
   * If the body exceeds the configured buffer limit, then the
   * downstream system will receive an error.
   *
   * @generated from enum value: BUFFERED = 2;
   */
  BUFFERED = 2,

  /**
   * Buffer the message body in memory and send the entire body in one
   * chunk. If the body exceeds the configured buffer limit, then the body contents
   * up to the buffer limit will be sent.
   *
   * @generated from enum value: BUFFERED_PARTIAL = 3;
   */
  BUFFERED_PARTIAL = 3,
}

