// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto" (package "envoy.extensions.filters.http.ext_proc.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: External Processing Filter]
// External Processing Filter Processing Mode
// [#extension: envoy.filters.http.ext_proc]

// This configuration describes which parts of an HTTP request and
// response are sent to a remote server and how they are delivered.

/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.extensions.filters.http.ext_proc.v3.ProcessingMode
 */
export interface ProcessingMode {
    /**
     * How to handle the request header. Default is "SEND".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_header_mode = 1;
     */
    requestHeaderMode: ProcessingMode_HeaderSendMode;
    /**
     * How to handle the response header. Default is "SEND".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_header_mode = 2;
     */
    responseHeaderMode: ProcessingMode_HeaderSendMode;
    /**
     * How to handle the request body. Default is "NONE".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode = 3;
     */
    requestBodyMode: ProcessingMode_BodySendMode;
    /**
     * How do handle the response body. Default is "NONE".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode = 4;
     */
    responseBodyMode: ProcessingMode_BodySendMode;
    /**
     * How to handle the request trailers. Default is "SKIP".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_trailer_mode = 5;
     */
    requestTrailerMode: ProcessingMode_HeaderSendMode;
    /**
     * How to handle the response trailers. Default is "SKIP".
     *
     * @generated from protobuf field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_trailer_mode = 6;
     */
    responseTrailerMode: ProcessingMode_HeaderSendMode;
}
/**
 * Control how headers and trailers are handled
 *
 * @generated from protobuf enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode
 */
export enum ProcessingMode_HeaderSendMode {
    /**
     * The default HeaderSendMode depends on which part of the message is being
     * processed. By default, request and response headers are sent,
     * while trailers are skipped.
     *
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * Send the header or trailer.
     *
     * @generated from protobuf enum value: SEND = 1;
     */
    SEND = 1,
    /**
     * Do not send the header or trailer.
     *
     * @generated from protobuf enum value: SKIP = 2;
     */
    SKIP = 2
}
/**
 * Control how the request and response bodies are handled
 *
 * @generated from protobuf enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode
 */
export enum ProcessingMode_BodySendMode {
    /**
     * Do not send the body at all. This is the default.
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * Stream the body to the server in pieces as they arrive at the
     * proxy.
     *
     * @generated from protobuf enum value: STREAMED = 1;
     */
    STREAMED = 1,
    /**
     * Buffer the message body in memory and send the entire body at once.
     * If the body exceeds the configured buffer limit, then the
     * downstream system will receive an error.
     *
     * @generated from protobuf enum value: BUFFERED = 2;
     */
    BUFFERED = 2,
    /**
     * Buffer the message body in memory and send the entire body in one
     * chunk. If the body exceeds the configured buffer limit, then the body contents
     * up to the buffer limit will be sent.
     *
     * @generated from protobuf enum value: BUFFERED_PARTIAL = 3;
     */
    BUFFERED_PARTIAL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ProcessingMode$Type extends MessageType<ProcessingMode> {
    constructor() {
        super("envoy.extensions.filters.http.ext_proc.v3.ProcessingMode", [
            { no: 1, name: "request_header_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode", ProcessingMode_HeaderSendMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "response_header_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode", ProcessingMode_HeaderSendMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "request_body_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode", ProcessingMode_BodySendMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "response_body_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode", ProcessingMode_BodySendMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 5, name: "request_trailer_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode", ProcessingMode_HeaderSendMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 6, name: "response_trailer_mode", kind: "enum", T: () => ["envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode", ProcessingMode_HeaderSendMode], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<ProcessingMode>): ProcessingMode {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestHeaderMode = 0;
        message.responseHeaderMode = 0;
        message.requestBodyMode = 0;
        message.responseBodyMode = 0;
        message.requestTrailerMode = 0;
        message.responseTrailerMode = 0;
        if (value !== undefined)
            reflectionMergePartial<ProcessingMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessingMode): ProcessingMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_header_mode */ 1:
                    message.requestHeaderMode = reader.int32();
                    break;
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_header_mode */ 2:
                    message.responseHeaderMode = reader.int32();
                    break;
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode */ 3:
                    message.requestBodyMode = reader.int32();
                    break;
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode */ 4:
                    message.responseBodyMode = reader.int32();
                    break;
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_trailer_mode */ 5:
                    message.requestTrailerMode = reader.int32();
                    break;
                case /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_trailer_mode */ 6:
                    message.responseTrailerMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessingMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_header_mode = 1; */
        if (message.requestHeaderMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.requestHeaderMode);
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_header_mode = 2; */
        if (message.responseHeaderMode !== 0)
            writer.tag(2, WireType.Varint).int32(message.responseHeaderMode);
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode = 3; */
        if (message.requestBodyMode !== 0)
            writer.tag(3, WireType.Varint).int32(message.requestBodyMode);
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode = 4; */
        if (message.responseBodyMode !== 0)
            writer.tag(4, WireType.Varint).int32(message.responseBodyMode);
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_trailer_mode = 5; */
        if (message.requestTrailerMode !== 0)
            writer.tag(5, WireType.Varint).int32(message.requestTrailerMode);
        /* envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_trailer_mode = 6; */
        if (message.responseTrailerMode !== 0)
            writer.tag(6, WireType.Varint).int32(message.responseTrailerMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.ext_proc.v3.ProcessingMode
 */
export const ProcessingMode = new ProcessingMode$Type();
