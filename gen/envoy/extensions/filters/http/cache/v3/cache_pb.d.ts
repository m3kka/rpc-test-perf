// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/cache/v3/cache.proto (package envoy.extensions.filters.http.cache.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { StringMatcher } from "../../../../../type/matcher/v3/string_pb.js";
import type { QueryParameterMatcher } from "../../../../../config/route/v3/route_components_pb.js";

/**
 * [#extension: envoy.filters.http.cache]
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.cache.v3.CacheConfig
 */
export declare class CacheConfig extends Message<CacheConfig> {
  /**
   * Config specific to the cache storage implementation. Required unless ``disabled``
   * is true.
   * [#extension-category: envoy.http.cache]
   *
   * @generated from field: google.protobuf.Any typed_config = 1;
   */
  typedConfig?: Any;

  /**
   * When true, the cache filter is a no-op filter.
   *
   * Possible use-cases for this include:
   * - Turning a filter on and off with :ref:`ECDS <envoy_v3_api_file_envoy/service/extension/v3/config_discovery.proto>`.
   * [#comment: once route-specific overrides are implemented, they are the more likely use-case.]
   *
   * @generated from field: google.protobuf.BoolValue disabled = 5;
   */
  disabled?: boolean;

  /**
   * List of matching rules that defines allowed ``Vary`` headers.
   *
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   *
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   *
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   *
   * @generated from field: repeated envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;
   */
  allowedVaryHeaders: StringMatcher[];

  /**
   * [#not-implemented-hide:]
   * <TODO(toddmgreer) implement key customization>
   *
   * Modifies cache key creation by restricting which parts of the URL are included.
   *
   * @generated from field: envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams key_creator_params = 3;
   */
  keyCreatorParams?: CacheConfig_KeyCreatorParams;

  /**
   * [#not-implemented-hide:]
   * <TODO(toddmgreer) implement size limit>
   *
   * Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
   * storage implementation may have its own limit beyond which it will reject insertions).
   *
   * @generated from field: uint32 max_body_bytes = 4;
   */
  maxBodyBytes: number;

  constructor(data?: PartialMessage<CacheConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.cache.v3.CacheConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CacheConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CacheConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CacheConfig;

  static equals(a: CacheConfig | PlainMessage<CacheConfig> | undefined, b: CacheConfig | PlainMessage<CacheConfig> | undefined): boolean;
}

/**
 * [#not-implemented-hide:]
 * Modifies cache key creation by restricting which parts of the URL are included.
 *
 * @generated from message envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams
 */
export declare class CacheConfig_KeyCreatorParams extends Message<CacheConfig_KeyCreatorParams> {
  /**
   * If true, exclude the URL scheme from the cache key. Set to true if your origins always
   * produce the same response for http and https requests.
   *
   * @generated from field: bool exclude_scheme = 1;
   */
  excludeScheme: boolean;

  /**
   * If true, exclude the host from the cache key. Set to true if your origins' responses don't
   * ever depend on host.
   *
   * @generated from field: bool exclude_host = 2;
   */
  excludeHost: boolean;

  /**
   * If ``query_parameters_included`` is nonempty, only query parameters matched
   * by one or more of its matchers are included in the cache key. Any other
   * query params will not affect cache lookup.
   *
   * @generated from field: repeated envoy.config.route.v3.QueryParameterMatcher query_parameters_included = 3;
   */
  queryParametersIncluded: QueryParameterMatcher[];

  /**
   * If ``query_parameters_excluded`` is nonempty, query parameters matched by one
   * or more of its matchers are excluded from the cache key (even if also
   * matched by ``query_parameters_included``), and will not affect cache lookup.
   *
   * @generated from field: repeated envoy.config.route.v3.QueryParameterMatcher query_parameters_excluded = 4;
   */
  queryParametersExcluded: QueryParameterMatcher[];

  constructor(data?: PartialMessage<CacheConfig_KeyCreatorParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CacheConfig_KeyCreatorParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CacheConfig_KeyCreatorParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CacheConfig_KeyCreatorParams;

  static equals(a: CacheConfig_KeyCreatorParams | PlainMessage<CacheConfig_KeyCreatorParams> | undefined, b: CacheConfig_KeyCreatorParams | PlainMessage<CacheConfig_KeyCreatorParams> | undefined): boolean;
}

