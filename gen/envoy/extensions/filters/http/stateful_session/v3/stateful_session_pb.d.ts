// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto (package envoy.extensions.filters.http.stateful_session.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.stateful_session.v3.StatefulSession
 */
export declare class StatefulSession extends Message<StatefulSession> {
  /**
   * Specific implementation of session state. This session state will be used to store and
   * get address of the upstream host to which the session is assigned.
   *
   * [#extension-category: envoy.http.stateful_session]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig session_state = 1;
   */
  sessionState?: TypedExtensionConfig;

  constructor(data?: PartialMessage<StatefulSession>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.stateful_session.v3.StatefulSession";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatefulSession;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatefulSession;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatefulSession;

  static equals(a: StatefulSession | PlainMessage<StatefulSession> | undefined, b: StatefulSession | PlainMessage<StatefulSession> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute
 */
export declare class StatefulSessionPerRoute extends Message<StatefulSessionPerRoute> {
  /**
   * @generated from oneof envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.override
   */
  override: {
    /**
     * Disable the stateful session filter for this particular vhost or route. If disabled is
     * specified in multiple per-filter-configs, the most specific one will be used.
     *
     * @generated from field: bool disabled = 1;
     */
    value: boolean;
    case: "disabled";
  } | {
    /**
     * Per-route stateful session configuration that can be served by RDS or static route table.
     *
     * @generated from field: envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2;
     */
    value: StatefulSession;
    case: "statefulSession";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<StatefulSessionPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatefulSessionPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatefulSessionPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatefulSessionPerRoute;

  static equals(a: StatefulSessionPerRoute | PlainMessage<StatefulSessionPerRoute> | undefined, b: StatefulSessionPerRoute | PlainMessage<StatefulSessionPerRoute> | undefined): boolean;
}

