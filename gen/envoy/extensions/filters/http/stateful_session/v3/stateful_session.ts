// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto" (package "envoy.extensions.filters.http.stateful_session.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";
// [#protodoc-title: Stateful session filter]
// Stateful session :ref:`configuration overview <config_http_filters_stateful_session>`.
// [#extension: envoy.filters.http.stateful_session]

/**
 * @generated from protobuf message envoy.extensions.filters.http.stateful_session.v3.StatefulSession
 */
export interface StatefulSession {
    /**
     * Specific implementation of session state. This session state will be used to store and
     * get address of the upstream host to which the session is assigned.
     *
     * [#extension-category: envoy.http.stateful_session]
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig session_state = 1;
     */
    sessionState?: TypedExtensionConfig;
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute
 */
export interface StatefulSessionPerRoute {
    /**
     * @generated from protobuf oneof: override
     */
    override: {
        oneofKind: "disabled";
        /**
         * Disable the stateful session filter for this particular vhost or route. If disabled is
         * specified in multiple per-filter-configs, the most specific one will be used.
         *
         * @generated from protobuf field: bool disabled = 1;
         */
        disabled: boolean;
    } | {
        oneofKind: "statefulSession";
        /**
         * Per-route stateful session configuration that can be served by RDS or static route table.
         *
         * @generated from protobuf field: envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2;
         */
        statefulSession: StatefulSession;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class StatefulSession$Type extends MessageType<StatefulSession> {
    constructor() {
        super("envoy.extensions.filters.http.stateful_session.v3.StatefulSession", [
            { no: 1, name: "session_state", kind: "message", T: () => TypedExtensionConfig }
        ]);
    }
    create(value?: PartialMessage<StatefulSession>): StatefulSession {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StatefulSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatefulSession): StatefulSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.TypedExtensionConfig session_state */ 1:
                    message.sessionState = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.sessionState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatefulSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.TypedExtensionConfig session_state = 1; */
        if (message.sessionState)
            TypedExtensionConfig.internalBinaryWrite(message.sessionState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.stateful_session.v3.StatefulSession
 */
export const StatefulSession = new StatefulSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatefulSessionPerRoute$Type extends MessageType<StatefulSessionPerRoute> {
    constructor() {
        super("envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute", [
            { no: 1, name: "disabled", kind: "scalar", oneof: "override", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 2, name: "stateful_session", kind: "message", oneof: "override", T: () => StatefulSession }
        ]);
    }
    create(value?: PartialMessage<StatefulSessionPerRoute>): StatefulSessionPerRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.override = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StatefulSessionPerRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatefulSessionPerRoute): StatefulSessionPerRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disabled */ 1:
                    message.override = {
                        oneofKind: "disabled",
                        disabled: reader.bool()
                    };
                    break;
                case /* envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session */ 2:
                    message.override = {
                        oneofKind: "statefulSession",
                        statefulSession: StatefulSession.internalBinaryRead(reader, reader.uint32(), options, (message.override as any).statefulSession)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatefulSessionPerRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool disabled = 1; */
        if (message.override.oneofKind === "disabled")
            writer.tag(1, WireType.Varint).bool(message.override.disabled);
        /* envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2; */
        if (message.override.oneofKind === "statefulSession")
            StatefulSession.internalBinaryWrite(message.override.statefulSession, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute
 */
export const StatefulSessionPerRoute = new StatefulSessionPerRoute$Type();
