// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/gcp_authn/v3/gcp_authn.proto (package envoy.extensions.filters.http.gcp_authn.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HttpUri } from "../../../../../config/core/v3/http_uri_pb.js";
import type { RetryPolicy } from "../../../../../config/core/v3/base_pb.js";

/**
 * Filter configuration.
 *
 * @generated from message envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig
 */
export declare class GcpAuthnFilterConfig extends Message<GcpAuthnFilterConfig> {
  /**
   * The HTTP URI to fetch tokens from GCE Metadata Server(https://cloud.google.com/compute/docs/metadata/overview).
   * The URL format is "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"
   *
   * @generated from field: envoy.config.core.v3.HttpUri http_uri = 1;
   */
  httpUri?: HttpUri;

  /**
   * Retry policy for fetching tokens. This field is optional.
   *
   * @generated from field: envoy.config.core.v3.RetryPolicy retry_policy = 2;
   */
  retryPolicy?: RetryPolicy;

  /**
   * Token cache configuration. This field is optional.
   *
   * @generated from field: envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig cache_config = 3;
   */
  cacheConfig?: TokenCacheConfig;

  /**
   * Request header location to extract the token. By default (i.e. if this field is not specified), the token
   * is extracted to the Authorization HTTP header, in the format "Authorization: Bearer <token>".
   *
   * @generated from field: envoy.extensions.filters.http.gcp_authn.v3.TokenHeader token_header = 4;
   */
  tokenHeader?: TokenHeader;

  constructor(data?: PartialMessage<GcpAuthnFilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcpAuthnFilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcpAuthnFilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcpAuthnFilterConfig;

  static equals(a: GcpAuthnFilterConfig | PlainMessage<GcpAuthnFilterConfig> | undefined, b: GcpAuthnFilterConfig | PlainMessage<GcpAuthnFilterConfig> | undefined): boolean;
}

/**
 * Audience is the URL of the receiving service that performs token authentication.
 * It will be provided to the filter through cluster's typed_filter_metadata.
 *
 * @generated from message envoy.extensions.filters.http.gcp_authn.v3.Audience
 */
export declare class Audience extends Message<Audience> {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  constructor(data?: PartialMessage<Audience>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.gcp_authn.v3.Audience";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Audience;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Audience;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Audience;

  static equals(a: Audience | PlainMessage<Audience> | undefined, b: Audience | PlainMessage<Audience> | undefined): boolean;
}

/**
 * Token Cache configuration.
 *
 * @generated from message envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig
 */
export declare class TokenCacheConfig extends Message<TokenCacheConfig> {
  /**
   * The number of cache entries. The maximum number of entries is INT64_MAX as it is constrained by underlying cache implementation.
   * Default value 0 (i.e., proto3 defaults) disables the cache by default. Other default values will enable the cache.
   *
   * @generated from field: google.protobuf.UInt64Value cache_size = 1;
   */
  cacheSize?: bigint;

  constructor(data?: PartialMessage<TokenCacheConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenCacheConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenCacheConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenCacheConfig;

  static equals(a: TokenCacheConfig | PlainMessage<TokenCacheConfig> | undefined, b: TokenCacheConfig | PlainMessage<TokenCacheConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.gcp_authn.v3.TokenHeader
 */
export declare class TokenHeader extends Message<TokenHeader> {
  /**
   * The HTTP header's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The header's prefix. The format is "value_prefix<token>"
   * For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
   * end.
   *
   * @generated from field: string value_prefix = 2;
   */
  valuePrefix: string;

  constructor(data?: PartialMessage<TokenHeader>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.gcp_authn.v3.TokenHeader";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenHeader;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenHeader;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenHeader;

  static equals(a: TokenHeader | PlainMessage<TokenHeader> | undefined, b: TokenHeader | PlainMessage<TokenHeader> | undefined): boolean;
}

