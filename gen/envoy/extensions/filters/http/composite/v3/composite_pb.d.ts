// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/composite/v3/composite.proto (package envoy.extensions.filters.http.composite.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * :ref:`Composite filter <config_http_filters_composite>` config. The composite filter config
 * allows delegating filter handling to another filter as determined by matching on the request
 * headers. This makes it possible to use different filters or filter configurations based on the
 * incoming request.
 *
 * This is intended to be used with
 * :ref:`ExtensionWithMatcher <envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher>`
 * where a match tree is specified that indicates (via
 * :ref:`ExecuteFilterAction <envoy_v3_api_msg_extensions.filters.http.composite.v3.ExecuteFilterAction>`)
 * which filter configuration to create and delegate to.
 *
 * @generated from message envoy.extensions.filters.http.composite.v3.Composite
 */
export declare class Composite extends Message<Composite> {
  constructor(data?: PartialMessage<Composite>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.composite.v3.Composite";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Composite;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Composite;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Composite;

  static equals(a: Composite | PlainMessage<Composite> | undefined, b: Composite | PlainMessage<Composite> | undefined): boolean;
}

/**
 * Composite match action (see :ref:`matching docs <arch_overview_matching_api>` for more info on match actions).
 * This specifies the filter configuration of the filter that the composite filter should delegate filter interactions to.
 *
 * @generated from message envoy.extensions.filters.http.composite.v3.ExecuteFilterAction
 */
export declare class ExecuteFilterAction extends Message<ExecuteFilterAction> {
  /**
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig typed_config = 1;
   */
  typedConfig?: TypedExtensionConfig;

  constructor(data?: PartialMessage<ExecuteFilterAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.composite.v3.ExecuteFilterAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteFilterAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteFilterAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteFilterAction;

  static equals(a: ExecuteFilterAction | PlainMessage<ExecuteFilterAction> | undefined, b: ExecuteFilterAction | PlainMessage<ExecuteFilterAction> | undefined): boolean;
}

