// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/composite/v3/composite.proto" (package "envoy.extensions.filters.http.composite.v3", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";
// [#protodoc-title: Composite]
// Composite Filter :ref:`configuration overview <config_http_filters_composite>`.
// [#extension: envoy.filters.http.composite]

/**
 * :ref:`Composite filter <config_http_filters_composite>` config. The composite filter config
 * allows delegating filter handling to another filter as determined by matching on the request
 * headers. This makes it possible to use different filters or filter configurations based on the
 * incoming request.
 *
 * This is intended to be used with
 * :ref:`ExtensionWithMatcher <envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher>`
 * where a match tree is specified that indicates (via
 * :ref:`ExecuteFilterAction <envoy_v3_api_msg_extensions.filters.http.composite.v3.ExecuteFilterAction>`)
 * which filter configuration to create and delegate to.
 *
 * @generated from protobuf message envoy.extensions.filters.http.composite.v3.Composite
 */
export interface Composite {
}
/**
 * Composite match action (see :ref:`matching docs <arch_overview_matching_api>` for more info on match actions).
 * This specifies the filter configuration of the filter that the composite filter should delegate filter interactions to.
 *
 * @generated from protobuf message envoy.extensions.filters.http.composite.v3.ExecuteFilterAction
 */
export interface ExecuteFilterAction {
    /**
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig typed_config = 1;
     */
    typedConfig?: TypedExtensionConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class Composite$Type extends MessageType<Composite> {
    constructor() {
        super("envoy.extensions.filters.http.composite.v3.Composite", [], { "xds.annotations.v3.message_status": { workInProgress: true } });
    }
    create(value?: PartialMessage<Composite>): Composite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Composite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Composite): Composite {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Composite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.composite.v3.Composite
 */
export const Composite = new Composite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFilterAction$Type extends MessageType<ExecuteFilterAction> {
    constructor() {
        super("envoy.extensions.filters.http.composite.v3.ExecuteFilterAction", [
            { no: 1, name: "typed_config", kind: "message", T: () => TypedExtensionConfig }
        ]);
    }
    create(value?: PartialMessage<ExecuteFilterAction>): ExecuteFilterAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFilterAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFilterAction): ExecuteFilterAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.TypedExtensionConfig typed_config */ 1:
                    message.typedConfig = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.typedConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFilterAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.TypedExtensionConfig typed_config = 1; */
        if (message.typedConfig)
            TypedExtensionConfig.internalBinaryWrite(message.typedConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.composite.v3.ExecuteFilterAction
 */
export const ExecuteFilterAction = new ExecuteFilterAction$Type();
