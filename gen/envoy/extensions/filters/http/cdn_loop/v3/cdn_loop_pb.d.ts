// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/cdn_loop/v3/cdn_loop.proto (package envoy.extensions.filters.http.cdn_loop.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * CDN-Loop Header filter config. See the :ref:`configuration overview
 * <config_http_filters_cdn_loop>` for more information.
 *
 * @generated from message envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig
 */
export declare class CdnLoopConfig extends Message<CdnLoopConfig> {
  /**
   * The CDN identifier to use for loop checks and to append to the
   * CDN-Loop header.
   *
   * RFC 8586 calls this the cdn-id. The cdn-id can either be a
   * pseudonym or hostname the CDN is in control of.
   *
   * cdn_id must not be empty.
   *
   * @generated from field: string cdn_id = 1;
   */
  cdnId: string;

  /**
   * The maximum allowed count of cdn_id in the downstream CDN-Loop
   * request header.
   *
   * The default of 0 means a request can transit the CdnLoopFilter
   * once. A value of 1 means that a request can transit the
   * CdnLoopFilter twice and so on.
   *
   * @generated from field: uint32 max_allowed_occurrences = 2;
   */
  maxAllowedOccurrences: number;

  constructor(data?: PartialMessage<CdnLoopConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CdnLoopConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CdnLoopConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CdnLoopConfig;

  static equals(a: CdnLoopConfig | PlainMessage<CdnLoopConfig> | undefined, b: CdnLoopConfig | PlainMessage<CdnLoopConfig> | undefined): boolean;
}

