// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/cdn_loop/v3/cdn_loop.proto" (package "envoy.extensions.filters.http.cdn_loop.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: HTTP CDN-Loop Filter]
// [#extension: envoy.filters.http.cdn_loop]

/**
 * CDN-Loop Header filter config. See the :ref:`configuration overview
 * <config_http_filters_cdn_loop>` for more information.
 *
 * @generated from protobuf message envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig
 */
export interface CdnLoopConfig {
    /**
     * The CDN identifier to use for loop checks and to append to the
     * CDN-Loop header.
     *
     * RFC 8586 calls this the cdn-id. The cdn-id can either be a
     * pseudonym or hostname the CDN is in control of.
     *
     * cdn_id must not be empty.
     *
     * @generated from protobuf field: string cdn_id = 1;
     */
    cdnId: string;
    /**
     * The maximum allowed count of cdn_id in the downstream CDN-Loop
     * request header.
     *
     * The default of 0 means a request can transit the CdnLoopFilter
     * once. A value of 1 means that a request can transit the
     * CdnLoopFilter twice and so on.
     *
     * @generated from protobuf field: uint32 max_allowed_occurrences = 2;
     */
    maxAllowedOccurrences: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CdnLoopConfig$Type extends MessageType<CdnLoopConfig> {
    constructor() {
        super("envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig", [
            { no: 1, name: "cdn_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "max_allowed_occurrences", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CdnLoopConfig>): CdnLoopConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cdnId = "";
        message.maxAllowedOccurrences = 0;
        if (value !== undefined)
            reflectionMergePartial<CdnLoopConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CdnLoopConfig): CdnLoopConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cdn_id */ 1:
                    message.cdnId = reader.string();
                    break;
                case /* uint32 max_allowed_occurrences */ 2:
                    message.maxAllowedOccurrences = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CdnLoopConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cdn_id = 1; */
        if (message.cdnId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cdnId);
        /* uint32 max_allowed_occurrences = 2; */
        if (message.maxAllowedOccurrences !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxAllowedOccurrences);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig
 */
export const CdnLoopConfig = new CdnLoopConfig$Type();
