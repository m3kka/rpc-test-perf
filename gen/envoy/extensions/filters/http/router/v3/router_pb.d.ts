// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/router/v3/router.proto (package envoy.extensions.filters.http.router.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AccessLog } from "../../../../../config/accesslog/v3/accesslog_pb.js";
import type { HttpFilter } from "../../../network/http_connection_manager/v3/http_connection_manager_pb.js";

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.http.router.v3.Router
 */
export declare class Router extends Message<Router> {
  /**
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   *
   * @generated from field: google.protobuf.BoolValue dynamic_stats = 1;
   */
  dynamicStats?: boolean;

  /**
   * Whether to start a child span for egress routed calls. This can be
   * useful in scenarios where other filters (auth, ratelimit, etc.) make
   * outbound calls and have child spans rooted at the same ingress
   * parent. Defaults to false.
   *
   * @generated from field: bool start_child_span = 2;
   */
  startChildSpan: boolean;

  /**
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   *
   * @generated from field: repeated envoy.config.accesslog.v3.AccessLog upstream_log = 3;
   */
  upstreamLog: AccessLog[];

  /**
   * Additional upstream access log options.
   *
   * @generated from field: envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions upstream_log_options = 9;
   */
  upstreamLogOptions?: Router_UpstreamAccessLogOptions;

  /**
   * Do not add any additional ``x-envoy-`` headers to requests or responses. This
   * only affects the :ref:`router filter generated x-envoy- headers
   * <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
   * connection manager may continue to set ``x-envoy-`` headers.
   *
   * @generated from field: bool suppress_envoy_headers = 4;
   */
  suppressEnvoyHeaders: boolean;

  /**
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   *
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   *
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   *
   * Value must be an integer:
   *
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   *
   * @generated from field: repeated string strict_check_headers = 5;
   */
  strictCheckHeaders: string[];

  /**
   * If not set, ingress Envoy will ignore
   * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
   * Envoy, when deriving timeout for upstream cluster.
   *
   * @generated from field: bool respect_expected_rq_timeout = 6;
   */
  respectExpectedRqTimeout: boolean;

  /**
   * If set, Envoy will avoid incrementing HTTP failure code stats
   * on gRPC requests. This includes the individual status code value
   * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
   * This field is useful if interested in relying only on the gRPC
   * stats filter to define success and failure metrics for gRPC requests
   * as not all failed gRPC requests charge HTTP status code metrics. See
   * :ref:`gRPC stats filter<config_http_filters_grpc_stats>` documentation
   * for more details.
   *
   * @generated from field: bool suppress_grpc_request_failure_code_stats = 7;
   */
  suppressGrpcRequestFailureCodeStats: boolean;

  /**
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   *
   * Optional HTTP filters for the upstream filter chain.
   *
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   *
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   *
   * @generated from field: repeated envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;
   */
  upstreamHttpFilters: HttpFilter[];

  constructor(data?: PartialMessage<Router>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.router.v3.Router";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Router;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Router;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Router;

  static equals(a: Router | PlainMessage<Router> | undefined, b: Router | PlainMessage<Router> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions
 */
export declare class Router_UpstreamAccessLogOptions extends Message<Router_UpstreamAccessLogOptions> {
  /**
   * If set to true, an upstream access log will be recorded when an upstream stream is
   * associated to an http request. Note: Each HTTP request received for an already established
   * connection will result in an upstream access log record. This includes, for example,
   * consecutive HTTP requests over the same connection or a request that is retried.
   * In case a retry is applied, an upstream access log will be recorded for each retry.
   *
   * @generated from field: bool flush_upstream_log_on_upstream_stream = 1;
   */
  flushUpstreamLogOnUpstreamStream: boolean;

  /**
   * The interval to flush the upstream access logs. By default, the router will flush an upstream
   * access log on stream close, when the HTTP request is complete. If this field is set, the router
   * will flush access logs periodically at the specified interval. This is especially useful in the
   * case of long-lived requests, such as CONNECT and Websockets.
   * The interval must be at least 1 millisecond.
   *
   * @generated from field: google.protobuf.Duration upstream_log_flush_interval = 2;
   */
  upstreamLogFlushInterval?: Duration;

  constructor(data?: PartialMessage<Router_UpstreamAccessLogOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Router_UpstreamAccessLogOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Router_UpstreamAccessLogOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Router_UpstreamAccessLogOptions;

  static equals(a: Router_UpstreamAccessLogOptions | PlainMessage<Router_UpstreamAccessLogOptions> | undefined, b: Router_UpstreamAccessLogOptions | PlainMessage<Router_UpstreamAccessLogOptions> | undefined): boolean;
}

