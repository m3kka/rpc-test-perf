// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/aws_request_signing/v3/aws_request_signing.proto" (package "envoy.extensions.filters.http.aws_request_signing.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringMatcher } from "../../../../../type/matcher/v3/string";
// [#protodoc-title: AwsRequestSigning]
// AwsRequestSigning :ref:`configuration overview <config_http_filters_aws_request_signing>`.
// [#extension: envoy.filters.http.aws_request_signing]

/**
 * Top level configuration for the AWS request signing filter.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning
 */
export interface AwsRequestSigning {
    /**
     * The `service namespace
     * <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
     * of the HTTP endpoint.
     *
     * Example: s3
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the HTTP
     * endpoint.
     *
     * Example: us-west-2
     *
     * @generated from protobuf field: string region = 2;
     */
    region: string;
    /**
     * Indicates that before signing headers, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     *
     * Note: this rewrite affects both signing and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
     * value set here would be used for signing whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     *
     * @generated from protobuf field: string host_rewrite = 3;
     */
    hostRewrite: string;
    /**
     * Instead of buffering the request to calculate the payload hash, use the literal string ``UNSIGNED-PAYLOAD``
     * to calculate the payload hash. Not all services support this option. See the `S3
     * <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html>`_ policy for details.
     *
     * @generated from protobuf field: bool use_unsigned_payload = 4;
     */
    useUnsignedPayload: boolean;
    /**
     * A list of request header string matchers that will be excluded from signing. The excluded header can be matched by
     * any patterns defined in the StringMatcher proto (e.g. exact string, prefix, regex, etc).
     *
     * Example:
     * match_excluded_headers:
     * - prefix: x-envoy
     * - exact: foo
     * - exact: bar
     * When applied, all headers that start with "x-envoy" and headers "foo" and "bar" will not be signed.
     *
     * @generated from protobuf field: repeated envoy.type.matcher.v3.StringMatcher match_excluded_headers = 5;
     */
    matchExcludedHeaders: StringMatcher[];
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute
 */
export interface AwsRequestSigningPerRoute {
    /**
     * Override the global configuration of the filter with this new config.
     * This overrides the entire message of AwsRequestSigning and not at field level.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning aws_request_signing = 1;
     */
    awsRequestSigning?: AwsRequestSigning;
    /**
     * The human readable prefix to use when emitting stats.
     *
     * @generated from protobuf field: string stat_prefix = 2;
     */
    statPrefix: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AwsRequestSigning$Type extends MessageType<AwsRequestSigning> {
    constructor() {
        super("envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "region", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "host_rewrite", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "use_unsigned_payload", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "match_excluded_headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.aws_request_signing.v2alpha.AwsRequestSigning" } });
    }
    create(value?: PartialMessage<AwsRequestSigning>): AwsRequestSigning {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceName = "";
        message.region = "";
        message.hostRewrite = "";
        message.useUnsignedPayload = false;
        message.matchExcludedHeaders = [];
        if (value !== undefined)
            reflectionMergePartial<AwsRequestSigning>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AwsRequestSigning): AwsRequestSigning {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string region */ 2:
                    message.region = reader.string();
                    break;
                case /* string host_rewrite */ 3:
                    message.hostRewrite = reader.string();
                    break;
                case /* bool use_unsigned_payload */ 4:
                    message.useUnsignedPayload = reader.bool();
                    break;
                case /* repeated envoy.type.matcher.v3.StringMatcher match_excluded_headers */ 5:
                    message.matchExcludedHeaders.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AwsRequestSigning, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string region = 2; */
        if (message.region !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.region);
        /* string host_rewrite = 3; */
        if (message.hostRewrite !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.hostRewrite);
        /* bool use_unsigned_payload = 4; */
        if (message.useUnsignedPayload !== false)
            writer.tag(4, WireType.Varint).bool(message.useUnsignedPayload);
        /* repeated envoy.type.matcher.v3.StringMatcher match_excluded_headers = 5; */
        for (let i = 0; i < message.matchExcludedHeaders.length; i++)
            StringMatcher.internalBinaryWrite(message.matchExcludedHeaders[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning
 */
export const AwsRequestSigning = new AwsRequestSigning$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AwsRequestSigningPerRoute$Type extends MessageType<AwsRequestSigningPerRoute> {
    constructor() {
        super("envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute", [
            { no: 1, name: "aws_request_signing", kind: "message", T: () => AwsRequestSigning },
            { no: 2, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<AwsRequestSigningPerRoute>): AwsRequestSigningPerRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        if (value !== undefined)
            reflectionMergePartial<AwsRequestSigningPerRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AwsRequestSigningPerRoute): AwsRequestSigningPerRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning aws_request_signing */ 1:
                    message.awsRequestSigning = AwsRequestSigning.internalBinaryRead(reader, reader.uint32(), options, message.awsRequestSigning);
                    break;
                case /* string stat_prefix */ 2:
                    message.statPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AwsRequestSigningPerRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning aws_request_signing = 1; */
        if (message.awsRequestSigning)
            AwsRequestSigning.internalBinaryWrite(message.awsRequestSigning, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string stat_prefix = 2; */
        if (message.statPrefix !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute
 */
export const AwsRequestSigningPerRoute = new AwsRequestSigningPerRoute$Type();
