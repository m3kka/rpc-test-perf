// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/aws_request_signing/v3/aws_request_signing.proto (package envoy.extensions.filters.http.aws_request_signing.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { StringMatcher } from "../../../../../type/matcher/v3/string_pb.js";

/**
 * Top level configuration for the AWS request signing filter.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning
 */
export declare class AwsRequestSigning extends Message<AwsRequestSigning> {
  /**
   * The `service namespace
   * <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
   * of the HTTP endpoint.
   *
   * Example: s3
   *
   * @generated from field: string service_name = 1;
   */
  serviceName: string;

  /**
   * The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the HTTP
   * endpoint.
   *
   * Example: us-west-2
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * Indicates that before signing headers, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   *
   * Note: this rewrite affects both signing and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
   * value set here would be used for signing whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   *
   * @generated from field: string host_rewrite = 3;
   */
  hostRewrite: string;

  /**
   * Instead of buffering the request to calculate the payload hash, use the literal string ``UNSIGNED-PAYLOAD``
   * to calculate the payload hash. Not all services support this option. See the `S3
   * <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html>`_ policy for details.
   *
   * @generated from field: bool use_unsigned_payload = 4;
   */
  useUnsignedPayload: boolean;

  /**
   * A list of request header string matchers that will be excluded from signing. The excluded header can be matched by
   * any patterns defined in the StringMatcher proto (e.g. exact string, prefix, regex, etc).
   *
   * Example:
   * match_excluded_headers:
   * - prefix: x-envoy
   * - exact: foo
   * - exact: bar
   * When applied, all headers that start with "x-envoy" and headers "foo" and "bar" will not be signed.
   *
   * @generated from field: repeated envoy.type.matcher.v3.StringMatcher match_excluded_headers = 5;
   */
  matchExcludedHeaders: StringMatcher[];

  constructor(data?: PartialMessage<AwsRequestSigning>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsRequestSigning;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsRequestSigning;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsRequestSigning;

  static equals(a: AwsRequestSigning | PlainMessage<AwsRequestSigning> | undefined, b: AwsRequestSigning | PlainMessage<AwsRequestSigning> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute
 */
export declare class AwsRequestSigningPerRoute extends Message<AwsRequestSigningPerRoute> {
  /**
   * Override the global configuration of the filter with this new config.
   * This overrides the entire message of AwsRequestSigning and not at field level.
   *
   * @generated from field: envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning aws_request_signing = 1;
   */
  awsRequestSigning?: AwsRequestSigning;

  /**
   * The human readable prefix to use when emitting stats.
   *
   * @generated from field: string stat_prefix = 2;
   */
  statPrefix: string;

  constructor(data?: PartialMessage<AwsRequestSigningPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsRequestSigningPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsRequestSigningPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsRequestSigningPerRoute;

  static equals(a: AwsRequestSigningPerRoute | PlainMessage<AwsRequestSigningPerRoute> | undefined, b: AwsRequestSigningPerRoute | PlainMessage<AwsRequestSigningPerRoute> | undefined): boolean;
}

