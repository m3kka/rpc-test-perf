// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/geoip/v3/geoip.proto (package envoy.extensions.filters.http.geoip.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.geoip.v3.Geoip
 */
export declare class Geoip extends Message<Geoip> {
  /**
   * If set, the :ref:`xff_num_trusted_hops <envoy_v3_api_field_extensions.filters.http.geoip.v3.Geoip.XffConfig.xff_num_trusted_hops>` field will be used to determine
   * trusted client address from `x-forwarded-for` header.
   * Otherwise, the immediate downstream connection source address will be used.
   * [#next-free-field: 2]
   *
   * @generated from field: envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig xff_config = 1;
   */
  xffConfig?: Geoip_XffConfig;

  /**
   * Configuration for geolocation headers to add to request.
   *
   * @generated from field: envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd geo_headers_to_add = 2;
   */
  geoHeadersToAdd?: Geoip_GeolocationHeadersToAdd;

  /**
   * Geolocation provider specific configuration.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig provider = 3;
   */
  provider?: TypedExtensionConfig;

  constructor(data?: PartialMessage<Geoip>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.geoip.v3.Geoip";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Geoip;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Geoip;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Geoip;

  static equals(a: Geoip | PlainMessage<Geoip> | undefined, b: Geoip | PlainMessage<Geoip> | undefined): boolean;
}

/**
 * The set of geolocation headers to add to request. If any of the configured headers is present
 * in the incoming request, it will be overridden by Geoip filter.
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd
 */
export declare class Geoip_GeolocationHeadersToAdd extends Message<Geoip_GeolocationHeadersToAdd> {
  /**
   * If set, the header will be used to populate the country ISO code associated with the IP address.
   *
   * @generated from field: string country = 1;
   */
  country: string;

  /**
   * If set, the header will be used to populate the city associated with the IP address.
   *
   * @generated from field: string city = 2;
   */
  city: string;

  /**
   * If set, the header will be used to populate the region ISO code associated with the IP address.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * If set, the header will be used to populate the ASN associated with the IP address.
   *
   * @generated from field: string asn = 4;
   */
  asn: string;

  /**
   * If set, the IP address will be checked if it belongs to any type of anonymization network (e.g. VPN, public proxy etc)
   * and header will be populated with the check result. Header value will be set to either "true" or "false" depending on the check result.
   *
   * @generated from field: string is_anon = 5;
   */
  isAnon: string;

  /**
   * If set, the IP address will be checked if it belongs to a VPN and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   *
   * @generated from field: string anon_vpn = 6;
   */
  anonVpn: string;

  /**
   * If set, the IP address will be checked if it belongs to a hosting provider and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   *
   * @generated from field: string anon_hosting = 7;
   */
  anonHosting: string;

  /**
   * If set, the IP address will be checked if it belongs to a TOR exit node and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   *
   * @generated from field: string anon_tor = 8;
   */
  anonTor: string;

  /**
   * If set, the IP address will be checked if it belongs to a public proxy and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   *
   * @generated from field: string anon_proxy = 9;
   */
  anonProxy: string;

  constructor(data?: PartialMessage<Geoip_GeolocationHeadersToAdd>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Geoip_GeolocationHeadersToAdd;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Geoip_GeolocationHeadersToAdd;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Geoip_GeolocationHeadersToAdd;

  static equals(a: Geoip_GeolocationHeadersToAdd | PlainMessage<Geoip_GeolocationHeadersToAdd> | undefined, b: Geoip_GeolocationHeadersToAdd | PlainMessage<Geoip_GeolocationHeadersToAdd> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig
 */
export declare class Geoip_XffConfig extends Message<Geoip_XffConfig> {
  /**
   * The number of additional ingress proxy hops from the right side of the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
   * determining the origin client's IP address. The default is zero if this option
   * is not specified. See the documentation for
   * :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
   *
   * @generated from field: uint32 xff_num_trusted_hops = 1;
   */
  xffNumTrustedHops: number;

  constructor(data?: PartialMessage<Geoip_XffConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Geoip_XffConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Geoip_XffConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Geoip_XffConfig;

  static equals(a: Geoip_XffConfig | PlainMessage<Geoip_XffConfig> | undefined, b: Geoip_XffConfig | PlainMessage<Geoip_XffConfig> | undefined): boolean;
}

