// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/geoip/v3/geoip.proto" (package "envoy.extensions.filters.http.geoip.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";
// [#protodoc-title: Geoip]
// Geoip :ref:`configuration overview <config_http_filters_geoip>`.
// [#extension: envoy.filters.http.geoip]

/**
 * @generated from protobuf message envoy.extensions.filters.http.geoip.v3.Geoip
 */
export interface Geoip {
    /**
     * If set, the :ref:`xff_num_trusted_hops <envoy_v3_api_field_extensions.filters.http.geoip.v3.Geoip.XffConfig.xff_num_trusted_hops>` field will be used to determine
     * trusted client address from `x-forwarded-for` header.
     * Otherwise, the immediate downstream connection source address will be used.
     * [#next-free-field: 2]
     *
     * @generated from protobuf field: envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig xff_config = 1;
     */
    xffConfig?: Geoip_XffConfig;
    /**
     * Configuration for geolocation headers to add to request.
     *
     * @generated from protobuf field: envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd geo_headers_to_add = 2;
     */
    geoHeadersToAdd?: Geoip_GeolocationHeadersToAdd;
    /**
     * Geolocation provider specific configuration.
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig provider = 3;
     */
    provider?: TypedExtensionConfig;
}
/**
 * The set of geolocation headers to add to request. If any of the configured headers is present
 * in the incoming request, it will be overridden by Geoip filter.
 * [#next-free-field: 10]
 *
 * @generated from protobuf message envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd
 */
export interface Geoip_GeolocationHeadersToAdd {
    /**
     * If set, the header will be used to populate the country ISO code associated with the IP address.
     *
     * @generated from protobuf field: string country = 1;
     */
    country: string;
    /**
     * If set, the header will be used to populate the city associated with the IP address.
     *
     * @generated from protobuf field: string city = 2;
     */
    city: string;
    /**
     * If set, the header will be used to populate the region ISO code associated with the IP address.
     *
     * @generated from protobuf field: string region = 3;
     */
    region: string;
    /**
     * If set, the header will be used to populate the ASN associated with the IP address.
     *
     * @generated from protobuf field: string asn = 4;
     */
    asn: string;
    /**
     * If set, the IP address will be checked if it belongs to any type of anonymization network (e.g. VPN, public proxy etc)
     * and header will be populated with the check result. Header value will be set to either "true" or "false" depending on the check result.
     *
     * @generated from protobuf field: string is_anon = 5;
     */
    isAnon: string;
    /**
     * If set, the IP address will be checked if it belongs to a VPN and header will be populated with the check result.
     * Header value will be set to either "true" or "false" depending on the check result.
     *
     * @generated from protobuf field: string anon_vpn = 6;
     */
    anonVpn: string;
    /**
     * If set, the IP address will be checked if it belongs to a hosting provider and header will be populated with the check result.
     * Header value will be set to either "true" or "false" depending on the check result.
     *
     * @generated from protobuf field: string anon_hosting = 7;
     */
    anonHosting: string;
    /**
     * If set, the IP address will be checked if it belongs to a TOR exit node and header will be populated with the check result.
     * Header value will be set to either "true" or "false" depending on the check result.
     *
     * @generated from protobuf field: string anon_tor = 8;
     */
    anonTor: string;
    /**
     * If set, the IP address will be checked if it belongs to a public proxy and header will be populated with the check result.
     * Header value will be set to either "true" or "false" depending on the check result.
     *
     * @generated from protobuf field: string anon_proxy = 9;
     */
    anonProxy: string;
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig
 */
export interface Geoip_XffConfig {
    /**
     * The number of additional ingress proxy hops from the right side of the
     * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
     * determining the origin client's IP address. The default is zero if this option
     * is not specified. See the documentation for
     * :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
     *
     * @generated from protobuf field: uint32 xff_num_trusted_hops = 1;
     */
    xffNumTrustedHops: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Geoip$Type extends MessageType<Geoip> {
    constructor() {
        super("envoy.extensions.filters.http.geoip.v3.Geoip", [
            { no: 1, name: "xff_config", kind: "message", T: () => Geoip_XffConfig },
            { no: 2, name: "geo_headers_to_add", kind: "message", T: () => Geoip_GeolocationHeadersToAdd, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "provider", kind: "message", T: () => TypedExtensionConfig, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Geoip>): Geoip {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Geoip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Geoip): Geoip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig xff_config */ 1:
                    message.xffConfig = Geoip_XffConfig.internalBinaryRead(reader, reader.uint32(), options, message.xffConfig);
                    break;
                case /* envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd geo_headers_to_add */ 2:
                    message.geoHeadersToAdd = Geoip_GeolocationHeadersToAdd.internalBinaryRead(reader, reader.uint32(), options, message.geoHeadersToAdd);
                    break;
                case /* envoy.config.core.v3.TypedExtensionConfig provider */ 3:
                    message.provider = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.provider);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Geoip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig xff_config = 1; */
        if (message.xffConfig)
            Geoip_XffConfig.internalBinaryWrite(message.xffConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd geo_headers_to_add = 2; */
        if (message.geoHeadersToAdd)
            Geoip_GeolocationHeadersToAdd.internalBinaryWrite(message.geoHeadersToAdd, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.TypedExtensionConfig provider = 3; */
        if (message.provider)
            TypedExtensionConfig.internalBinaryWrite(message.provider, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.geoip.v3.Geoip
 */
export const Geoip = new Geoip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Geoip_GeolocationHeadersToAdd$Type extends MessageType<Geoip_GeolocationHeadersToAdd> {
    constructor() {
        super("envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd", [
            { no: 1, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 2, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 3, name: "region", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 4, name: "asn", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 5, name: "is_anon", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 6, name: "anon_vpn", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 7, name: "anon_hosting", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 8, name: "anon_tor", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 9, name: "anon_proxy", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<Geoip_GeolocationHeadersToAdd>): Geoip_GeolocationHeadersToAdd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.country = "";
        message.city = "";
        message.region = "";
        message.asn = "";
        message.isAnon = "";
        message.anonVpn = "";
        message.anonHosting = "";
        message.anonTor = "";
        message.anonProxy = "";
        if (value !== undefined)
            reflectionMergePartial<Geoip_GeolocationHeadersToAdd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Geoip_GeolocationHeadersToAdd): Geoip_GeolocationHeadersToAdd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string country */ 1:
                    message.country = reader.string();
                    break;
                case /* string city */ 2:
                    message.city = reader.string();
                    break;
                case /* string region */ 3:
                    message.region = reader.string();
                    break;
                case /* string asn */ 4:
                    message.asn = reader.string();
                    break;
                case /* string is_anon */ 5:
                    message.isAnon = reader.string();
                    break;
                case /* string anon_vpn */ 6:
                    message.anonVpn = reader.string();
                    break;
                case /* string anon_hosting */ 7:
                    message.anonHosting = reader.string();
                    break;
                case /* string anon_tor */ 8:
                    message.anonTor = reader.string();
                    break;
                case /* string anon_proxy */ 9:
                    message.anonProxy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Geoip_GeolocationHeadersToAdd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string country = 1; */
        if (message.country !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.country);
        /* string city = 2; */
        if (message.city !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.city);
        /* string region = 3; */
        if (message.region !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.region);
        /* string asn = 4; */
        if (message.asn !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.asn);
        /* string is_anon = 5; */
        if (message.isAnon !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.isAnon);
        /* string anon_vpn = 6; */
        if (message.anonVpn !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.anonVpn);
        /* string anon_hosting = 7; */
        if (message.anonHosting !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.anonHosting);
        /* string anon_tor = 8; */
        if (message.anonTor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.anonTor);
        /* string anon_proxy = 9; */
        if (message.anonProxy !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.anonProxy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd
 */
export const Geoip_GeolocationHeadersToAdd = new Geoip_GeolocationHeadersToAdd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Geoip_XffConfig$Type extends MessageType<Geoip_XffConfig> {
    constructor() {
        super("envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig", [
            { no: 1, name: "xff_num_trusted_hops", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Geoip_XffConfig>): Geoip_XffConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.xffNumTrustedHops = 0;
        if (value !== undefined)
            reflectionMergePartial<Geoip_XffConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Geoip_XffConfig): Geoip_XffConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 xff_num_trusted_hops */ 1:
                    message.xffNumTrustedHops = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Geoip_XffConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 xff_num_trusted_hops = 1; */
        if (message.xffNumTrustedHops !== 0)
            writer.tag(1, WireType.Varint).uint32(message.xffNumTrustedHops);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig
 */
export const Geoip_XffConfig = new Geoip_XffConfig$Type();
