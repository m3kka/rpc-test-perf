// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/ratelimit/v3/rate_limit.proto (package envoy.extensions.filters.http.ratelimit.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";
import { RateLimitServiceConfig } from "../../../../../config/ratelimit/v3/rls_pb.js";
import { HttpStatus } from "../../../../../type/v3/http_status_pb.js";
import { HeaderValueOption } from "../../../../../config/core/v3/base_pb.js";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";
import { HeaderMatcher } from "../../../../../config/route/v3/route_components_pb.js";
import { MetadataKey } from "../../../../../type/metadata/v3/metadata_pb.js";

/**
 * [#next-free-field: 12]
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimit
 */
export const RateLimit = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimit",
  () => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "request_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timeout", kind: "message", T: Duration },
    { no: 5, name: "failure_mode_deny", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "rate_limited_as_resource_exhausted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "rate_limit_service", kind: "message", T: RateLimitServiceConfig },
    { no: 8, name: "enable_x_ratelimit_headers", kind: "enum", T: proto3.getEnumType(RateLimit_XRateLimitHeadersRFCVersion) },
    { no: 9, name: "disable_x_envoy_ratelimited_header", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "rate_limited_status", kind: "message", T: HttpStatus },
    { no: 11, name: "response_headers_to_add", kind: "message", T: HeaderValueOption, repeated: true },
  ],
);

/**
 * Defines the version of the standard to use for X-RateLimit headers.
 *
 * [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.XRateLimitHeadersRFCVersion instead.]
 *
 * @generated from enum envoy.extensions.filters.http.ratelimit.v3.RateLimit.XRateLimitHeadersRFCVersion
 */
export const RateLimit_XRateLimitHeadersRFCVersion = proto3.makeEnum(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimit.XRateLimitHeadersRFCVersion",
  [
    {no: 0, name: "OFF"},
    {no: 1, name: "DRAFT_VERSION_03"},
  ],
);

/**
 * Global rate limiting :ref:`architecture overview <arch_overview_global_rate_limit>`.
 * Also applies to Local rate limiting :ref:`using descriptors <config_http_filters_local_rate_limit_descriptors>`.
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig
 */
export const RateLimitConfig = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig",
  () => [
    { no: 1, name: "stage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "disable_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actions", kind: "message", T: RateLimitConfig_Action, repeated: true },
    { no: 4, name: "limit", kind: "message", T: RateLimitConfig_Override },
  ],
);

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action
 */
export const RateLimitConfig_Action = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action",
  () => [
    { no: 1, name: "source_cluster", kind: "message", T: RateLimitConfig_Action_SourceCluster, oneof: "action_specifier" },
    { no: 2, name: "destination_cluster", kind: "message", T: RateLimitConfig_Action_DestinationCluster, oneof: "action_specifier" },
    { no: 3, name: "request_headers", kind: "message", T: RateLimitConfig_Action_RequestHeaders, oneof: "action_specifier" },
    { no: 4, name: "remote_address", kind: "message", T: RateLimitConfig_Action_RemoteAddress, oneof: "action_specifier" },
    { no: 5, name: "generic_key", kind: "message", T: RateLimitConfig_Action_GenericKey, oneof: "action_specifier" },
    { no: 6, name: "header_value_match", kind: "message", T: RateLimitConfig_Action_HeaderValueMatch, oneof: "action_specifier" },
    { no: 8, name: "metadata", kind: "message", T: RateLimitConfig_Action_MetaData, oneof: "action_specifier" },
    { no: 9, name: "extension", kind: "message", T: TypedExtensionConfig, oneof: "action_specifier" },
  ],
  {localName: "RateLimitConfig_Action"},
);

/**
 * The following descriptor entry is appended to the descriptor:
 *
 * .. code-block:: cpp
 *
 *   ("source_cluster", "<local service cluster>")
 *
 * <local service cluster> is derived from the :option:`--service-cluster` option.
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.SourceCluster
 */
export const RateLimitConfig_Action_SourceCluster = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.SourceCluster",
  [],
  {localName: "RateLimitConfig_Action_SourceCluster"},
);

/**
 * The following descriptor entry is appended to the descriptor:
 *
 * .. code-block:: cpp
 *
 *   ("destination_cluster", "<routed target cluster>")
 *
 * Once a request matches against a route table rule, a routed cluster is determined by one of
 * the following :ref:`route table configuration <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`
 * settings:
 *
 * * :ref:`cluster <envoy_v3_api_field_config.route.v3.RouteAction.cluster>` indicates the upstream cluster
 *   to route to.
 * * :ref:`weighted_clusters <envoy_v3_api_field_config.route.v3.RouteAction.weighted_clusters>`
 *   chooses a cluster randomly from a set of clusters with attributed weight.
 * * :ref:`cluster_header <envoy_v3_api_field_config.route.v3.RouteAction.cluster_header>` indicates which
 *   header in the request contains the target cluster.
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.DestinationCluster
 */
export const RateLimitConfig_Action_DestinationCluster = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.DestinationCluster",
  [],
  {localName: "RateLimitConfig_Action_DestinationCluster"},
);

/**
 * The following descriptor entry is appended when a header contains a key that matches the
 * ``header_name``:
 *
 * .. code-block:: cpp
 *
 *   ("<descriptor_key>", "<header_value_queried_from_header>")
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.RequestHeaders
 */
export const RateLimitConfig_Action_RequestHeaders = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.RequestHeaders",
  () => [
    { no: 1, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "descriptor_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "skip_if_absent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "RateLimitConfig_Action_RequestHeaders"},
);

/**
 * The following descriptor entry is appended to the descriptor and is populated using the
 * trusted address from :ref:`x-forwarded-for <config_http_conn_man_headers_x-forwarded-for>`:
 *
 * .. code-block:: cpp
 *
 *   ("remote_address", "<trusted address from x-forwarded-for>")
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.RemoteAddress
 */
export const RateLimitConfig_Action_RemoteAddress = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.RemoteAddress",
  [],
  {localName: "RateLimitConfig_Action_RemoteAddress"},
);

/**
 * The following descriptor entry is appended to the descriptor:
 *
 * .. code-block:: cpp
 *
 *   ("generic_key", "<descriptor_value>")
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.GenericKey
 */
export const RateLimitConfig_Action_GenericKey = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.GenericKey",
  () => [
    { no: 1, name: "descriptor_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "descriptor_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "RateLimitConfig_Action_GenericKey"},
);

/**
 * The following descriptor entry is appended to the descriptor:
 *
 * .. code-block:: cpp
 *
 *   ("header_match", "<descriptor_value>")
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.HeaderValueMatch
 */
export const RateLimitConfig_Action_HeaderValueMatch = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.HeaderValueMatch",
  () => [
    { no: 1, name: "descriptor_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expect_match", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "headers", kind: "message", T: HeaderMatcher, repeated: true },
  ],
  {localName: "RateLimitConfig_Action_HeaderValueMatch"},
);

/**
 * The following descriptor entry is appended when the metadata contains a key value:
 *
 * .. code-block:: cpp
 *
 *   ("<descriptor_key>", "<value_queried_from_metadata>")
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.MetaData
 */
export const RateLimitConfig_Action_MetaData = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.MetaData",
  () => [
    { no: 1, name: "descriptor_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata_key", kind: "message", T: MetadataKey },
    { no: 3, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source", kind: "enum", T: proto3.getEnumType(RateLimitConfig_Action_MetaData_Source) },
    { no: 5, name: "skip_if_absent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "RateLimitConfig_Action_MetaData"},
);

/**
 * @generated from enum envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.MetaData.Source
 */
export const RateLimitConfig_Action_MetaData_Source = proto3.makeEnum(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Action.MetaData.Source",
  [
    {no: 0, name: "DYNAMIC"},
    {no: 1, name: "ROUTE_ENTRY"},
  ],
);

/**
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Override
 */
export const RateLimitConfig_Override = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Override",
  () => [
    { no: 1, name: "dynamic_metadata", kind: "message", T: RateLimitConfig_Override_DynamicMetadata, oneof: "override_specifier" },
  ],
  {localName: "RateLimitConfig_Override"},
);

/**
 * Fetches the override from the dynamic metadata.
 *
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Override.DynamicMetadata
 */
export const RateLimitConfig_Override_DynamicMetadata = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitConfig.Override.DynamicMetadata",
  () => [
    { no: 1, name: "metadata_key", kind: "message", T: MetadataKey },
  ],
  {localName: "RateLimitConfig_Override_DynamicMetadata"},
);

/**
 * @generated from message envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute
 */
export const RateLimitPerRoute = proto3.makeMessageType(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute",
  () => [
    { no: 1, name: "vh_rate_limits", kind: "enum", T: proto3.getEnumType(RateLimitPerRoute_VhRateLimitsOptions) },
    { no: 2, name: "override_option", kind: "enum", T: proto3.getEnumType(RateLimitPerRoute_OverrideOptions) },
    { no: 3, name: "rate_limits", kind: "message", T: RateLimitConfig, repeated: true },
    { no: 4, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.VhRateLimitsOptions instead.]
 *
 * @generated from enum envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute.VhRateLimitsOptions
 */
export const RateLimitPerRoute_VhRateLimitsOptions = proto3.makeEnum(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute.VhRateLimitsOptions",
  [
    {no: 0, name: "OVERRIDE"},
    {no: 1, name: "INCLUDE"},
    {no: 2, name: "IGNORE"},
  ],
);

/**
 * The override option determines how the filter handles the cases where there is an override config at a more specific level than this one (from least to most specific: virtual host, route, cluster weight).
 * [#not-implemented-hide:]
 *
 * @generated from enum envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute.OverrideOptions
 */
export const RateLimitPerRoute_OverrideOptions = proto3.makeEnum(
  "envoy.extensions.filters.http.ratelimit.v3.RateLimitPerRoute.OverrideOptions",
  [
    {no: 0, name: "DEFAULT"},
    {no: 1, name: "OVERRIDE_POLICY"},
    {no: 2, name: "INCLUDE_POLICY"},
    {no: 3, name: "IGNORE_POLICY"},
  ],
);

