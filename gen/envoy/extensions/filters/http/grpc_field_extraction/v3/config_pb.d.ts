// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/grpc_field_extraction/v3/config.proto (package envoy.extensions.filters.http.grpc_field_extraction.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DataSource } from "../../../../../config/core/v3/base_pb.js";

/**
 * @generated from message envoy.extensions.filters.http.grpc_field_extraction.v3.GrpcFieldExtractionConfig
 */
export declare class GrpcFieldExtractionConfig extends Message<GrpcFieldExtractionConfig> {
  /**
   * The proto descriptor set binary for the gRPC services.
   *
   * It could be passed by a local file through `Datasource.filename` or embedded in the
   * `Datasource.inline_bytes`.
   *
   * @generated from field: envoy.config.core.v3.DataSource descriptor_set = 1;
   */
  descriptorSet?: DataSource;

  /**
   * Specify the extraction info.
   * The key is the fully qualified gRPC method name.
   * `${package}.${Service}.${Method}`, like
   * `endpoints.examples.bookstore.BookStore.GetShelf`
   *
   * The value is the field extractions for individual gRPC method.
   *
   * @generated from field: map<string, envoy.extensions.filters.http.grpc_field_extraction.v3.FieldExtractions> extractions_by_method = 2;
   */
  extractionsByMethod: { [key: string]: FieldExtractions };

  constructor(data?: PartialMessage<GrpcFieldExtractionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_field_extraction.v3.GrpcFieldExtractionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFieldExtractionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFieldExtractionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFieldExtractionConfig;

  static equals(a: GrpcFieldExtractionConfig | PlainMessage<GrpcFieldExtractionConfig> | undefined, b: GrpcFieldExtractionConfig | PlainMessage<GrpcFieldExtractionConfig> | undefined): boolean;
}

/**
 * This message can be used to support per route config approach later even
 * though the Istio doesn't support that so far.
 *
 * @generated from message envoy.extensions.filters.http.grpc_field_extraction.v3.FieldExtractions
 */
export declare class FieldExtractions extends Message<FieldExtractions> {
  /**
   * The field extractions for requests.
   * The key is the field path within the grpc request.
   * For example, we can define `foo.bar.name` if we want to extract
   * Request.foo.bar.name.
   *
   * .. code-block:: proto
   *
   *  message Request {
   *    Foo foo = 1;
   *  }
   *
   *  message Foo {
   *    Bar bar = 1;
   *  }
   *
   *  message Bar {
   *    string name = 1;
   *  }
   *
   * @generated from field: map<string, envoy.extensions.filters.http.grpc_field_extraction.v3.RequestFieldValueDisposition> request_field_extractions = 1;
   */
  requestFieldExtractions: { [key: string]: RequestFieldValueDisposition };

  constructor(data?: PartialMessage<FieldExtractions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_field_extraction.v3.FieldExtractions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldExtractions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldExtractions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldExtractions;

  static equals(a: FieldExtractions | PlainMessage<FieldExtractions> | undefined, b: FieldExtractions | PlainMessage<FieldExtractions> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.grpc_field_extraction.v3.RequestFieldValueDisposition
 */
export declare class RequestFieldValueDisposition extends Message<RequestFieldValueDisposition> {
  /**
   * @generated from oneof envoy.extensions.filters.http.grpc_field_extraction.v3.RequestFieldValueDisposition.disposition
   */
  disposition: {
    /**
     * The dynamic metadata namespace. If empty, "envoy.filters.http.grpc_field_extraction" will be used by default.
     *
     * Unimplemented. Uses "envoy.filters.http.grpc_field_extraction" for now.
     *
     * @generated from field: string dynamic_metadata = 1;
     */
    value: string;
    case: "dynamicMetadata";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RequestFieldValueDisposition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.grpc_field_extraction.v3.RequestFieldValueDisposition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestFieldValueDisposition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestFieldValueDisposition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestFieldValueDisposition;

  static equals(a: RequestFieldValueDisposition | PlainMessage<RequestFieldValueDisposition> | undefined, b: RequestFieldValueDisposition | PlainMessage<RequestFieldValueDisposition> | undefined): boolean;
}

