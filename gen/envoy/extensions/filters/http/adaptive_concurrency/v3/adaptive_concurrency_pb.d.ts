// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto (package envoy.extensions.filters.http.adaptive_concurrency.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Percent } from "../../../../../type/v3/percent_pb.js";
import type { RuntimeFeatureFlag } from "../../../../../config/core/v3/base_pb.js";
import type { HttpStatus } from "../../../../../type/v3/http_status_pb.js";

/**
 * Configuration parameters for the gradient controller.
 *
 * @generated from message envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig
 */
export declare class GradientControllerConfig extends Message<GradientControllerConfig> {
  /**
   * The percentile to use when summarizing aggregated samples. Defaults to p50.
   *
   * @generated from field: envoy.type.v3.Percent sample_aggregate_percentile = 1;
   */
  sampleAggregatePercentile?: Percent;

  /**
   * @generated from field: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams concurrency_limit_params = 2;
   */
  concurrencyLimitParams?: GradientControllerConfig_ConcurrencyLimitCalculationParams;

  /**
   * @generated from field: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams min_rtt_calc_params = 3;
   */
  minRttCalcParams?: GradientControllerConfig_MinimumRTTCalculationParams;

  constructor(data?: PartialMessage<GradientControllerConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradientControllerConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradientControllerConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradientControllerConfig;

  static equals(a: GradientControllerConfig | PlainMessage<GradientControllerConfig> | undefined, b: GradientControllerConfig | PlainMessage<GradientControllerConfig> | undefined): boolean;
}

/**
 * Parameters controlling the periodic recalculation of the concurrency limit from sampled request
 * latencies.
 *
 * @generated from message envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams
 */
export declare class GradientControllerConfig_ConcurrencyLimitCalculationParams extends Message<GradientControllerConfig_ConcurrencyLimitCalculationParams> {
  /**
   * The allowed upper-bound on the calculated concurrency limit. Defaults to 1000.
   *
   * @generated from field: google.protobuf.UInt32Value max_concurrency_limit = 2;
   */
  maxConcurrencyLimit?: number;

  /**
   * The period of time samples are taken to recalculate the concurrency limit.
   *
   * @generated from field: google.protobuf.Duration concurrency_update_interval = 3;
   */
  concurrencyUpdateInterval?: Duration;

  constructor(data?: PartialMessage<GradientControllerConfig_ConcurrencyLimitCalculationParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradientControllerConfig_ConcurrencyLimitCalculationParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradientControllerConfig_ConcurrencyLimitCalculationParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradientControllerConfig_ConcurrencyLimitCalculationParams;

  static equals(a: GradientControllerConfig_ConcurrencyLimitCalculationParams | PlainMessage<GradientControllerConfig_ConcurrencyLimitCalculationParams> | undefined, b: GradientControllerConfig_ConcurrencyLimitCalculationParams | PlainMessage<GradientControllerConfig_ConcurrencyLimitCalculationParams> | undefined): boolean;
}

/**
 * Parameters controlling the periodic minRTT recalculation.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams
 */
export declare class GradientControllerConfig_MinimumRTTCalculationParams extends Message<GradientControllerConfig_MinimumRTTCalculationParams> {
  /**
   * The time interval between recalculating the minimum request round-trip time. Has to be
   * positive.
   *
   * @generated from field: google.protobuf.Duration interval = 1;
   */
  interval?: Duration;

  /**
   * The number of requests to aggregate/sample during the minRTT recalculation window before
   * updating. Defaults to 50.
   *
   * @generated from field: google.protobuf.UInt32Value request_count = 2;
   */
  requestCount?: number;

  /**
   * Randomized time delta that will be introduced to the start of the minRTT calculation window.
   * This is represented as a percentage of the interval duration. Defaults to 15%.
   *
   * Example: If the interval is 10s and the jitter is 15%, the next window will begin
   * somewhere in the range (10s - 11.5s).
   *
   * @generated from field: envoy.type.v3.Percent jitter = 3;
   */
  jitter?: Percent;

  /**
   * The concurrency limit set while measuring the minRTT. Defaults to 3.
   *
   * @generated from field: google.protobuf.UInt32Value min_concurrency = 4;
   */
  minConcurrency?: number;

  /**
   * Amount added to the measured minRTT to add stability to the concurrency limit during natural
   * variability in latency. This is expressed as a percentage of the measured value and can be
   * adjusted to allow more or less tolerance to the sampled latency values.
   *
   * Defaults to 25%.
   *
   * @generated from field: envoy.type.v3.Percent buffer = 5;
   */
  buffer?: Percent;

  constructor(data?: PartialMessage<GradientControllerConfig_MinimumRTTCalculationParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradientControllerConfig_MinimumRTTCalculationParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradientControllerConfig_MinimumRTTCalculationParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradientControllerConfig_MinimumRTTCalculationParams;

  static equals(a: GradientControllerConfig_MinimumRTTCalculationParams | PlainMessage<GradientControllerConfig_MinimumRTTCalculationParams> | undefined, b: GradientControllerConfig_MinimumRTTCalculationParams | PlainMessage<GradientControllerConfig_MinimumRTTCalculationParams> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency
 */
export declare class AdaptiveConcurrency extends Message<AdaptiveConcurrency> {
  /**
   * @generated from oneof envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency.concurrency_controller_config
   */
  concurrencyControllerConfig: {
    /**
     * Gradient concurrency control will be used.
     *
     * @generated from field: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig gradient_controller_config = 1;
     */
    value: GradientControllerConfig;
    case: "gradientControllerConfig";
  } | { case: undefined; value?: undefined };

  /**
   * If set to false, the adaptive concurrency filter will operate as a pass-through filter. If the
   * message is unspecified, the filter will be enabled.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFeatureFlag enabled = 2;
   */
  enabled?: RuntimeFeatureFlag;

  /**
   * This field allows for a custom HTTP response status code to the downstream client when
   * the concurrency limit has been exceeded.
   * Defaults to 503 (Service Unavailable).
   *
   * .. note::
   *   If this is set to < 400, 503 will be used instead.
   *
   * @generated from field: envoy.type.v3.HttpStatus concurrency_limit_exceeded_status = 3;
   */
  concurrencyLimitExceededStatus?: HttpStatus;

  constructor(data?: PartialMessage<AdaptiveConcurrency>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdaptiveConcurrency;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdaptiveConcurrency;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdaptiveConcurrency;

  static equals(a: AdaptiveConcurrency | PlainMessage<AdaptiveConcurrency> | undefined, b: AdaptiveConcurrency | PlainMessage<AdaptiveConcurrency> | undefined): boolean;
}

