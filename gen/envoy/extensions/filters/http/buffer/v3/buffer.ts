// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/http/buffer/v3/buffer.proto" (package "envoy.extensions.filters.http.buffer.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Buffer]
// Buffer :ref:`configuration overview <config_http_filters_buffer>`.
// [#extension: envoy.filters.http.buffer]

/**
 * @generated from protobuf message envoy.extensions.filters.http.buffer.v3.Buffer
 */
export interface Buffer {
    /**
     * The maximum request size that the filter will buffer before the connection
     * manager will stop buffering and return a 413 response.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_request_bytes = 1;
     */
    maxRequestBytes?: UInt32Value;
}
/**
 * @generated from protobuf message envoy.extensions.filters.http.buffer.v3.BufferPerRoute
 */
export interface BufferPerRoute {
    /**
     * @generated from protobuf oneof: override
     */
    override: {
        oneofKind: "disabled";
        /**
         * Disable the buffer filter for this particular vhost or route.
         *
         * @generated from protobuf field: bool disabled = 1;
         */
        disabled: boolean;
    } | {
        oneofKind: "buffer";
        /**
         * Override the global configuration of the filter with this new config.
         *
         * @generated from protobuf field: envoy.extensions.filters.http.buffer.v3.Buffer buffer = 2;
         */
        buffer: Buffer;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Buffer$Type extends MessageType<Buffer> {
    constructor() {
        super("envoy.extensions.filters.http.buffer.v3.Buffer", [
            { no: 1, name: "max_request_bytes", kind: "message", T: () => UInt32Value, options: { "validate.rules": { message: { required: true }, uint32: { gt: 0 } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.buffer.v2.Buffer" } });
    }
    create(value?: PartialMessage<Buffer>): Buffer {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Buffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Buffer): Buffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value max_request_bytes */ 1:
                    message.maxRequestBytes = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxRequestBytes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Buffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value max_request_bytes = 1; */
        if (message.maxRequestBytes)
            UInt32Value.internalBinaryWrite(message.maxRequestBytes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.buffer.v3.Buffer
 */
export const Buffer = new Buffer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BufferPerRoute$Type extends MessageType<BufferPerRoute> {
    constructor() {
        super("envoy.extensions.filters.http.buffer.v3.BufferPerRoute", [
            { no: 1, name: "disabled", kind: "scalar", oneof: "override", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 2, name: "buffer", kind: "message", oneof: "override", T: () => Buffer, options: { "validate.rules": { message: { required: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.http.buffer.v2.BufferPerRoute" } });
    }
    create(value?: PartialMessage<BufferPerRoute>): BufferPerRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.override = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<BufferPerRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BufferPerRoute): BufferPerRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disabled */ 1:
                    message.override = {
                        oneofKind: "disabled",
                        disabled: reader.bool()
                    };
                    break;
                case /* envoy.extensions.filters.http.buffer.v3.Buffer buffer */ 2:
                    message.override = {
                        oneofKind: "buffer",
                        buffer: Buffer.internalBinaryRead(reader, reader.uint32(), options, (message.override as any).buffer)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BufferPerRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool disabled = 1; */
        if (message.override.oneofKind === "disabled")
            writer.tag(1, WireType.Varint).bool(message.override.disabled);
        /* envoy.extensions.filters.http.buffer.v3.Buffer buffer = 2; */
        if (message.override.oneofKind === "buffer")
            Buffer.internalBinaryWrite(message.override.buffer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.http.buffer.v3.BufferPerRoute
 */
export const BufferPerRoute = new BufferPerRoute$Type();
