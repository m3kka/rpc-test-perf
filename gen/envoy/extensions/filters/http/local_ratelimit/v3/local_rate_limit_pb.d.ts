// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto (package envoy.extensions.filters.http.local_ratelimit.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HttpStatus } from "../../../../../type/v3/http_status_pb.js";
import type { TokenBucket } from "../../../../../type/v3/token_bucket_pb.js";
import type { HeaderValueOption, RuntimeFractionalPercent } from "../../../../../config/core/v3/base_pb.js";
import type { LocalRateLimitDescriptor, VhRateLimitsOptions, XRateLimitHeadersRFCVersion } from "../../../../common/ratelimit/v3/ratelimit_pb.js";

/**
 * [#next-free-field: 14]
 *
 * @generated from message envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
 */
export declare class LocalRateLimit extends Message<LocalRateLimit> {
  /**
   * The human readable prefix to use when emitting stats.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * This field allows for a custom HTTP response status code to the downstream client when
   * the request has been rate limited.
   * Defaults to 429 (TooManyRequests).
   *
   * .. note::
   *   If this is set to < 400, 429 will be used instead.
   *
   * @generated from field: envoy.type.v3.HttpStatus status = 2;
   */
  status?: HttpStatus;

  /**
   * The token bucket configuration to use for rate limiting requests that are processed by this
   * filter. Each request processed by the filter consumes a single token. If the token is available,
   * the request will be allowed. If no tokens are available, the request will receive the configured
   * rate limit status.
   *
   * .. note::
   *   It's fine for the token bucket to be unset for the global configuration since the rate limit
   *   can be applied at a the virtual host or route level. Thus, the token bucket must be set
   *   for the per route configuration otherwise the config will be rejected.
   *
   * .. note::
   *   When using per route configuration, the bucket becomes unique to that route.
   *
   * .. note::
   *   In the current implementation the token bucket's :ref:`fill_interval
   *   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
   *   refills.
   *
   * @generated from field: envoy.type.v3.TokenBucket token_bucket = 3;
   */
  tokenBucket?: TokenBucket;

  /**
   * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
   * fraction of requests.
   * Defaults to 0% of requests for safety.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;
   */
  filterEnabled?: RuntimeFractionalPercent;

  /**
   * If set, this will enforce the rate limit decisions for the given fraction of requests.
   *
   * Note: this only applies to the fraction of enabled requests.
   *
   * Defaults to 0% of requests for safety.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;
   */
  filterEnforced?: RuntimeFractionalPercent;

  /**
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 10;
   */
  requestHeadersToAddWhenNotEnforced: HeaderValueOption[];

  /**
   * Specifies a list of HTTP headers that should be added to each response for requests that
   * have been rate limited. This occurs when the filter is enabled and fully enforced.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 6;
   */
  responseHeadersToAdd: HeaderValueOption[];

  /**
   * The rate limit descriptor list to use in the local rate limit to override
   * on. The rate limit descriptor is selected by the first full match from the
   * request descriptors.
   *
   * Example on how to use :ref:`this <config_http_filters_local_rate_limit_descriptors>`.
   *
   * .. note::
   *
   *   In the current implementation the descriptor's token bucket :ref:`fill_interval
   *   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be a multiple
   *   global :ref:`token bucket's<envoy_v3_api_field_extensions.filters.http.local_ratelimit.v3.LocalRateLimit.token_bucket>` fill interval.
   *
   *   The descriptors must match verbatim for rate limiting to apply. There is no partial
   *   match by a subset of descriptor entries in the current implementation.
   *
   * @generated from field: repeated envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor descriptors = 8;
   */
  descriptors: LocalRateLimitDescriptor[];

  /**
   * Specifies the rate limit configurations to be applied with the same
   * stage number. If not set, the default stage number is 0.
   *
   * .. note::
   *
   *  The filter supports a range of 0 - 10 inclusively for stage numbers.
   *
   * @generated from field: uint32 stage = 9;
   */
  stage: number;

  /**
   * Specifies the scope of the rate limiter's token bucket.
   * If set to false, the token bucket is shared across all worker threads,
   * thus the rate limits are applied per Envoy process.
   * If set to true, a token bucket is allocated for each connection.
   * Thus the rate limits are applied per connection thereby allowing
   * one to rate limit requests on a per connection basis.
   * If unspecified, the default value is false.
   *
   * @generated from field: bool local_rate_limit_per_downstream_connection = 11;
   */
  localRateLimitPerDownstreamConnection: boolean;

  /**
   * Defines the standard version to use for X-RateLimit headers emitted by the filter.
   *
   * Disabled by default.
   *
   * @generated from field: envoy.extensions.common.ratelimit.v3.XRateLimitHeadersRFCVersion enable_x_ratelimit_headers = 12;
   */
  enableXRatelimitHeaders: XRateLimitHeadersRFCVersion;

  /**
   * Specifies if the local rate limit filter should include the virtual host rate limits.
   *
   * @generated from field: envoy.extensions.common.ratelimit.v3.VhRateLimitsOptions vh_rate_limits = 13;
   */
  vhRateLimits: VhRateLimitsOptions;

  constructor(data?: PartialMessage<LocalRateLimit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalRateLimit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalRateLimit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalRateLimit;

  static equals(a: LocalRateLimit | PlainMessage<LocalRateLimit> | undefined, b: LocalRateLimit | PlainMessage<LocalRateLimit> | undefined): boolean;
}

