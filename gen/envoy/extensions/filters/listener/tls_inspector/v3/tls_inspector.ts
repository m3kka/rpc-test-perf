// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/listener/tls_inspector/v3/tls_inspector.proto" (package "envoy.extensions.filters.listener.tls_inspector.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: TLS Inspector Filter]
// Allows detecting whether the transport appears to be TLS or plaintext.
// [#extension: envoy.filters.listener.tls_inspector]

/**
 * @generated from protobuf message envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
 */
export interface TlsInspector {
    /**
     * Populate ``JA3`` fingerprint hash using data from the TLS Client Hello packet. Default is false.
     *
     * @generated from protobuf field: google.protobuf.BoolValue enable_ja3_fingerprinting = 1;
     */
    enableJa3Fingerprinting?: BoolValue;
    /**
     * The size in bytes of the initial buffer requested by the tls_inspector.
     * If the filter needs to read additional bytes from the socket, the
     * filter will double the buffer up to it's default maximum of 64KiB.
     * If this size is not defined, defaults to maximum 64KiB that the
     * tls inspector will consume.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value initial_read_buffer_size = 2;
     */
    initialReadBufferSize?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class TlsInspector$Type extends MessageType<TlsInspector> {
    constructor() {
        super("envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector", [
            { no: 1, name: "enable_ja3_fingerprinting", kind: "message", T: () => BoolValue },
            { no: 2, name: "initial_read_buffer_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lt: 65537, gt: 255 } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.listener.tls_inspector.v2.TlsInspector" } });
    }
    create(value?: PartialMessage<TlsInspector>): TlsInspector {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TlsInspector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TlsInspector): TlsInspector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.BoolValue enable_ja3_fingerprinting */ 1:
                    message.enableJa3Fingerprinting = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.enableJa3Fingerprinting);
                    break;
                case /* google.protobuf.UInt32Value initial_read_buffer_size */ 2:
                    message.initialReadBufferSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.initialReadBufferSize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TlsInspector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.BoolValue enable_ja3_fingerprinting = 1; */
        if (message.enableJa3Fingerprinting)
            BoolValue.internalBinaryWrite(message.enableJa3Fingerprinting, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value initial_read_buffer_size = 2; */
        if (message.initialReadBufferSize)
            UInt32Value.internalBinaryWrite(message.initialReadBufferSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
 */
export const TlsInspector = new TlsInspector$Type();
