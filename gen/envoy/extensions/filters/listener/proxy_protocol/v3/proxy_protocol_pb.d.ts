// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto (package envoy.extensions.filters.listener.proxy_protocol.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ProxyProtocolPassThroughTLVs } from "../../../../../config/core/v3/proxy_protocol_pb.js";

/**
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
 */
export declare class ProxyProtocol extends Message<ProxyProtocol> {
  /**
   * The list of rules to apply to requests.
   *
   * @generated from field: repeated envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule rules = 1;
   */
  rules: ProxyProtocol_Rule[];

  /**
   * Allow requests through that don't use proxy protocol. Defaults to false.
   *
   * .. attention::
   *
   *   This breaks conformance with the specification.
   *   Only enable if ALL traffic to the listener comes from a trusted source.
   *   For more information on the security implications of this feature, see
   *   https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt
   *
   * .. attention::
   *
   *   Requests of 12 or fewer bytes that match the proxy protocol v2 signature
   *   and requests of 6 or fewer bytes that match the proxy protocol v1
   *   signature will timeout (Envoy is unable to differentiate these requests
   *   from incomplete proxy protocol requests).
   *
   * @generated from field: bool allow_requests_without_proxy_protocol = 2;
   */
  allowRequestsWithoutProxyProtocol: boolean;

  /**
   * This config controls which TLVs can be passed to filter state if it is Proxy Protocol
   * V2 header. If there is no setting for this field, no TLVs will be passed through.
   *
   * .. note::
   *
   *   If this is configured, you likely also want to set
   *   :ref:`core.v3.ProxyProtocolConfig.pass_through_tlvs <envoy_v3_api_field_config.core.v3.ProxyProtocolConfig.pass_through_tlvs>`,
   *   which controls pass-through for the upstream.
   *
   * @generated from field: envoy.config.core.v3.ProxyProtocolPassThroughTLVs pass_through_tlvs = 3;
   */
  passThroughTlvs?: ProxyProtocolPassThroughTLVs;

  constructor(data?: PartialMessage<ProxyProtocol>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxyProtocol;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxyProtocol;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxyProtocol;

  static equals(a: ProxyProtocol | PlainMessage<ProxyProtocol> | undefined, b: ProxyProtocol | PlainMessage<ProxyProtocol> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair
 */
export declare class ProxyProtocol_KeyValuePair extends Message<ProxyProtocol_KeyValuePair> {
  /**
   * The namespace â€” if this is empty, the filter's namespace will be used.
   *
   * @generated from field: string metadata_namespace = 1;
   */
  metadataNamespace: string;

  /**
   * The key to use within the namespace.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  constructor(data?: PartialMessage<ProxyProtocol_KeyValuePair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxyProtocol_KeyValuePair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxyProtocol_KeyValuePair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxyProtocol_KeyValuePair;

  static equals(a: ProxyProtocol_KeyValuePair | PlainMessage<ProxyProtocol_KeyValuePair> | undefined, b: ProxyProtocol_KeyValuePair | PlainMessage<ProxyProtocol_KeyValuePair> | undefined): boolean;
}

/**
 * A Rule defines what metadata to apply when a header is present or missing.
 *
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule
 */
export declare class ProxyProtocol_Rule extends Message<ProxyProtocol_Rule> {
  /**
   * The type that triggers the rule - required
   * TLV type is defined as uint8_t in proxy protocol. See `the spec
   * <https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt>`_ for details.
   *
   * @generated from field: uint32 tlv_type = 1;
   */
  tlvType: number;

  /**
   * If the TLV type is present, apply this metadata KeyValuePair.
   *
   * @generated from field: envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair on_tlv_present = 2;
   */
  onTlvPresent?: ProxyProtocol_KeyValuePair;

  constructor(data?: PartialMessage<ProxyProtocol_Rule>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxyProtocol_Rule;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxyProtocol_Rule;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxyProtocol_Rule;

  static equals(a: ProxyProtocol_Rule | PlainMessage<ProxyProtocol_Rule> | undefined, b: ProxyProtocol_Rule | PlainMessage<ProxyProtocol_Rule> | undefined): boolean;
}

