// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto (package envoy.extensions.filters.listener.proxy_protocol.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { ProxyProtocolPassThroughTLVs } from "../../../../../config/core/v3/proxy_protocol_pb.js";

/**
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
 */
export const ProxyProtocol = proto3.makeMessageType(
  "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol",
  () => [
    { no: 1, name: "rules", kind: "message", T: ProxyProtocol_Rule, repeated: true },
    { no: 2, name: "allow_requests_without_proxy_protocol", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "pass_through_tlvs", kind: "message", T: ProxyProtocolPassThroughTLVs },
  ],
);

/**
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair
 */
export const ProxyProtocol_KeyValuePair = proto3.makeMessageType(
  "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair",
  () => [
    { no: 1, name: "metadata_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "ProxyProtocol_KeyValuePair"},
);

/**
 * A Rule defines what metadata to apply when a header is present or missing.
 *
 * @generated from message envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule
 */
export const ProxyProtocol_Rule = proto3.makeMessageType(
  "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule",
  () => [
    { no: 1, name: "tlv_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "on_tlv_present", kind: "message", T: ProxyProtocol_KeyValuePair },
  ],
  {localName: "ProxyProtocol_Rule"},
);

