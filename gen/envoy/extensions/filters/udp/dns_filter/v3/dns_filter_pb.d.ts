// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto (package envoy.extensions.filters.udp.dns_filter.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DnsTable } from "../../../../../data/dns/v3/dns_table_pb.js";
import type { DataSource } from "../../../../../config/core/v3/base_pb.js";
import type { Address } from "../../../../../config/core/v3/address_pb.js";
import type { DnsResolutionConfig } from "../../../../../config/core/v3/resolver_pb.js";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * Configuration for the DNS filter.
 *
 * @generated from message envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig
 */
export declare class DnsFilterConfig extends Message<DnsFilterConfig> {
  /**
   * The stat prefix used when emitting DNS filter statistics
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   *
   * @generated from field: envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;
   */
  serverConfig?: DnsFilterConfig_ServerContextConfig;

  /**
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   *
   * @generated from field: envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;
   */
  clientConfig?: DnsFilterConfig_ClientContextConfig;

  constructor(data?: PartialMessage<DnsFilterConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsFilterConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsFilterConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsFilterConfig;

  static equals(a: DnsFilterConfig | PlainMessage<DnsFilterConfig> | undefined, b: DnsFilterConfig | PlainMessage<DnsFilterConfig> | undefined): boolean;
}

/**
 * This message contains the configuration for the DNS Filter operating
 * in a server context. This message will contain the virtual hosts and
 * associated addresses with which Envoy will respond to queries
 *
 * @generated from message envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig
 */
export declare class DnsFilterConfig_ServerContextConfig extends Message<DnsFilterConfig_ServerContextConfig> {
  /**
   * @generated from oneof envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.config_source
   */
  configSource: {
    /**
     * Load the configuration specified from the control plane
     *
     * @generated from field: envoy.data.dns.v3.DnsTable inline_dns_table = 1;
     */
    value: DnsTable;
    case: "inlineDnsTable";
  } | {
    /**
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     *
     * @generated from field: envoy.config.core.v3.DataSource external_dns_table = 2;
     */
    value: DataSource;
    case: "externalDnsTable";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DnsFilterConfig_ServerContextConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsFilterConfig_ServerContextConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsFilterConfig_ServerContextConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsFilterConfig_ServerContextConfig;

  static equals(a: DnsFilterConfig_ServerContextConfig | PlainMessage<DnsFilterConfig_ServerContextConfig> | undefined, b: DnsFilterConfig_ServerContextConfig | PlainMessage<DnsFilterConfig_ServerContextConfig> | undefined): boolean;
}

/**
 * This message contains the configuration for the DNS Filter operating
 * in a client context. This message will contain the timeouts, retry,
 * and forwarding configuration for Envoy to make DNS requests to other
 * resolvers
 *
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig
 */
export declare class DnsFilterConfig_ClientContextConfig extends Message<DnsFilterConfig_ClientContextConfig> {
  /**
   * Sets the maximum time we will wait for the upstream query to complete
   * We allow 5s for the upstream resolution to complete, so the minimum
   * value here is 1. Note that the total latency for a failed query is the
   * number of retries multiplied by the resolver_timeout.
   *
   * @generated from field: google.protobuf.Duration resolver_timeout = 1;
   */
  resolverTimeout?: Duration;

  /**
   * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
   * 1.19.1.
   * Control planes that need to set this field for Envoy 1.19.0 and
   * 1.19.1 clients should fork the protobufs and change the field type
   * to `DnsResolutionConfig`.
   * Control planes that need to simultaneously support Envoy 1.18.x and
   * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
   *
   * [#not-implemented-hide:]
   *
   * @generated from field: repeated envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true];
   * @deprecated
   */
  upstreamResolvers: Address[];

  /**
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config <envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config>`.
   *
   * @generated from field: envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true];
   * @deprecated
   */
  dnsResolutionConfig?: DnsResolutionConfig;

  /**
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig <envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig>`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config <envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config>`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;
   */
  typedDnsResolverConfig?: TypedExtensionConfig;

  /**
   * Controls how many outstanding external lookup contexts the filter tracks.
   * The context structure allows the filter to respond to every query even if the external
   * resolution times out or is otherwise unsuccessful
   *
   * @generated from field: uint64 max_pending_lookups = 3;
   */
  maxPendingLookups: bigint;

  constructor(data?: PartialMessage<DnsFilterConfig_ClientContextConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsFilterConfig_ClientContextConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsFilterConfig_ClientContextConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsFilterConfig_ClientContextConfig;

  static equals(a: DnsFilterConfig_ClientContextConfig | PlainMessage<DnsFilterConfig_ClientContextConfig> | undefined, b: DnsFilterConfig_ClientContextConfig | PlainMessage<DnsFilterConfig_ClientContextConfig> | undefined): boolean;
}

