// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/common/dependency/v3/dependency.proto (package envoy.extensions.filters.common.dependency.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Dependency specification and string identifier.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.Dependency
 */
export const Dependency = proto3.makeMessageType(
  "envoy.extensions.filters.common.dependency.v3.Dependency",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Dependency_DependencyType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from enum envoy.extensions.filters.common.dependency.v3.Dependency.DependencyType
 */
export const Dependency_DependencyType = proto3.makeEnum(
  "envoy.extensions.filters.common.dependency.v3.Dependency.DependencyType",
  [
    {no: 0, name: "HEADER"},
    {no: 1, name: "FILTER_STATE_KEY"},
    {no: 2, name: "DYNAMIC_METADATA"},
  ],
);

/**
 * Dependency specification for a filter. For a filter chain to be valid, any
 * dependency that is required must be provided by an earlier filter.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.FilterDependencies
 */
export const FilterDependencies = proto3.makeMessageType(
  "envoy.extensions.filters.common.dependency.v3.FilterDependencies",
  () => [
    { no: 1, name: "decode_required", kind: "message", T: Dependency, repeated: true },
    { no: 2, name: "decode_provided", kind: "message", T: Dependency, repeated: true },
    { no: 3, name: "encode_required", kind: "message", T: Dependency, repeated: true },
    { no: 4, name: "encode_provided", kind: "message", T: Dependency, repeated: true },
  ],
);

/**
 * Matching requirements for a filter. For a match tree to be used with a filter, the match
 * requirements must be satisfied.
 *
 * This protobuf is provided by the filter implementation as a way to communicate the matching
 * requirements to the filter factories, allowing for config rejection if the requirements are
 * not satisfied.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.MatchingRequirements
 */
export const MatchingRequirements = proto3.makeMessageType(
  "envoy.extensions.filters.common.dependency.v3.MatchingRequirements",
  () => [
    { no: 1, name: "data_input_allow_list", kind: "message", T: MatchingRequirements_DataInputAllowList },
  ],
);

/**
 * @generated from message envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList
 */
export const MatchingRequirements_DataInputAllowList = proto3.makeMessageType(
  "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList",
  () => [
    { no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "MatchingRequirements_DataInputAllowList"},
);

