// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/common/dependency/v3/dependency.proto (package envoy.extensions.filters.common.dependency.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Dependency specification and string identifier.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.Dependency
 */
export declare class Dependency extends Message<Dependency> {
  /**
   * The kind of dependency.
   *
   * @generated from field: envoy.extensions.filters.common.dependency.v3.Dependency.DependencyType type = 1;
   */
  type: Dependency_DependencyType;

  /**
   * The string identifier for the dependency.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<Dependency>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.common.dependency.v3.Dependency";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dependency;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dependency;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dependency;

  static equals(a: Dependency | PlainMessage<Dependency> | undefined, b: Dependency | PlainMessage<Dependency> | undefined): boolean;
}

/**
 * @generated from enum envoy.extensions.filters.common.dependency.v3.Dependency.DependencyType
 */
export declare enum Dependency_DependencyType {
  /**
   * @generated from enum value: HEADER = 0;
   */
  HEADER = 0,

  /**
   * @generated from enum value: FILTER_STATE_KEY = 1;
   */
  FILTER_STATE_KEY = 1,

  /**
   * @generated from enum value: DYNAMIC_METADATA = 2;
   */
  DYNAMIC_METADATA = 2,
}

/**
 * Dependency specification for a filter. For a filter chain to be valid, any
 * dependency that is required must be provided by an earlier filter.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.FilterDependencies
 */
export declare class FilterDependencies extends Message<FilterDependencies> {
  /**
   * A list of dependencies required on the decode path.
   *
   * @generated from field: repeated envoy.extensions.filters.common.dependency.v3.Dependency decode_required = 1;
   */
  decodeRequired: Dependency[];

  /**
   * A list of dependencies provided on the encode path.
   *
   * @generated from field: repeated envoy.extensions.filters.common.dependency.v3.Dependency decode_provided = 2;
   */
  decodeProvided: Dependency[];

  /**
   * A list of dependencies required on the decode path.
   *
   * @generated from field: repeated envoy.extensions.filters.common.dependency.v3.Dependency encode_required = 3;
   */
  encodeRequired: Dependency[];

  /**
   * A list of dependencies provided on the encode path.
   *
   * @generated from field: repeated envoy.extensions.filters.common.dependency.v3.Dependency encode_provided = 4;
   */
  encodeProvided: Dependency[];

  constructor(data?: PartialMessage<FilterDependencies>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.common.dependency.v3.FilterDependencies";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterDependencies;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterDependencies;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterDependencies;

  static equals(a: FilterDependencies | PlainMessage<FilterDependencies> | undefined, b: FilterDependencies | PlainMessage<FilterDependencies> | undefined): boolean;
}

/**
 * Matching requirements for a filter. For a match tree to be used with a filter, the match
 * requirements must be satisfied.
 *
 * This protobuf is provided by the filter implementation as a way to communicate the matching
 * requirements to the filter factories, allowing for config rejection if the requirements are
 * not satisfied.
 *
 * @generated from message envoy.extensions.filters.common.dependency.v3.MatchingRequirements
 */
export declare class MatchingRequirements extends Message<MatchingRequirements> {
  /**
   * @generated from field: envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList data_input_allow_list = 1;
   */
  dataInputAllowList?: MatchingRequirements_DataInputAllowList;

  constructor(data?: PartialMessage<MatchingRequirements>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.common.dependency.v3.MatchingRequirements";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchingRequirements;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchingRequirements;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchingRequirements;

  static equals(a: MatchingRequirements | PlainMessage<MatchingRequirements> | undefined, b: MatchingRequirements | PlainMessage<MatchingRequirements> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList
 */
export declare class MatchingRequirements_DataInputAllowList extends Message<MatchingRequirements_DataInputAllowList> {
  /**
   * An explicit list of data inputs that are allowed to be used with this filter.
   *
   * @generated from field: repeated string type_url = 1;
   */
  typeUrl: string[];

  constructor(data?: PartialMessage<MatchingRequirements_DataInputAllowList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchingRequirements_DataInputAllowList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchingRequirements_DataInputAllowList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchingRequirements_DataInputAllowList;

  static equals(a: MatchingRequirements_DataInputAllowList | PlainMessage<MatchingRequirements_DataInputAllowList> | undefined, b: MatchingRequirements_DataInputAllowList | PlainMessage<MatchingRequirements_DataInputAllowList> | undefined): boolean;
}

