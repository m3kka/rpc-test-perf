// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/local_ratelimit/v3/local_rate_limit.proto" (package "envoy.extensions.filters.network.local_ratelimit.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RuntimeFeatureFlag } from "../../../../../config/core/v3/base";
import { TokenBucket } from "../../../../../type/v3/token_bucket";
// [#protodoc-title: Local rate limit]
// Local rate limit :ref:`configuration overview <config_network_filters_local_rate_limit>`.
// [#extension: envoy.filters.network.local_ratelimit]

/**
 * @generated from protobuf message envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit
 */
export interface LocalRateLimit {
    /**
     * The prefix to use when emitting :ref:`statistics
     * <config_network_filters_local_rate_limit_stats>`.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     *
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key <envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key>`.
     *
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
     *   refills.
     *
     * @generated from protobuf field: envoy.type.v3.TokenBucket token_bucket = 2;
     */
    tokenBucket?: TokenBucket;
    /**
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     *
     * @generated from protobuf field: envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;
     */
    runtimeEnabled?: RuntimeFeatureFlag;
    /**
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket <envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket>`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     *
     * @generated from protobuf field: string share_key = 4;
     */
    shareKey: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LocalRateLimit$Type extends MessageType<LocalRateLimit> {
    constructor() {
        super("envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "token_bucket", kind: "message", T: () => TokenBucket, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "runtime_enabled", kind: "message", T: () => RuntimeFeatureFlag },
            { no: 4, name: "share_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.local_rate_limit.v2alpha.LocalRateLimit" } });
    }
    create(value?: PartialMessage<LocalRateLimit>): LocalRateLimit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.shareKey = "";
        if (value !== undefined)
            reflectionMergePartial<LocalRateLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocalRateLimit): LocalRateLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.type.v3.TokenBucket token_bucket */ 2:
                    message.tokenBucket = TokenBucket.internalBinaryRead(reader, reader.uint32(), options, message.tokenBucket);
                    break;
                case /* envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled */ 3:
                    message.runtimeEnabled = RuntimeFeatureFlag.internalBinaryRead(reader, reader.uint32(), options, message.runtimeEnabled);
                    break;
                case /* string share_key */ 4:
                    message.shareKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocalRateLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.type.v3.TokenBucket token_bucket = 2; */
        if (message.tokenBucket)
            TokenBucket.internalBinaryWrite(message.tokenBucket, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3; */
        if (message.runtimeEnabled)
            RuntimeFeatureFlag.internalBinaryWrite(message.runtimeEnabled, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string share_key = 4; */
        if (message.shareKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.shareKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit
 */
export const LocalRateLimit = new LocalRateLimit$Type();
