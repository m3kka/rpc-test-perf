// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/ratelimit/v3/rate_limit.proto (package envoy.extensions.filters.network.ratelimit.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RateLimitDescriptor } from "../../../../common/ratelimit/v3/ratelimit_pb.js";
import type { RateLimitServiceConfig } from "../../../../../config/ratelimit/v3/rls_pb.js";

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.ratelimit.v3.RateLimit
 */
export declare class RateLimit extends Message<RateLimit> {
  /**
   * The prefix to use when emitting :ref:`statistics <config_network_filters_rate_limit_stats>`.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The rate limit domain to use in the rate limit service request.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * The rate limit descriptor list to use in the rate limit service request.
   *
   * @generated from field: repeated envoy.extensions.common.ratelimit.v3.RateLimitDescriptor descriptors = 3;
   */
  descriptors: RateLimitDescriptor[];

  /**
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   *
   * @generated from field: google.protobuf.Duration timeout = 4;
   */
  timeout?: Duration;

  /**
   * The filter's behaviour in case the rate limiting service does
   * not respond back. When it is set to true, Envoy will not allow traffic in case of
   * communication failure between rate limiting service and the proxy.
   * Defaults to false.
   *
   * @generated from field: bool failure_mode_deny = 5;
   */
  failureModeDeny: boolean;

  /**
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   *
   * @generated from field: envoy.config.ratelimit.v3.RateLimitServiceConfig rate_limit_service = 6;
   */
  rateLimitService?: RateLimitServiceConfig;

  constructor(data?: PartialMessage<RateLimit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.ratelimit.v3.RateLimit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimit;

  static equals(a: RateLimit | PlainMessage<RateLimit> | undefined, b: RateLimit | PlainMessage<RateLimit> | undefined): boolean;
}

