// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/dubbo_proxy/v3/dubbo_proxy.proto" (package "envoy.extensions.filters.network.dubbo_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../../google/protobuf/any";
import { MultipleRouteConfiguration } from "./route";
import { RouteConfiguration } from "./route";
import { ConfigSource } from "../../../../../config/core/v3/config_source";
/**
 * @generated from protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.Drds
 */
export interface Drds {
    /**
     * Configuration source specifier.
     * In case of ``api_config_source`` only aggregated ``api_type`` is supported.
     *
     * @generated from protobuf field: envoy.config.core.v3.ConfigSource config_source = 1;
     */
    configSource?: ConfigSource;
    /**
     * The name of the multiple route configuration. This allows to use different multiple route
     * configurations. Tells which multiple route configuration should be fetched from the configuration
     * source. Leave unspecified is also valid and means the unnamed multiple route configuration.
     *
     * @generated from protobuf field: string route_config_name = 2;
     */
    routeConfigName: string;
}
/**
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy
 */
export interface DubboProxy {
    /**
     * The human readable prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * Configure the protocol used.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType protocol_type = 2;
     */
    protocolType: ProtocolType;
    /**
     * Configure the serialization protocol used.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType serialization_type = 3;
     */
    serializationType: SerializationType;
    /**
     * The route table for the connection manager is static and is specified in this property.
     *
     * .. note::
     *
     *   This field is deprecated. Please use ``drds`` or ``multiple_route_config`` first.
     *
     * @deprecated
     * @generated from protobuf field: repeated envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration route_config = 4 [deprecated = true];
     */
    routeConfig: RouteConfiguration[];
    /**
     * @generated from protobuf oneof: route_specifier
     */
    routeSpecifier: {
        oneofKind: "drds";
        /**
         * Use xDS to fetch the route configuration. It is invalid to define both ``route_config`` and ``drds``.
         *
         * @generated from protobuf field: envoy.extensions.filters.network.dubbo_proxy.v3.Drds drds = 6;
         */
        drds: Drds;
    } | {
        oneofKind: "multipleRouteConfig";
        /**
         * @generated from protobuf field: envoy.extensions.filters.network.dubbo_proxy.v3.MultipleRouteConfiguration multiple_route_config = 7;
         */
        multipleRouteConfig: MultipleRouteConfiguration;
    } | {
        oneofKind: undefined;
    };
    /**
     * A list of individual Dubbo filters that make up the filter chain for requests made to the
     * Dubbo proxy. Order matters as the filters are processed sequentially. For backwards
     * compatibility, if no dubbo_filters are specified, a default Dubbo router filter
     * (``envoy.filters.dubbo.router``) is used.
     *
     * @generated from protobuf field: repeated envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter dubbo_filters = 5;
     */
    dubboFilters: DubboFilter[];
}
/**
 * DubboFilter configures a Dubbo filter.
 *
 * @generated from protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter
 */
export interface DubboFilter {
    /**
     * The name of the filter to instantiate. The name must match a supported
     * filter.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Filter specific configuration which depends on the filter being
     * instantiated. See the supported filters for further documentation.
     *
     * @generated from protobuf field: google.protobuf.Any config = 2;
     */
    config?: Any;
}
// [#protodoc-title: Dubbo Proxy]
// Dubbo Proxy :ref:`configuration overview <config_network_filters_dubbo_proxy>`.
// [#extension: envoy.filters.network.dubbo_proxy]

/**
 * Dubbo Protocol types supported by Envoy.
 *
 * @generated from protobuf enum envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType
 */
export enum ProtocolType {
    /**
     * the default protocol.
     *
     * @generated from protobuf enum value: Dubbo = 0;
     */
    Dubbo = 0
}
/**
 * Dubbo Serialization types supported by Envoy.
 *
 * @generated from protobuf enum envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType
 */
export enum SerializationType {
    /**
     * the default serialization protocol.
     *
     * @generated from protobuf enum value: Hessian2 = 0;
     */
    Hessian2 = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class Drds$Type extends MessageType<Drds> {
    constructor() {
        super("envoy.extensions.filters.network.dubbo_proxy.v3.Drds", [
            { no: 1, name: "config_source", kind: "message", T: () => ConfigSource, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "route_config_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Drds>): Drds {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeConfigName = "";
        if (value !== undefined)
            reflectionMergePartial<Drds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Drds): Drds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.ConfigSource config_source */ 1:
                    message.configSource = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.configSource);
                    break;
                case /* string route_config_name */ 2:
                    message.routeConfigName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Drds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.ConfigSource config_source = 1; */
        if (message.configSource)
            ConfigSource.internalBinaryWrite(message.configSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string route_config_name = 2; */
        if (message.routeConfigName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routeConfigName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.Drds
 */
export const Drds = new Drds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DubboProxy$Type extends MessageType<DubboProxy> {
    constructor() {
        super("envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "protocol_type", kind: "enum", T: () => ["envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType", ProtocolType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "serialization_type", kind: "enum", T: () => ["envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType", SerializationType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "route_config", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RouteConfiguration, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 6, name: "drds", kind: "message", oneof: "routeSpecifier", T: () => Drds, options: { "udpa.annotations.field_migrate": { oneofPromotion: "route_specifier" } } },
            { no: 7, name: "multiple_route_config", kind: "message", oneof: "routeSpecifier", T: () => MultipleRouteConfiguration },
            { no: 5, name: "dubbo_filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DubboFilter }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboProxy" } });
    }
    create(value?: PartialMessage<DubboProxy>): DubboProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.protocolType = 0;
        message.serializationType = 0;
        message.routeConfig = [];
        message.routeSpecifier = { oneofKind: undefined };
        message.dubboFilters = [];
        if (value !== undefined)
            reflectionMergePartial<DubboProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DubboProxy): DubboProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType protocol_type */ 2:
                    message.protocolType = reader.int32();
                    break;
                case /* envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType serialization_type */ 3:
                    message.serializationType = reader.int32();
                    break;
                case /* repeated envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration route_config = 4 [deprecated = true];*/ 4:
                    message.routeConfig.push(RouteConfiguration.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.extensions.filters.network.dubbo_proxy.v3.Drds drds */ 6:
                    message.routeSpecifier = {
                        oneofKind: "drds",
                        drds: Drds.internalBinaryRead(reader, reader.uint32(), options, (message.routeSpecifier as any).drds)
                    };
                    break;
                case /* envoy.extensions.filters.network.dubbo_proxy.v3.MultipleRouteConfiguration multiple_route_config */ 7:
                    message.routeSpecifier = {
                        oneofKind: "multipleRouteConfig",
                        multipleRouteConfig: MultipleRouteConfiguration.internalBinaryRead(reader, reader.uint32(), options, (message.routeSpecifier as any).multipleRouteConfig)
                    };
                    break;
                case /* repeated envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter dubbo_filters */ 5:
                    message.dubboFilters.push(DubboFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DubboProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.extensions.filters.network.dubbo_proxy.v3.ProtocolType protocol_type = 2; */
        if (message.protocolType !== 0)
            writer.tag(2, WireType.Varint).int32(message.protocolType);
        /* envoy.extensions.filters.network.dubbo_proxy.v3.SerializationType serialization_type = 3; */
        if (message.serializationType !== 0)
            writer.tag(3, WireType.Varint).int32(message.serializationType);
        /* repeated envoy.extensions.filters.network.dubbo_proxy.v3.RouteConfiguration route_config = 4 [deprecated = true]; */
        for (let i = 0; i < message.routeConfig.length; i++)
            RouteConfiguration.internalBinaryWrite(message.routeConfig[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.dubbo_proxy.v3.Drds drds = 6; */
        if (message.routeSpecifier.oneofKind === "drds")
            Drds.internalBinaryWrite(message.routeSpecifier.drds, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.dubbo_proxy.v3.MultipleRouteConfiguration multiple_route_config = 7; */
        if (message.routeSpecifier.oneofKind === "multipleRouteConfig")
            MultipleRouteConfiguration.internalBinaryWrite(message.routeSpecifier.multipleRouteConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter dubbo_filters = 5; */
        for (let i = 0; i < message.dubboFilters.length; i++)
            DubboFilter.internalBinaryWrite(message.dubboFilters[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy
 */
export const DubboProxy = new DubboProxy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DubboFilter$Type extends MessageType<DubboFilter> {
    constructor() {
        super("envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "config", kind: "message", T: () => Any }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboFilter" } });
    }
    create(value?: PartialMessage<DubboFilter>): DubboFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DubboFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DubboFilter): DubboFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Any config */ 2:
                    message.config = Any.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DubboFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Any config = 2; */
        if (message.config)
            Any.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter
 */
export const DubboFilter = new DubboFilter$Type();
