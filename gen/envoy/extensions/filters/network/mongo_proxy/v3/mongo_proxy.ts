// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/mongo_proxy/v3/mongo_proxy.proto" (package "envoy.extensions.filters.network.mongo_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FaultDelay } from "../../../common/fault/v3/fault";
// [#protodoc-title: Mongo proxy]
// MongoDB :ref:`configuration overview <config_network_filters_mongo_proxy>`.
// [#extension: envoy.filters.network.mongo_proxy]

/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.network.mongo_proxy.v3.MongoProxy
 */
export interface MongoProxy {
    /**
     * The human readable prefix to use when emitting :ref:`statistics
     * <config_network_filters_mongo_proxy_stats>`.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The optional path to use for writing Mongo access logs. If not access log
     * path is specified no access logs will be written. Note that access log is
     * also gated :ref:`runtime <config_network_filters_mongo_proxy_runtime>`.
     *
     * @generated from protobuf field: string access_log = 2;
     */
    accessLog: string;
    /**
     * Inject a fixed delay before proxying a Mongo operation. Delays are
     * applied to the following MongoDB operations: Query, Insert, GetMore,
     * and KillCursors. Once an active delay is in progress, all incoming
     * data up until the timer event fires will be a part of the delay.
     *
     * @generated from protobuf field: envoy.extensions.filters.common.fault.v3.FaultDelay delay = 3;
     */
    delay?: FaultDelay;
    /**
     * Flag to specify whether :ref:`dynamic metadata
     * <config_network_filters_mongo_proxy_dynamic_metadata>` should be emitted. Defaults to false.
     *
     * @generated from protobuf field: bool emit_dynamic_metadata = 4;
     */
    emitDynamicMetadata: boolean;
    /**
     * List of commands to emit metrics for. Defaults to "delete", "insert", and "update".
     * Note that metrics will not be emitted for "find" commands, since those are considered
     * queries, and metrics for those are emitted under a dedicated "query" namespace.
     *
     * @generated from protobuf field: repeated string commands = 5;
     */
    commands: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class MongoProxy$Type extends MessageType<MongoProxy> {
    constructor() {
        super("envoy.extensions.filters.network.mongo_proxy.v3.MongoProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "access_log", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "delay", kind: "message", T: () => FaultDelay },
            { no: 4, name: "emit_dynamic_metadata", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "commands", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.mongo_proxy.v2.MongoProxy" } });
    }
    create(value?: PartialMessage<MongoProxy>): MongoProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.accessLog = "";
        message.emitDynamicMetadata = false;
        message.commands = [];
        if (value !== undefined)
            reflectionMergePartial<MongoProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MongoProxy): MongoProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* string access_log */ 2:
                    message.accessLog = reader.string();
                    break;
                case /* envoy.extensions.filters.common.fault.v3.FaultDelay delay */ 3:
                    message.delay = FaultDelay.internalBinaryRead(reader, reader.uint32(), options, message.delay);
                    break;
                case /* bool emit_dynamic_metadata */ 4:
                    message.emitDynamicMetadata = reader.bool();
                    break;
                case /* repeated string commands */ 5:
                    message.commands.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MongoProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* string access_log = 2; */
        if (message.accessLog !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessLog);
        /* envoy.extensions.filters.common.fault.v3.FaultDelay delay = 3; */
        if (message.delay)
            FaultDelay.internalBinaryWrite(message.delay, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool emit_dynamic_metadata = 4; */
        if (message.emitDynamicMetadata !== false)
            writer.tag(4, WireType.Varint).bool(message.emitDynamicMetadata);
        /* repeated string commands = 5; */
        for (let i = 0; i < message.commands.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.commands[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.mongo_proxy.v3.MongoProxy
 */
export const MongoProxy = new MongoProxy$Type();
