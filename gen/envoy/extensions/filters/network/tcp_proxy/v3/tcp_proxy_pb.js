// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto (package envoy.extensions.filters.network.tcp_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { HeaderValueOption, Metadata } from "../../../../../config/core/v3/base_pb.js";
import { AccessLog } from "../../../../../config/accesslog/v3/accesslog_pb.js";
import { HashPolicy } from "../../../../../type/v3/hash_policy_pb.js";
import { ConfigSource } from "../../../../../config/core/v3/config_source_pb.js";

/**
 * [#next-free-field: 18]
 *
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
 */
export const TcpProxy = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy",
  () => [
    { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "cluster_specifier" },
    { no: 10, name: "weighted_clusters", kind: "message", T: TcpProxy_WeightedCluster, oneof: "cluster_specifier" },
    { no: 14, name: "on_demand", kind: "message", T: TcpProxy_OnDemand },
    { no: 9, name: "metadata_match", kind: "message", T: Metadata },
    { no: 8, name: "idle_timeout", kind: "message", T: Duration },
    { no: 3, name: "downstream_idle_timeout", kind: "message", T: Duration },
    { no: 4, name: "upstream_idle_timeout", kind: "message", T: Duration },
    { no: 5, name: "access_log", kind: "message", T: AccessLog, repeated: true },
    { no: 7, name: "max_connect_attempts", kind: "message", T: UInt32Value },
    { no: 11, name: "hash_policy", kind: "message", T: HashPolicy, repeated: true },
    { no: 12, name: "tunneling_config", kind: "message", T: TcpProxy_TunnelingConfig },
    { no: 13, name: "max_downstream_connection_duration", kind: "message", T: Duration },
    { no: 15, name: "access_log_flush_interval", kind: "message", T: Duration },
    { no: 16, name: "flush_access_log_on_connected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "access_log_options", kind: "message", T: TcpProxy_TcpAccessLogOptions },
  ],
);

/**
 * Allows for specification of multiple upstream clusters along with weights
 * that indicate the percentage of traffic to be forwarded to each cluster.
 * The router selects an upstream cluster based on these weights.
 *
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster
 */
export const TcpProxy_WeightedCluster = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster",
  () => [
    { no: 1, name: "clusters", kind: "message", T: TcpProxy_WeightedCluster_ClusterWeight, repeated: true },
  ],
  {localName: "TcpProxy_WeightedCluster"},
);

/**
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight
 */
export const TcpProxy_WeightedCluster_ClusterWeight = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "metadata_match", kind: "message", T: Metadata },
  ],
  {localName: "TcpProxy_WeightedCluster_ClusterWeight"},
);

/**
 * Configuration for tunneling TCP over other transports or application layers.
 * Tunneling is supported over both HTTP/1.1 and HTTP/2. Upstream protocol is
 * determined by the cluster configuration.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig
 */
export const TcpProxy_TunnelingConfig = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig",
  () => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "use_post", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "headers_to_add", kind: "message", T: HeaderValueOption, repeated: true },
    { no: 4, name: "propagate_response_headers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "post_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "propagate_response_trailers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "TcpProxy_TunnelingConfig"},
);

/**
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand
 */
export const TcpProxy_OnDemand = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand",
  () => [
    { no: 1, name: "odcds_config", kind: "message", T: ConfigSource },
    { no: 2, name: "resources_locator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timeout", kind: "message", T: Duration },
  ],
  {localName: "TcpProxy_OnDemand"},
);

/**
 * @generated from message envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions
 */
export const TcpProxy_TcpAccessLogOptions = proto3.makeMessageType(
  "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions",
  () => [
    { no: 1, name: "access_log_flush_interval", kind: "message", T: Duration },
    { no: 2, name: "flush_access_log_on_connected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "TcpProxy_TcpAccessLogOptions"},
);

