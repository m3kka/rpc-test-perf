// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/rbac/v3/rbac.proto" (package "envoy.extensions.filters.network.rbac.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Matcher } from "../../../../../../xds/type/matcher/v3/matcher";
import { RBAC as RBAC$ } from "../../../../../config/rbac/v3/rbac";
// [#protodoc-title: RBAC]
// Role-Based Access Control :ref:`configuration overview <config_network_filters_rbac>`.
// [#extension: envoy.filters.network.rbac]

/**
 * RBAC network filter config.
 *
 * Header should not be used in rules/shadow_rules in RBAC network filter as
 * this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.extensions.filters.network.rbac.v3.RBAC
 */
export interface RBAC {
    /**
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     *
     * @generated from protobuf field: envoy.config.rbac.v3.RBAC rules = 1;
     */
    rules?: RBAC$;
    /**
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     *
     * @generated from protobuf field: xds.type.matcher.v3.Matcher matcher = 6;
     */
    matcher?: Matcher;
    /**
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     *
     * @generated from protobuf field: envoy.config.rbac.v3.RBAC shadow_rules = 2;
     */
    shadowRules?: RBAC$;
    /**
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     *
     * @generated from protobuf field: xds.type.matcher.v3.Matcher shadow_matcher = 7;
     */
    shadowMatcher?: Matcher;
    /**
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     *
     * @generated from protobuf field: string shadow_rules_stat_prefix = 5;
     */
    shadowRulesStatPrefix: string;
    /**
     * The prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 3;
     */
    statPrefix: string;
    /**
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;
     */
    enforcementType: RBAC_EnforcementType;
}
/**
 * @generated from protobuf enum envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType
 */
export enum RBAC_EnforcementType {
    /**
     * Apply RBAC policies when the first byte of data arrives on the connection.
     *
     * @generated from protobuf enum value: ONE_TIME_ON_FIRST_BYTE = 0;
     */
    ONE_TIME_ON_FIRST_BYTE = 0,
    /**
     * Continuously apply RBAC policies as data arrives. Use this mode when
     * using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
     * etc. when the protocol decoders emit dynamic metadata such as the
     * resources being accessed and the operations on the resources.
     *
     * @generated from protobuf enum value: CONTINUOUS = 1;
     */
    CONTINUOUS = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class RBAC$Type extends MessageType<RBAC> {
    constructor() {
        super("envoy.extensions.filters.network.rbac.v3.RBAC", [
            { no: 1, name: "rules", kind: "message", T: () => RBAC$, options: { "udpa.annotations.field_migrate": { oneofPromotion: "rules_specifier" } } },
            { no: 6, name: "matcher", kind: "message", T: () => Matcher, options: { "xds.annotations.v3.field_status": { workInProgress: true }, "udpa.annotations.field_migrate": { oneofPromotion: "rules_specifier" } } },
            { no: 2, name: "shadow_rules", kind: "message", T: () => RBAC$, options: { "udpa.annotations.field_migrate": { oneofPromotion: "shadow_rules_specifier" } } },
            { no: 7, name: "shadow_matcher", kind: "message", T: () => Matcher, options: { "xds.annotations.v3.field_status": { workInProgress: true }, "udpa.annotations.field_migrate": { oneofPromotion: "shadow_rules_specifier" } } },
            { no: 5, name: "shadow_rules_stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 4, name: "enforcement_type", kind: "enum", T: () => ["envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType", RBAC_EnforcementType] }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.rbac.v2.RBAC" } });
    }
    create(value?: PartialMessage<RBAC>): RBAC {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.shadowRulesStatPrefix = "";
        message.statPrefix = "";
        message.enforcementType = 0;
        if (value !== undefined)
            reflectionMergePartial<RBAC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RBAC): RBAC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.rbac.v3.RBAC rules */ 1:
                    message.rules = RBAC$.internalBinaryRead(reader, reader.uint32(), options, message.rules);
                    break;
                case /* xds.type.matcher.v3.Matcher matcher */ 6:
                    message.matcher = Matcher.internalBinaryRead(reader, reader.uint32(), options, message.matcher);
                    break;
                case /* envoy.config.rbac.v3.RBAC shadow_rules */ 2:
                    message.shadowRules = RBAC$.internalBinaryRead(reader, reader.uint32(), options, message.shadowRules);
                    break;
                case /* xds.type.matcher.v3.Matcher shadow_matcher */ 7:
                    message.shadowMatcher = Matcher.internalBinaryRead(reader, reader.uint32(), options, message.shadowMatcher);
                    break;
                case /* string shadow_rules_stat_prefix */ 5:
                    message.shadowRulesStatPrefix = reader.string();
                    break;
                case /* string stat_prefix */ 3:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type */ 4:
                    message.enforcementType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RBAC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.rbac.v3.RBAC rules = 1; */
        if (message.rules)
            RBAC$.internalBinaryWrite(message.rules, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xds.type.matcher.v3.Matcher matcher = 6; */
        if (message.matcher)
            Matcher.internalBinaryWrite(message.matcher, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.rbac.v3.RBAC shadow_rules = 2; */
        if (message.shadowRules)
            RBAC$.internalBinaryWrite(message.shadowRules, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* xds.type.matcher.v3.Matcher shadow_matcher = 7; */
        if (message.shadowMatcher)
            Matcher.internalBinaryWrite(message.shadowMatcher, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string shadow_rules_stat_prefix = 5; */
        if (message.shadowRulesStatPrefix !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.shadowRulesStatPrefix);
        /* string stat_prefix = 3; */
        if (message.statPrefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4; */
        if (message.enforcementType !== 0)
            writer.tag(4, WireType.Varint).int32(message.enforcementType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.rbac.v3.RBAC
 */
export const RBAC = new RBAC$Type();
