// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/rbac/v3/rbac.proto (package envoy.extensions.filters.network.rbac.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RBAC as RBAC$1 } from "../../../../../config/rbac/v3/rbac_pb.js";
import type { Matcher } from "../../../../../../xds/type/matcher/v3/matcher_pb.js";

/**
 * RBAC network filter config.
 *
 * Header should not be used in rules/shadow_rules in RBAC network filter as
 * this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.filters.network.rbac.v3.RBAC
 */
export declare class RBAC extends Message<RBAC> {
  /**
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   * If present and empty, DENY.
   * If both rules and matcher are configured, rules will be ignored.
   *
   * @generated from field: envoy.config.rbac.v3.RBAC rules = 1;
   */
  rules?: RBAC$1;

  /**
   * The match tree to use when resolving RBAC action for incoming connections. Connections do
   * not match any matcher will be denied.
   * If absent, no enforcing RBAC matcher will be applied.
   * If present and empty, deny all connections.
   *
   * @generated from field: xds.type.matcher.v3.Matcher matcher = 6;
   */
  matcher?: Matcher;

  /**
   * Shadow rules are not enforced by the filter but will emit stats and logs
   * and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
   *
   * @generated from field: envoy.config.rbac.v3.RBAC shadow_rules = 2;
   */
  shadowRules?: RBAC$1;

  /**
   * The match tree to use for emitting stats and logs which can be used for rule testing for
   * incoming connections.
   * If absent, no shadow matcher will be applied.
   *
   * @generated from field: xds.type.matcher.v3.Matcher shadow_matcher = 7;
   */
  shadowMatcher?: Matcher;

  /**
   * If specified, shadow rules will emit stats with the given prefix.
   * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
   * shadow rules.
   *
   * @generated from field: string shadow_rules_stat_prefix = 5;
   */
  shadowRulesStatPrefix: string;

  /**
   * The prefix to use when emitting statistics.
   *
   * @generated from field: string stat_prefix = 3;
   */
  statPrefix: string;

  /**
   * RBAC enforcement strategy. By default RBAC will be enforced only once
   * when the first byte of data arrives from the downstream. When used in
   * conjunction with filters that emit dynamic metadata after decoding
   * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
   * CONTINUOUS to enforce RBAC policies on every message boundary.
   *
   * @generated from field: envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;
   */
  enforcementType: RBAC_EnforcementType;

  constructor(data?: PartialMessage<RBAC>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.rbac.v3.RBAC";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RBAC;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RBAC;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RBAC;

  static equals(a: RBAC | PlainMessage<RBAC> | undefined, b: RBAC | PlainMessage<RBAC> | undefined): boolean;
}

/**
 * @generated from enum envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType
 */
export declare enum RBAC_EnforcementType {
  /**
   * Apply RBAC policies when the first byte of data arrives on the connection.
   *
   * @generated from enum value: ONE_TIME_ON_FIRST_BYTE = 0;
   */
  ONE_TIME_ON_FIRST_BYTE = 0,

  /**
   * Continuously apply RBAC policies as data arrives. Use this mode when
   * using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
   * etc. when the protocol decoders emit dynamic metadata such as the
   * resources being accessed and the operations on the resources.
   *
   * @generated from enum value: CONTINUOUS = 1;
   */
  CONTINUOUS = 1,
}

