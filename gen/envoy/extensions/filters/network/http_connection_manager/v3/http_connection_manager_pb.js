// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto (package envoy.extensions.filters.network.http_connection_manager.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, BoolValue, Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { RouteConfiguration } from "../../../../../config/route/v3/route_pb.js";
import { Http1ProtocolOptions, Http2ProtocolOptions, Http3ProtocolOptions, HttpProtocolOptions, SchemeHeaderTransformation } from "../../../../../config/core/v3/protocol_pb.js";
import { AccessLog, AccessLogFilter } from "../../../../../config/accesslog/v3/accesslog_pb.js";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";
import { Percent } from "../../../../../type/v3/percent_pb.js";
import { CustomTag } from "../../../../../type/tracing/v3/custom_tag_pb.js";
import { Tracing_Http } from "../../../../../config/trace/v3/http_tracer_pb.js";
import { CidrRange } from "../../../../../config/core/v3/address_pb.js";
import { PathTransformation } from "../../../../../type/http/v3/path_transformation_pb.js";
import { SubstitutionFormatString } from "../../../../../config/core/v3/substitution_format_string_pb.js";
import { DataSource, HeaderValueOption } from "../../../../../config/core/v3/base_pb.js";
import { ConfigSource, ExtensionConfigSource } from "../../../../../config/core/v3/config_source_pb.js";
import { ScopedRouteConfiguration } from "../../../../../config/route/v3/scoped_route_pb.js";

/**
 * [#next-free-field: 57]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
 */
export const HttpConnectionManager = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
  () => [
    { no: 1, name: "codec_type", kind: "enum", T: proto3.getEnumType(HttpConnectionManager_CodecType) },
    { no: 2, name: "stat_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rds", kind: "message", T: Rds, oneof: "route_specifier" },
    { no: 4, name: "route_config", kind: "message", T: RouteConfiguration, oneof: "route_specifier" },
    { no: 31, name: "scoped_routes", kind: "message", T: ScopedRoutes, oneof: "route_specifier" },
    { no: 5, name: "http_filters", kind: "message", T: HttpFilter, repeated: true },
    { no: 6, name: "add_user_agent", kind: "message", T: BoolValue },
    { no: 7, name: "tracing", kind: "message", T: HttpConnectionManager_Tracing },
    { no: 35, name: "common_http_protocol_options", kind: "message", T: HttpProtocolOptions },
    { no: 8, name: "http_protocol_options", kind: "message", T: Http1ProtocolOptions },
    { no: 9, name: "http2_protocol_options", kind: "message", T: Http2ProtocolOptions },
    { no: 44, name: "http3_protocol_options", kind: "message", T: Http3ProtocolOptions },
    { no: 10, name: "server_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "server_header_transformation", kind: "enum", T: proto3.getEnumType(HttpConnectionManager_ServerHeaderTransformation) },
    { no: 48, name: "scheme_header_transformation", kind: "message", T: SchemeHeaderTransformation },
    { no: 29, name: "max_request_headers_kb", kind: "message", T: UInt32Value },
    { no: 24, name: "stream_idle_timeout", kind: "message", T: Duration },
    { no: 28, name: "request_timeout", kind: "message", T: Duration },
    { no: 41, name: "request_headers_timeout", kind: "message", T: Duration },
    { no: 12, name: "drain_timeout", kind: "message", T: Duration },
    { no: 26, name: "delayed_close_timeout", kind: "message", T: Duration },
    { no: 13, name: "access_log", kind: "message", T: AccessLog, repeated: true },
    { no: 54, name: "access_log_flush_interval", kind: "message", T: Duration },
    { no: 55, name: "flush_access_log_on_new_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 56, name: "access_log_options", kind: "message", T: HttpConnectionManager_HcmAccessLogOptions },
    { no: 14, name: "use_remote_address", kind: "message", T: BoolValue },
    { no: 19, name: "xff_num_trusted_hops", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 46, name: "original_ip_detection_extensions", kind: "message", T: TypedExtensionConfig, repeated: true },
    { no: 52, name: "early_header_mutation_extensions", kind: "message", T: TypedExtensionConfig, repeated: true },
    { no: 25, name: "internal_address_config", kind: "message", T: HttpConnectionManager_InternalAddressConfig },
    { no: 21, name: "skip_xff_append", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "via", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "generate_request_id", kind: "message", T: BoolValue },
    { no: 32, name: "preserve_external_request_id", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 37, name: "always_set_request_id_in_response", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "forward_client_cert_details", kind: "enum", T: proto3.getEnumType(HttpConnectionManager_ForwardClientCertDetails) },
    { no: 17, name: "set_current_client_cert_details", kind: "message", T: HttpConnectionManager_SetCurrentClientCertDetails },
    { no: 18, name: "proxy_100_continue", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "represent_ipv4_remote_address_as_ipv4_mapped_ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "upgrade_configs", kind: "message", T: HttpConnectionManager_UpgradeConfig, repeated: true },
    { no: 30, name: "normalize_path", kind: "message", T: BoolValue },
    { no: 33, name: "merge_slashes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 45, name: "path_with_escaped_slashes_action", kind: "enum", T: proto3.getEnumType(HttpConnectionManager_PathWithEscapedSlashesAction) },
    { no: 36, name: "request_id_extension", kind: "message", T: RequestIDExtension },
    { no: 38, name: "local_reply_config", kind: "message", T: LocalReplyConfig },
    { no: 39, name: "strip_matching_host_port", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 42, name: "strip_any_host_port", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "strip_port_mode" },
    { no: 40, name: "stream_error_on_invalid_http_message", kind: "message", T: BoolValue },
    { no: 43, name: "path_normalization_options", kind: "message", T: HttpConnectionManager_PathNormalizationOptions },
    { no: 47, name: "strip_trailing_host_dot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 49, name: "proxy_status_config", kind: "message", T: HttpConnectionManager_ProxyStatusConfig },
    { no: 50, name: "typed_header_validation_config", kind: "message", T: TypedExtensionConfig },
    { no: 51, name: "append_x_forwarded_port", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 53, name: "add_proxy_protocol_connection_state", kind: "message", T: BoolValue },
  ],
);

/**
 * @generated from enum envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType
 */
export const HttpConnectionManager_CodecType = proto3.makeEnum(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType",
  [
    {no: 0, name: "AUTO"},
    {no: 1, name: "HTTP1"},
    {no: 2, name: "HTTP2"},
    {no: 3, name: "HTTP3"},
  ],
);

/**
 * @generated from enum envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation
 */
export const HttpConnectionManager_ServerHeaderTransformation = proto3.makeEnum(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation",
  [
    {no: 0, name: "OVERWRITE"},
    {no: 1, name: "APPEND_IF_ABSENT"},
    {no: 2, name: "PASS_THROUGH"},
  ],
);

/**
 * How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
 * header.
 *
 * @generated from enum envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails
 */
export const HttpConnectionManager_ForwardClientCertDetails = proto3.makeEnum(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails",
  [
    {no: 0, name: "SANITIZE"},
    {no: 1, name: "FORWARD_ONLY"},
    {no: 2, name: "APPEND_FORWARD"},
    {no: 3, name: "SANITIZE_SET"},
    {no: 4, name: "ALWAYS_FORWARD_ONLY"},
  ],
);

/**
 * Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
 * This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
 *
 * @generated from enum envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathWithEscapedSlashesAction
 */
export const HttpConnectionManager_PathWithEscapedSlashesAction = proto3.makeEnum(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathWithEscapedSlashesAction",
  [
    {no: 0, name: "IMPLEMENTATION_SPECIFIC_DEFAULT"},
    {no: 1, name: "KEEP_UNCHANGED"},
    {no: 2, name: "REJECT_REQUEST"},
    {no: 3, name: "UNESCAPE_AND_REDIRECT"},
    {no: 4, name: "UNESCAPE_AND_FORWARD"},
  ],
);

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing
 */
export const HttpConnectionManager_Tracing = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing",
  () => [
    { no: 3, name: "client_sampling", kind: "message", T: Percent },
    { no: 4, name: "random_sampling", kind: "message", T: Percent },
    { no: 5, name: "overall_sampling", kind: "message", T: Percent },
    { no: 6, name: "verbose", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "max_path_tag_length", kind: "message", T: UInt32Value },
    { no: 8, name: "custom_tags", kind: "message", T: CustomTag, repeated: true },
    { no: 9, name: "provider", kind: "message", T: Tracing_Http },
  ],
  {localName: "HttpConnectionManager_Tracing"},
);

/**
 * @generated from enum envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName
 */
export const HttpConnectionManager_Tracing_OperationName = proto3.makeEnum(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName",
  [
    {no: 0, name: "INGRESS"},
    {no: 1, name: "EGRESS"},
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig
 */
export const HttpConnectionManager_InternalAddressConfig = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig",
  () => [
    { no: 1, name: "unix_sockets", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "cidr_ranges", kind: "message", T: CidrRange, repeated: true },
  ],
  {localName: "HttpConnectionManager_InternalAddressConfig"},
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails
 */
export const HttpConnectionManager_SetCurrentClientCertDetails = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails",
  () => [
    { no: 1, name: "subject", kind: "message", T: BoolValue },
    { no: 3, name: "cert", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "chain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "dns", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "uri", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "HttpConnectionManager_SetCurrentClientCertDetails"},
);

/**
 * The configuration for HTTP upgrades.
 * For each upgrade type desired, an UpgradeConfig must be added.
 *
 * .. warning::
 *
 *    The current implementation of upgrade headers does not handle
 *    multi-valued upgrade headers. Support for multi-valued headers may be
 *    added in the future if needed.
 *
 * .. warning::
 *    The current implementation of upgrade headers does not work with HTTP/2
 *    upstreams.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig
 */
export const HttpConnectionManager_UpgradeConfig = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig",
  () => [
    { no: 1, name: "upgrade_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filters", kind: "message", T: HttpFilter, repeated: true },
    { no: 3, name: "enabled", kind: "message", T: BoolValue },
  ],
  {localName: "HttpConnectionManager_UpgradeConfig"},
);

/**
 * [#not-implemented-hide:] Transformations that apply to path headers. Transformations are applied
 * before any processing of requests by HTTP filters, routing, and matching. Only the normalized
 * path will be visible internally if a transformation is enabled. Any path rewrites that the
 * router performs (e.g. :ref:`regex_rewrite
 * <envoy_v3_api_field_config.route.v3.RouteAction.regex_rewrite>` or :ref:`prefix_rewrite
 * <envoy_v3_api_field_config.route.v3.RouteAction.prefix_rewrite>`) will apply to the ``:path`` header
 * destined for the upstream.
 *
 * Note: access logging and tracing will show the original ``:path`` header.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions
 */
export const HttpConnectionManager_PathNormalizationOptions = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions",
  () => [
    { no: 1, name: "forwarding_transformation", kind: "message", T: PathTransformation },
    { no: 2, name: "http_filter_transformation", kind: "message", T: PathTransformation },
  ],
  {localName: "HttpConnectionManager_PathNormalizationOptions"},
);

/**
 * Configures the manner in which the Proxy-Status HTTP response header is
 * populated.
 *
 * See the [Proxy-Status
 * RFC](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-proxy-status-08).
 * [#comment:TODO: Update this with the non-draft URL when finalized.]
 *
 * The Proxy-Status header is a string of the form:
 *
 *   "<server_name>; error=<error_type>; details=<details>"
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ProxyStatusConfig
 */
export const HttpConnectionManager_ProxyStatusConfig = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ProxyStatusConfig",
  () => [
    { no: 1, name: "remove_details", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "remove_connection_termination_details", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "remove_response_flags", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "set_recommended_response_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "use_node_id", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "proxy_name" },
    { no: 6, name: "literal_proxy_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "proxy_name" },
  ],
  {localName: "HttpConnectionManager_ProxyStatusConfig"},
);

/**
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions
 */
export const HttpConnectionManager_HcmAccessLogOptions = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions",
  () => [
    { no: 1, name: "access_log_flush_interval", kind: "message", T: Duration },
    { no: 2, name: "flush_access_log_on_new_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "flush_log_on_tunnel_successfully_established", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "HttpConnectionManager_HcmAccessLogOptions"},
);

/**
 * The configuration to customize local reply returned by Envoy.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig
 */
export const LocalReplyConfig = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig",
  () => [
    { no: 1, name: "mappers", kind: "message", T: ResponseMapper, repeated: true },
    { no: 2, name: "body_format", kind: "message", T: SubstitutionFormatString },
  ],
);

/**
 * The configuration to filter and change local response.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper
 */
export const ResponseMapper = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper",
  () => [
    { no: 1, name: "filter", kind: "message", T: AccessLogFilter },
    { no: 2, name: "status_code", kind: "message", T: UInt32Value },
    { no: 3, name: "body", kind: "message", T: DataSource },
    { no: 4, name: "body_format_override", kind: "message", T: SubstitutionFormatString },
    { no: 5, name: "headers_to_add", kind: "message", T: HeaderValueOption, repeated: true },
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.Rds
 */
export const Rds = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.Rds",
  () => [
    { no: 1, name: "config_source", kind: "message", T: ConfigSource },
    { no: 2, name: "route_config_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * This message is used to work around the limitations with 'oneof' and repeated fields.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList
 */
export const ScopedRouteConfigurationsList = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList",
  () => [
    { no: 1, name: "scoped_route_configurations", kind: "message", T: ScopedRouteConfiguration, repeated: true },
  ],
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes
 */
export const ScopedRoutes = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scope_key_builder", kind: "message", T: ScopedRoutes_ScopeKeyBuilder },
    { no: 3, name: "rds_config_source", kind: "message", T: ConfigSource },
    { no: 4, name: "scoped_route_configurations_list", kind: "message", T: ScopedRouteConfigurationsList, oneof: "config_specifier" },
    { no: 5, name: "scoped_rds", kind: "message", T: ScopedRds, oneof: "config_specifier" },
  ],
);

/**
 * Specifies the mechanism for constructing "scope keys" based on HTTP request attributes. These
 * keys are matched against a set of :ref:`Key<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration.Key>`
 * objects assembled from :ref:`ScopedRouteConfiguration<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration>`
 * messages distributed via SRDS (the Scoped Route Discovery Service) or assigned statically via
 * :ref:`scoped_route_configurations_list<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list>`.
 *
 * Upon receiving a request's headers, the Router will build a key using the algorithm specified
 * by this message. This key will be used to look up the routing table (i.e., the
 * :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>`) to use for the request.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder
 */
export const ScopedRoutes_ScopeKeyBuilder = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder",
  () => [
    { no: 1, name: "fragments", kind: "message", T: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder, repeated: true },
  ],
  {localName: "ScopedRoutes_ScopeKeyBuilder"},
);

/**
 * Specifies the mechanism for constructing key fragments which are composed into scope keys.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder
 */
export const ScopedRoutes_ScopeKeyBuilder_FragmentBuilder = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder",
  () => [
    { no: 1, name: "header_value_extractor", kind: "message", T: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor, oneof: "type" },
  ],
  {localName: "ScopedRoutes_ScopeKeyBuilder_FragmentBuilder"},
);

/**
 * Specifies how the value of a header should be extracted.
 * The following example maps the structure of a header to the fields in this message.
 *
 * .. code::
 *
 *              <0> <1>   <-- index
 *    X-Header: a=b;c=d
 *    |         || |
 *    |         || \----> <element_separator>
 *    |         ||
 *    |         |\----> <element.separator>
 *    |         |
 *    |         \----> <element.key>
 *    |
 *    \----> <name>
 *
 *    Each 'a=b' key-value pair constitutes an 'element' of the header field.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor
 */
export const ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "element_separator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "extract_type" },
    { no: 4, name: "element", kind: "message", T: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement, oneof: "extract_type" },
  ],
  {localName: "ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor"},
);

/**
 * Specifies a header field's key value pair to match on.
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement
 */
export const ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement",
  () => [
    { no: 1, name: "separator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement"},
);

/**
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds
 */
export const ScopedRds = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds",
  () => [
    { no: 1, name: "scoped_rds_config_source", kind: "message", T: ConfigSource },
    { no: 2, name: "srds_resources_locator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter
 */
export const HttpFilter = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
    { no: 5, name: "config_discovery", kind: "message", T: ExtensionConfigSource, oneof: "config_type" },
    { no: 6, name: "is_optional", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.RequestIDExtension
 */
export const RequestIDExtension = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.RequestIDExtension",
  () => [
    { no: 1, name: "typed_config", kind: "message", T: Any },
  ],
);

/**
 * [#protodoc-title: Envoy Mobile HTTP connection manager]
 * HTTP connection manager for use in Envoy mobile.
 * [#extension: envoy.filters.network.envoy_mobile_http_connection_manager]
 *
 * @generated from message envoy.extensions.filters.network.http_connection_manager.v3.EnvoyMobileHttpConnectionManager
 */
export const EnvoyMobileHttpConnectionManager = proto3.makeMessageType(
  "envoy.extensions.filters.network.http_connection_manager.v3.EnvoyMobileHttpConnectionManager",
  () => [
    { no: 1, name: "config", kind: "message", T: HttpConnectionManager },
  ],
);

