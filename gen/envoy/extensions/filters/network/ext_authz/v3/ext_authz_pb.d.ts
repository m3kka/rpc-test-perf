// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/ext_authz/v3/ext_authz.proto (package envoy.extensions.filters.network.ext_authz.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcService } from "../../../../../config/core/v3/grpc_service_pb.js";
import type { ApiVersion } from "../../../../../config/core/v3/config_source_pb.js";
import type { MetadataMatcher } from "../../../../../type/matcher/v3/metadata_pb.js";

/**
 * External Authorization filter calls out to an external service over the
 * gRPC Authorization API defined by
 * :ref:`CheckRequest <envoy_v3_api_msg_service.auth.v3.CheckRequest>`.
 * A failed check will cause this filter to close the TCP connection.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.filters.network.ext_authz.v3.ExtAuthz
 */
export declare class ExtAuthz extends Message<ExtAuthz> {
  /**
   * The prefix to use when emitting statistics.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The external authorization gRPC service configuration.
   * The default timeout is set to 200ms by this filter.
   *
   * @generated from field: envoy.config.core.v3.GrpcService grpc_service = 2;
   */
  grpcService?: GrpcService;

  /**
   * The filter's behaviour in case the external authorization service does
   * not respond back. When it is set to true, Envoy will also allow traffic in case of
   * communication failure between authorization service and the proxy.
   * Defaults to false.
   *
   * @generated from field: bool failure_mode_allow = 3;
   */
  failureModeAllow: boolean;

  /**
   * Specifies if the peer certificate is sent to the external service.
   *
   * When this field is true, Envoy will include the peer X.509 certificate, if available, in the
   * :ref:`certificate<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.certificate>`.
   *
   * @generated from field: bool include_peer_certificate = 4;
   */
  includePeerCertificate: boolean;

  /**
   * API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
   * version of Check{Request,Response} used on the wire.
   *
   * @generated from field: envoy.config.core.v3.ApiVersion transport_api_version = 5;
   */
  transportApiVersion: ApiVersion;

  /**
   * Specifies if the filter is enabled with metadata matcher.
   * If this field is not specified, the filter will be enabled for all requests.
   *
   * @generated from field: envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6;
   */
  filterEnabledMetadata?: MetadataMatcher;

  /**
   * Optional labels that will be passed to :ref:`labels<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.labels>` in
   * :ref:`destination<envoy_v3_api_field_service.auth.v3.AttributeContext.destination>`.
   * The labels will be read from :ref:`metadata<envoy_v3_api_msg_config.core.v3.Node>` with the specified key.
   *
   * @generated from field: string bootstrap_metadata_labels_key = 7;
   */
  bootstrapMetadataLabelsKey: string;

  constructor(data?: PartialMessage<ExtAuthz>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.ext_authz.v3.ExtAuthz";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtAuthz;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtAuthz;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtAuthz;

  static equals(a: ExtAuthz | PlainMessage<ExtAuthz> | undefined, b: ExtAuthz | PlainMessage<ExtAuthz> | undefined): boolean;
}

