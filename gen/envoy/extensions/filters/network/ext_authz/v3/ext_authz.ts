// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/ext_authz/v3/ext_authz.proto" (package "envoy.extensions.filters.network.ext_authz.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MetadataMatcher } from "../../../../../type/matcher/v3/metadata";
import { ApiVersion } from "../../../../../config/core/v3/config_source";
import { GrpcService } from "../../../../../config/core/v3/grpc_service";
// [#protodoc-title: Network External Authorization ]
// The network layer external authorization service configuration
// :ref:`configuration overview <config_network_filters_ext_authz>`.
// [#extension: envoy.filters.network.ext_authz]

/**
 * External Authorization filter calls out to an external service over the
 * gRPC Authorization API defined by
 * :ref:`CheckRequest <envoy_v3_api_msg_service.auth.v3.CheckRequest>`.
 * A failed check will cause this filter to close the TCP connection.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.extensions.filters.network.ext_authz.v3.ExtAuthz
 */
export interface ExtAuthz {
    /**
     * The prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The external authorization gRPC service configuration.
     * The default timeout is set to 200ms by this filter.
     *
     * @generated from protobuf field: envoy.config.core.v3.GrpcService grpc_service = 2;
     */
    grpcService?: GrpcService;
    /**
     * The filter's behaviour in case the external authorization service does
     * not respond back. When it is set to true, Envoy will also allow traffic in case of
     * communication failure between authorization service and the proxy.
     * Defaults to false.
     *
     * @generated from protobuf field: bool failure_mode_allow = 3;
     */
    failureModeAllow: boolean;
    /**
     * Specifies if the peer certificate is sent to the external service.
     *
     * When this field is true, Envoy will include the peer X.509 certificate, if available, in the
     * :ref:`certificate<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.certificate>`.
     *
     * @generated from protobuf field: bool include_peer_certificate = 4;
     */
    includePeerCertificate: boolean;
    /**
     * API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
     * version of Check{Request,Response} used on the wire.
     *
     * @generated from protobuf field: envoy.config.core.v3.ApiVersion transport_api_version = 5;
     */
    transportApiVersion: ApiVersion;
    /**
     * Specifies if the filter is enabled with metadata matcher.
     * If this field is not specified, the filter will be enabled for all requests.
     *
     * @generated from protobuf field: envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6;
     */
    filterEnabledMetadata?: MetadataMatcher;
    /**
     * Optional labels that will be passed to :ref:`labels<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.labels>` in
     * :ref:`destination<envoy_v3_api_field_service.auth.v3.AttributeContext.destination>`.
     * The labels will be read from :ref:`metadata<envoy_v3_api_msg_config.core.v3.Node>` with the specified key.
     *
     * @generated from protobuf field: string bootstrap_metadata_labels_key = 7;
     */
    bootstrapMetadataLabelsKey: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExtAuthz$Type extends MessageType<ExtAuthz> {
    constructor() {
        super("envoy.extensions.filters.network.ext_authz.v3.ExtAuthz", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "grpc_service", kind: "message", T: () => GrpcService },
            { no: 3, name: "failure_mode_allow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "include_peer_certificate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "transport_api_version", kind: "enum", T: () => ["envoy.config.core.v3.ApiVersion", ApiVersion], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 6, name: "filter_enabled_metadata", kind: "message", T: () => MetadataMatcher },
            { no: 7, name: "bootstrap_metadata_labels_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.filter.network.ext_authz.v2.ExtAuthz" } });
    }
    create(value?: PartialMessage<ExtAuthz>): ExtAuthz {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.failureModeAllow = false;
        message.includePeerCertificate = false;
        message.transportApiVersion = 0;
        message.bootstrapMetadataLabelsKey = "";
        if (value !== undefined)
            reflectionMergePartial<ExtAuthz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtAuthz): ExtAuthz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.config.core.v3.GrpcService grpc_service */ 2:
                    message.grpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.grpcService);
                    break;
                case /* bool failure_mode_allow */ 3:
                    message.failureModeAllow = reader.bool();
                    break;
                case /* bool include_peer_certificate */ 4:
                    message.includePeerCertificate = reader.bool();
                    break;
                case /* envoy.config.core.v3.ApiVersion transport_api_version */ 5:
                    message.transportApiVersion = reader.int32();
                    break;
                case /* envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata */ 6:
                    message.filterEnabledMetadata = MetadataMatcher.internalBinaryRead(reader, reader.uint32(), options, message.filterEnabledMetadata);
                    break;
                case /* string bootstrap_metadata_labels_key */ 7:
                    message.bootstrapMetadataLabelsKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtAuthz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.config.core.v3.GrpcService grpc_service = 2; */
        if (message.grpcService)
            GrpcService.internalBinaryWrite(message.grpcService, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool failure_mode_allow = 3; */
        if (message.failureModeAllow !== false)
            writer.tag(3, WireType.Varint).bool(message.failureModeAllow);
        /* bool include_peer_certificate = 4; */
        if (message.includePeerCertificate !== false)
            writer.tag(4, WireType.Varint).bool(message.includePeerCertificate);
        /* envoy.config.core.v3.ApiVersion transport_api_version = 5; */
        if (message.transportApiVersion !== 0)
            writer.tag(5, WireType.Varint).int32(message.transportApiVersion);
        /* envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6; */
        if (message.filterEnabledMetadata)
            MetadataMatcher.internalBinaryWrite(message.filterEnabledMetadata, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string bootstrap_metadata_labels_key = 7; */
        if (message.bootstrapMetadataLabelsKey !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bootstrapMetadataLabelsKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.ext_authz.v3.ExtAuthz
 */
export const ExtAuthz = new ExtAuthz$Type();
