// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3/sni_dynamic_forward_proxy.proto" (package "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v3/dns_cache";
// [#protodoc-title: SNI dynamic forward proxy]

/**
 * Configuration for the SNI-based dynamic forward proxy filter. See the
 * :ref:`architecture overview <arch_overview_http_dynamic_forward_proxy>` for
 * more information. Note this filter must be configured along with
 * :ref:`TLS inspector listener filter <config_listener_filters_tls_inspector>`
 * to work.
 * [#extension: envoy.filters.network.sni_dynamic_forward_proxy]
 *
 * @generated from protobuf message envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig
 */
export interface FilterConfig {
    /**
     * The DNS cache configuration that the filter will attach to. Note this
     * configuration must match that of associated :ref:`dynamic forward proxy
     * cluster configuration
     * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
     *
     * @generated from protobuf field: envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1;
     */
    dnsCacheConfig?: DnsCacheConfig;
    /**
     * @generated from protobuf oneof: port_specifier
     */
    portSpecifier: {
        oneofKind: "portValue";
        /**
         * The port number to connect to the upstream.
         *
         * @generated from protobuf field: uint32 port_value = 2;
         */
        portValue: number;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterConfig$Type extends MessageType<FilterConfig> {
    constructor() {
        super("envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig", [
            { no: 1, name: "dns_cache_config", kind: "message", T: () => DnsCacheConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "port_value", kind: "scalar", oneof: "portSpecifier", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 65535, gt: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<FilterConfig>): FilterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.portSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FilterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterConfig): FilterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config */ 1:
                    message.dnsCacheConfig = DnsCacheConfig.internalBinaryRead(reader, reader.uint32(), options, message.dnsCacheConfig);
                    break;
                case /* uint32 port_value */ 2:
                    message.portSpecifier = {
                        oneofKind: "portValue",
                        portValue: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1; */
        if (message.dnsCacheConfig)
            DnsCacheConfig.internalBinaryWrite(message.dnsCacheConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 port_value = 2; */
        if (message.portSpecifier.oneofKind === "portValue")
            writer.tag(2, WireType.Varint).uint32(message.portSpecifier.portValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig
 */
export const FilterConfig = new FilterConfig$Type();
