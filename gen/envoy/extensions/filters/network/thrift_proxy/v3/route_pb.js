// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/thrift_proxy/v3/route.proto (package envoy.extensions.filters.network.thrift_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, proto3, UInt32Value } from "@bufbuild/protobuf";
import { HeaderMatcher, RateLimit } from "../../../../../config/route/v3/route_components_pb.js";
import { Metadata, RuntimeFractionalPercent } from "../../../../../config/core/v3/base_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration
 */
export const RouteConfiguration = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: Route, repeated: true },
    { no: 3, name: "validate_clusters", kind: "message", T: BoolValue },
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.Route
 */
export const Route = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.Route",
  () => [
    { no: 1, name: "match", kind: "message", T: RouteMatch },
    { no: 2, name: "route", kind: "message", T: RouteAction },
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch
 */
export const RouteMatch = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch",
  () => [
    { no: 1, name: "method_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_specifier" },
    { no: 2, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_specifier" },
    { no: 3, name: "invert", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "headers", kind: "message", T: HeaderMatcher, repeated: true },
  ],
);

/**
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteAction
 */
export const RouteAction = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.RouteAction",
  () => [
    { no: 1, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "cluster_specifier" },
    { no: 2, name: "weighted_clusters", kind: "message", T: WeightedCluster, oneof: "cluster_specifier" },
    { no: 6, name: "cluster_header", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "cluster_specifier" },
    { no: 3, name: "metadata_match", kind: "message", T: Metadata },
    { no: 4, name: "rate_limits", kind: "message", T: RateLimit, repeated: true },
    { no: 5, name: "strip_service_name", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "request_mirror_policies", kind: "message", T: RouteAction_RequestMirrorPolicy, repeated: true },
  ],
);

/**
 * The router is capable of shadowing traffic from one cluster to another. The current
 * implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
 * respond before returning the response from the primary cluster. All normal statistics are
 * collected for the shadow cluster making this feature useful for testing.
 *
 * .. note::
 *
 *   Shadowing will not be triggered if the primary cluster does not exist.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy
 */
export const RouteAction_RequestMirrorPolicy = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy",
  () => [
    { no: 1, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runtime_fraction", kind: "message", T: RuntimeFractionalPercent },
  ],
  {localName: "RouteAction_RequestMirrorPolicy"},
);

/**
 * Allows for specification of multiple upstream clusters along with weights that indicate the
 * percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
 * based on these weights.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster
 */
export const WeightedCluster = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster",
  () => [
    { no: 1, name: "clusters", kind: "message", T: WeightedCluster_ClusterWeight, repeated: true },
  ],
);

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight
 */
export const WeightedCluster_ClusterWeight = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "message", T: UInt32Value },
    { no: 3, name: "metadata_match", kind: "message", T: Metadata },
  ],
  {localName: "WeightedCluster_ClusterWeight"},
);

