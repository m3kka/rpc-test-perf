// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/thrift_proxy/v3/thrift_proxy.proto (package envoy.extensions.filters.network.thrift_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ConfigSource } from "../../../../../config/core/v3/config_source_pb.js";
import type { RouteConfiguration } from "./route_pb.js";
import type { AccessLog } from "../../../../../config/accesslog/v3/accesslog_pb.js";

/**
 * Thrift transport types supported by Envoy.
 *
 * @generated from enum envoy.extensions.filters.network.thrift_proxy.v3.TransportType
 */
export declare enum TransportType {
  /**
   * For downstream connections, the Thrift proxy will attempt to determine which transport to use.
   * For upstream connections, the Thrift proxy will use same transport as the downstream
   * connection.
   *
   * @generated from enum value: AUTO_TRANSPORT = 0;
   */
  AUTO_TRANSPORT = 0,

  /**
   * The Thrift proxy will use the Thrift framed transport.
   *
   * @generated from enum value: FRAMED = 1;
   */
  FRAMED = 1,

  /**
   * The Thrift proxy will use the Thrift unframed transport.
   *
   * @generated from enum value: UNFRAMED = 2;
   */
  UNFRAMED = 2,

  /**
   * The Thrift proxy will assume the client is using the Thrift header transport.
   *
   * @generated from enum value: HEADER = 3;
   */
  HEADER = 3,
}

/**
 * Thrift Protocol types supported by Envoy.
 *
 * @generated from enum envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType
 */
export declare enum ProtocolType {
  /**
   * For downstream connections, the Thrift proxy will attempt to determine which protocol to use.
   * Note that the older, non-strict (or lax) binary protocol is not included in automatic protocol
   * detection. For upstream connections, the Thrift proxy will use the same protocol as the
   * downstream connection.
   *
   * @generated from enum value: AUTO_PROTOCOL = 0;
   */
  AUTO_PROTOCOL = 0,

  /**
   * The Thrift proxy will use the Thrift binary protocol.
   *
   * @generated from enum value: BINARY = 1;
   */
  BINARY = 1,

  /**
   * The Thrift proxy will use Thrift non-strict binary protocol.
   *
   * @generated from enum value: LAX_BINARY = 2;
   */
  LAX_BINARY = 2,

  /**
   * The Thrift proxy will use the Thrift compact protocol.
   *
   * @generated from enum value: COMPACT = 3;
   */
  COMPACT = 3,

  /**
   * The Thrift proxy will use the Thrift "Twitter" protocol implemented by the finagle library.
   *
   * @generated from enum value: TWITTER = 4 [deprecated = true];
   * @deprecated
   */
  TWITTER = 4,
}

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.Trds
 */
export declare class Trds extends Message<Trds> {
  /**
   * Configuration source specifier.
   * In case of ``api_config_source`` only aggregated ``api_type`` is supported.
   *
   * @generated from field: envoy.config.core.v3.ConfigSource config_source = 1;
   */
  configSource?: ConfigSource;

  /**
   * The name of the route configuration. This allows to use different route
   * configurations. Tells which route configuration should be fetched from the configuration source.
   * Leave unspecified is also valid and means the unnamed route configuration.
   *
   * @generated from field: string route_config_name = 2;
   */
  routeConfigName: string;

  constructor(data?: PartialMessage<Trds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.Trds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trds;

  static equals(a: Trds | PlainMessage<Trds> | undefined, b: Trds | PlainMessage<Trds> | undefined): boolean;
}

/**
 * [#next-free-field: 11]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy
 */
export declare class ThriftProxy extends Message<ThriftProxy> {
  /**
   * Supplies the type of transport that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 2;
   */
  transport: TransportType;

  /**
   * Supplies the type of protocol that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 3;
   */
  protocol: ProtocolType;

  /**
   * The human readable prefix to use when emitting statistics.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The route table for the connection manager is static and is specified in this property.
   * It is invalid to define both ``route_config`` and ``trds``.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration route_config = 4;
   */
  routeConfig?: RouteConfiguration;

  /**
   * Use xDS to fetch the route configuration. It is invalid to define both ``route_config`` and ``trds``.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.Trds trds = 8;
   */
  trds?: Trds;

  /**
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (``envoy.filters.thrift.router``) is used.
   * [#extension-category: envoy.thrift_proxy.filters]
   *
   * @generated from field: repeated envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;
   */
  thriftFilters: ThriftFilter[];

  /**
   * If set to true, Envoy will try to skip decode data after metadata in the Thrift message.
   * This mode will only work if the upstream and downstream protocols are the same and the transports
   * are Framed or Header, and the protocol is not Twitter. Otherwise Envoy will
   * fallback to decode the data.
   *
   * @generated from field: bool payload_passthrough = 6;
   */
  payloadPassthrough: boolean;

  /**
   * Optional maximum requests for a single downstream connection. If not specified, there is no limit.
   *
   * @generated from field: google.protobuf.UInt32Value max_requests_per_connection = 7;
   */
  maxRequestsPerConnection?: number;

  /**
   * Configuration for :ref:`access logs <arch_overview_access_logs>`
   * emitted by Thrift proxy.
   *
   * @generated from field: repeated envoy.config.accesslog.v3.AccessLog access_log = 9;
   */
  accessLog: AccessLog[];

  /**
   * If set to true, Envoy will preserve the case of Thrift header keys instead of serializing them to
   * lower case as per the default behavior. Note that NUL, CR and LF characters will also be preserved
   * as mandated by the Thrift spec.
   *
   * More info: https://github.com/apache/thrift/commit/e165fa3c85d00cb984f4d9635ed60909a1266ce1.
   *
   * @generated from field: bool header_keys_preserve_case = 10;
   */
  headerKeysPreserveCase: boolean;

  constructor(data?: PartialMessage<ThriftProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThriftProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThriftProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThriftProxy;

  static equals(a: ThriftProxy | PlainMessage<ThriftProxy> | undefined, b: ThriftProxy | PlainMessage<ThriftProxy> | undefined): boolean;
}

/**
 * ThriftFilter configures a Thrift filter.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter
 */
export declare class ThriftFilter extends Message<ThriftFilter> {
  /**
   * The name of the filter to instantiate. The name must match a supported
   * filter. The built-in filters are:
   *
   * [#comment:TODO(zuercher): Auto generate the following list]
   * * :ref:`envoy.filters.thrift.router <config_thrift_filters_router>`
   * * :ref:`envoy.filters.thrift.rate_limit <config_thrift_filters_rate_limit>`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   *
   * @generated from oneof envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Any typed_config = 3;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ThriftFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThriftFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThriftFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThriftFilter;

  static equals(a: ThriftFilter | PlainMessage<ThriftFilter> | undefined, b: ThriftFilter | PlainMessage<ThriftFilter> | undefined): boolean;
}

/**
 * ThriftProtocolOptions specifies Thrift upstream protocol options. This object is used in
 * in
 * :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
 * keyed by the name ``envoy.filters.network.thrift_proxy``.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions
 */
export declare class ThriftProtocolOptions extends Message<ThriftProtocolOptions> {
  /**
   * Supplies the type of transport that the Thrift proxy should use for upstream connections.
   * Selecting
   * :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`,
   * which is the default, causes the proxy to use the same transport as the downstream connection.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 1;
   */
  transport: TransportType;

  /**
   * Supplies the type of protocol that the Thrift proxy should use for upstream connections.
   * Selecting
   * :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`,
   * which is the default, causes the proxy to use the same protocol as the downstream connection.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 2;
   */
  protocol: ProtocolType;

  constructor(data?: PartialMessage<ThriftProtocolOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThriftProtocolOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThriftProtocolOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThriftProtocolOptions;

  static equals(a: ThriftProtocolOptions | PlainMessage<ThriftProtocolOptions> | undefined, b: ThriftProtocolOptions | PlainMessage<ThriftProtocolOptions> | undefined): boolean;
}

