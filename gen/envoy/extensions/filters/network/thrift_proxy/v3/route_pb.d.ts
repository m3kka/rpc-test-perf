// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/thrift_proxy/v3/route.proto (package envoy.extensions.filters.network.thrift_proxy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HeaderMatcher, RateLimit } from "../../../../../config/route/v3/route_components_pb.js";
import type { Metadata, RuntimeFractionalPercent } from "../../../../../config/core/v3/base_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration
 */
export declare class RouteConfiguration extends Message<RouteConfiguration> {
  /**
   * The name of the route configuration. This name is used in asynchronous route discovery.
   * For example, it might match
   * :ref:`route_config_name
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.Trds.route_config_name>` in
   * :ref:`envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.Trds`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   *
   * @generated from field: repeated envoy.extensions.filters.network.thrift_proxy.v3.Route routes = 2;
   */
  routes: Route[];

  /**
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a INTERNAL_ERROR
   * if the route is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.ThriftProxy.route_config>`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`trds
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.ThriftProxy.trds>`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   *
   * @generated from field: google.protobuf.BoolValue validate_clusters = 3;
   */
  validateClusters?: boolean;

  constructor(data?: PartialMessage<RouteConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteConfiguration;

  static equals(a: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined, b: RouteConfiguration | PlainMessage<RouteConfiguration> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.Route
 */
export declare class Route extends Message<Route> {
  /**
   * Route matching parameters.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch match = 1;
   */
  match?: RouteMatch;

  /**
   * Route request to some upstream cluster.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.RouteAction route = 2;
   */
  route?: RouteAction;

  constructor(data?: PartialMessage<Route>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.Route";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Route;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Route;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Route;

  static equals(a: Route | PlainMessage<Route> | undefined, b: Route | PlainMessage<Route> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch
 */
export declare class RouteMatch extends Message<RouteMatch> {
  /**
   * @generated from oneof envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch.match_specifier
   */
  matchSpecifier: {
    /**
     * If specified, the route must exactly match the request method name. As a special case, an
     * empty string matches any request method name.
     *
     * @generated from field: string method_name = 1;
     */
    value: string;
    case: "methodName";
  } | {
    /**
     * If specified, the route must have the service name as the request method name prefix. As a
     * special case, an empty string matches any service name. Only relevant when service
     * multiplexing.
     *
     * @generated from field: string service_name = 2;
     */
    value: string;
    case: "serviceName";
  } | { case: undefined; value?: undefined };

  /**
   * Inverts whatever matching is done in the :ref:`method_name
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.method_name>` or
   * :ref:`service_name
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.service_name>` fields.
   * Cannot be combined with wildcard matching as that would result in routes never being matched.
   *
   * .. note::
   *
   *   This does not invert matching done as part of the :ref:`headers field
   *   <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.headers>` field. To
   *   invert header matching, see :ref:`invert_match
   *   <envoy_v3_api_field_config.route.v3.HeaderMatcher.invert_match>`.
   *
   * @generated from field: bool invert = 3;
   */
  invert: boolean;

  /**
   * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
   * headers against all the specified headers in the route config. A match will happen if all the
   * headers in the route are present in the request with the same values (or based on presence if
   * the value field is not in the config). Note that this only applies for Thrift transports and/or
   * protocols that support headers.
   *
   * @generated from field: repeated envoy.config.route.v3.HeaderMatcher headers = 4;
   */
  headers: HeaderMatcher[];

  constructor(data?: PartialMessage<RouteMatch>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.RouteMatch";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteMatch;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteMatch;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteMatch;

  static equals(a: RouteMatch | PlainMessage<RouteMatch> | undefined, b: RouteMatch | PlainMessage<RouteMatch> | undefined): boolean;
}

/**
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteAction
 */
export declare class RouteAction extends Message<RouteAction> {
  /**
   * @generated from oneof envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.cluster_specifier
   */
  clusterSpecifier: {
    /**
     * Indicates a single upstream cluster to which the request should be routed
     * to.
     *
     * @generated from field: string cluster = 1;
     */
    value: string;
    case: "cluster";
  } | {
    /**
     * Multiple upstream clusters can be specified for a given route. The
     * request is routed to one of the upstream clusters based on weights
     * assigned to each cluster.
     *
     * @generated from field: envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster weighted_clusters = 2;
     */
    value: WeightedCluster;
    case: "weightedClusters";
  } | {
    /**
     * Envoy will determine the cluster to route to by reading the value of the
     * Thrift header named by cluster_header from the request headers. If the
     * header is not found or the referenced cluster does not exist Envoy will
     * respond with an unknown method exception or an internal error exception,
     * respectively.
     *
     * @generated from field: string cluster_header = 6;
     */
    value: string;
    case: "clusterHeader";
  } | { case: undefined; value?: undefined };

  /**
   * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
   * the upstream cluster with metadata matching what is set in this field will be considered.
   * Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight.metadata_match>`,
   * with values there taking precedence. Keys and values should be provided under the "envoy.lb"
   * metadata key.
   *
   * @generated from field: envoy.config.core.v3.Metadata metadata_match = 3;
   */
  metadataMatch?: Metadata;

  /**
   * Specifies a set of rate limit configurations that could be applied to the route.
   * N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders
   * action with the header name ":method-name".
   *
   * @generated from field: repeated envoy.config.route.v3.RateLimit rate_limits = 4;
   */
  rateLimits: RateLimit[];

  /**
   * Strip the service prefix from the method name, if there's a prefix. For
   * example, the method call Service:method would end up being just method.
   *
   * @generated from field: bool strip_service_name = 5;
   */
  stripServiceName: boolean;

  /**
   * Indicates that the route has request mirroring policies.
   *
   * @generated from field: repeated envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 7;
   */
  requestMirrorPolicies: RouteAction_RequestMirrorPolicy[];

  constructor(data?: PartialMessage<RouteAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.RouteAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteAction;

  static equals(a: RouteAction | PlainMessage<RouteAction> | undefined, b: RouteAction | PlainMessage<RouteAction> | undefined): boolean;
}

/**
 * The router is capable of shadowing traffic from one cluster to another. The current
 * implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
 * respond before returning the response from the primary cluster. All normal statistics are
 * collected for the shadow cluster making this feature useful for testing.
 *
 * .. note::
 *
 *   Shadowing will not be triggered if the primary cluster does not exist.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy
 */
export declare class RouteAction_RequestMirrorPolicy extends Message<RouteAction_RequestMirrorPolicy> {
  /**
   * Specifies the cluster that requests will be mirrored to. The cluster must
   * exist in the cluster manager configuration when the route configuration is loaded.
   * If it disappears at runtime, the shadow request will silently be ignored.
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * If not specified, all requests to the target cluster will be mirrored.
   *
   * For some fraction N/D, a random number in the range [0,D) is selected. If the
   * number is <= the value of the numerator N, or if the key is not present, the default
   * value, the request will be mirrored.
   *
   * @generated from field: envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;
   */
  runtimeFraction?: RuntimeFractionalPercent;

  constructor(data?: PartialMessage<RouteAction_RequestMirrorPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.RouteAction.RequestMirrorPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteAction_RequestMirrorPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteAction_RequestMirrorPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteAction_RequestMirrorPolicy;

  static equals(a: RouteAction_RequestMirrorPolicy | PlainMessage<RouteAction_RequestMirrorPolicy> | undefined, b: RouteAction_RequestMirrorPolicy | PlainMessage<RouteAction_RequestMirrorPolicy> | undefined): boolean;
}

/**
 * Allows for specification of multiple upstream clusters along with weights that indicate the
 * percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
 * based on these weights.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster
 */
export declare class WeightedCluster extends Message<WeightedCluster> {
  /**
   * Specifies one or more upstream clusters associated with the route.
   *
   * @generated from field: repeated envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight clusters = 1;
   */
  clusters: WeightedCluster_ClusterWeight[];

  constructor(data?: PartialMessage<WeightedCluster>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeightedCluster;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeightedCluster;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeightedCluster;

  static equals(a: WeightedCluster | PlainMessage<WeightedCluster> | undefined, b: WeightedCluster | PlainMessage<WeightedCluster> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight
 */
export declare class WeightedCluster_ClusterWeight extends Message<WeightedCluster_ClusterWeight> {
  /**
   * Name of the upstream cluster.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When a request matches the route, the choice of an upstream cluster is determined by its
   * weight. The sum of weights across all entries in the clusters array determines the total
   * weight.
   *
   * @generated from field: google.protobuf.UInt32Value weight = 2;
   */
  weight?: number;

  /**
   * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
   * the upstream cluster with metadata matching what is set in this field, combined with what's
   * provided in :ref:`RouteAction's metadata_match
   * <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteAction.metadata_match>`,
   * will be considered. Values here will take precedence. Keys and values should be provided
   * under the "envoy.lb" metadata key.
   *
   * @generated from field: envoy.config.core.v3.Metadata metadata_match = 3;
   */
  metadataMatch?: Metadata;

  constructor(data?: PartialMessage<WeightedCluster_ClusterWeight>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeightedCluster_ClusterWeight;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeightedCluster_ClusterWeight;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeightedCluster_ClusterWeight;

  static equals(a: WeightedCluster_ClusterWeight | PlainMessage<WeightedCluster_ClusterWeight> | undefined, b: WeightedCluster_ClusterWeight | PlainMessage<WeightedCluster_ClusterWeight> | undefined): boolean;
}

