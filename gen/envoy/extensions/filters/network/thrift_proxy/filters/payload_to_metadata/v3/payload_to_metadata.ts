// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/filters/network/thrift_proxy/filters/payload_to_metadata/v3/payload_to_metadata.proto" (package "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RegexMatchAndSubstitute } from "../../../../../../../type/matcher/v3/regex";
// [#protodoc-title: Payload-To-Metadata Filter]
// 
// The configuration for transforming payloads into metadata. This is useful
// for matching load balancer subsets, logging, etc.
// 
// Payload to Metadata :ref:`configuration overview <config_thrift_filters_payload_to_metadata>`.
// [#extension: envoy.filters.thrift.payload_to_metadata]

/**
 * @generated from protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata
 */
export interface PayloadToMetadata {
    /**
     * The list of rules to apply to requests.
     *
     * @generated from protobuf field: repeated envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule request_rules = 1;
     */
    requestRules: PayloadToMetadata_Rule[];
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair
 */
export interface PayloadToMetadata_KeyValuePair {
    /**
     * The namespace — if this is empty, the filter's namespace will be used.
     *
     * @generated from protobuf field: string metadata_namespace = 1;
     */
    metadataNamespace: string;
    /**
     * The key to use within the namespace.
     *
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf oneof: value_type
     */
    valueType: {
        oneofKind: "value";
        /**
         * The value to pair with the given key.
         *
         * When used for on_present case, if value is non-empty it'll be used instead
         * of the field value. If both are empty, the field value is used as-is.
         *
         * When used for on_missing case, a non-empty value must be provided.
         *
         * @generated from protobuf field: string value = 3;
         */
        value: string;
    } | {
        oneofKind: "regexValueRewrite";
        /**
         * If present, the header's value will be matched and substituted with this.
         * If there is no match or substitution, the field value is used as-is.
         *
         * This is only used for on_present.
         *
         * @generated from protobuf field: envoy.type.matcher.v3.RegexMatchAndSubstitute regex_value_rewrite = 4;
         */
        regexValueRewrite: RegexMatchAndSubstitute;
    } | {
        oneofKind: undefined;
    };
    /**
     * The value's type — defaults to string.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType type = 5;
     */
    type: PayloadToMetadata_ValueType;
}
/**
 * A Rule defines what metadata to apply when a field is present or missing.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule
 */
export interface PayloadToMetadata_Rule {
    /**
     * @generated from protobuf oneof: match_specifier
     */
    matchSpecifier: {
        oneofKind: "methodName";
        /**
         * If specified, the route must exactly match the request method name. As a special case,
         * an empty string matches any request method name.
         *
         * @generated from protobuf field: string method_name = 1;
         */
        methodName: string;
    } | {
        oneofKind: "serviceName";
        /**
         * If specified, the route must have the service name as the request method name prefix.
         * As a special case, an empty string matches any service name. Only relevant when service
         * multiplexing.
         *
         * @generated from protobuf field: string service_name = 2;
         */
        serviceName: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * Specifies that a match will be performed on the value of a field.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector field_selector = 3;
     */
    fieldSelector?: PayloadToMetadata_FieldSelector;
    /**
     * If the field is present, apply this metadata KeyValuePair.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_present = 4;
     */
    onPresent?: PayloadToMetadata_KeyValuePair;
    /**
     * If the field is missing, apply this metadata KeyValuePair.
     *
     * The value in the KeyValuePair must be set, since it'll be used in lieu
     * of the missing field value.
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_missing = 5;
     */
    onMissing?: PayloadToMetadata_KeyValuePair;
}
/**
 * @generated from protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector
 */
export interface PayloadToMetadata_FieldSelector {
    /**
     * field name to log
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * field id to match
     *
     * @generated from protobuf field: int32 id = 2;
     */
    id: number;
    /**
     * next node of the field selector
     *
     * @generated from protobuf field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector child = 3;
     */
    child?: PayloadToMetadata_FieldSelector;
}
/**
 * @generated from protobuf enum envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType
 */
export enum PayloadToMetadata_ValueType {
    /**
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * @generated from protobuf enum value: NUMBER = 1;
     */
    NUMBER = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PayloadToMetadata$Type extends MessageType<PayloadToMetadata> {
    constructor() {
        super("envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata", [
            { no: 1, name: "request_rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PayloadToMetadata_Rule, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<PayloadToMetadata>): PayloadToMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestRules = [];
        if (value !== undefined)
            reflectionMergePartial<PayloadToMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayloadToMetadata): PayloadToMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule request_rules */ 1:
                    message.requestRules.push(PayloadToMetadata_Rule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayloadToMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule request_rules = 1; */
        for (let i = 0; i < message.requestRules.length; i++)
            PayloadToMetadata_Rule.internalBinaryWrite(message.requestRules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata
 */
export const PayloadToMetadata = new PayloadToMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayloadToMetadata_KeyValuePair$Type extends MessageType<PayloadToMetadata_KeyValuePair> {
    constructor() {
        super("envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair", [
            { no: 1, name: "metadata_namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "value", kind: "scalar", oneof: "valueType", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "regex_value_rewrite", kind: "message", oneof: "valueType", T: () => RegexMatchAndSubstitute },
            { no: 5, name: "type", kind: "enum", T: () => ["envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType", PayloadToMetadata_ValueType], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<PayloadToMetadata_KeyValuePair>): PayloadToMetadata_KeyValuePair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.metadataNamespace = "";
        message.key = "";
        message.valueType = { oneofKind: undefined };
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<PayloadToMetadata_KeyValuePair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayloadToMetadata_KeyValuePair): PayloadToMetadata_KeyValuePair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string metadata_namespace */ 1:
                    message.metadataNamespace = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.valueType = {
                        oneofKind: "value",
                        value: reader.string()
                    };
                    break;
                case /* envoy.type.matcher.v3.RegexMatchAndSubstitute regex_value_rewrite */ 4:
                    message.valueType = {
                        oneofKind: "regexValueRewrite",
                        regexValueRewrite: RegexMatchAndSubstitute.internalBinaryRead(reader, reader.uint32(), options, (message.valueType as any).regexValueRewrite)
                    };
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType type */ 5:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayloadToMetadata_KeyValuePair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string metadata_namespace = 1; */
        if (message.metadataNamespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.metadataNamespace);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.valueType.oneofKind === "value")
            writer.tag(3, WireType.LengthDelimited).string(message.valueType.value);
        /* envoy.type.matcher.v3.RegexMatchAndSubstitute regex_value_rewrite = 4; */
        if (message.valueType.oneofKind === "regexValueRewrite")
            RegexMatchAndSubstitute.internalBinaryWrite(message.valueType.regexValueRewrite, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair
 */
export const PayloadToMetadata_KeyValuePair = new PayloadToMetadata_KeyValuePair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayloadToMetadata_Rule$Type extends MessageType<PayloadToMetadata_Rule> {
    constructor() {
        super("envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule", [
            { no: 1, name: "method_name", kind: "scalar", oneof: "matchSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_name", kind: "scalar", oneof: "matchSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "field_selector", kind: "message", T: () => PayloadToMetadata_FieldSelector, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "on_present", kind: "message", T: () => PayloadToMetadata_KeyValuePair },
            { no: 5, name: "on_missing", kind: "message", T: () => PayloadToMetadata_KeyValuePair }
        ]);
    }
    create(value?: PartialMessage<PayloadToMetadata_Rule>): PayloadToMetadata_Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PayloadToMetadata_Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayloadToMetadata_Rule): PayloadToMetadata_Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method_name */ 1:
                    message.matchSpecifier = {
                        oneofKind: "methodName",
                        methodName: reader.string()
                    };
                    break;
                case /* string service_name */ 2:
                    message.matchSpecifier = {
                        oneofKind: "serviceName",
                        serviceName: reader.string()
                    };
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector field_selector */ 3:
                    message.fieldSelector = PayloadToMetadata_FieldSelector.internalBinaryRead(reader, reader.uint32(), options, message.fieldSelector);
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_present */ 4:
                    message.onPresent = PayloadToMetadata_KeyValuePair.internalBinaryRead(reader, reader.uint32(), options, message.onPresent);
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_missing */ 5:
                    message.onMissing = PayloadToMetadata_KeyValuePair.internalBinaryRead(reader, reader.uint32(), options, message.onMissing);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayloadToMetadata_Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method_name = 1; */
        if (message.matchSpecifier.oneofKind === "methodName")
            writer.tag(1, WireType.LengthDelimited).string(message.matchSpecifier.methodName);
        /* string service_name = 2; */
        if (message.matchSpecifier.oneofKind === "serviceName")
            writer.tag(2, WireType.LengthDelimited).string(message.matchSpecifier.serviceName);
        /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector field_selector = 3; */
        if (message.fieldSelector)
            PayloadToMetadata_FieldSelector.internalBinaryWrite(message.fieldSelector, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_present = 4; */
        if (message.onPresent)
            PayloadToMetadata_KeyValuePair.internalBinaryWrite(message.onPresent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_missing = 5; */
        if (message.onMissing)
            PayloadToMetadata_KeyValuePair.internalBinaryWrite(message.onMissing, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule
 */
export const PayloadToMetadata_Rule = new PayloadToMetadata_Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayloadToMetadata_FieldSelector$Type extends MessageType<PayloadToMetadata_FieldSelector> {
    constructor() {
        super("envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { lte: 32767, gte: -32768 } } } },
            { no: 3, name: "child", kind: "message", T: () => PayloadToMetadata_FieldSelector }
        ]);
    }
    create(value?: PartialMessage<PayloadToMetadata_FieldSelector>): PayloadToMetadata_FieldSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<PayloadToMetadata_FieldSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayloadToMetadata_FieldSelector): PayloadToMetadata_FieldSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 id */ 2:
                    message.id = reader.int32();
                    break;
                case /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector child */ 3:
                    message.child = PayloadToMetadata_FieldSelector.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayloadToMetadata_FieldSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int32(message.id);
        /* envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector child = 3; */
        if (message.child)
            PayloadToMetadata_FieldSelector.internalBinaryWrite(message.child, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector
 */
export const PayloadToMetadata_FieldSelector = new PayloadToMetadata_FieldSelector$Type();
