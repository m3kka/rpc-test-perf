// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/thrift_proxy/filters/payload_to_metadata/v3/payload_to_metadata.proto (package envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RegexMatchAndSubstitute } from "../../../../../../../type/matcher/v3/regex_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata
 */
export declare class PayloadToMetadata extends Message<PayloadToMetadata> {
  /**
   * The list of rules to apply to requests.
   *
   * @generated from field: repeated envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule request_rules = 1;
   */
  requestRules: PayloadToMetadata_Rule[];

  constructor(data?: PartialMessage<PayloadToMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadToMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadToMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadToMetadata;

  static equals(a: PayloadToMetadata | PlainMessage<PayloadToMetadata> | undefined, b: PayloadToMetadata | PlainMessage<PayloadToMetadata> | undefined): boolean;
}

/**
 * @generated from enum envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType
 */
export declare enum PayloadToMetadata_ValueType {
  /**
   * @generated from enum value: STRING = 0;
   */
  STRING = 0,

  /**
   * @generated from enum value: NUMBER = 1;
   */
  NUMBER = 1,
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair
 */
export declare class PayloadToMetadata_KeyValuePair extends Message<PayloadToMetadata_KeyValuePair> {
  /**
   * The namespace — if this is empty, the filter's namespace will be used.
   *
   * @generated from field: string metadata_namespace = 1;
   */
  metadataNamespace: string;

  /**
   * The key to use within the namespace.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * @generated from oneof envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair.value_type
   */
  valueType: {
    /**
     * The value to pair with the given key.
     *
     * When used for on_present case, if value is non-empty it'll be used instead
     * of the field value. If both are empty, the field value is used as-is.
     *
     * When used for on_missing case, a non-empty value must be provided.
     *
     * @generated from field: string value = 3;
     */
    value: string;
    case: "value";
  } | {
    /**
     * If present, the header's value will be matched and substituted with this.
     * If there is no match or substitution, the field value is used as-is.
     *
     * This is only used for on_present.
     *
     * @generated from field: envoy.type.matcher.v3.RegexMatchAndSubstitute regex_value_rewrite = 4;
     */
    value: RegexMatchAndSubstitute;
    case: "regexValueRewrite";
  } | { case: undefined; value?: undefined };

  /**
   * The value's type — defaults to string.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.ValueType type = 5;
   */
  type: PayloadToMetadata_ValueType;

  constructor(data?: PartialMessage<PayloadToMetadata_KeyValuePair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadToMetadata_KeyValuePair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadToMetadata_KeyValuePair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadToMetadata_KeyValuePair;

  static equals(a: PayloadToMetadata_KeyValuePair | PlainMessage<PayloadToMetadata_KeyValuePair> | undefined, b: PayloadToMetadata_KeyValuePair | PlainMessage<PayloadToMetadata_KeyValuePair> | undefined): boolean;
}

/**
 * A Rule defines what metadata to apply when a field is present or missing.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule
 */
export declare class PayloadToMetadata_Rule extends Message<PayloadToMetadata_Rule> {
  /**
   * @generated from oneof envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule.match_specifier
   */
  matchSpecifier: {
    /**
     * If specified, the route must exactly match the request method name. As a special case,
     * an empty string matches any request method name.
     *
     * @generated from field: string method_name = 1;
     */
    value: string;
    case: "methodName";
  } | {
    /**
     * If specified, the route must have the service name as the request method name prefix.
     * As a special case, an empty string matches any service name. Only relevant when service
     * multiplexing.
     *
     * @generated from field: string service_name = 2;
     */
    value: string;
    case: "serviceName";
  } | { case: undefined; value?: undefined };

  /**
   * Specifies that a match will be performed on the value of a field.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector field_selector = 3;
   */
  fieldSelector?: PayloadToMetadata_FieldSelector;

  /**
   * If the field is present, apply this metadata KeyValuePair.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_present = 4;
   */
  onPresent?: PayloadToMetadata_KeyValuePair;

  /**
   * If the field is missing, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set, since it'll be used in lieu
   * of the missing field value.
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.KeyValuePair on_missing = 5;
   */
  onMissing?: PayloadToMetadata_KeyValuePair;

  constructor(data?: PartialMessage<PayloadToMetadata_Rule>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadToMetadata_Rule;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadToMetadata_Rule;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadToMetadata_Rule;

  static equals(a: PayloadToMetadata_Rule | PlainMessage<PayloadToMetadata_Rule> | undefined, b: PayloadToMetadata_Rule | PlainMessage<PayloadToMetadata_Rule> | undefined): boolean;
}

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector
 */
export declare class PayloadToMetadata_FieldSelector extends Message<PayloadToMetadata_FieldSelector> {
  /**
   * field name to log
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * field id to match
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * next node of the field selector
   *
   * @generated from field: envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector child = 3;
   */
  child?: PayloadToMetadata_FieldSelector;

  constructor(data?: PartialMessage<PayloadToMetadata_FieldSelector>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.FieldSelector";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadToMetadata_FieldSelector;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadToMetadata_FieldSelector;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadToMetadata_FieldSelector;

  static equals(a: PayloadToMetadata_FieldSelector | PlainMessage<PayloadToMetadata_FieldSelector> | undefined, b: PayloadToMetadata_FieldSelector | PlainMessage<PayloadToMetadata_FieldSelector> | undefined): boolean;
}

