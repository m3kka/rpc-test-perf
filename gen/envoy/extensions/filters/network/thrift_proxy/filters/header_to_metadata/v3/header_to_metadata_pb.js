// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/filters/network/thrift_proxy/filters/header_to_metadata/v3/header_to_metadata.proto (package envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { RegexMatchAndSubstitute } from "../../../../../../../type/matcher/v3/regex_pb.js";

/**
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata
 */
export const HeaderToMetadata = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata",
  () => [
    { no: 1, name: "request_rules", kind: "message", T: HeaderToMetadata_Rule, repeated: true },
  ],
);

/**
 * @generated from enum envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.ValueType
 */
export const HeaderToMetadata_ValueType = proto3.makeEnum(
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.ValueType",
  [
    {no: 0, name: "STRING"},
    {no: 1, name: "NUMBER"},
    {no: 2, name: "PROTOBUF_VALUE"},
  ],
);

/**
 * ValueEncode defines the encoding algorithm.
 *
 * @generated from enum envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.ValueEncode
 */
export const HeaderToMetadata_ValueEncode = proto3.makeEnum(
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.ValueEncode",
  [
    {no: 0, name: "NONE"},
    {no: 1, name: "BASE64"},
  ],
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair
 */
export const HeaderToMetadata_KeyValuePair = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair",
  () => [
    { no: 1, name: "metadata_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value_type" },
    { no: 4, name: "regex_value_rewrite", kind: "message", T: RegexMatchAndSubstitute, oneof: "value_type" },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(HeaderToMetadata_ValueType) },
    { no: 6, name: "encode", kind: "enum", T: proto3.getEnumType(HeaderToMetadata_ValueEncode) },
  ],
  {localName: "HeaderToMetadata_KeyValuePair"},
);

/**
 * A Rule defines what metadata to apply when a header is present or missing.
 *
 * @generated from message envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule
 */
export const HeaderToMetadata_Rule = proto3.makeMessageType(
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule",
  () => [
    { no: 1, name: "header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "on_present", kind: "message", T: HeaderToMetadata_KeyValuePair },
    { no: 3, name: "on_missing", kind: "message", T: HeaderToMetadata_KeyValuePair },
    { no: 4, name: "remove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "HeaderToMetadata_Rule"},
);

