// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/wasm/v3/wasm.proto (package envoy.extensions.wasm.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { AsyncDataSource } from "../../../config/core/v3/base_pb.js";

/**
 * Configuration for restricting Proxy-Wasm capabilities available to modules.
 *
 * @generated from message envoy.extensions.wasm.v3.CapabilityRestrictionConfig
 */
export const CapabilityRestrictionConfig = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.CapabilityRestrictionConfig",
  () => [
    { no: 1, name: "allowed_capabilities", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: SanitizationConfig} },
  ],
);

/**
 * Configuration for sanitization of inputs to an allowed capability.
 *
 * NOTE: This is currently unimplemented.
 *
 * @generated from message envoy.extensions.wasm.v3.SanitizationConfig
 */
export const SanitizationConfig = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.SanitizationConfig",
  [],
);

/**
 * Configuration for a Wasm VM.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.extensions.wasm.v3.VmConfig
 */
export const VmConfig = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.VmConfig",
  () => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runtime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "message", T: AsyncDataSource },
    { no: 4, name: "configuration", kind: "message", T: Any },
    { no: 5, name: "allow_precompiled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "nack_on_code_cache_miss", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "environment_variables", kind: "message", T: EnvironmentVariables },
  ],
);

/**
 * @generated from message envoy.extensions.wasm.v3.EnvironmentVariables
 */
export const EnvironmentVariables = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.EnvironmentVariables",
  () => [
    { no: 1, name: "host_env_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "key_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Base Configuration for Wasm Plugins e.g. filters and services.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.wasm.v3.PluginConfig
 */
export const PluginConfig = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.PluginConfig",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "root_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "vm_config", kind: "message", T: VmConfig, oneof: "vm" },
    { no: 4, name: "configuration", kind: "message", T: Any },
    { no: 5, name: "fail_open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "capability_restriction_config", kind: "message", T: CapabilityRestrictionConfig },
  ],
);

/**
 * WasmService is configured as a built-in ``envoy.wasm_service`` :ref:`WasmService
 * <config_wasm_service>` This opaque configuration will be used to create a Wasm Service.
 *
 * @generated from message envoy.extensions.wasm.v3.WasmService
 */
export const WasmService = proto3.makeMessageType(
  "envoy.extensions.wasm.v3.WasmService",
  () => [
    { no: 1, name: "config", kind: "message", T: PluginConfig },
    { no: 2, name: "singleton", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

