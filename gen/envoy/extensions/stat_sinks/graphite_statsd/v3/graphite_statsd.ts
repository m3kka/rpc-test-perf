// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/stat_sinks/graphite_statsd/v3/graphite_statsd.proto" (package "envoy.extensions.stat_sinks.graphite_statsd.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt64Value } from "../../../../../google/protobuf/wrappers";
import { Address } from "../../../../config/core/v3/address";
// [#protodoc-title: Graphite+Statsd]
// Stats configuration proto schema for ``envoy.stat_sinks.graphite_statsd`` sink.
// The sink emits stats with `Graphite <https://graphite.readthedocs.io/en/latest/tags.html>`_
// compatible tags. Tags are configurable via :ref:`StatsConfig
// <envoy_v3_api_msg_config.metrics.v3.StatsConfig>`.
// [#extension: envoy.stat_sinks.graphite_statsd]

/**
 * @generated from protobuf message envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink
 */
export interface GraphiteStatsdSink {
    /**
     * @generated from protobuf oneof: statsd_specifier
     */
    statsdSpecifier: {
        oneofKind: "address";
        /**
         * The UDP address of a running Graphite-compliant listener. If specified,
         * statistics will be flushed to this address.
         *
         * @generated from protobuf field: envoy.config.core.v3.Address address = 1;
         */
        address: Address;
    } | {
        oneofKind: undefined;
    };
    /**
     * Optional custom metric name prefix. See :ref:`StatsdSink's prefix field
     * <envoy_v3_api_field_config.metrics.v3.StatsdSink.prefix>` for more details.
     *
     * @generated from protobuf field: string prefix = 3;
     */
    prefix: string;
    /**
     * Optional max datagram size to use when sending UDP messages. By default Envoy
     * will emit one metric per datagram. By specifying a max-size larger than a single
     * metric, Envoy will emit multiple, new-line separated metrics. The max datagram
     * size should not exceed your network's MTU.
     *
     * Note that this value may not be respected if smaller than a single metric.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_bytes_per_datagram = 4;
     */
    maxBytesPerDatagram?: UInt64Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class GraphiteStatsdSink$Type extends MessageType<GraphiteStatsdSink> {
    constructor() {
        super("envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink", [
            { no: 1, name: "address", kind: "message", oneof: "statsdSpecifier", T: () => Address },
            { no: 3, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "max_bytes_per_datagram", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<GraphiteStatsdSink>): GraphiteStatsdSink {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statsdSpecifier = { oneofKind: undefined };
        message.prefix = "";
        if (value !== undefined)
            reflectionMergePartial<GraphiteStatsdSink>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GraphiteStatsdSink): GraphiteStatsdSink {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.Address address */ 1:
                    message.statsdSpecifier = {
                        oneofKind: "address",
                        address: Address.internalBinaryRead(reader, reader.uint32(), options, (message.statsdSpecifier as any).address)
                    };
                    break;
                case /* string prefix */ 3:
                    message.prefix = reader.string();
                    break;
                case /* google.protobuf.UInt64Value max_bytes_per_datagram */ 4:
                    message.maxBytesPerDatagram = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxBytesPerDatagram);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GraphiteStatsdSink, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.Address address = 1; */
        if (message.statsdSpecifier.oneofKind === "address")
            Address.internalBinaryWrite(message.statsdSpecifier.address, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string prefix = 3; */
        if (message.prefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prefix);
        /* google.protobuf.UInt64Value max_bytes_per_datagram = 4; */
        if (message.maxBytesPerDatagram)
            UInt64Value.internalBinaryWrite(message.maxBytesPerDatagram, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink
 */
export const GraphiteStatsdSink = new GraphiteStatsdSink$Type();
