// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/resource_monitors/fixed_heap/v3/fixed_heap.proto" (package "envoy.extensions.resource_monitors.fixed_heap.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Fixed heap]
// [#extension: envoy.resource_monitors.fixed_heap]

/**
 * The fixed heap resource monitor reports the Envoy process memory pressure, computed as a
 * fraction of currently reserved heap memory divided by a statically configured maximum
 * specified in the FixedHeapConfig.
 *
 * @generated from protobuf message envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
 */
export interface FixedHeapConfig {
    /**
     * @generated from protobuf field: uint64 max_heap_size_bytes = 1;
     */
    maxHeapSizeBytes: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class FixedHeapConfig$Type extends MessageType<FixedHeapConfig> {
    constructor() {
        super("envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig", [
            { no: 1, name: "max_heap_size_bytes", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "validate.rules": { uint64: { gt: "0" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig" } });
    }
    create(value?: PartialMessage<FixedHeapConfig>): FixedHeapConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxHeapSizeBytes = 0n;
        if (value !== undefined)
            reflectionMergePartial<FixedHeapConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedHeapConfig): FixedHeapConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 max_heap_size_bytes */ 1:
                    message.maxHeapSizeBytes = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedHeapConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 max_heap_size_bytes = 1; */
        if (message.maxHeapSizeBytes !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.maxHeapSizeBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
 */
export const FixedHeapConfig = new FixedHeapConfig$Type();
