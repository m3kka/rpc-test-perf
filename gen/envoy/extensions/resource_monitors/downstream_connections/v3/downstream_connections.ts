// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/resource_monitors/downstream_connections/v3/downstream_connections.proto" (package "envoy.extensions.resource_monitors.downstream_connections.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Downstream connections]
// [#extension: envoy.resource_monitors.downstream_connections]

/**
 * The downstream connections resource monitor tracks the global number of open downstream connections.
 *
 * @generated from protobuf message envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig
 */
export interface DownstreamConnectionsConfig {
    /**
     * Maximum threshold for global open downstream connections, defaults to 0.
     * If monitor is enabled in Overload manager api, this field should be explicitly configured with value greater than 0.
     *
     * @generated from protobuf field: int64 max_active_downstream_connections = 1;
     */
    maxActiveDownstreamConnections: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class DownstreamConnectionsConfig$Type extends MessageType<DownstreamConnectionsConfig> {
    constructor() {
        super("envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig", [
            { no: 1, name: "max_active_downstream_connections", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "validate.rules": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DownstreamConnectionsConfig>): DownstreamConnectionsConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxActiveDownstreamConnections = 0n;
        if (value !== undefined)
            reflectionMergePartial<DownstreamConnectionsConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownstreamConnectionsConfig): DownstreamConnectionsConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 max_active_downstream_connections */ 1:
                    message.maxActiveDownstreamConnections = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownstreamConnectionsConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 max_active_downstream_connections = 1; */
        if (message.maxActiveDownstreamConnections !== 0n)
            writer.tag(1, WireType.Varint).int64(message.maxActiveDownstreamConnections);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig
 */
export const DownstreamConnectionsConfig = new DownstreamConnectionsConfig$Type();
