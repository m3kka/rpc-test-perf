// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/compression/brotli/compressor/v3/brotli.proto" (package "envoy.extensions.compression.brotli.compressor.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Brotli Compressor]
// [#extension: envoy.compression.brotli.compressor]

/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.extensions.compression.brotli.compressor.v3.Brotli
 */
export interface Brotli {
    /**
     * Value from 0 to 11 that controls the main compression speed-density lever.
     * The higher quality, the slower compression. The default value is 3.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value quality = 1;
     */
    quality?: UInt32Value;
    /**
     * A value used to tune encoder for specific input. For more information about modes,
     * please refer to brotli manual: https://brotli.org/encode.html#aa6f
     * This field will be set to "DEFAULT" if not specified.
     *
     * @generated from protobuf field: envoy.extensions.compression.brotli.compressor.v3.Brotli.EncoderMode encoder_mode = 2;
     */
    encoderMode: Brotli_EncoderMode;
    /**
     * Value from 10 to 24 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 18.
     * For more details about this parameter, please refer to brotli manual:
     * https://brotli.org/encode.html#a9a8
     *
     * @generated from protobuf field: google.protobuf.UInt32Value window_bits = 3;
     */
    windowBits?: UInt32Value;
    /**
     * Value from 16 to 24 that represents the base two logarithmic of the compressor's input block
     * size. Larger input block results in better compression at the expense of memory usage. The
     * default is 24. For more details about this parameter, please refer to brotli manual:
     * https://brotli.org/encode.html#a9a8
     *
     * @generated from protobuf field: google.protobuf.UInt32Value input_block_bits = 4;
     */
    inputBlockBits?: UInt32Value;
    /**
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value chunk_size = 5;
     */
    chunkSize?: UInt32Value;
    /**
     * If true, disables "literal context modeling" format feature.
     * This flag is a "decoding-speed vs compression ratio" trade-off.
     *
     * @generated from protobuf field: bool disable_literal_context_modeling = 6;
     */
    disableLiteralContextModeling: boolean;
}
/**
 * @generated from protobuf enum envoy.extensions.compression.brotli.compressor.v3.Brotli.EncoderMode
 */
export enum Brotli_EncoderMode {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: GENERIC = 1;
     */
    GENERIC = 1,
    /**
     * @generated from protobuf enum value: TEXT = 2;
     */
    TEXT = 2,
    /**
     * @generated from protobuf enum value: FONT = 3;
     */
    FONT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Brotli$Type extends MessageType<Brotli> {
    constructor() {
        super("envoy.extensions.compression.brotli.compressor.v3.Brotli", [
            { no: 1, name: "quality", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 11 } } } },
            { no: 2, name: "encoder_mode", kind: "enum", T: () => ["envoy.extensions.compression.brotli.compressor.v3.Brotli.EncoderMode", Brotli_EncoderMode], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "window_bits", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 24, gte: 10 } } } },
            { no: 4, name: "input_block_bits", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 24, gte: 16 } } } },
            { no: 5, name: "chunk_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 65536, gte: 4096 } } } },
            { no: 6, name: "disable_literal_context_modeling", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Brotli>): Brotli {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.encoderMode = 0;
        message.disableLiteralContextModeling = false;
        if (value !== undefined)
            reflectionMergePartial<Brotli>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brotli): Brotli {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value quality */ 1:
                    message.quality = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.quality);
                    break;
                case /* envoy.extensions.compression.brotli.compressor.v3.Brotli.EncoderMode encoder_mode */ 2:
                    message.encoderMode = reader.int32();
                    break;
                case /* google.protobuf.UInt32Value window_bits */ 3:
                    message.windowBits = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.windowBits);
                    break;
                case /* google.protobuf.UInt32Value input_block_bits */ 4:
                    message.inputBlockBits = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.inputBlockBits);
                    break;
                case /* google.protobuf.UInt32Value chunk_size */ 5:
                    message.chunkSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.chunkSize);
                    break;
                case /* bool disable_literal_context_modeling */ 6:
                    message.disableLiteralContextModeling = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brotli, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value quality = 1; */
        if (message.quality)
            UInt32Value.internalBinaryWrite(message.quality, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.compression.brotli.compressor.v3.Brotli.EncoderMode encoder_mode = 2; */
        if (message.encoderMode !== 0)
            writer.tag(2, WireType.Varint).int32(message.encoderMode);
        /* google.protobuf.UInt32Value window_bits = 3; */
        if (message.windowBits)
            UInt32Value.internalBinaryWrite(message.windowBits, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value input_block_bits = 4; */
        if (message.inputBlockBits)
            UInt32Value.internalBinaryWrite(message.inputBlockBits, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value chunk_size = 5; */
        if (message.chunkSize)
            UInt32Value.internalBinaryWrite(message.chunkSize, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool disable_literal_context_modeling = 6; */
        if (message.disableLiteralContextModeling !== false)
            writer.tag(6, WireType.Varint).bool(message.disableLiteralContextModeling);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.compression.brotli.compressor.v3.Brotli
 */
export const Brotli = new Brotli$Type();
