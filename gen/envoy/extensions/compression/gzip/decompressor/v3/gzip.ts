// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/compression/gzip/decompressor/v3/gzip.proto" (package "envoy.extensions.compression.gzip.decompressor.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Gzip Decompressor]
// [#extension: envoy.compression.gzip.decompressor]

/**
 * @generated from protobuf message envoy.extensions.compression.gzip.decompressor.v3.Gzip
 */
export interface Gzip {
    /**
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual <https://www.zlib.net/manual.html>`_ > inflateInit2.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value window_bits = 1;
     */
    windowBits?: UInt32Value;
    /**
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value chunk_size = 2;
     */
    chunkSize?: UInt32Value;
    /**
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_inflate_ratio = 3;
     */
    maxInflateRatio?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class Gzip$Type extends MessageType<Gzip> {
    constructor() {
        super("envoy.extensions.compression.gzip.decompressor.v3.Gzip", [
            { no: 1, name: "window_bits", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 15, gte: 9 } } } },
            { no: 2, name: "chunk_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 65536, gte: 4096 } } } },
            { no: 3, name: "max_inflate_ratio", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 1032, gte: 1 } } } }
        ]);
    }
    create(value?: PartialMessage<Gzip>): Gzip {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Gzip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Gzip): Gzip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value window_bits */ 1:
                    message.windowBits = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.windowBits);
                    break;
                case /* google.protobuf.UInt32Value chunk_size */ 2:
                    message.chunkSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.chunkSize);
                    break;
                case /* google.protobuf.UInt32Value max_inflate_ratio */ 3:
                    message.maxInflateRatio = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxInflateRatio);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Gzip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value window_bits = 1; */
        if (message.windowBits)
            UInt32Value.internalBinaryWrite(message.windowBits, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value chunk_size = 2; */
        if (message.chunkSize)
            UInt32Value.internalBinaryWrite(message.chunkSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_inflate_ratio = 3; */
        if (message.maxInflateRatio)
            UInt32Value.internalBinaryWrite(message.maxInflateRatio, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.compression.gzip.decompressor.v3.Gzip
 */
export const Gzip = new Gzip$Type();
