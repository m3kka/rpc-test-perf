// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/compression/zstd/decompressor/v3/zstd.proto" (package "envoy.extensions.compression.zstd.decompressor.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { DataSource } from "../../../../../config/core/v3/base";
// [#protodoc-title: Zstd Decompressor]
// [#extension: envoy.compression.zstd.decompressor]

/**
 * @generated from protobuf message envoy.extensions.compression.zstd.decompressor.v3.Zstd
 */
export interface Zstd {
    /**
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual <https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder>`_
     * to train specific dictionaries for decompression.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.DataSource dictionaries = 1;
     */
    dictionaries: DataSource[];
    /**
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value chunk_size = 2;
     */
    chunkSize?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class Zstd$Type extends MessageType<Zstd> {
    constructor() {
        super("envoy.extensions.compression.zstd.decompressor.v3.Zstd", [
            { no: 1, name: "dictionaries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataSource },
            { no: 2, name: "chunk_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 65536, gte: 4096 } } } }
        ]);
    }
    create(value?: PartialMessage<Zstd>): Zstd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dictionaries = [];
        if (value !== undefined)
            reflectionMergePartial<Zstd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Zstd): Zstd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.DataSource dictionaries */ 1:
                    message.dictionaries.push(DataSource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.UInt32Value chunk_size */ 2:
                    message.chunkSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.chunkSize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Zstd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.DataSource dictionaries = 1; */
        for (let i = 0; i < message.dictionaries.length; i++)
            DataSource.internalBinaryWrite(message.dictionaries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value chunk_size = 2; */
        if (message.chunkSize)
            UInt32Value.internalBinaryWrite(message.chunkSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.compression.zstd.decompressor.v3.Zstd
 */
export const Zstd = new Zstd$Type();
