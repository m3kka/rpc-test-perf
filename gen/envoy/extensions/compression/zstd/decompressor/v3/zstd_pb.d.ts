// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/compression/zstd/decompressor/v3/zstd.proto (package envoy.extensions.compression.zstd.decompressor.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DataSource } from "../../../../../config/core/v3/base_pb.js";

/**
 * @generated from message envoy.extensions.compression.zstd.decompressor.v3.Zstd
 */
export declare class Zstd extends Message<Zstd> {
  /**
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual <https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder>`_
   * to train specific dictionaries for decompression.
   *
   * @generated from field: repeated envoy.config.core.v3.DataSource dictionaries = 1;
   */
  dictionaries: DataSource[];

  /**
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   *
   * @generated from field: google.protobuf.UInt32Value chunk_size = 2;
   */
  chunkSize?: number;

  constructor(data?: PartialMessage<Zstd>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.compression.zstd.decompressor.v3.Zstd";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Zstd;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Zstd;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Zstd;

  static equals(a: Zstd | PlainMessage<Zstd> | undefined, b: Zstd | PlainMessage<Zstd> | undefined): boolean;
}

