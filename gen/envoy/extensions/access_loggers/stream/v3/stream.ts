// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/access_loggers/stream/v3/stream.proto" (package "envoy.extensions.access_loggers.stream.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SubstitutionFormatString } from "../../../../config/core/v3/substitution_format_string";
// [#protodoc-title: Standard Streams Access loggers]

/**
 * Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
 * that writes log entries directly to the operating system's standard output.
 * [#extension: envoy.access_loggers.stdout]
 *
 * @generated from protobuf message envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
 */
export interface StdoutAccessLog {
    /**
     * @generated from protobuf oneof: access_log_format
     */
    accessLogFormat: {
        oneofKind: "logFormat";
        /**
         * Configuration to form access log data and format.
         * If not specified, use :ref:`default format <config_access_log_default_format>`.
         *
         * @generated from protobuf field: envoy.config.core.v3.SubstitutionFormatString log_format = 1;
         */
        logFormat: SubstitutionFormatString;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
 * that writes log entries directly to the operating system's standard error.
 * [#extension: envoy.access_loggers.stderr]
 *
 * @generated from protobuf message envoy.extensions.access_loggers.stream.v3.StderrAccessLog
 */
export interface StderrAccessLog {
    /**
     * @generated from protobuf oneof: access_log_format
     */
    accessLogFormat: {
        oneofKind: "logFormat";
        /**
         * Configuration to form access log data and format.
         * If not specified, use :ref:`default format <config_access_log_default_format>`.
         *
         * @generated from protobuf field: envoy.config.core.v3.SubstitutionFormatString log_format = 1;
         */
        logFormat: SubstitutionFormatString;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class StdoutAccessLog$Type extends MessageType<StdoutAccessLog> {
    constructor() {
        super("envoy.extensions.access_loggers.stream.v3.StdoutAccessLog", [
            { no: 1, name: "log_format", kind: "message", oneof: "accessLogFormat", T: () => SubstitutionFormatString, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<StdoutAccessLog>): StdoutAccessLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessLogFormat = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StdoutAccessLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StdoutAccessLog): StdoutAccessLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.SubstitutionFormatString log_format */ 1:
                    message.accessLogFormat = {
                        oneofKind: "logFormat",
                        logFormat: SubstitutionFormatString.internalBinaryRead(reader, reader.uint32(), options, (message.accessLogFormat as any).logFormat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StdoutAccessLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.SubstitutionFormatString log_format = 1; */
        if (message.accessLogFormat.oneofKind === "logFormat")
            SubstitutionFormatString.internalBinaryWrite(message.accessLogFormat.logFormat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
 */
export const StdoutAccessLog = new StdoutAccessLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StderrAccessLog$Type extends MessageType<StderrAccessLog> {
    constructor() {
        super("envoy.extensions.access_loggers.stream.v3.StderrAccessLog", [
            { no: 1, name: "log_format", kind: "message", oneof: "accessLogFormat", T: () => SubstitutionFormatString, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<StderrAccessLog>): StderrAccessLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessLogFormat = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StderrAccessLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StderrAccessLog): StderrAccessLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.SubstitutionFormatString log_format */ 1:
                    message.accessLogFormat = {
                        oneofKind: "logFormat",
                        logFormat: SubstitutionFormatString.internalBinaryRead(reader, reader.uint32(), options, (message.accessLogFormat as any).logFormat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StderrAccessLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.SubstitutionFormatString log_format = 1; */
        if (message.accessLogFormat.oneofKind === "logFormat")
            SubstitutionFormatString.internalBinaryWrite(message.accessLogFormat.logFormat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.access_loggers.stream.v3.StderrAccessLog
 */
export const StderrAccessLog = new StderrAccessLog$Type();
