// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/access_loggers/grpc/v3/als.proto (package envoy.extensions.access_loggers.grpc.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcService } from "../../../../config/core/v3/grpc_service_pb.js";
import type { ApiVersion } from "../../../../config/core/v3/config_source_pb.js";
import type { RetryPolicy } from "../../../../config/core/v3/base_pb.js";
import type { CustomTag } from "../../../../type/tracing/v3/custom_tag_pb.js";

/**
 * Configuration for the built-in ``envoy.access_loggers.http_grpc``
 * :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
 * populate :ref:`StreamAccessLogsMessage.http_logs
 * <envoy_v3_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.
 * [#extension: envoy.access_loggers.http_grpc]
 *
 * @generated from message envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
 */
export declare class HttpGrpcAccessLogConfig extends Message<HttpGrpcAccessLogConfig> {
  /**
   * @generated from field: envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig common_config = 1;
   */
  commonConfig?: CommonGrpcAccessLogConfig;

  /**
   * Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPRequestProperties.request_headers>`.
   *
   * @generated from field: repeated string additional_request_headers_to_log = 2;
   */
  additionalRequestHeadersToLog: string[];

  /**
   * Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_headers>`.
   *
   * @generated from field: repeated string additional_response_headers_to_log = 3;
   */
  additionalResponseHeadersToLog: string[];

  /**
   * Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_trailers>`.
   *
   * @generated from field: repeated string additional_response_trailers_to_log = 4;
   */
  additionalResponseTrailersToLog: string[];

  constructor(data?: PartialMessage<HttpGrpcAccessLogConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpGrpcAccessLogConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpGrpcAccessLogConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpGrpcAccessLogConfig;

  static equals(a: HttpGrpcAccessLogConfig | PlainMessage<HttpGrpcAccessLogConfig> | undefined, b: HttpGrpcAccessLogConfig | PlainMessage<HttpGrpcAccessLogConfig> | undefined): boolean;
}

/**
 * Configuration for the built-in ``envoy.access_loggers.tcp_grpc`` type. This configuration will
 * populate ``StreamAccessLogsMessage.tcp_logs``.
 * [#extension: envoy.access_loggers.tcp_grpc]
 *
 * @generated from message envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
 */
export declare class TcpGrpcAccessLogConfig extends Message<TcpGrpcAccessLogConfig> {
  /**
   * @generated from field: envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig common_config = 1;
   */
  commonConfig?: CommonGrpcAccessLogConfig;

  constructor(data?: PartialMessage<TcpGrpcAccessLogConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpGrpcAccessLogConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpGrpcAccessLogConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpGrpcAccessLogConfig;

  static equals(a: TcpGrpcAccessLogConfig | PlainMessage<TcpGrpcAccessLogConfig> | undefined, b: TcpGrpcAccessLogConfig | PlainMessage<TcpGrpcAccessLogConfig> | undefined): boolean;
}

/**
 * Common configuration for gRPC access logs.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig
 */
export declare class CommonGrpcAccessLogConfig extends Message<CommonGrpcAccessLogConfig> {
  /**
   * The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
   * <envoy_v3_api_msg_service.accesslog.v3.StreamAccessLogsMessage.Identifier>`. This allows the
   * access log server to differentiate between different access logs coming from the same Envoy.
   *
   * @generated from field: string log_name = 1;
   */
  logName: string;

  /**
   * The gRPC service for the access log service.
   *
   * @generated from field: envoy.config.core.v3.GrpcService grpc_service = 2;
   */
  grpcService?: GrpcService;

  /**
   * API version for access logs service transport protocol. This describes the access logs service
   * gRPC endpoint and version of messages used on the wire.
   *
   * @generated from field: envoy.config.core.v3.ApiVersion transport_api_version = 6;
   */
  transportApiVersion: ApiVersion;

  /**
   * Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
   * this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
   * 1 second.
   *
   * @generated from field: google.protobuf.Duration buffer_flush_interval = 3;
   */
  bufferFlushInterval?: Duration;

  /**
   * Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
   * this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
   * to zero effectively disables the batching. Defaults to 16384.
   *
   * @generated from field: google.protobuf.UInt32Value buffer_size_bytes = 4;
   */
  bufferSizeBytes?: number;

  /**
   * Additional filter state objects to log in :ref:`filter_state_objects
   * <envoy_v3_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
   * Logger will call ``FilterState::Object::serializeAsProto`` to serialize the filter state object.
   *
   * @generated from field: repeated string filter_state_objects_to_log = 5;
   */
  filterStateObjectsToLog: string[];

  /**
   * Sets the retry policy when the establishment of a gRPC stream fails.
   * If the stream succeeds at least once in establishing itself,
   * no retry will be performed no matter what gRPC status is received.
   * Note that only :ref:`num_retries <envoy_v3_api_field_config.core.v3.RetryPolicy.num_retries>`
   * will be used in this configuration. This feature is used only when you are using
   * :ref:`Envoy gRPC client <envoy_v3_api_field_config.core.v3.GrpcService.envoy_grpc>`.
   *
   * @generated from field: envoy.config.core.v3.RetryPolicy grpc_stream_retry_policy = 7;
   */
  grpcStreamRetryPolicy?: RetryPolicy;

  /**
   * A list of custom tags with unique tag name to create tags for the logs.
   *
   * @generated from field: repeated envoy.type.tracing.v3.CustomTag custom_tags = 8;
   */
  customTags: CustomTag[];

  constructor(data?: PartialMessage<CommonGrpcAccessLogConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonGrpcAccessLogConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonGrpcAccessLogConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonGrpcAccessLogConfig;

  static equals(a: CommonGrpcAccessLogConfig | PlainMessage<CommonGrpcAccessLogConfig> | undefined, b: CommonGrpcAccessLogConfig | PlainMessage<CommonGrpcAccessLogConfig> | undefined): boolean;
}

