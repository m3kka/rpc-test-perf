// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/access_loggers/open_telemetry/v3/logs_service.proto" (package "envoy.extensions.access_loggers.open_telemetry.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AnyValue } from "../../../../../opentelemetry/proto/common/v1/common";
import { KeyValueList } from "../../../../../opentelemetry/proto/common/v1/common";
import { CommonGrpcAccessLogConfig } from "../../grpc/v3/als";
// [#protodoc-title: OpenTelemetry (gRPC) Access Log]

/**
 * Configuration for the built-in ``envoy.access_loggers.open_telemetry``
 * :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
 * populate `opentelemetry.proto.collector.v1.logs.ExportLogsServiceRequest.resource_logs <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/collector/logs/v1/logs_service.proto>`_.
 * In addition, the request start time is set in the dedicated field.
 * [#extension: envoy.access_loggers.open_telemetry]
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig
 */
export interface OpenTelemetryAccessLogConfig {
    /**
     * [#comment:TODO(itamarkam): add 'filter_state_objects_to_log' to logs.]
     *
     * @generated from protobuf field: envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig common_config = 1;
     */
    commonConfig?: CommonGrpcAccessLogConfig;
    /**
     * If specified, Envoy will not generate built-in resource labels
     * like ``log_name``, ``zone_name``, ``cluster_name``, ``node_name``.
     *
     * @generated from protobuf field: bool disable_builtin_labels = 5;
     */
    disableBuiltinLabels: boolean;
    /**
     * OpenTelemetry `Resource <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/logs/v1/logs.proto#L51>`_
     * attributes are filled with Envoy node info.
     * Example: ``resource_attributes { values { key: "region" value { string_value: "cn-north-7" } } }``.
     *
     * @generated from protobuf field: opentelemetry.proto.common.v1.KeyValueList resource_attributes = 4;
     */
    resourceAttributes?: KeyValueList;
    /**
     * OpenTelemetry `LogResource <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/logs/v1/logs.proto>`_
     * fields, following `Envoy access logging formatting <https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage>`_.
     *
     * See 'body' in the LogResource proto for more details.
     * Example: ``body { string_value: "%PROTOCOL%" }``.
     *
     * @generated from protobuf field: opentelemetry.proto.common.v1.AnyValue body = 2;
     */
    body?: AnyValue;
    /**
     * See 'attributes' in the LogResource proto for more details.
     * Example: ``attributes { values { key: "user_agent" value { string_value: "%REQ(USER-AGENT)%" } } }``.
     *
     * @generated from protobuf field: opentelemetry.proto.common.v1.KeyValueList attributes = 3;
     */
    attributes?: KeyValueList;
}
// @generated message type with reflection information, may provide speed optimized methods
class OpenTelemetryAccessLogConfig$Type extends MessageType<OpenTelemetryAccessLogConfig> {
    constructor() {
        super("envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig", [
            { no: 1, name: "common_config", kind: "message", T: () => CommonGrpcAccessLogConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 5, name: "disable_builtin_labels", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "resource_attributes", kind: "message", T: () => KeyValueList },
            { no: 2, name: "body", kind: "message", T: () => AnyValue },
            { no: 3, name: "attributes", kind: "message", T: () => KeyValueList }
        ]);
    }
    create(value?: PartialMessage<OpenTelemetryAccessLogConfig>): OpenTelemetryAccessLogConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.disableBuiltinLabels = false;
        if (value !== undefined)
            reflectionMergePartial<OpenTelemetryAccessLogConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenTelemetryAccessLogConfig): OpenTelemetryAccessLogConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig common_config */ 1:
                    message.commonConfig = CommonGrpcAccessLogConfig.internalBinaryRead(reader, reader.uint32(), options, message.commonConfig);
                    break;
                case /* bool disable_builtin_labels */ 5:
                    message.disableBuiltinLabels = reader.bool();
                    break;
                case /* opentelemetry.proto.common.v1.KeyValueList resource_attributes */ 4:
                    message.resourceAttributes = KeyValueList.internalBinaryRead(reader, reader.uint32(), options, message.resourceAttributes);
                    break;
                case /* opentelemetry.proto.common.v1.AnyValue body */ 2:
                    message.body = AnyValue.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                case /* opentelemetry.proto.common.v1.KeyValueList attributes */ 3:
                    message.attributes = KeyValueList.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenTelemetryAccessLogConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig common_config = 1; */
        if (message.commonConfig)
            CommonGrpcAccessLogConfig.internalBinaryWrite(message.commonConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool disable_builtin_labels = 5; */
        if (message.disableBuiltinLabels !== false)
            writer.tag(5, WireType.Varint).bool(message.disableBuiltinLabels);
        /* opentelemetry.proto.common.v1.KeyValueList resource_attributes = 4; */
        if (message.resourceAttributes)
            KeyValueList.internalBinaryWrite(message.resourceAttributes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* opentelemetry.proto.common.v1.AnyValue body = 2; */
        if (message.body)
            AnyValue.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* opentelemetry.proto.common.v1.KeyValueList attributes = 3; */
        if (message.attributes)
            KeyValueList.internalBinaryWrite(message.attributes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig
 */
export const OpenTelemetryAccessLogConfig = new OpenTelemetryAccessLogConfig$Type();
