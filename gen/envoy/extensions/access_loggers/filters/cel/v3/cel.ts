// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/access_loggers/filters/cel/v3/cel.proto" (package "envoy.extensions.access_loggers.filters.cel.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: ExpressionFilter]
// [#extension: envoy.access_loggers.extension_filters.cel]

/**
 * ExpressionFilter is an access logging filter that evaluates configured
 * symbolic Common Expression Language expressions to inform the decision
 * to generate an access log.
 *
 * @generated from protobuf message envoy.extensions.access_loggers.filters.cel.v3.ExpressionFilter
 */
export interface ExpressionFilter {
    /**
     * Expression that, when evaluated, will be used to filter access logs.
     * Expressions are based on the set of Envoy :ref:`attributes <arch_overview_attributes>`.
     * The provided expression must evaluate to true for logging (expression errors are considered false).
     * Examples:
     * - ``response.code >= 400``
     * - ``(connection.mtls && request.headers['x-log-mtls'] == 'true') || request.url_path.contains('v1beta3')``
     *
     * @generated from protobuf field: string expression = 1;
     */
    expression: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExpressionFilter$Type extends MessageType<ExpressionFilter> {
    constructor() {
        super("envoy.extensions.access_loggers.filters.cel.v3.ExpressionFilter", [
            { no: 1, name: "expression", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExpressionFilter>): ExpressionFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.expression = "";
        if (value !== undefined)
            reflectionMergePartial<ExpressionFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpressionFilter): ExpressionFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string expression */ 1:
                    message.expression = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpressionFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string expression = 1; */
        if (message.expression !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.expression);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.access_loggers.filters.cel.v3.ExpressionFilter
 */
export const ExpressionFilter = new ExpressionFilter$Type();
