// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/upstreams/tcp/v3/tcp_protocol_options.proto" (package "envoy.extensions.upstreams.tcp.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../google/protobuf/duration";
// [#protodoc-title: TCP Protocol Options]
// [#extension: envoy.upstreams.tcp.tcp_protocol_options]

// TCProtocolOptions specifies TCP upstream protocol options. This object
// is used in
// :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
// keyed by the name ``envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions``.
// 
// .. code::
// 
//   clusters:
//     - name: some_service
//       connect_timeout: 5s
//       typed_extension_protocol_options:
//         envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions:
//           "@type": type.googleapis.com/envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions
//           idle_timeout: 10m
//        .... [further cluster config]

/**
 * @generated from protobuf message envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions
 */
export interface TcpProtocolOptions {
    /**
     * The idle timeout for the connection. The idle timeout is defined as the period in which
     * the connection is not associated with a downstream connection. When the idle timeout is
     * reached, the connection will be closed.
     *
     * If not set, the default idle timeout is 10 minutes. To disable idle timeouts, explicitly set this to 0.
     *
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     *
     * @generated from protobuf field: google.protobuf.Duration idle_timeout = 1;
     */
    idleTimeout?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class TcpProtocolOptions$Type extends MessageType<TcpProtocolOptions> {
    constructor() {
        super("envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions", [
            { no: 1, name: "idle_timeout", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<TcpProtocolOptions>): TcpProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TcpProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpProtocolOptions): TcpProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration idle_timeout */ 1:
                    message.idleTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.idleTimeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration idle_timeout = 1; */
        if (message.idleTimeout)
            Duration.internalBinaryWrite(message.idleTimeout, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions
 */
export const TcpProtocolOptions = new TcpProtocolOptions$Type();
