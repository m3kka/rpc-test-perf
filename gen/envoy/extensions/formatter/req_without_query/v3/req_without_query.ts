// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/formatter/req_without_query/v3/req_without_query.proto" (package "envoy.extensions.formatter.req_without_query.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Formatter extension for printing request without query string]
// [#extension: envoy.formatter.req_without_query]

// ReqWithoutQuery formatter extension implements REQ_WITHOUT_QUERY command operator that
// works the same way as :ref:`REQ <config_access_log_format_req>` except that it will
// remove the query string. It is used to avoid logging any sensitive information into
// the access log.
// See :ref:`here <config_access_log>` for more information on access log configuration.

// %REQ_WITHOUT_QUERY(X?Y):Z%
//   An HTTP request header where X is the main HTTP header, Y is the alternative one, and Z is an
//   optional parameter denoting string truncation up to Z characters long. The value is taken from
//   the HTTP request header named X first and if it's not set, then request header Y is used. If
//   none of the headers are present '-' symbol will be in the log.

/**
 * Configuration for the request without query formatter.
 *
 * @generated from protobuf message envoy.extensions.formatter.req_without_query.v3.ReqWithoutQuery
 */
export interface ReqWithoutQuery {
}
// @generated message type with reflection information, may provide speed optimized methods
class ReqWithoutQuery$Type extends MessageType<ReqWithoutQuery> {
    constructor() {
        super("envoy.extensions.formatter.req_without_query.v3.ReqWithoutQuery", []);
    }
    create(value?: PartialMessage<ReqWithoutQuery>): ReqWithoutQuery {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReqWithoutQuery>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReqWithoutQuery): ReqWithoutQuery {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReqWithoutQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.formatter.req_without_query.v3.ReqWithoutQuery
 */
export const ReqWithoutQuery = new ReqWithoutQuery$Type();
