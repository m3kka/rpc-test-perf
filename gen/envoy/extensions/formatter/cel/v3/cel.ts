// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/formatter/cel/v3/cel.proto" (package "envoy.extensions.formatter.cel.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Formatter extension for printing CEL expressions]
// [#extension: envoy.formatter.cel]

// CEL formatter extension implements CEL command operator that evaluates configured
// symbolic Common Expression Language expressions to generate an access log.
// 
// See :ref:`here <config_access_log>` for more information on access log configuration.

// %CEL(EXPRESSION):Z%
// Expressions are based on the set of Envoy :ref:`attributes <arch_overview_attributes>`.
// Expression errors are considered `-`. Z is an optional parameter denoting string
// truncation up to Z characters long.
// 
// Examples:
// - ``%CEL(response.code)%``
// - ``%CEL(connection.mtls)%``
// - ``%CEL(request.headers['x-envoy-original-path']):10%``
// - ``%CEL(request.headers['x-log-mtls'] || request.url_path.contains('v1beta3'))%``

/**
 * Configuration for the CEL formatter.
 *
 * @generated from protobuf message envoy.extensions.formatter.cel.v3.Cel
 */
export interface Cel {
}
// @generated message type with reflection information, may provide speed optimized methods
class Cel$Type extends MessageType<Cel> {
    constructor() {
        super("envoy.extensions.formatter.cel.v3.Cel", []);
    }
    create(value?: PartialMessage<Cel>): Cel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Cel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cel): Cel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Cel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.formatter.cel.v3.Cel
 */
export const Cel = new Cel$Type();
