// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/bootstrap/internal_listener/v3/internal_listener.proto" (package "envoy.extensions.bootstrap.internal_listener.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
// [#protodoc-title: Internal Listener]
// Internal Listener :ref:`overview <config_internal_listener>`.
// [#extension: envoy.bootstrap.internal_listener]

/**
 * Configuration for internal listener.
 *
 * @generated from protobuf message envoy.extensions.bootstrap.internal_listener.v3.InternalListener
 */
export interface InternalListener {
    /**
     * The internal listener client connection buffer size in KiB.
     * For example, if ``buffer_size_kb`` is set to 5, then the actual buffer size is
     * 5 KiB = 5 * 1024 bytes.
     * If the ``buffer_size_kb`` is not specified, the buffer size is set to 1024 KiB.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value buffer_size_kb = 1;
     */
    bufferSizeKb?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class InternalListener$Type extends MessageType<InternalListener> {
    constructor() {
        super("envoy.extensions.bootstrap.internal_listener.v3.InternalListener", [
            { no: 1, name: "buffer_size_kb", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 8192, gte: 1 } } } }
        ]);
    }
    create(value?: PartialMessage<InternalListener>): InternalListener {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InternalListener>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InternalListener): InternalListener {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value buffer_size_kb */ 1:
                    message.bufferSizeKb = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.bufferSizeKb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InternalListener, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value buffer_size_kb = 1; */
        if (message.bufferSizeKb)
            UInt32Value.internalBinaryWrite(message.bufferSizeKb, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.bootstrap.internal_listener.v3.InternalListener
 */
export const InternalListener = new InternalListener$Type();
