// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/http/early_header_mutation/header_mutation/v3/header_mutation.proto (package envoy.extensions.http.early_header_mutation.header_mutation.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HeaderMutation as HeaderMutation$1 } from "../../../../../config/common/mutation_rules/v3/mutation_rules_pb.js";

/**
 * This extension allows for early header mutation by the substitution formatter.
 *
 * @generated from message envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation
 */
export declare class HeaderMutation extends Message<HeaderMutation> {
  /**
   * @generated from field: repeated envoy.config.common.mutation_rules.v3.HeaderMutation mutations = 1;
   */
  mutations: HeaderMutation$1[];

  constructor(data?: PartialMessage<HeaderMutation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMutation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMutation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMutation;

  static equals(a: HeaderMutation | PlainMessage<HeaderMutation> | undefined, b: HeaderMutation | PlainMessage<HeaderMutation> | undefined): boolean;
}

