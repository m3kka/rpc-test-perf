// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/http/stateful_session/header/v3/header.proto" (package "envoy.extensions.http.stateful_session.header.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Header based stateful session extension]

/**
 * This extension allows the session state to be tracked via request headers.
 *
 * This extension encodes the address of the upstream host selected by the load balancer
 * into a response header with the :ref:`header configuration
 * <envoy_v3_api_msg_extensions.http.stateful_session.header.v3.HeaderBasedSessionState>`.
 * When new requests are incoming, this extension will try to parse the specific upstream host
 * address by header name. If the address parsed from the header corresponds to a valid
 * upstream host, this upstream host will be selected first. See :ref:`stateful session filter
 * <envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession>`.
 *
 * For example, if the header name is set to ``session-header``, envoy will prefer ``1.2.3.4:80``
 * as the upstream host when the request contains the following header:
 *
 * .. code-block:: none
 *
 *     session-header: "MS4yLjMuNDo4MA=="
 *
 * When processing the upstream response, if ``1.2.3.4:80`` is indeed the final choice the extension
 * does nothing. If ``1.2.3.4:80`` is not the final choice, the new selected host will be set to
 * response headers (via the ``session-header`` response header).
 *
 * [#extension: envoy.http.stateful_session.header]
 *
 * @generated from protobuf message envoy.extensions.http.stateful_session.header.v3.HeaderBasedSessionState
 */
export interface HeaderBasedSessionState {
    /**
     * The name that will be used to obtain header value from downstream HTTP request or generate
     * new header for downstream.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HeaderBasedSessionState$Type extends MessageType<HeaderBasedSessionState> {
    constructor() {
        super("envoy.extensions.http.stateful_session.header.v3.HeaderBasedSessionState", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<HeaderBasedSessionState>): HeaderBasedSessionState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<HeaderBasedSessionState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderBasedSessionState): HeaderBasedSessionState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderBasedSessionState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.stateful_session.header.v3.HeaderBasedSessionState
 */
export const HeaderBasedSessionState = new HeaderBasedSessionState$Type();
