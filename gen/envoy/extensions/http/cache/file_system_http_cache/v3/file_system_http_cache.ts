// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/http/cache/file_system_http_cache/v3/file_system_http_cache.proto" (package "envoy.extensions.http.cache.file_system_http_cache.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../google/protobuf/duration";
import { UInt64Value } from "../../../../../../google/protobuf/wrappers";
import { AsyncFileManagerConfig } from "../../../../common/async_files/v3/async_file_manager";
// [#protodoc-title: FileSystemHttpCacheConfig]
// [#extension: envoy.extensions.http.cache.file_system_http_cache]

/**
 * Configuration for a cache implementation that caches in the local file system.
 *
 * By default this cache uses a least-recently-used eviction strategy.
 *
 * For implementation details, see `DESIGN.md <https://github.com/envoyproxy/envoy/blob/main/source/extensions/http/cache/file_system_http_cache/DESIGN.md>`_.
 * [#next-free-field: 11]
 *
 * @generated from protobuf message envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig
 */
export interface FileSystemHttpCacheConfig {
    /**
     * Configuration of a manager for how the file system is used asynchronously.
     *
     * @generated from protobuf field: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1;
     */
    managerConfig?: AsyncFileManagerConfig;
    /**
     * Path at which the cache files will be stored.
     *
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     *
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     *
     * @generated from protobuf field: string cache_path = 2;
     */
    cachePath: string;
    /**
     * The maximum size of the cache in bytes - when reached, cache eviction is triggered.
     *
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     *
     * If unset there is no limit except file system failure.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_cache_size_bytes = 3;
     */
    maxCacheSizeBytes?: UInt64Value;
    /**
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     *
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     *
     * If unset there is no limit.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_individual_cache_entry_size_bytes = 4;
     */
    maxIndividualCacheEntrySizeBytes?: UInt64Value;
    /**
     * The maximum number of cache entries - when reached, cache eviction is triggered.
     *
     * If unset there is no limit.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_cache_entry_count = 5;
     */
    maxCacheEntryCount?: UInt64Value;
    /**
     * A number of folders into which to subdivide the cache.
     *
     * Setting this can help with performance in file systems where a large number of inodes
     * in a single branch degrades performance. The optimal value in that case would be
     * ``sqrt(expected_cache_entry_count)``.
     *
     * On file systems that perform well with many inodes, the default value of 1 should be used.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: uint32 cache_subdivisions = 6;
     */
    cacheSubdivisions: number;
    /**
     * The amount of the maximum cache size or count to evict when cache eviction is
     * triggered. For example, if ``max_cache_size_bytes`` is 10000000 and ``evict_fraction``
     * is 0.2, then when the cache exceeds 10MB, entries will be evicted until the cache size is
     * less than or equal to 8MB.
     *
     * The default value of 0 means when the cache exceeds 10MB, entries will be evicted only
     * until the cache is less than or equal to 10MB.
     *
     * Evicting a larger fraction will mean the eviction thread will run less often (sparing
     * CPU load) at the cost of more cache misses due to the extra evicted entries.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: float evict_fraction = 7;
     */
    evictFraction: number;
    /**
     * The longest amount of time to wait before running a cache eviction pass. An eviction
     * pass may not necessarily remove any files, but it will update the cache state to match
     * the on-disk state. This can be important if multiple instances are accessing the same
     * cache in parallel. (e.g. if two instances each independently added non-overlapping 10MB
     * of content to a cache with a 15MB limit, neither instance would be aware that the limit
     * was exceeded without this synchronizing pass.)
     *
     * If an eviction pass has not happened within this duration, the eviction thread will
     * be awoken and perform an eviction pass.
     *
     * If unset, there will be no eviction passes except those triggered by cache limits.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: google.protobuf.Duration max_eviction_period = 8;
     */
    maxEvictionPeriod?: Duration;
    /**
     * The shortest amount of time between cache eviction passes. This can be used to reduce
     * eviction churn, if your cache max size can be flexible. If a cache eviction pass already
     * occurred more recently than this period when another would be triggered, that new
     * pass is cancelled.
     *
     * This means the cache can potentially grow beyond ``max_cache_size_bytes`` by as much as
     * can be written within the duration specified.
     *
     * Generally you would use *either* ``min_eviction_period`` *or* ``evict_fraction`` to
     * reduce churn. Both together will work but since they're both aiming for the same goal,
     * it's simpler not to.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: google.protobuf.Duration min_eviction_period = 9;
     */
    minEvictionPeriod?: Duration;
    /**
     * If true, and the cache path does not exist, attempt to create the cache path, including
     * any missing directories leading up to it. On failure, the config is rejected.
     *
     * If false, and the cache path does not exist, the config is rejected.
     *
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: bool create_cache_path = 10;
     */
    createCachePath: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileSystemHttpCacheConfig$Type extends MessageType<FileSystemHttpCacheConfig> {
    constructor() {
        super("envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig", [
            { no: 1, name: "manager_config", kind: "message", T: () => AsyncFileManagerConfig, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "cache_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "max_cache_size_bytes", kind: "message", T: () => UInt64Value },
            { no: 4, name: "max_individual_cache_entry_size_bytes", kind: "message", T: () => UInt64Value },
            { no: 5, name: "max_cache_entry_count", kind: "message", T: () => UInt64Value },
            { no: 6, name: "cache_subdivisions", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "evict_fraction", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "max_eviction_period", kind: "message", T: () => Duration },
            { no: 9, name: "min_eviction_period", kind: "message", T: () => Duration },
            { no: 10, name: "create_cache_path", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FileSystemHttpCacheConfig>): FileSystemHttpCacheConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cachePath = "";
        message.cacheSubdivisions = 0;
        message.evictFraction = 0;
        message.createCachePath = false;
        if (value !== undefined)
            reflectionMergePartial<FileSystemHttpCacheConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileSystemHttpCacheConfig): FileSystemHttpCacheConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config */ 1:
                    message.managerConfig = AsyncFileManagerConfig.internalBinaryRead(reader, reader.uint32(), options, message.managerConfig);
                    break;
                case /* string cache_path */ 2:
                    message.cachePath = reader.string();
                    break;
                case /* google.protobuf.UInt64Value max_cache_size_bytes */ 3:
                    message.maxCacheSizeBytes = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxCacheSizeBytes);
                    break;
                case /* google.protobuf.UInt64Value max_individual_cache_entry_size_bytes */ 4:
                    message.maxIndividualCacheEntrySizeBytes = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxIndividualCacheEntrySizeBytes);
                    break;
                case /* google.protobuf.UInt64Value max_cache_entry_count */ 5:
                    message.maxCacheEntryCount = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxCacheEntryCount);
                    break;
                case /* uint32 cache_subdivisions */ 6:
                    message.cacheSubdivisions = reader.uint32();
                    break;
                case /* float evict_fraction */ 7:
                    message.evictFraction = reader.float();
                    break;
                case /* google.protobuf.Duration max_eviction_period */ 8:
                    message.maxEvictionPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxEvictionPeriod);
                    break;
                case /* google.protobuf.Duration min_eviction_period */ 9:
                    message.minEvictionPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.minEvictionPeriod);
                    break;
                case /* bool create_cache_path */ 10:
                    message.createCachePath = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileSystemHttpCacheConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1; */
        if (message.managerConfig)
            AsyncFileManagerConfig.internalBinaryWrite(message.managerConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string cache_path = 2; */
        if (message.cachePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cachePath);
        /* google.protobuf.UInt64Value max_cache_size_bytes = 3; */
        if (message.maxCacheSizeBytes)
            UInt64Value.internalBinaryWrite(message.maxCacheSizeBytes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value max_individual_cache_entry_size_bytes = 4; */
        if (message.maxIndividualCacheEntrySizeBytes)
            UInt64Value.internalBinaryWrite(message.maxIndividualCacheEntrySizeBytes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value max_cache_entry_count = 5; */
        if (message.maxCacheEntryCount)
            UInt64Value.internalBinaryWrite(message.maxCacheEntryCount, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint32 cache_subdivisions = 6; */
        if (message.cacheSubdivisions !== 0)
            writer.tag(6, WireType.Varint).uint32(message.cacheSubdivisions);
        /* float evict_fraction = 7; */
        if (message.evictFraction !== 0)
            writer.tag(7, WireType.Bit32).float(message.evictFraction);
        /* google.protobuf.Duration max_eviction_period = 8; */
        if (message.maxEvictionPeriod)
            Duration.internalBinaryWrite(message.maxEvictionPeriod, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration min_eviction_period = 9; */
        if (message.minEvictionPeriod)
            Duration.internalBinaryWrite(message.minEvictionPeriod, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool create_cache_path = 10; */
        if (message.createCachePath !== false)
            writer.tag(10, WireType.Varint).bool(message.createCachePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig
 */
export const FileSystemHttpCacheConfig = new FileSystemHttpCacheConfig$Type();
