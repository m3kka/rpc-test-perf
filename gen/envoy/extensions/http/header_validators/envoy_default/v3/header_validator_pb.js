// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/http/header_validators/envoy_default/v3/header_validator.proto (package envoy.extensions.http.header_validators.envoy_default.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * This extension validates that HTTP request and response headers are well formed according to respective RFCs.
 *
 * #. HTTP/1 header map validity according to `RFC 7230 section 3.2 <https://datatracker.ietf.org/doc/html/rfc7230#section-3.2>`_
 * #. Syntax of HTTP/1 request target URI and response status
 * #. HTTP/2 header map validity according to `RFC 7540 section 8.1.2 <https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2>`_
 * #. Syntax of HTTP/2 pseudo headers
 * #. HTTP/3 header map validity according to `RFC 9114 section 4.3  <https://www.rfc-editor.org/rfc/rfc9114.html>`_
 * #. Syntax of HTTP/3 pseudo headers
 * #. Syntax of Content-Length and Transfer-Encoding
 * #. Validation of HTTP/1 requests with both ``Content-Length`` and ``Transfer-Encoding`` headers
 * #. Normalization of the URI path according to `Normalization and Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_
 *    without `case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_
 *
 * [#comment:TODO(yanavlasov): Put #extension: envoy.http.header_validators.envoy_default after it is not hidden any more]
 * [#next-free-field: 6]
 *
 * @generated from message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig
 */
export const HeaderValidatorConfig = proto3.makeMessageType(
  "envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig",
  () => [
    { no: 1, name: "http1_protocol_options", kind: "message", T: HeaderValidatorConfig_Http1ProtocolOptions },
    { no: 2, name: "uri_path_normalization_options", kind: "message", T: HeaderValidatorConfig_UriPathNormalizationOptions },
    { no: 3, name: "restrict_http_methods", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "headers_with_underscores_action", kind: "enum", T: proto3.getEnumType(HeaderValidatorConfig_HeadersWithUnderscoresAction) },
    { no: 5, name: "strip_fragment_from_path", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Action to take when Envoy receives client request with header names containing underscore
 * characters.
 * Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
 * as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
 * characters.
 *
 * @generated from enum envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction
 */
export const HeaderValidatorConfig_HeadersWithUnderscoresAction = proto3.makeEnum(
  "envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction",
  [
    {no: 0, name: "ALLOW"},
    {no: 1, name: "REJECT_REQUEST"},
    {no: 2, name: "DROP_HEADER"},
  ],
);

/**
 * @generated from message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
 */
export const HeaderValidatorConfig_UriPathNormalizationOptions = proto3.makeMessageType(
  "envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions",
  () => [
    { no: 1, name: "skip_path_normalization", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "skip_merging_slashes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "path_with_escaped_slashes_action", kind: "enum", T: proto3.getEnumType(HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) },
  ],
  {localName: "HeaderValidatorConfig_UriPathNormalizationOptions"},
);

/**
 * Determines the action for requests that contain ``%2F``, ``%2f``, ``%5C`` or ``%5c`` sequences in the URI path.
 * This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
 *
 * @generated from enum envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction
 */
export const HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = proto3.makeEnum(
  "envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction",
  [
    {no: 0, name: "IMPLEMENTATION_SPECIFIC_DEFAULT"},
    {no: 1, name: "KEEP_UNCHANGED"},
    {no: 2, name: "REJECT_REQUEST"},
    {no: 3, name: "UNESCAPE_AND_REDIRECT"},
    {no: 4, name: "UNESCAPE_AND_FORWARD"},
  ],
);

/**
 * @generated from message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions
 */
export const HeaderValidatorConfig_Http1ProtocolOptions = proto3.makeMessageType(
  "envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions",
  () => [
    { no: 1, name: "allow_chunked_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "HeaderValidatorConfig_Http1ProtocolOptions"},
);

