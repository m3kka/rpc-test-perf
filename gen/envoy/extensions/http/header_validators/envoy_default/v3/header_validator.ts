// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/http/header_validators/envoy_default/v3/header_validator.proto" (package "envoy.extensions.http.header_validators.envoy_default.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Envoy's default Header Validator config]

/**
 * This extension validates that HTTP request and response headers are well formed according to respective RFCs.
 *
 * #. HTTP/1 header map validity according to `RFC 7230 section 3.2 <https://datatracker.ietf.org/doc/html/rfc7230#section-3.2>`_
 * #. Syntax of HTTP/1 request target URI and response status
 * #. HTTP/2 header map validity according to `RFC 7540 section 8.1.2 <https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2>`_
 * #. Syntax of HTTP/2 pseudo headers
 * #. HTTP/3 header map validity according to `RFC 9114 section 4.3  <https://www.rfc-editor.org/rfc/rfc9114.html>`_
 * #. Syntax of HTTP/3 pseudo headers
 * #. Syntax of Content-Length and Transfer-Encoding
 * #. Validation of HTTP/1 requests with both ``Content-Length`` and ``Transfer-Encoding`` headers
 * #. Normalization of the URI path according to `Normalization and Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_
 *    without `case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_
 *
 * [#comment:TODO(yanavlasov): Put #extension: envoy.http.header_validators.envoy_default after it is not hidden any more]
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig
 */
export interface HeaderValidatorConfig {
    /**
     * @generated from protobuf field: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options = 1;
     */
    http1ProtocolOptions?: HeaderValidatorConfig_Http1ProtocolOptions;
    /**
     * The URI path normalization options.
     * By default Envoy normalizes URI path using the default values of the :ref:`UriPathNormalizationOptions
     * <envoy_v3_api_msg_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions>`.
     * URI path transformations specified by the ``uri_path_normalization_options`` configuration can be applied to a portion
     * of requests by setting the ``envoy_default_header_validator.uri_path_transformations`` runtime value.
     * Caution: disabling path normalization may lead to path confusion vulnerabilities in access control or incorrect service
     * selection.
     *
     * @generated from protobuf field: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options = 2;
     */
    uriPathNormalizationOptions?: HeaderValidatorConfig_UriPathNormalizationOptions;
    /**
     * Restrict HTTP methods to these defined in the `RFC 7231 section 4.1 <https://datatracker.ietf.org/doc/html/rfc7231#section-4.1>`_
     * Envoy will respond with 400 to requests with disallowed methods.
     * By default methods with arbitrary names are accepted.
     *
     * @generated from protobuf field: bool restrict_http_methods = 3;
     */
    restrictHttpMethods: boolean;
    /**
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     *
     * @generated from protobuf field: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction headers_with_underscores_action = 4;
     */
    headersWithUnderscoresAction: HeaderValidatorConfig_HeadersWithUnderscoresAction;
    /**
     * Allow requests with fragment in URL path and strip the fragment before request processing.
     * By default Envoy rejects requests with fragment in URL path.
     *
     * @generated from protobuf field: bool strip_fragment_from_path = 5;
     */
    stripFragmentFromPath: boolean;
}
/**
 * @generated from protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
 */
export interface HeaderValidatorConfig_UriPathNormalizationOptions {
    /**
     * Should paths be normalized according to RFC 3986?
     * This operation overwrites the original request URI path and the new path is used for processing of
     * the request by HTTP filters and proxied to the upstream service.
     * Envoy will respond with 400 to requests with malformed paths that fail path normalization.
     * The default behavior is to normalize the path.
     * This value may be overridden by the runtime variable
     * :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
     * See `Normalization and Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_
     * for details of normalization.
     * Note that Envoy does not perform
     * `case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_
     * URI path normalization can be applied to a portion of requests by setting the
     * ``envoy_default_header_validator.path_normalization`` runtime value.
     *
     * @generated from protobuf field: bool skip_path_normalization = 1;
     */
    skipPathNormalization: boolean;
    /**
     * Determines if adjacent slashes in the path are merged into one.
     * This operation overwrites the original request URI path and the new path is used for processing of
     * the request by HTTP filters and proxied to the upstream service.
     * Setting this option to true will cause incoming requests with path ``//dir///file`` to not match against
     * route with ``prefix`` match set to ``/dir``. Defaults to ``false``. Note that slash merging is not part of
     * `HTTP spec <https://datatracker.ietf.org/doc/html/rfc3986>`_ and is provided for convenience.
     * Merging of slashes in URI path can be applied to a portion of requests by setting the
     * ``envoy_default_header_validator.merge_slashes`` runtime value.
     *
     * @generated from protobuf field: bool skip_merging_slashes = 2;
     */
    skipMergingSlashes: boolean;
    /**
     * The action to take when request URL path contains escaped slash sequences (``%2F``, ``%2f``, ``%5C`` and ``%5c``).
     * This operation may overwrite the original request URI path and the new path is used for processing of
     * the request by HTTP filters and proxied to the upstream service.
     *
     * @generated from protobuf field: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction path_with_escaped_slashes_action = 3;
     */
    pathWithEscapedSlashesAction: HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction;
}
/**
 * Determines the action for requests that contain ``%2F``, ``%2f``, ``%5C`` or ``%5c`` sequences in the URI path.
 * This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
 *
 * @generated from protobuf enum envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction
 */
export enum HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction {
    /**
     * Default behavior specific to implementation (i.e. Envoy) of this configuration option.
     * Envoy, by default, takes the ``KEEP_UNCHANGED`` action.
     * NOTE: the implementation may change the default behavior at-will.
     *
     * @generated from protobuf enum value: IMPLEMENTATION_SPECIFIC_DEFAULT = 0;
     */
    IMPLEMENTATION_SPECIFIC_DEFAULT = 0,
    /**
     * Keep escaped slashes.
     *
     * @generated from protobuf enum value: KEEP_UNCHANGED = 1;
     */
    KEEP_UNCHANGED = 1,
    /**
     * Reject client request with the 400 status. gRPC requests will be rejected with the ``INTERNAL`` (13) error code.
     * The ``http#.downstream_rq_failed_path_normalization`` counter is incremented for each rejected request.
     *
     * @generated from protobuf enum value: REJECT_REQUEST = 2;
     */
    REJECT_REQUEST = 2,
    /**
     * Unescape ``%2F`` and ``%5C`` sequences and redirect the request to the new path if these sequences were present.
     * The redirect occurs after path normalization and merge slashes transformations if they were configured.
     * NOTE: gRPC requests will be rejected with the ``INTERNAL`` (13) error code.
     * This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
     * traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
     * The ``http#.downstream_rq_redirected_with_normalized_path`` counter is incremented for each
     * redirected request.
     *
     * @generated from protobuf enum value: UNESCAPE_AND_REDIRECT = 3;
     */
    UNESCAPE_AND_REDIRECT = 3,
    /**
     * Unescape ``%2F`` and ``%5C`` sequences.
     * Note: this option should not be enabled if intermediaries perform path based access control as
     * it may lead to path confusion vulnerabilities.
     *
     * @generated from protobuf enum value: UNESCAPE_AND_FORWARD = 4;
     */
    UNESCAPE_AND_FORWARD = 4
}
/**
 * @generated from protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions
 */
export interface HeaderValidatorConfig_Http1ProtocolOptions {
    /**
     * Allows Envoy to process HTTP/1 requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
     * headers set. By default such messages are rejected, but if option is enabled - Envoy will
     * remove the ``Content-Length`` header and process the message.
     * See `RFC7230, sec. 3.3.3 <https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3>`_ for details.
     *
     * .. attention::
     *   Enabling this option might lead to request smuggling vulnerabilities, especially if traffic
     *   is proxied via multiple layers of proxies.
     *
     * @generated from protobuf field: bool allow_chunked_length = 1;
     */
    allowChunkedLength: boolean;
}
/**
 * Action to take when Envoy receives client request with header names containing underscore
 * characters.
 * Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
 * as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
 * characters.
 *
 * @generated from protobuf enum envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction
 */
export enum HeaderValidatorConfig_HeadersWithUnderscoresAction {
    /**
     * Allow headers with underscores. This is the default behavior.
     *
     * @generated from protobuf enum value: ALLOW = 0;
     */
    ALLOW = 0,
    /**
     * Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
     * end with the stream reset. The
     * :ref:`httpN.requests_rejected_with_underscores_in_headers <config_http_conn_man_stats_per_codec>` counter
     * is incremented for each rejected request.
     *
     * @generated from protobuf enum value: REJECT_REQUEST = 1;
     */
    REJECT_REQUEST = 1,
    /**
     * Drop the client header with name containing underscores. The header is dropped before the filter chain is
     * invoked and as such filters will not see dropped headers. The
     * :ref:`httpN.dropped_headers_with_underscores <config_http_conn_man_stats_per_codec>` is incremented for
     * each dropped header.
     *
     * @generated from protobuf enum value: DROP_HEADER = 2;
     */
    DROP_HEADER = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class HeaderValidatorConfig$Type extends MessageType<HeaderValidatorConfig> {
    constructor() {
        super("envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig", [
            { no: 1, name: "http1_protocol_options", kind: "message", T: () => HeaderValidatorConfig_Http1ProtocolOptions },
            { no: 2, name: "uri_path_normalization_options", kind: "message", T: () => HeaderValidatorConfig_UriPathNormalizationOptions },
            { no: 3, name: "restrict_http_methods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "headers_with_underscores_action", kind: "enum", T: () => ["envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction", HeaderValidatorConfig_HeadersWithUnderscoresAction] },
            { no: 5, name: "strip_fragment_from_path", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HeaderValidatorConfig>): HeaderValidatorConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.restrictHttpMethods = false;
        message.headersWithUnderscoresAction = 0;
        message.stripFragmentFromPath = false;
        if (value !== undefined)
            reflectionMergePartial<HeaderValidatorConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderValidatorConfig): HeaderValidatorConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options */ 1:
                    message.http1ProtocolOptions = HeaderValidatorConfig_Http1ProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.http1ProtocolOptions);
                    break;
                case /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options */ 2:
                    message.uriPathNormalizationOptions = HeaderValidatorConfig_UriPathNormalizationOptions.internalBinaryRead(reader, reader.uint32(), options, message.uriPathNormalizationOptions);
                    break;
                case /* bool restrict_http_methods */ 3:
                    message.restrictHttpMethods = reader.bool();
                    break;
                case /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction headers_with_underscores_action */ 4:
                    message.headersWithUnderscoresAction = reader.int32();
                    break;
                case /* bool strip_fragment_from_path */ 5:
                    message.stripFragmentFromPath = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderValidatorConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options = 1; */
        if (message.http1ProtocolOptions)
            HeaderValidatorConfig_Http1ProtocolOptions.internalBinaryWrite(message.http1ProtocolOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options = 2; */
        if (message.uriPathNormalizationOptions)
            HeaderValidatorConfig_UriPathNormalizationOptions.internalBinaryWrite(message.uriPathNormalizationOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool restrict_http_methods = 3; */
        if (message.restrictHttpMethods !== false)
            writer.tag(3, WireType.Varint).bool(message.restrictHttpMethods);
        /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction headers_with_underscores_action = 4; */
        if (message.headersWithUnderscoresAction !== 0)
            writer.tag(4, WireType.Varint).int32(message.headersWithUnderscoresAction);
        /* bool strip_fragment_from_path = 5; */
        if (message.stripFragmentFromPath !== false)
            writer.tag(5, WireType.Varint).bool(message.stripFragmentFromPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig
 */
export const HeaderValidatorConfig = new HeaderValidatorConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeaderValidatorConfig_UriPathNormalizationOptions$Type extends MessageType<HeaderValidatorConfig_UriPathNormalizationOptions> {
    constructor() {
        super("envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions", [
            { no: 1, name: "skip_path_normalization", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "skip_merging_slashes", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "path_with_escaped_slashes_action", kind: "enum", T: () => ["envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction", HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<HeaderValidatorConfig_UriPathNormalizationOptions>): HeaderValidatorConfig_UriPathNormalizationOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.skipPathNormalization = false;
        message.skipMergingSlashes = false;
        message.pathWithEscapedSlashesAction = 0;
        if (value !== undefined)
            reflectionMergePartial<HeaderValidatorConfig_UriPathNormalizationOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderValidatorConfig_UriPathNormalizationOptions): HeaderValidatorConfig_UriPathNormalizationOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool skip_path_normalization */ 1:
                    message.skipPathNormalization = reader.bool();
                    break;
                case /* bool skip_merging_slashes */ 2:
                    message.skipMergingSlashes = reader.bool();
                    break;
                case /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction path_with_escaped_slashes_action */ 3:
                    message.pathWithEscapedSlashesAction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderValidatorConfig_UriPathNormalizationOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool skip_path_normalization = 1; */
        if (message.skipPathNormalization !== false)
            writer.tag(1, WireType.Varint).bool(message.skipPathNormalization);
        /* bool skip_merging_slashes = 2; */
        if (message.skipMergingSlashes !== false)
            writer.tag(2, WireType.Varint).bool(message.skipMergingSlashes);
        /* envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction path_with_escaped_slashes_action = 3; */
        if (message.pathWithEscapedSlashesAction !== 0)
            writer.tag(3, WireType.Varint).int32(message.pathWithEscapedSlashesAction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
 */
export const HeaderValidatorConfig_UriPathNormalizationOptions = new HeaderValidatorConfig_UriPathNormalizationOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeaderValidatorConfig_Http1ProtocolOptions$Type extends MessageType<HeaderValidatorConfig_Http1ProtocolOptions> {
    constructor() {
        super("envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions", [
            { no: 1, name: "allow_chunked_length", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HeaderValidatorConfig_Http1ProtocolOptions>): HeaderValidatorConfig_Http1ProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allowChunkedLength = false;
        if (value !== undefined)
            reflectionMergePartial<HeaderValidatorConfig_Http1ProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderValidatorConfig_Http1ProtocolOptions): HeaderValidatorConfig_Http1ProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow_chunked_length */ 1:
                    message.allowChunkedLength = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderValidatorConfig_Http1ProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow_chunked_length = 1; */
        if (message.allowChunkedLength !== false)
            writer.tag(1, WireType.Varint).bool(message.allowChunkedLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions
 */
export const HeaderValidatorConfig_Http1ProtocolOptions = new HeaderValidatorConfig_Http1ProtocolOptions$Type();
