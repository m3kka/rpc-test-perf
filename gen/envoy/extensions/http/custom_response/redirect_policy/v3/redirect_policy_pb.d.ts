// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/http/custom_response/redirect_policy/v3/redirect_policy.proto (package envoy.extensions.http.custom_response.redirect_policy.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RedirectAction } from "../../../../../config/route/v3/route_components_pb.js";
import type { HeaderValueOption } from "../../../../../config/core/v3/base_pb.js";
import type { TypedExtensionConfig } from "../../../../../config/core/v3/extension_pb.js";

/**
 * Custom response policy to internally redirect the original response to a different
 * upstream.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.http.custom_response.redirect_policy.v3.RedirectPolicy
 */
export declare class RedirectPolicy extends Message<RedirectPolicy> {
  /**
   * @generated from oneof envoy.extensions.http.custom_response.redirect_policy.v3.RedirectPolicy.redirect_action_specifier
   */
  redirectActionSpecifier: {
    /**
     * The Http URI to redirect the original request to, to get the custom
     * response.
     * It should be a full FQDN with protocol, host and path.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *    uri: https://www.mydomain.com/path/to/404.txt
     *
     *
     * @generated from field: string uri = 1;
     */
    value: string;
    case: "uri";
  } | {
    /**
     * Specify elements of the redirect url individually.
     * Note: Do not specify the `response_code` field in `redirect_action`, use
     * `status_code` instead.
     * The following fields in `redirect_action` are currently not supported,
     * and specifying them will cause the config to be rejected:
     * - `prefix_rewrite`
     * - `regex_rewrite`
     *
     * @generated from field: envoy.config.route.v3.RedirectAction redirect_action = 2;
     */
    value: RedirectAction;
    case: "redirectAction";
  } | { case: undefined; value?: undefined };

  /**
   * The new response status code if specified. This is used to override the
   * status code of the response from the new upstream if it is not an error status.
   *
   * @generated from field: google.protobuf.UInt32Value status_code = 3;
   */
  statusCode?: number;

  /**
   * HTTP headers to add to the response. This allows the
   * response policy to append, to add or to override headers of
   * the original response for local body, or the custom response from the
   * remote body, before it is sent to a downstream client.
   * Note that these are not applied if the redirected response is an error
   * response.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4;
   */
  responseHeadersToAdd: HeaderValueOption[];

  /**
   * HTTP headers to add to the request before it is internally redirected.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption request_headers_to_add = 5;
   */
  requestHeadersToAdd: HeaderValueOption[];

  /**
   * Custom action to modify request headers before selection of the
   * redirected route.
   * [#comment: TODO(pradeepcrao) add an extension category.]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig modify_request_headers_action = 6;
   */
  modifyRequestHeadersAction?: TypedExtensionConfig;

  constructor(data?: PartialMessage<RedirectPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.http.custom_response.redirect_policy.v3.RedirectPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedirectPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedirectPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedirectPolicy;

  static equals(a: RedirectPolicy | PlainMessage<RedirectPolicy> | undefined, b: RedirectPolicy | PlainMessage<RedirectPolicy> | undefined): boolean;
}

