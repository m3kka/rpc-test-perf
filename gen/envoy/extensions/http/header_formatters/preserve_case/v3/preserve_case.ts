// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/http/header_formatters/preserve_case/v3/preserve_case.proto" (package "envoy.extensions.http.header_formatters.preserve_case.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Preserve case header formatter]
// [#extension: envoy.http.stateful_header_formatters.preserve_case]

/**
 * Configuration for the preserve case header formatter.
 * See the :ref:`header casing <config_http_conn_man_header_casing>` configuration guide for more
 * information.
 *
 * @generated from protobuf message envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig
 */
export interface PreserveCaseFormatterConfig {
    /**
     * Allows forwarding reason phrase text.
     * This is off by default, and a standard reason phrase is used for a corresponding HTTP response code.
     *
     * @generated from protobuf field: bool forward_reason_phrase = 1;
     */
    forwardReasonPhrase: boolean;
    /**
     * Type of formatter to use on headers which are added by Envoy (which are lower case by default).
     * The default type is DEFAULT, use LowerCase on Envoy headers.
     *
     * @generated from protobuf field: envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders formatter_type_on_envoy_headers = 2;
     */
    formatterTypeOnEnvoyHeaders: PreserveCaseFormatterConfig_FormatterTypeOnEnvoyHeaders;
}
/**
 * @generated from protobuf enum envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders
 */
export enum PreserveCaseFormatterConfig_FormatterTypeOnEnvoyHeaders {
    /**
     * Use LowerCase on Envoy added headers.
     *
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * Use ProperCaseHeaderKeyFormatter on Envoy added headers that upper cases the first character
     * in each word. The first character as well as any alpha character following a special
     * character is upper cased.
     *
     * @generated from protobuf enum value: PROPER_CASE = 1;
     */
    PROPER_CASE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PreserveCaseFormatterConfig$Type extends MessageType<PreserveCaseFormatterConfig> {
    constructor() {
        super("envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig", [
            { no: 1, name: "forward_reason_phrase", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "formatter_type_on_envoy_headers", kind: "enum", T: () => ["envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders", PreserveCaseFormatterConfig_FormatterTypeOnEnvoyHeaders], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<PreserveCaseFormatterConfig>): PreserveCaseFormatterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.forwardReasonPhrase = false;
        message.formatterTypeOnEnvoyHeaders = 0;
        if (value !== undefined)
            reflectionMergePartial<PreserveCaseFormatterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreserveCaseFormatterConfig): PreserveCaseFormatterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool forward_reason_phrase */ 1:
                    message.forwardReasonPhrase = reader.bool();
                    break;
                case /* envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders formatter_type_on_envoy_headers */ 2:
                    message.formatterTypeOnEnvoyHeaders = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreserveCaseFormatterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool forward_reason_phrase = 1; */
        if (message.forwardReasonPhrase !== false)
            writer.tag(1, WireType.Varint).bool(message.forwardReasonPhrase);
        /* envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig.FormatterTypeOnEnvoyHeaders formatter_type_on_envoy_headers = 2; */
        if (message.formatterTypeOnEnvoyHeaders !== 0)
            writer.tag(2, WireType.Varint).int32(message.formatterTypeOnEnvoyHeaders);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig
 */
export const PreserveCaseFormatterConfig = new PreserveCaseFormatterConfig$Type();
