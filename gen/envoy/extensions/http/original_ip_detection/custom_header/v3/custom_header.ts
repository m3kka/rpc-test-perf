// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto" (package "envoy.extensions.http.original_ip_detection.custom_header.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HttpStatus } from "../../../../../type/v3/http_status";
// [#protodoc-title: Custom header original IP detection extension]

/**
 * This extension allows for the original downstream remote IP to be detected
 * by reading the value from a configured header name. If the value is successfully parsed
 * as an IP, it'll be treated as the effective downstream remote address and seen as such
 * by all filters. See :ref:`original_ip_detection_extensions
 * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.original_ip_detection_extensions>`
 * for an overview of how extensions operate and what happens when an extension fails
 * to detect the remote IP.
 *
 * [#extension: envoy.http.original_ip_detection.custom_header]
 *
 * @generated from protobuf message envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig
 */
export interface CustomHeaderConfig {
    /**
     * The header name containing the original downstream remote address, if present.
     *
     * Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
     *
     * @generated from protobuf field: string header_name = 1;
     */
    headerName: string;
    /**
     * If set to true, the extension could decide that the detected address should be treated as
     * trusted by the HCM. If the address is considered :ref:`trusted<config_http_conn_man_headers_x-forwarded-for_trusted_client_address>`,
     * it might be used as input to determine if the request is internal (among other things).
     *
     * @generated from protobuf field: bool allow_extension_to_set_address_as_trusted = 2;
     */
    allowExtensionToSetAddressAsTrusted: boolean;
    /**
     * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
     *
     * .. note::
     *   If this is set to < 400 or > 511, the default status 403 will be used instead.
     *
     * @generated from protobuf field: envoy.type.v3.HttpStatus reject_with_status = 3;
     */
    rejectWithStatus?: HttpStatus;
}
// @generated message type with reflection information, may provide speed optimized methods
class CustomHeaderConfig$Type extends MessageType<CustomHeaderConfig> {
    constructor() {
        super("envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig", [
            { no: 1, name: "header_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME", strict: true } } } },
            { no: 2, name: "allow_extension_to_set_address_as_trusted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "reject_with_status", kind: "message", T: () => HttpStatus }
        ]);
    }
    create(value?: PartialMessage<CustomHeaderConfig>): CustomHeaderConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerName = "";
        message.allowExtensionToSetAddressAsTrusted = false;
        if (value !== undefined)
            reflectionMergePartial<CustomHeaderConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomHeaderConfig): CustomHeaderConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header_name */ 1:
                    message.headerName = reader.string();
                    break;
                case /* bool allow_extension_to_set_address_as_trusted */ 2:
                    message.allowExtensionToSetAddressAsTrusted = reader.bool();
                    break;
                case /* envoy.type.v3.HttpStatus reject_with_status */ 3:
                    message.rejectWithStatus = HttpStatus.internalBinaryRead(reader, reader.uint32(), options, message.rejectWithStatus);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomHeaderConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header_name = 1; */
        if (message.headerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headerName);
        /* bool allow_extension_to_set_address_as_trusted = 2; */
        if (message.allowExtensionToSetAddressAsTrusted !== false)
            writer.tag(2, WireType.Varint).bool(message.allowExtensionToSetAddressAsTrusted);
        /* envoy.type.v3.HttpStatus reject_with_status = 3; */
        if (message.rejectWithStatus)
            HttpStatus.internalBinaryWrite(message.rejectWithStatus, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig
 */
export const CustomHeaderConfig = new CustomHeaderConfig$Type();
