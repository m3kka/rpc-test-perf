// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto (package envoy.extensions.http.original_ip_detection.custom_header.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { HttpStatus } from "../../../../../type/v3/http_status_pb.js";

/**
 * This extension allows for the original downstream remote IP to be detected
 * by reading the value from a configured header name. If the value is successfully parsed
 * as an IP, it'll be treated as the effective downstream remote address and seen as such
 * by all filters. See :ref:`original_ip_detection_extensions
 * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.original_ip_detection_extensions>`
 * for an overview of how extensions operate and what happens when an extension fails
 * to detect the remote IP.
 *
 * [#extension: envoy.http.original_ip_detection.custom_header]
 *
 * @generated from message envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig
 */
export declare class CustomHeaderConfig extends Message<CustomHeaderConfig> {
  /**
   * The header name containing the original downstream remote address, if present.
   *
   * Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
   *
   * @generated from field: string header_name = 1;
   */
  headerName: string;

  /**
   * If set to true, the extension could decide that the detected address should be treated as
   * trusted by the HCM. If the address is considered :ref:`trusted<config_http_conn_man_headers_x-forwarded-for_trusted_client_address>`,
   * it might be used as input to determine if the request is internal (among other things).
   *
   * @generated from field: bool allow_extension_to_set_address_as_trusted = 2;
   */
  allowExtensionToSetAddressAsTrusted: boolean;

  /**
   * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
   *
   * .. note::
   *   If this is set to < 400 or > 511, the default status 403 will be used instead.
   *
   * @generated from field: envoy.type.v3.HttpStatus reject_with_status = 3;
   */
  rejectWithStatus?: HttpStatus;

  constructor(data?: PartialMessage<CustomHeaderConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomHeaderConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomHeaderConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomHeaderConfig;

  static equals(a: CustomHeaderConfig | PlainMessage<CustomHeaderConfig> | undefined, b: CustomHeaderConfig | PlainMessage<CustomHeaderConfig> | undefined): boolean;
}

