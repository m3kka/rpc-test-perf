// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/path/match/uri_template/v3/uri_template_match.proto" (package "envoy.extensions.path.match.uri_template.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Uri Template Match Config]
// [#extension: envoy.path.match.uri_template.uri_template_matcher]

/**
 * If specified, the route is a template match rule meaning that the
 * ``:path`` header (without the query string) must match the given
 * ``path_template`` pattern.
 *
 * Path template matching types:
 *
 * * ``*`` : Matches a single path component, up to the next path separator: /
 *
 * * ``**`` : Matches zero or more path segments. If present, must be the last operator.
 *
 * * ``{name} or {name=*}`` :  A named variable matching one path segment up to the next path separator: /.
 *
 * * ``{name=videos/*}`` : A named variable matching more than one path segment.
 *      The path component matching videos/* is captured as the named variable.
 *
 * * ``{name=**}`` : A named variable matching zero or more path segments.
 *
 *
 * For example:
 *
 * * ``/videos/*\/*\/*.m4s`` would match ``videos/123414/hls/1080p5000_00001.m4s``
 *
 * * ``/videos/{file}`` would match ``/videos/1080p5000_00001.m4s``
 *
 * * ``/**.mpd`` would match ``/content/123/india/dash/55/manifest.mpd``
 *
 * @generated from protobuf message envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
 */
export interface UriTemplateMatchConfig {
    /**
     * @generated from protobuf field: string path_template = 1;
     */
    pathTemplate: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UriTemplateMatchConfig$Type extends MessageType<UriTemplateMatchConfig> {
    constructor() {
        super("envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig", [
            { no: 1, name: "path_template", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", maxLen: "256" } } } }
        ]);
    }
    create(value?: PartialMessage<UriTemplateMatchConfig>): UriTemplateMatchConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pathTemplate = "";
        if (value !== undefined)
            reflectionMergePartial<UriTemplateMatchConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UriTemplateMatchConfig): UriTemplateMatchConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path_template */ 1:
                    message.pathTemplate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UriTemplateMatchConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path_template = 1; */
        if (message.pathTemplate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pathTemplate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
 */
export const UriTemplateMatchConfig = new UriTemplateMatchConfig$Type();
