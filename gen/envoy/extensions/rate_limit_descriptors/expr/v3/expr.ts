// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/rate_limit_descriptors/expr/v3/expr.proto" (package "envoy.extensions.rate_limit_descriptors.expr.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Expr } from "../../../../../google/api/expr/v1alpha1/syntax";
// [#protodoc-title: Rate limit descriptor expression]
// [#extension: envoy.rate_limit_descriptors.expr]

/**
 * The following descriptor entry is appended with a value computed
 * from a symbolic Common Expression Language expression.
 * See :ref:`attributes <arch_overview_attributes>` for the set of
 * available attributes.
 *
 * .. code-block:: cpp
 *
 *   ("<descriptor_key>", "<expression_value>")
 *
 * @generated from protobuf message envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor
 */
export interface Descriptor {
    /**
     * The key to use in the descriptor entry.
     *
     * @generated from protobuf field: string descriptor_key = 1;
     */
    descriptorKey: string;
    /**
     * If set to true, Envoy skips the descriptor if the expression evaluates to an error.
     * By default, the rate limit is not applied when an expression produces an error.
     *
     * @generated from protobuf field: bool skip_if_error = 2;
     */
    skipIfError: boolean;
    /**
     * @generated from protobuf oneof: expr_specifier
     */
    exprSpecifier: {
        oneofKind: "text";
        /**
         * Expression in a text form, e.g. "connection.requested_server_name".
         *
         * @generated from protobuf field: string text = 3;
         */
        text: string;
    } | {
        oneofKind: "parsed";
        /**
         * Parsed expression in AST form.
         *
         * @generated from protobuf field: google.api.expr.v1alpha1.Expr parsed = 4;
         */
        parsed: Expr;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Descriptor$Type extends MessageType<Descriptor> {
    constructor() {
        super("envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor", [
            { no: 1, name: "descriptor_key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "skip_if_error", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "text", kind: "scalar", oneof: "exprSpecifier", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 4, name: "parsed", kind: "message", oneof: "exprSpecifier", T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Descriptor>): Descriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.descriptorKey = "";
        message.skipIfError = false;
        message.exprSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Descriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Descriptor): Descriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string descriptor_key */ 1:
                    message.descriptorKey = reader.string();
                    break;
                case /* bool skip_if_error */ 2:
                    message.skipIfError = reader.bool();
                    break;
                case /* string text */ 3:
                    message.exprSpecifier = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* google.api.expr.v1alpha1.Expr parsed */ 4:
                    message.exprSpecifier = {
                        oneofKind: "parsed",
                        parsed: Expr.internalBinaryRead(reader, reader.uint32(), options, (message.exprSpecifier as any).parsed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Descriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string descriptor_key = 1; */
        if (message.descriptorKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.descriptorKey);
        /* bool skip_if_error = 2; */
        if (message.skipIfError !== false)
            writer.tag(2, WireType.Varint).bool(message.skipIfError);
        /* string text = 3; */
        if (message.exprSpecifier.oneofKind === "text")
            writer.tag(3, WireType.LengthDelimited).string(message.exprSpecifier.text);
        /* google.api.expr.v1alpha1.Expr parsed = 4; */
        if (message.exprSpecifier.oneofKind === "parsed")
            Expr.internalBinaryWrite(message.exprSpecifier.parsed, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor
 */
export const Descriptor = new Descriptor$Type();
