// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/rate_limit_descriptors/expr/v3/expr.proto (package envoy.extensions.rate_limit_descriptors.expr.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Expr } from "../../../../../google/api/expr/v1alpha1/syntax_pb.js";

/**
 * The following descriptor entry is appended with a value computed
 * from a symbolic Common Expression Language expression.
 * See :ref:`attributes <arch_overview_attributes>` for the set of
 * available attributes.
 *
 * .. code-block:: cpp
 *
 *   ("<descriptor_key>", "<expression_value>")
 *
 * @generated from message envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor
 */
export declare class Descriptor extends Message<Descriptor> {
  /**
   * The key to use in the descriptor entry.
   *
   * @generated from field: string descriptor_key = 1;
   */
  descriptorKey: string;

  /**
   * If set to true, Envoy skips the descriptor if the expression evaluates to an error.
   * By default, the rate limit is not applied when an expression produces an error.
   *
   * @generated from field: bool skip_if_error = 2;
   */
  skipIfError: boolean;

  /**
   * @generated from oneof envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor.expr_specifier
   */
  exprSpecifier: {
    /**
     * Expression in a text form, e.g. "connection.requested_server_name".
     *
     * @generated from field: string text = 3;
     */
    value: string;
    case: "text";
  } | {
    /**
     * Parsed expression in AST form.
     *
     * @generated from field: google.api.expr.v1alpha1.Expr parsed = 4;
     */
    value: Expr;
    case: "parsed";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Descriptor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Descriptor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Descriptor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Descriptor;

  static equals(a: Descriptor | PlainMessage<Descriptor> | undefined, b: Descriptor | PlainMessage<Descriptor> | undefined): boolean;
}

