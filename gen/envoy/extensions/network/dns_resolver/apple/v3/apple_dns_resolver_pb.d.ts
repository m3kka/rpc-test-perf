// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/network/dns_resolver/apple/v3/apple_dns_resolver.proto (package envoy.extensions.network.dns_resolver.apple.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Configuration for apple DNS resolver.
 *
 * @generated from message envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig
 */
export declare class AppleDnsResolverConfig extends Message<AppleDnsResolverConfig> {
  /**
   * The resolver will avoid the system's heuristics to only return
   * IPv4 or IPv6 addresses that it considers to be "routable", instead
   * returning all possible IPv4 or IPv6 addresses. This setting is
   * ignored if the DNS lookup family is set to v4-only or v6-only.
   * This should remain false in the vast majority of cases, but may be
   * useful when performing custom filtering of addresses, such as with
   * Happy Eyeballs.
   *
   * @generated from field: bool include_unroutable_families = 1;
   */
  includeUnroutableFamilies: boolean;

  constructor(data?: PartialMessage<AppleDnsResolverConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppleDnsResolverConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppleDnsResolverConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppleDnsResolverConfig;

  static equals(a: AppleDnsResolverConfig | PlainMessage<AppleDnsResolverConfig> | undefined, b: AppleDnsResolverConfig | PlainMessage<AppleDnsResolverConfig> | undefined): boolean;
}

