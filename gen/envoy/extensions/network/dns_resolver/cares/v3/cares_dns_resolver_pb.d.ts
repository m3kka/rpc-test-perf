// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/network/dns_resolver/cares/v3/cares_dns_resolver.proto (package envoy.extensions.network.dns_resolver.cares.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Address } from "../../../../../config/core/v3/address_pb.js";
import type { DnsResolverOptions } from "../../../../../config/core/v3/resolver_pb.js";

/**
 * Configuration for c-ares DNS resolver.
 *
 * @generated from message envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig
 */
export declare class CaresDnsResolverConfig extends Message<CaresDnsResolverConfig> {
  /**
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback<envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback>`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   *
   * @generated from field: repeated envoy.config.core.v3.Address resolvers = 1;
   */
  resolvers: Address[];

  /**
   * If true use the resolvers listed in the
   * :ref:`resolvers<envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers>`
   * field only if c-ares is unable to obtain a
   * nameserver from the system (e.g., /etc/resolv.conf).
   * Otherwise, the resolvers listed in the resolvers list will override the default system
   * resolvers. Defaults to false.
   *
   * @generated from field: bool use_resolvers_as_fallback = 3;
   */
  useResolversAsFallback: boolean;

  /**
   * The resolver will query available network interfaces and determine if there are no available
   * interfaces for a given IP family. It will then filter these addresses from the results it
   * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
   * provide IPv4 addresses.
   *
   * @generated from field: bool filter_unroutable_families = 4;
   */
  filterUnroutableFamilies: boolean;

  /**
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   *
   * @generated from field: envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;
   */
  dnsResolverOptions?: DnsResolverOptions;

  constructor(data?: PartialMessage<CaresDnsResolverConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaresDnsResolverConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaresDnsResolverConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaresDnsResolverConfig;

  static equals(a: CaresDnsResolverConfig | PlainMessage<CaresDnsResolverConfig> | undefined, b: CaresDnsResolverConfig | PlainMessage<CaresDnsResolverConfig> | undefined): boolean;
}

