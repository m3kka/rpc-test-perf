// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/rbac/audit_loggers/stream/v3/stream.proto" (package "envoy.extensions.rbac.audit_loggers.stream.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Standard Streams RBAC Audit Loggers]
// [#not-implemented-hide:]

/**
 * Custom configuration for the RBAC audit logger that writes log entries
 * directly to the operating system's standard output.
 * The logger outputs in JSON format and is currently not configurable.
 *
 * @generated from protobuf message envoy.extensions.rbac.audit_loggers.stream.v3.StdoutAuditLog
 */
export interface StdoutAuditLog {
}
// @generated message type with reflection information, may provide speed optimized methods
class StdoutAuditLog$Type extends MessageType<StdoutAuditLog> {
    constructor() {
        super("envoy.extensions.rbac.audit_loggers.stream.v3.StdoutAuditLog", []);
    }
    create(value?: PartialMessage<StdoutAuditLog>): StdoutAuditLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StdoutAuditLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StdoutAuditLog): StdoutAuditLog {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StdoutAuditLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.rbac.audit_loggers.stream.v3.StdoutAuditLog
 */
export const StdoutAuditLog = new StdoutAuditLog$Type();
