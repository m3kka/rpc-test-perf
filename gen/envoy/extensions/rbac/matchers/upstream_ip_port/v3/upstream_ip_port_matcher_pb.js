// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto (package envoy.extensions.rbac.matchers.upstream_ip_port.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { CidrRange } from "../../../../../config/core/v3/address_pb.js";
import { Int64Range } from "../../../../../type/v3/range_pb.js";

/**
 * This is configuration for matching upstream ip and port.
 * Note that although both fields are optional, at least one of IP or port must be supplied. If only
 * one is supplied the other is a wildcard match.
 * This matcher requires a filter in the chain to have saved the upstream address in the
 * filter state before the matcher is executed by RBAC filter. The state should be saved with key
 * ``envoy.stream.upstream_address`` (See
 * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
 * Also, See :repo:`proxy_filter.cc<source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>`
 * for an example of a filter which populates the FilterState.
 *
 * @generated from message envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher
 */
export const UpstreamIpPortMatcher = proto3.makeMessageType(
  "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher",
  () => [
    { no: 1, name: "upstream_ip", kind: "message", T: CidrRange },
    { no: 2, name: "upstream_port_range", kind: "message", T: Int64Range },
  ],
);

