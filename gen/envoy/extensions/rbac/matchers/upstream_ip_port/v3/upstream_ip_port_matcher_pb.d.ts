// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto (package envoy.extensions.rbac.matchers.upstream_ip_port.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { CidrRange } from "../../../../../config/core/v3/address_pb.js";
import type { Int64Range } from "../../../../../type/v3/range_pb.js";

/**
 * This is configuration for matching upstream ip and port.
 * Note that although both fields are optional, at least one of IP or port must be supplied. If only
 * one is supplied the other is a wildcard match.
 * This matcher requires a filter in the chain to have saved the upstream address in the
 * filter state before the matcher is executed by RBAC filter. The state should be saved with key
 * ``envoy.stream.upstream_address`` (See
 * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
 * Also, See :repo:`proxy_filter.cc<source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>`
 * for an example of a filter which populates the FilterState.
 *
 * @generated from message envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher
 */
export declare class UpstreamIpPortMatcher extends Message<UpstreamIpPortMatcher> {
  /**
   * A CIDR block that will be used to match the upstream IP.
   * Both Ipv4 and Ipv6 ranges can be matched.
   *
   * @generated from field: envoy.config.core.v3.CidrRange upstream_ip = 1;
   */
  upstreamIp?: CidrRange;

  /**
   * A port range that will be used to match the upstream port.
   *
   * @generated from field: envoy.type.v3.Int64Range upstream_port_range = 2;
   */
  upstreamPortRange?: Int64Range;

  constructor(data?: PartialMessage<UpstreamIpPortMatcher>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamIpPortMatcher;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamIpPortMatcher;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamIpPortMatcher;

  static equals(a: UpstreamIpPortMatcher | PlainMessage<UpstreamIpPortMatcher> | undefined, b: UpstreamIpPortMatcher | PlainMessage<UpstreamIpPortMatcher> | undefined): boolean;
}

