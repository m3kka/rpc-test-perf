// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/matching/input_matchers/runtime_fraction/v3/runtime_fraction.proto" (package "envoy.extensions.matching.input_matchers.runtime_fraction.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RuntimeFractionalPercent } from "../../../../../config/core/v3/base";
// [#protodoc-title: Runtime matcher]
// [#extension: envoy.matching.matchers.runtime_fraction]

/**
 * The runtime fraction matchers computes a hash from the input and matches if runtime feature is enabled
 * for the the resulting hash. Every time the input is considered for a match, its hash must fall within
 * the percentage of matches indicated by this field. For a fraction N/D, a number is computed as a hash
 * of the input on a field in the range [0,D). If the number is less than or equal to the value of the
 * numerator N, the matcher evaluates to true. A runtime_fraction input matcher can be used to gradually
 * roll out matcher changes without requiring full code or configuration deployments.
 * Note that distribution of matching results is only as good as one of the input.
 *
 * @generated from protobuf message envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction
 */
export interface RuntimeFraction {
    /**
     * Match the input against the given runtime key. The specified default value is used if key is not
     * present in the runtime configuration.
     *
     * @generated from protobuf field: envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 1;
     */
    runtimeFraction?: RuntimeFractionalPercent;
    /**
     * Optional seed passed through the hash function. This allows using additional information when computing
     * the hash value: by changing the seed value, a potentially different outcome can be achieved for the same input.
     *
     * @generated from protobuf field: uint64 seed = 2;
     */
    seed: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class RuntimeFraction$Type extends MessageType<RuntimeFraction> {
    constructor() {
        super("envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction", [
            { no: 1, name: "runtime_fraction", kind: "message", T: () => RuntimeFractionalPercent, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "seed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RuntimeFraction>): RuntimeFraction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seed = 0n;
        if (value !== undefined)
            reflectionMergePartial<RuntimeFraction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RuntimeFraction): RuntimeFraction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction */ 1:
                    message.runtimeFraction = RuntimeFractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.runtimeFraction);
                    break;
                case /* uint64 seed */ 2:
                    message.seed = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RuntimeFraction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 1; */
        if (message.runtimeFraction)
            RuntimeFractionalPercent.internalBinaryWrite(message.runtimeFraction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 seed = 2; */
        if (message.seed !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.seed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction
 */
export const RuntimeFraction = new RuntimeFraction$Type();
