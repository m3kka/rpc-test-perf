// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/matching/input_matchers/ip/v3/ip.proto" (package "envoy.extensions.matching.input_matchers.ip.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CidrRange } from "../../../../../config/core/v3/address";
// [#protodoc-title: IP matcher]
// [#extension: envoy.matching.matchers.ip]

/**
 * This input matcher matches IPv4 or IPv6 addresses against a list of CIDR
 * ranges. It returns true if and only if the input IP belongs to at least one
 * of these CIDR ranges. Internally, it uses a Level-Compressed trie, as
 * described in the paper `IP-address lookup using LC-tries
 * <https://www.nada.kth.se/~snilsson/publications/IP-address-lookup-using-LC-tries/>`_
 * by S. Nilsson and G. Karlsson. For "big" lists of IPs, this matcher is more
 * efficient than multiple single IP matcher, that would have a linear cost.
 *
 * @generated from protobuf message envoy.extensions.matching.input_matchers.ip.v3.Ip
 */
export interface Ip {
    /**
     * Match if the IP belongs to any of these CIDR ranges.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.CidrRange cidr_ranges = 1;
     */
    cidrRanges: CidrRange[];
    /**
     * The human readable prefix to use when emitting statistics for the IP input
     * matcher. Names in the table below are concatenated to this prefix.
     *
     * .. csv-table::
     *    :header: Name, Type, Description
     *    :widths: 1, 1, 2
     *
     *    ip_parsing_failed, Counter, Total number of IP addresses the matcher was unable to parse
     *
     * @generated from protobuf field: string stat_prefix = 2;
     */
    statPrefix: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Ip$Type extends MessageType<Ip> {
    constructor() {
        super("envoy.extensions.matching.input_matchers.ip.v3.Ip", [
            { no: 1, name: "cidr_ranges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CidrRange, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<Ip>): Ip {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cidrRanges = [];
        message.statPrefix = "";
        if (value !== undefined)
            reflectionMergePartial<Ip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ip): Ip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.CidrRange cidr_ranges */ 1:
                    message.cidrRanges.push(CidrRange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string stat_prefix */ 2:
                    message.statPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.CidrRange cidr_ranges = 1; */
        for (let i = 0; i < message.cidrRanges.length; i++)
            CidrRange.internalBinaryWrite(message.cidrRanges[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string stat_prefix = 2; */
        if (message.statPrefix !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.input_matchers.ip.v3.Ip
 */
export const Ip = new Ip$Type();
