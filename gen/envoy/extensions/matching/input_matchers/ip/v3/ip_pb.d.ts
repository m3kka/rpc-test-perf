// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/matching/input_matchers/ip/v3/ip.proto (package envoy.extensions.matching.input_matchers.ip.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { CidrRange } from "../../../../../config/core/v3/address_pb.js";

/**
 * This input matcher matches IPv4 or IPv6 addresses against a list of CIDR
 * ranges. It returns true if and only if the input IP belongs to at least one
 * of these CIDR ranges. Internally, it uses a Level-Compressed trie, as
 * described in the paper `IP-address lookup using LC-tries
 * <https://www.nada.kth.se/~snilsson/publications/IP-address-lookup-using-LC-tries/>`_
 * by S. Nilsson and G. Karlsson. For "big" lists of IPs, this matcher is more
 * efficient than multiple single IP matcher, that would have a linear cost.
 *
 * @generated from message envoy.extensions.matching.input_matchers.ip.v3.Ip
 */
export declare class Ip extends Message<Ip> {
  /**
   * Match if the IP belongs to any of these CIDR ranges.
   *
   * @generated from field: repeated envoy.config.core.v3.CidrRange cidr_ranges = 1;
   */
  cidrRanges: CidrRange[];

  /**
   * The human readable prefix to use when emitting statistics for the IP input
   * matcher. Names in the table below are concatenated to this prefix.
   *
   * .. csv-table::
   *    :header: Name, Type, Description
   *    :widths: 1, 1, 2
   *
   *    ip_parsing_failed, Counter, Total number of IP addresses the matcher was unable to parse
   *
   * @generated from field: string stat_prefix = 2;
   */
  statPrefix: string;

  constructor(data?: PartialMessage<Ip>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.matching.input_matchers.ip.v3.Ip";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ip;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ip;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ip;

  static equals(a: Ip | PlainMessage<Ip> | undefined, b: Ip | PlainMessage<Ip> | undefined): boolean;
}

