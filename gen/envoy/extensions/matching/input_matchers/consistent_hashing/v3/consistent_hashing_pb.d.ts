// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/matching/input_matchers/consistent_hashing/v3/consistent_hashing.proto (package envoy.extensions.matching.input_matchers.consistent_hashing.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The consistent hashing matchers computes a consistent hash from the input and matches if the resulting hash
 * is within the configured threshold.
 * More specifically, this matcher evaluates to true if hash(input, seed) % modulo >= threshold.
 * Note that the consistency of the match result relies on the internal hash function (xxhash) remaining
 * unchanged. While this is unlikely to happen intentionally, this could cause inconsistent match results
 * between deployments.
 *
 * @generated from message envoy.extensions.matching.input_matchers.consistent_hashing.v3.ConsistentHashing
 */
export declare class ConsistentHashing extends Message<ConsistentHashing> {
  /**
   * The threshold the resulting hash must be over in order for this matcher to evaluate to true.
   * This value must be below the configured modulo value.
   * Setting this to 0 is equivalent to this matcher always matching.
   *
   * @generated from field: uint32 threshold = 1;
   */
  threshold: number;

  /**
   * The value to use for the modulus in the calculation. This effectively  bounds the hash output,
   * specifying the range of possible values.
   * This value must be above the configured threshold.
   *
   * @generated from field: uint32 modulo = 2;
   */
  modulo: number;

  /**
   * Optional seed passed through the hash function. This allows using additional information when computing
   * the hash value: by changing the seed value, a different partition of matching and non-matching inputs will
   * be created that remains consistent for that seed value.
   *
   * @generated from field: uint64 seed = 3;
   */
  seed: bigint;

  constructor(data?: PartialMessage<ConsistentHashing>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.matching.input_matchers.consistent_hashing.v3.ConsistentHashing";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsistentHashing;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsistentHashing;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsistentHashing;

  static equals(a: ConsistentHashing | PlainMessage<ConsistentHashing> | undefined, b: ConsistentHashing | PlainMessage<ConsistentHashing> | undefined): boolean;
}

