// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/matching/common_inputs/ssl/v3/ssl_inputs.proto (package envoy.extensions.matching.common_inputs.ssl.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * List of comma-delimited URIs in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.uri_san]
 *
 * @generated from message envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput
 */
export declare class UriSanInput extends Message<UriSanInput> {
  constructor(data?: PartialMessage<UriSanInput>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UriSanInput;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UriSanInput;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UriSanInput;

  static equals(a: UriSanInput | PlainMessage<UriSanInput> | undefined, b: UriSanInput | PlainMessage<UriSanInput> | undefined): boolean;
}

/**
 * List of comma-delimited DNS entries in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.dns_san]
 *
 * @generated from message envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput
 */
export declare class DnsSanInput extends Message<DnsSanInput> {
  constructor(data?: PartialMessage<DnsSanInput>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsSanInput;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsSanInput;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsSanInput;

  static equals(a: DnsSanInput | PlainMessage<DnsSanInput> | undefined, b: DnsSanInput | PlainMessage<DnsSanInput> | undefined): boolean;
}

/**
 * Input that matches the subject field of the peer certificate in RFC 2253 format for a
 * downstream.
 * [#extension: envoy.matching.inputs.subject]
 *
 * @generated from message envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput
 */
export declare class SubjectInput extends Message<SubjectInput> {
  constructor(data?: PartialMessage<SubjectInput>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubjectInput;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubjectInput;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubjectInput;

  static equals(a: SubjectInput | PlainMessage<SubjectInput> | undefined, b: SubjectInput | PlainMessage<SubjectInput> | undefined): boolean;
}

