// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/matching/common_inputs/ssl/v3/ssl_inputs.proto" (package "envoy.extensions.matching.common_inputs.ssl.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Common SSL matching inputs]

/**
 * List of comma-delimited URIs in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.uri_san]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput
 */
export interface UriSanInput {
}
/**
 * List of comma-delimited DNS entries in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.dns_san]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput
 */
export interface DnsSanInput {
}
/**
 * Input that matches the subject field of the peer certificate in RFC 2253 format for a
 * downstream.
 * [#extension: envoy.matching.inputs.subject]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput
 */
export interface SubjectInput {
}
// @generated message type with reflection information, may provide speed optimized methods
class UriSanInput$Type extends MessageType<UriSanInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput", []);
    }
    create(value?: PartialMessage<UriSanInput>): UriSanInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UriSanInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UriSanInput): UriSanInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UriSanInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput
 */
export const UriSanInput = new UriSanInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsSanInput$Type extends MessageType<DnsSanInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput", []);
    }
    create(value?: PartialMessage<DnsSanInput>): DnsSanInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DnsSanInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsSanInput): DnsSanInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DnsSanInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput
 */
export const DnsSanInput = new DnsSanInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubjectInput$Type extends MessageType<SubjectInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput", []);
    }
    create(value?: PartialMessage<SubjectInput>): SubjectInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubjectInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubjectInput): SubjectInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubjectInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput
 */
export const SubjectInput = new SubjectInput$Type();
