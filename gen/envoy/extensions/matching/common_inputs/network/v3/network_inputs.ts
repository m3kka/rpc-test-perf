// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/matching/common_inputs/network/v3/network_inputs.proto" (package "envoy.extensions.matching.common_inputs.network.v3", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Common network matching inputs]

/**
 * Specifies that matching should be performed by the destination IP address.
 * [#extension: envoy.matching.inputs.destination_ip]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput
 */
export interface DestinationIPInput {
}
/**
 * Specifies that matching should be performed by the destination port.
 * [#extension: envoy.matching.inputs.destination_port]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput
 */
export interface DestinationPortInput {
}
/**
 * Specifies that matching should be performed by the source IP address.
 * [#extension: envoy.matching.inputs.source_ip]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.SourceIPInput
 */
export interface SourceIPInput {
}
/**
 * Specifies that matching should be performed by the source port.
 * [#extension: envoy.matching.inputs.source_port]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.SourcePortInput
 */
export interface SourcePortInput {
}
/**
 * Input that matches by the directly connected source IP address (this
 * will only be different from the source IP address when using a listener
 * filter that overrides the source address, such as the :ref:`Proxy Protocol
 * listener filter <config_listener_filters_proxy_protocol>`).
 * [#extension: envoy.matching.inputs.direct_source_ip]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput
 */
export interface DirectSourceIPInput {
}
/**
 * Input that matches by the source IP type.
 * Specifies the source IP match type. The values include:
 *
 * * ``local`` - matches a connection originating from the same host,
 * [#extension: envoy.matching.inputs.source_type]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput
 */
export interface SourceTypeInput {
}
/**
 * Input that matches by the requested server name (e.g. SNI in TLS).
 *
 * :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides the requested server name based on SNI,
 * when TLS protocol is detected.
 * [#extension: envoy.matching.inputs.server_name]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.ServerNameInput
 */
export interface ServerNameInput {
}
/**
 * Input that matches by the transport protocol.
 *
 * Suggested values include:
 *
 * * ``raw_buffer`` - default, used when no transport protocol is detected,
 * * ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
 *   when TLS protocol is detected.
 * [#extension: envoy.matching.inputs.transport_protocol]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput
 */
export interface TransportProtocolInput {
}
/**
 * List of quoted and comma-separated requested application protocols. The list consists of a
 * single negotiated application protocol once the network stream is established.
 *
 * Examples:
 *
 * * ``'h2','http/1.1'``
 * * ``'h2c'``
 *
 * Suggested values in the list include:
 *
 * * ``http/1.1`` - set by :ref:`envoy.filters.listener.tls_inspector
 *   <config_listener_filters_tls_inspector>` and :ref:`envoy.filters.listener.http_inspector
 *   <config_listener_filters_http_inspector>`,
 * * ``h2`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
 * * ``h2c`` - set by :ref:`envoy.filters.listener.http_inspector <config_listener_filters_http_inspector>`
 *
 * .. attention::
 *
 *   Currently, :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides
 *   application protocol detection based on the requested
 *   `ALPN <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.
 *
 *   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,
 *   and matching on values other than ``h2`` is going to lead to a lot of false negatives,
 *   unless all connecting clients are known to use ALPN.
 * [#extension: envoy.matching.inputs.application_protocol]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput
 */
export interface ApplicationProtocolInput {
}
/**
 * Input that matches by a specific filter state key.
 * The value of the provided filter state key will be the raw string representation of the filter state object
 * [#extension: envoy.matching.inputs.filter_state]
 *
 * @generated from protobuf message envoy.extensions.matching.common_inputs.network.v3.FilterStateInput
 */
export interface FilterStateInput {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DestinationIPInput$Type extends MessageType<DestinationIPInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput", []);
    }
    create(value?: PartialMessage<DestinationIPInput>): DestinationIPInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DestinationIPInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestinationIPInput): DestinationIPInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DestinationIPInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput
 */
export const DestinationIPInput = new DestinationIPInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DestinationPortInput$Type extends MessageType<DestinationPortInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput", []);
    }
    create(value?: PartialMessage<DestinationPortInput>): DestinationPortInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DestinationPortInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestinationPortInput): DestinationPortInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DestinationPortInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput
 */
export const DestinationPortInput = new DestinationPortInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceIPInput$Type extends MessageType<SourceIPInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.SourceIPInput", []);
    }
    create(value?: PartialMessage<SourceIPInput>): SourceIPInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SourceIPInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceIPInput): SourceIPInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SourceIPInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.SourceIPInput
 */
export const SourceIPInput = new SourceIPInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourcePortInput$Type extends MessageType<SourcePortInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.SourcePortInput", []);
    }
    create(value?: PartialMessage<SourcePortInput>): SourcePortInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SourcePortInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourcePortInput): SourcePortInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SourcePortInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.SourcePortInput
 */
export const SourcePortInput = new SourcePortInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DirectSourceIPInput$Type extends MessageType<DirectSourceIPInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput", []);
    }
    create(value?: PartialMessage<DirectSourceIPInput>): DirectSourceIPInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DirectSourceIPInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DirectSourceIPInput): DirectSourceIPInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DirectSourceIPInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput
 */
export const DirectSourceIPInput = new DirectSourceIPInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceTypeInput$Type extends MessageType<SourceTypeInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput", []);
    }
    create(value?: PartialMessage<SourceTypeInput>): SourceTypeInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SourceTypeInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceTypeInput): SourceTypeInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SourceTypeInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput
 */
export const SourceTypeInput = new SourceTypeInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerNameInput$Type extends MessageType<ServerNameInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.ServerNameInput", []);
    }
    create(value?: PartialMessage<ServerNameInput>): ServerNameInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServerNameInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerNameInput): ServerNameInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServerNameInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.ServerNameInput
 */
export const ServerNameInput = new ServerNameInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportProtocolInput$Type extends MessageType<TransportProtocolInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput", []);
    }
    create(value?: PartialMessage<TransportProtocolInput>): TransportProtocolInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TransportProtocolInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportProtocolInput): TransportProtocolInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TransportProtocolInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput
 */
export const TransportProtocolInput = new TransportProtocolInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplicationProtocolInput$Type extends MessageType<ApplicationProtocolInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput", []);
    }
    create(value?: PartialMessage<ApplicationProtocolInput>): ApplicationProtocolInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ApplicationProtocolInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplicationProtocolInput): ApplicationProtocolInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ApplicationProtocolInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput
 */
export const ApplicationProtocolInput = new ApplicationProtocolInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterStateInput$Type extends MessageType<FilterStateInput> {
    constructor() {
        super("envoy.extensions.matching.common_inputs.network.v3.FilterStateInput", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<FilterStateInput>): FilterStateInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<FilterStateInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterStateInput): FilterStateInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterStateInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.matching.common_inputs.network.v3.FilterStateInput
 */
export const FilterStateInput = new FilterStateInput$Type();
