// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/internal_redirect/allow_listed_routes/v3/allow_listed_routes_config.proto" (package "envoy.extensions.internal_redirect.allow_listed_routes.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Allow listed routes internal redirect predicate]

/**
 * An internal redirect predicate that accepts only explicitly allowed target routes.
 * [#extension: envoy.internal_redirect_predicates.allow_listed_routes]
 *
 * @generated from protobuf message envoy.extensions.internal_redirect.allow_listed_routes.v3.AllowListedRoutesConfig
 */
export interface AllowListedRoutesConfig {
    /**
     * The list of routes that's allowed as redirect target by this predicate,
     * identified by the route's :ref:`name <envoy_v3_api_field_config.route.v3.Route.route>`.
     * Empty route names are not allowed.
     *
     * @generated from protobuf field: repeated string allowed_route_names = 1;
     */
    allowedRouteNames: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class AllowListedRoutesConfig$Type extends MessageType<AllowListedRoutesConfig> {
    constructor() {
        super("envoy.extensions.internal_redirect.allow_listed_routes.v3.AllowListedRoutesConfig", [
            { no: 1, name: "allowed_route_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { minLen: "1" } } } } } }
        ]);
    }
    create(value?: PartialMessage<AllowListedRoutesConfig>): AllowListedRoutesConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allowedRouteNames = [];
        if (value !== undefined)
            reflectionMergePartial<AllowListedRoutesConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllowListedRoutesConfig): AllowListedRoutesConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string allowed_route_names */ 1:
                    message.allowedRouteNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllowListedRoutesConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string allowed_route_names = 1; */
        for (let i = 0; i < message.allowedRouteNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.allowedRouteNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.internal_redirect.allow_listed_routes.v3.AllowListedRoutesConfig
 */
export const AllowListedRoutesConfig = new AllowListedRoutesConfig$Type();
