// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/extensions/internal_redirect/safe_cross_scheme/v3/safe_cross_scheme_config.proto (package envoy.extensions.internal_redirect.safe_cross_scheme.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * An internal redirect predicate that checks the scheme between the
 * downstream url and the redirect target url and allows a) same scheme
 * redirect and b) safe cross scheme redirect, which means if the downstream
 * scheme is HTTPS, both HTTPS and HTTP redirect targets are allowed, but if the
 * downstream scheme is HTTP, only HTTP redirect targets are allowed.
 * [#extension: envoy.internal_redirect_predicates.safe_cross_scheme]
 *
 * @generated from message envoy.extensions.internal_redirect.safe_cross_scheme.v3.SafeCrossSchemeConfig
 */
export declare class SafeCrossSchemeConfig extends Message<SafeCrossSchemeConfig> {
  constructor(data?: PartialMessage<SafeCrossSchemeConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.extensions.internal_redirect.safe_cross_scheme.v3.SafeCrossSchemeConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SafeCrossSchemeConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SafeCrossSchemeConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SafeCrossSchemeConfig;

  static equals(a: SafeCrossSchemeConfig | PlainMessage<SafeCrossSchemeConfig> | undefined, b: SafeCrossSchemeConfig | PlainMessage<SafeCrossSchemeConfig> | undefined): boolean;
}

