// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/extensions/key_value/file_based/v3/config.proto" (package "envoy.extensions.key_value.file_based.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { Duration } from "../../../../../google/protobuf/duration";
// [#protodoc-title: Key/value file-based store storage plugin]

/**
 * [#extension: envoy.key_value.file_based]
 * This is configuration to flush a key value store out to disk.
 *
 * @generated from protobuf message envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig
 */
export interface FileBasedKeyValueStoreConfig {
    /**
     * The filename to read the keys and values from, and write the keys and
     * values to.
     *
     * @generated from protobuf field: string filename = 1;
     */
    filename: string;
    /**
     * The interval at which the key value store should be flushed to the file.
     *
     * @generated from protobuf field: google.protobuf.Duration flush_interval = 2;
     */
    flushInterval?: Duration;
    /**
     * The maximum number of entries to cache, or 0 to allow for unlimited entries.
     * Defaults to 1000 if not present.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_entries = 3;
     */
    maxEntries?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileBasedKeyValueStoreConfig$Type extends MessageType<FileBasedKeyValueStoreConfig> {
    constructor() {
        super("envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig", [
            { no: 1, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "flush_interval", kind: "message", T: () => Duration },
            { no: 3, name: "max_entries", kind: "message", T: () => UInt32Value }
        ], { "xds.annotations.v3.message_status": { workInProgress: true } });
    }
    create(value?: PartialMessage<FileBasedKeyValueStoreConfig>): FileBasedKeyValueStoreConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filename = "";
        if (value !== undefined)
            reflectionMergePartial<FileBasedKeyValueStoreConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileBasedKeyValueStoreConfig): FileBasedKeyValueStoreConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filename */ 1:
                    message.filename = reader.string();
                    break;
                case /* google.protobuf.Duration flush_interval */ 2:
                    message.flushInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.flushInterval);
                    break;
                case /* google.protobuf.UInt32Value max_entries */ 3:
                    message.maxEntries = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxEntries);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileBasedKeyValueStoreConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        /* google.protobuf.Duration flush_interval = 2; */
        if (message.flushInterval)
            Duration.internalBinaryWrite(message.flushInterval, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_entries = 3; */
        if (message.maxEntries)
            UInt32Value.internalBinaryWrite(message.maxEntries, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig
 */
export const FileBasedKeyValueStoreConfig = new FileBasedKeyValueStoreConfig$Type();
