// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/route/v3/srds.proto" (package "envoy.service.route.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ScopedRoutesDiscoveryService } from "./srds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "../../discovery/v3/discovery";
import type { DeltaDiscoveryRequest } from "../../discovery/v3/discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "../../discovery/v3/discovery";
import type { DiscoveryRequest } from "../../discovery/v3/discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: SRDS]
// * Routing :ref:`architecture overview <arch_overview_http_routing>`

/**
 * The Scoped Routes Discovery Service (SRDS) API distributes
 * :ref:`ScopedRouteConfiguration<envoy_v3_api_msg.ScopedRouteConfiguration>`
 * resources. Each ScopedRouteConfiguration resource represents a "routing
 * scope" containing a mapping that allows the HTTP connection manager to
 * dynamically assign a routing table (specified via a
 * :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>` message) to each
 * HTTP request.
 *
 * @generated from protobuf service envoy.service.route.v3.ScopedRoutesDiscoveryService
 */
export interface IScopedRoutesDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: StreamScopedRoutes(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamScopedRoutes(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaScopedRoutes(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaScopedRoutes(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchScopedRoutes(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchScopedRoutes(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: SRDS]
// * Routing :ref:`architecture overview <arch_overview_http_routing>`

/**
 * The Scoped Routes Discovery Service (SRDS) API distributes
 * :ref:`ScopedRouteConfiguration<envoy_v3_api_msg.ScopedRouteConfiguration>`
 * resources. Each ScopedRouteConfiguration resource represents a "routing
 * scope" containing a mapping that allows the HTTP connection manager to
 * dynamically assign a routing table (specified via a
 * :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>` message) to each
 * HTTP request.
 *
 * @generated from protobuf service envoy.service.route.v3.ScopedRoutesDiscoveryService
 */
export class ScopedRoutesDiscoveryServiceClient implements IScopedRoutesDiscoveryServiceClient, ServiceInfo {
    typeName = ScopedRoutesDiscoveryService.typeName;
    methods = ScopedRoutesDiscoveryService.methods;
    options = ScopedRoutesDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamScopedRoutes(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamScopedRoutes(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaScopedRoutes(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaScopedRoutes(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchScopedRoutes(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchScopedRoutes(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
