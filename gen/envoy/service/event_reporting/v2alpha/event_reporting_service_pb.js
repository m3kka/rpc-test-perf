// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/event_reporting/v2alpha/event_reporting_service.proto (package envoy.service.event_reporting.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { Node } from "../../../api/v2/core/base_pb.js";

/**
 * [#not-implemented-hide:]
 * An events envoy sends to the management server.
 *
 * @generated from message envoy.service.event_reporting.v2alpha.StreamEventsRequest
 */
export const StreamEventsRequest = proto3.makeMessageType(
  "envoy.service.event_reporting.v2alpha.StreamEventsRequest",
  () => [
    { no: 1, name: "identifier", kind: "message", T: StreamEventsRequest_Identifier },
    { no: 2, name: "events", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * @generated from message envoy.service.event_reporting.v2alpha.StreamEventsRequest.Identifier
 */
export const StreamEventsRequest_Identifier = proto3.makeMessageType(
  "envoy.service.event_reporting.v2alpha.StreamEventsRequest.Identifier",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
  ],
  {localName: "StreamEventsRequest_Identifier"},
);

/**
 * [#not-implemented-hide:]
 * The management server may send envoy a StreamEventsResponse to tell which events the server
 * is interested in. In future, with aggregated event reporting service, this message will
 * contain, for example, clusters the envoy should send events for, or event types the server
 * wants to process.
 *
 * @generated from message envoy.service.event_reporting.v2alpha.StreamEventsResponse
 */
export const StreamEventsResponse = proto3.makeMessageType(
  "envoy.service.event_reporting.v2alpha.StreamEventsResponse",
  [],
);

