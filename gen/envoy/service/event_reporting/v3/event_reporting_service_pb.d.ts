// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/event_reporting/v3/event_reporting_service.proto (package envoy.service.event_reporting.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Node } from "../../../config/core/v3/base_pb.js";

/**
 * [#not-implemented-hide:]
 * An events envoy sends to the management server.
 *
 * @generated from message envoy.service.event_reporting.v3.StreamEventsRequest
 */
export declare class StreamEventsRequest extends Message<StreamEventsRequest> {
  /**
   * Identifier data that will only be sent in the first message on the stream. This is effectively
   * structured metadata and is a performance optimization.
   *
   * @generated from field: envoy.service.event_reporting.v3.StreamEventsRequest.Identifier identifier = 1;
   */
  identifier?: StreamEventsRequest_Identifier;

  /**
   * Batch of events. When the stream is already active, it will be the events occurred
   * since the last message had been sent. If the server receives unknown event type, it should
   * silently ignore it.
   *
   * The following events are supported:
   *
   * * :ref:`HealthCheckEvent <envoy_v3_api_msg_data.core.v3.HealthCheckEvent>`
   * * :ref:`OutlierDetectionEvent <envoy_v3_api_msg_data.cluster.v3.OutlierDetectionEvent>`
   *
   * @generated from field: repeated google.protobuf.Any events = 2;
   */
  events: Any[];

  constructor(data?: PartialMessage<StreamEventsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.event_reporting.v3.StreamEventsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest;

  static equals(a: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined, b: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined): boolean;
}

/**
 * @generated from message envoy.service.event_reporting.v3.StreamEventsRequest.Identifier
 */
export declare class StreamEventsRequest_Identifier extends Message<StreamEventsRequest_Identifier> {
  /**
   * The node sending the event messages over the stream.
   *
   * @generated from field: envoy.config.core.v3.Node node = 1;
   */
  node?: Node;

  constructor(data?: PartialMessage<StreamEventsRequest_Identifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.event_reporting.v3.StreamEventsRequest.Identifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest_Identifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest_Identifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest_Identifier;

  static equals(a: StreamEventsRequest_Identifier | PlainMessage<StreamEventsRequest_Identifier> | undefined, b: StreamEventsRequest_Identifier | PlainMessage<StreamEventsRequest_Identifier> | undefined): boolean;
}

/**
 * [#not-implemented-hide:]
 * The management server may send envoy a StreamEventsResponse to tell which events the server
 * is interested in. In future, with aggregated event reporting service, this message will
 * contain, for example, clusters the envoy should send events for, or event types the server
 * wants to process.
 *
 * @generated from message envoy.service.event_reporting.v3.StreamEventsResponse
 */
export declare class StreamEventsResponse extends Message<StreamEventsResponse> {
  constructor(data?: PartialMessage<StreamEventsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.event_reporting.v3.StreamEventsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsResponse;

  static equals(a: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined, b: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined): boolean;
}

