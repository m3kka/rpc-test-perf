// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/endpoint/v3/leds.proto" (package "envoy.service.endpoint.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LocalityEndpointDiscoveryService } from "./leds";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "../../discovery/v3/discovery";
import type { DeltaDiscoveryRequest } from "../../discovery/v3/discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#not-implemented-hide:]
// [#protodoc-title: LEDS]
// Locality-Endpoint discovery
// [#comment:TODO(adisuissa): Link to unified matching docs:
// :ref:`architecture overview<arch_overview_service_discovery_types_leds>`]

/**
 * @generated from protobuf service envoy.service.endpoint.v3.LocalityEndpointDiscoveryService
 */
export interface ILocalityEndpointDiscoveryServiceClient {
    // State-of-the-World (DiscoveryRequest) and REST are not supported.

    /**
     * The resource_names_subscribe resource_names_unsubscribe fields in DeltaDiscoveryRequest
     * specify a list of glob collections to subscribe to updates for.
     *
     * @generated from protobuf rpc: DeltaLocalityEndpoints(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaLocalityEndpoints(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
}
// [#not-implemented-hide:]
// [#protodoc-title: LEDS]
// Locality-Endpoint discovery
// [#comment:TODO(adisuissa): Link to unified matching docs:
// :ref:`architecture overview<arch_overview_service_discovery_types_leds>`]

/**
 * @generated from protobuf service envoy.service.endpoint.v3.LocalityEndpointDiscoveryService
 */
export class LocalityEndpointDiscoveryServiceClient implements ILocalityEndpointDiscoveryServiceClient, ServiceInfo {
    typeName = LocalityEndpointDiscoveryService.typeName;
    methods = LocalityEndpointDiscoveryService.methods;
    options = LocalityEndpointDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    // State-of-the-World (DiscoveryRequest) and REST are not supported.

    /**
     * The resource_names_subscribe resource_names_unsubscribe fields in DeltaDiscoveryRequest
     * specify a list of glob collections to subscribe to updates for.
     *
     * @generated from protobuf rpc: DeltaLocalityEndpoints(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaLocalityEndpoints(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
}
