// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/extension/v3/config_discovery.proto" (package "envoy.service.extension.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ExtensionConfigDiscoveryService } from "./config_discovery";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "../../discovery/v3/discovery";
import type { DeltaDiscoveryRequest } from "../../discovery/v3/discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "../../discovery/v3/discovery";
import type { DiscoveryRequest } from "../../discovery/v3/discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Extension config discovery service (ECDS)]

// A service that supports dynamic configuration updates for a specific filter.
// Currently, ECDS is supported for HTTP filters and Listener filters. Please check
// :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.
// The overall extension config discovery service works as follows:
// 
// 1. A filter (:ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`
//    or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
//    contains a :ref:`config_discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>` configuration. This configuration
//    includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
//    from which the filter configuration will be fetched.
// 2. The client then registers for a resource using the filter name as the resource_name.
// 3. The xDS server sends back the filter's configuration.
// 4. The client stores the configuration that will be used in the next instantiation of the filter chain,
//    i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
//    account in the following instantiation of the filter chain.
// 
// Note: Filters that are configured using ECDS are warmed. For more details see
// :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

/**
 * Return extension configurations.
 *
 * @generated from protobuf service envoy.service.extension.v3.ExtensionConfigDiscoveryService
 */
export interface IExtensionConfigDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: StreamExtensionConfigs(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamExtensionConfigs(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaExtensionConfigs(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaExtensionConfigs(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchExtensionConfigs(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchExtensionConfigs(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: Extension config discovery service (ECDS)]

// A service that supports dynamic configuration updates for a specific filter.
// Currently, ECDS is supported for HTTP filters and Listener filters. Please check
// :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.
// The overall extension config discovery service works as follows:
// 
// 1. A filter (:ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`
//    or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
//    contains a :ref:`config_discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>` configuration. This configuration
//    includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
//    from which the filter configuration will be fetched.
// 2. The client then registers for a resource using the filter name as the resource_name.
// 3. The xDS server sends back the filter's configuration.
// 4. The client stores the configuration that will be used in the next instantiation of the filter chain,
//    i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
//    account in the following instantiation of the filter chain.
// 
// Note: Filters that are configured using ECDS are warmed. For more details see
// :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

/**
 * Return extension configurations.
 *
 * @generated from protobuf service envoy.service.extension.v3.ExtensionConfigDiscoveryService
 */
export class ExtensionConfigDiscoveryServiceClient implements IExtensionConfigDiscoveryServiceClient, ServiceInfo {
    typeName = ExtensionConfigDiscoveryService.typeName;
    methods = ExtensionConfigDiscoveryService.methods;
    options = ExtensionConfigDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamExtensionConfigs(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamExtensionConfigs(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaExtensionConfigs(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaExtensionConfigs(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchExtensionConfigs(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchExtensionConfigs(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
