// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/tap/v3/tap.proto" (package "envoy.service.tap.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TapSinkService } from "./tap";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamTapsResponse } from "./tap";
import type { StreamTapsRequest } from "./tap";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Tap sink service]

/**
 * [#not-implemented-hide:] A tap service to receive incoming taps. Envoy will call
 * StreamTaps to deliver captured taps to the server
 *
 * @generated from protobuf service envoy.service.tap.v3.TapSinkService
 */
export interface ITapSinkServiceClient {
    /**
     * Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure. The server should
     * disconnect if it expects Envoy to reconnect.
     *
     * @generated from protobuf rpc: StreamTaps(stream envoy.service.tap.v3.StreamTapsRequest) returns (envoy.service.tap.v3.StreamTapsResponse);
     */
    streamTaps(options?: RpcOptions): ClientStreamingCall<StreamTapsRequest, StreamTapsResponse>;
}
// [#protodoc-title: Tap sink service]

/**
 * [#not-implemented-hide:] A tap service to receive incoming taps. Envoy will call
 * StreamTaps to deliver captured taps to the server
 *
 * @generated from protobuf service envoy.service.tap.v3.TapSinkService
 */
export class TapSinkServiceClient implements ITapSinkServiceClient, ServiceInfo {
    typeName = TapSinkService.typeName;
    methods = TapSinkService.methods;
    options = TapSinkService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure. The server should
     * disconnect if it expects Envoy to reconnect.
     *
     * @generated from protobuf rpc: StreamTaps(stream envoy.service.tap.v3.StreamTapsRequest) returns (envoy.service.tap.v3.StreamTapsResponse);
     */
    streamTaps(options?: RpcOptions): ClientStreamingCall<StreamTapsRequest, StreamTapsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamTapsRequest, StreamTapsResponse>("clientStreaming", this._transport, method, opt);
    }
}
