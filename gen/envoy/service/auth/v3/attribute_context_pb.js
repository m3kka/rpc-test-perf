// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/auth/v3/attribute_context.proto (package envoy.service.auth.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { Metadata } from "../../../config/core/v3/base_pb.js";
import { Address } from "../../../config/core/v3/address_pb.js";

/**
 * An attribute is a piece of metadata that describes an activity on a network.
 * For example, the size of an HTTP request, or the status code of an HTTP response.
 *
 * Each attribute has a type and a name, which is logically defined as a proto message field
 * of the ``AttributeContext``. The ``AttributeContext`` is a collection of individual attributes
 * supported by Envoy authorization system.
 * [#comment: The following items are left out of this proto
 * Request.Auth field for jwt tokens
 * Request.Api for api management
 * Origin peer that originated the request
 * Caching Protocol
 * request_context return values to inject back into the filter chain
 * peer.claims -- from X.509 extensions
 * Configuration
 * - field mask to send
 * - which return values from request_context are copied back
 * - which return values are copied into request_headers]
 * [#next-free-field: 13]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext
 */
export const AttributeContext = proto3.makeMessageType(
  "envoy.service.auth.v3.AttributeContext",
  () => [
    { no: 1, name: "source", kind: "message", T: AttributeContext_Peer },
    { no: 2, name: "destination", kind: "message", T: AttributeContext_Peer },
    { no: 4, name: "request", kind: "message", T: AttributeContext_Request },
    { no: 10, name: "context_extensions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 11, name: "metadata_context", kind: "message", T: Metadata },
    { no: 12, name: "tls_session", kind: "message", T: AttributeContext_TLSSession },
  ],
);

/**
 * This message defines attributes for a node that handles a network request.
 * The node can be either a service or an application that sends, forwards,
 * or receives the request. Service peers should fill in the ``service``,
 * ``principal``, and ``labels`` as appropriate.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.Peer
 */
export const AttributeContext_Peer = proto3.makeMessageType(
  "envoy.service.auth.v3.AttributeContext.Peer",
  () => [
    { no: 1, name: "address", kind: "message", T: Address },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "certificate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "AttributeContext_Peer"},
);

/**
 * Represents a network request, such as an HTTP request.
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.Request
 */
export const AttributeContext_Request = proto3.makeMessageType(
  "envoy.service.auth.v3.AttributeContext.Request",
  () => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "http", kind: "message", T: AttributeContext_HttpRequest },
  ],
  {localName: "AttributeContext_Request"},
);

/**
 * This message defines attributes for an HTTP request.
 * HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
 * [#next-free-field: 13]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.HttpRequest
 */
export const AttributeContext_HttpRequest = proto3.makeMessageType(
  "envoy.service.auth.v3.AttributeContext.HttpRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "scheme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fragment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "raw_body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "AttributeContext_HttpRequest"},
);

/**
 * This message defines attributes for the underlying TLS session.
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.TLSSession
 */
export const AttributeContext_TLSSession = proto3.makeMessageType(
  "envoy.service.auth.v3.AttributeContext.TLSSession",
  () => [
    { no: 1, name: "sni", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "AttributeContext_TLSSession"},
);

