// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/auth/v3/external_auth.proto" (package "envoy.service.auth.v3", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../../google/rpc/status";
import { QueryParameter } from "../../../config/core/v3/base";
import { Struct } from "../../../../google/protobuf/struct";
import { HeaderValueOption } from "../../../config/core/v3/base";
import { HttpStatus } from "../../../type/v3/http_status";
import { AttributeContext } from "./attribute_context";
/**
 * @generated from protobuf message envoy.service.auth.v3.CheckRequest
 */
export interface CheckRequest {
    /**
     * The request attributes.
     *
     * @generated from protobuf field: envoy.service.auth.v3.AttributeContext attributes = 1;
     */
    attributes?: AttributeContext;
}
/**
 * HTTP attributes for a denied response.
 *
 * @generated from protobuf message envoy.service.auth.v3.DeniedHttpResponse
 */
export interface DeniedHttpResponse {
    /**
     * This field allows the authorization service to send an HTTP response status code to the
     * downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
     *
     * @generated from protobuf field: envoy.type.v3.HttpStatus status = 1;
     */
    status?: HttpStatus;
    /**
     * This field allows the authorization service to send HTTP response headers
     * to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
     * false when used in this message.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValueOption headers = 2;
     */
    headers: HeaderValueOption[];
    /**
     * This field allows the authorization service to send a response body data
     * to the downstream client.
     *
     * @generated from protobuf field: string body = 3;
     */
    body: string;
}
/**
 * HTTP attributes for an OK response.
 * [#next-free-field: 9]
 *
 * @generated from protobuf message envoy.service.auth.v3.OkHttpResponse
 */
export interface OkHttpResponse {
    /**
     * HTTP entity headers in addition to the original request headers. This allows the authorization
     * service to append, to add or to override headers from the original request before
     * dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
     * false when used in this message. By setting the ``append`` field to ``true``,
     * the filter will append the correspondent header value to the matched request header.
     * By leaving ``append`` as false, the filter will either add a new header, or override an existing
     * one if there is a match.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValueOption headers = 2;
     */
    headers: HeaderValueOption[];
    /**
     * HTTP entity headers to remove from the original request before dispatching
     * it to the upstream. This allows the authorization service to act on auth
     * related headers (like ``Authorization``), process them, and consume them.
     * Under this model, the upstream will either receive the request (if it's
     * authorized) or not receive it (if it's not), but will not see headers
     * containing authorization credentials.
     *
     * Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
     * the header ``Host``, may not be removed as that would make the request
     * malformed. If mentioned in ``headers_to_remove`` these special headers will
     * be ignored.
     *
     * When using the HTTP service this must instead be set by the HTTP
     * authorization service as a comma separated list like so:
     * ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
     *
     * @generated from protobuf field: repeated string headers_to_remove = 5;
     */
    headersToRemove: string[];
    /**
     * This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
     * <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
     * setting this field overrides :ref:`CheckResponse.dynamic_metadata
     * <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.Struct dynamic_metadata = 3 [deprecated = true];
     */
    dynamicMetadata?: Struct;
    /**
     * This field allows the authorization service to send HTTP response headers
     * to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
     * defaults to false when used in this message.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 6;
     */
    responseHeadersToAdd: HeaderValueOption[];
    /**
     * This field allows the authorization service to set (and overwrite) query
     * string parameters on the original request before it is sent upstream.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.QueryParameter query_parameters_to_set = 7;
     */
    queryParametersToSet: QueryParameter[];
    /**
     * This field allows the authorization service to specify which query parameters
     * should be removed from the original request before it is sent upstream. Each
     * element in this list is a case-sensitive query parameter name to be removed.
     *
     * @generated from protobuf field: repeated string query_parameters_to_remove = 8;
     */
    queryParametersToRemove: string[];
}
/**
 * Intended for gRPC and Network Authorization servers ``only``.
 *
 * @generated from protobuf message envoy.service.auth.v3.CheckResponse
 */
export interface CheckResponse {
    /**
     * Status ``OK`` allows the request. Any other status indicates the request should be denied, and
     * for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
     * Envoy sends ``403 Forbidden`` HTTP status code by default.
     *
     * @generated from protobuf field: google.rpc.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf oneof: http_response
     */
    httpResponse: {
        oneofKind: "deniedResponse";
        /**
         * Supplies http attributes for a denied response.
         *
         * @generated from protobuf field: envoy.service.auth.v3.DeniedHttpResponse denied_response = 2;
         */
        deniedResponse: DeniedHttpResponse;
    } | {
        oneofKind: "okResponse";
        /**
         * Supplies http attributes for an ok response.
         *
         * @generated from protobuf field: envoy.service.auth.v3.OkHttpResponse ok_response = 3;
         */
        okResponse: OkHttpResponse;
    } | {
        oneofKind: undefined;
    };
    /**
     * Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
     * filter. This metadata lives in a namespace specified by the canonical name of extension filter
     * that requires it:
     *
     * - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
     * - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
     *
     * @generated from protobuf field: google.protobuf.Struct dynamic_metadata = 4;
     */
    dynamicMetadata?: Struct;
}
// @generated message type with reflection information, may provide speed optimized methods
class CheckRequest$Type extends MessageType<CheckRequest> {
    constructor() {
        super("envoy.service.auth.v3.CheckRequest", [
            { no: 1, name: "attributes", kind: "message", T: () => AttributeContext }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.auth.v2.CheckRequest" } });
    }
    create(value?: PartialMessage<CheckRequest>): CheckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckRequest): CheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.service.auth.v3.AttributeContext attributes */ 1:
                    message.attributes = AttributeContext.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.service.auth.v3.AttributeContext attributes = 1; */
        if (message.attributes)
            AttributeContext.internalBinaryWrite(message.attributes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.auth.v3.CheckRequest
 */
export const CheckRequest = new CheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeniedHttpResponse$Type extends MessageType<DeniedHttpResponse> {
    constructor() {
        super("envoy.service.auth.v3.DeniedHttpResponse", [
            { no: 1, name: "status", kind: "message", T: () => HttpStatus },
            { no: 2, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValueOption },
            { no: 3, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.auth.v2.DeniedHttpResponse" } });
    }
    create(value?: PartialMessage<DeniedHttpResponse>): DeniedHttpResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<DeniedHttpResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeniedHttpResponse): DeniedHttpResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.v3.HttpStatus status */ 1:
                    message.status = HttpStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* repeated envoy.config.core.v3.HeaderValueOption headers */ 2:
                    message.headers.push(HeaderValueOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string body */ 3:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeniedHttpResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.v3.HttpStatus status = 1; */
        if (message.status)
            HttpStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.HeaderValueOption headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderValueOption.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string body = 3; */
        if (message.body !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.auth.v3.DeniedHttpResponse
 */
export const DeniedHttpResponse = new DeniedHttpResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OkHttpResponse$Type extends MessageType<OkHttpResponse> {
    constructor() {
        super("envoy.service.auth.v3.OkHttpResponse", [
            { no: 2, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValueOption },
            { no: 5, name: "headers_to_remove", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dynamic_metadata", kind: "message", T: () => Struct, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 6, name: "response_headers_to_add", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValueOption },
            { no: 7, name: "query_parameters_to_set", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryParameter },
            { no: 8, name: "query_parameters_to_remove", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.auth.v2.OkHttpResponse" } });
    }
    create(value?: PartialMessage<OkHttpResponse>): OkHttpResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.headersToRemove = [];
        message.responseHeadersToAdd = [];
        message.queryParametersToSet = [];
        message.queryParametersToRemove = [];
        if (value !== undefined)
            reflectionMergePartial<OkHttpResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OkHttpResponse): OkHttpResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.HeaderValueOption headers */ 2:
                    message.headers.push(HeaderValueOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string headers_to_remove */ 5:
                    message.headersToRemove.push(reader.string());
                    break;
                case /* google.protobuf.Struct dynamic_metadata = 3 [deprecated = true];*/ 3:
                    message.dynamicMetadata = Struct.internalBinaryRead(reader, reader.uint32(), options, message.dynamicMetadata);
                    break;
                case /* repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add */ 6:
                    message.responseHeadersToAdd.push(HeaderValueOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.core.v3.QueryParameter query_parameters_to_set */ 7:
                    message.queryParametersToSet.push(QueryParameter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string query_parameters_to_remove */ 8:
                    message.queryParametersToRemove.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OkHttpResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.HeaderValueOption headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderValueOption.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string headers_to_remove = 5; */
        for (let i = 0; i < message.headersToRemove.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.headersToRemove[i]);
        /* google.protobuf.Struct dynamic_metadata = 3 [deprecated = true]; */
        if (message.dynamicMetadata)
            Struct.internalBinaryWrite(message.dynamicMetadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 6; */
        for (let i = 0; i < message.responseHeadersToAdd.length; i++)
            HeaderValueOption.internalBinaryWrite(message.responseHeadersToAdd[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.QueryParameter query_parameters_to_set = 7; */
        for (let i = 0; i < message.queryParametersToSet.length; i++)
            QueryParameter.internalBinaryWrite(message.queryParametersToSet[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated string query_parameters_to_remove = 8; */
        for (let i = 0; i < message.queryParametersToRemove.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.queryParametersToRemove[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.auth.v3.OkHttpResponse
 */
export const OkHttpResponse = new OkHttpResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckResponse$Type extends MessageType<CheckResponse> {
    constructor() {
        super("envoy.service.auth.v3.CheckResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "denied_response", kind: "message", oneof: "httpResponse", T: () => DeniedHttpResponse },
            { no: 3, name: "ok_response", kind: "message", oneof: "httpResponse", T: () => OkHttpResponse },
            { no: 4, name: "dynamic_metadata", kind: "message", T: () => Struct }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.auth.v2.CheckResponse" } });
    }
    create(value?: PartialMessage<CheckResponse>): CheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.httpResponse = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckResponse): CheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* envoy.service.auth.v3.DeniedHttpResponse denied_response */ 2:
                    message.httpResponse = {
                        oneofKind: "deniedResponse",
                        deniedResponse: DeniedHttpResponse.internalBinaryRead(reader, reader.uint32(), options, (message.httpResponse as any).deniedResponse)
                    };
                    break;
                case /* envoy.service.auth.v3.OkHttpResponse ok_response */ 3:
                    message.httpResponse = {
                        oneofKind: "okResponse",
                        okResponse: OkHttpResponse.internalBinaryRead(reader, reader.uint32(), options, (message.httpResponse as any).okResponse)
                    };
                    break;
                case /* google.protobuf.Struct dynamic_metadata */ 4:
                    message.dynamicMetadata = Struct.internalBinaryRead(reader, reader.uint32(), options, message.dynamicMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.service.auth.v3.DeniedHttpResponse denied_response = 2; */
        if (message.httpResponse.oneofKind === "deniedResponse")
            DeniedHttpResponse.internalBinaryWrite(message.httpResponse.deniedResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.service.auth.v3.OkHttpResponse ok_response = 3; */
        if (message.httpResponse.oneofKind === "okResponse")
            OkHttpResponse.internalBinaryWrite(message.httpResponse.okResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct dynamic_metadata = 4; */
        if (message.dynamicMetadata)
            Struct.internalBinaryWrite(message.dynamicMetadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.auth.v3.CheckResponse
 */
export const CheckResponse = new CheckResponse$Type();
/**
 * @generated ServiceType for protobuf service envoy.service.auth.v3.Authorization
 */
export const Authorization = new ServiceType("envoy.service.auth.v3.Authorization", [
    { name: "Check", options: {}, I: CheckRequest, O: CheckResponse }
]);
