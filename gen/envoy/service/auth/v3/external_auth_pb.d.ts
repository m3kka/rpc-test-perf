// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/auth/v3/external_auth.proto (package envoy.service.auth.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AttributeContext } from "./attribute_context_pb.js";
import type { HttpStatus } from "../../../type/v3/http_status_pb.js";
import type { HeaderValueOption, QueryParameter } from "../../../config/core/v3/base_pb.js";
import type { Status } from "../../../../google/rpc/status_pb.js";

/**
 * @generated from message envoy.service.auth.v3.CheckRequest
 */
export declare class CheckRequest extends Message<CheckRequest> {
  /**
   * The request attributes.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext attributes = 1;
   */
  attributes?: AttributeContext;

  constructor(data?: PartialMessage<CheckRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.CheckRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest;

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean;
}

/**
 * HTTP attributes for a denied response.
 *
 * @generated from message envoy.service.auth.v3.DeniedHttpResponse
 */
export declare class DeniedHttpResponse extends Message<DeniedHttpResponse> {
  /**
   * This field allows the authorization service to send an HTTP response status code to the
   * downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
   *
   * @generated from field: envoy.type.v3.HttpStatus status = 1;
   */
  status?: HttpStatus;

  /**
   * This field allows the authorization service to send HTTP response headers
   * to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
   * false when used in this message.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption headers = 2;
   */
  headers: HeaderValueOption[];

  /**
   * This field allows the authorization service to send a response body data
   * to the downstream client.
   *
   * @generated from field: string body = 3;
   */
  body: string;

  constructor(data?: PartialMessage<DeniedHttpResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.DeniedHttpResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeniedHttpResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeniedHttpResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeniedHttpResponse;

  static equals(a: DeniedHttpResponse | PlainMessage<DeniedHttpResponse> | undefined, b: DeniedHttpResponse | PlainMessage<DeniedHttpResponse> | undefined): boolean;
}

/**
 * HTTP attributes for an OK response.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.service.auth.v3.OkHttpResponse
 */
export declare class OkHttpResponse extends Message<OkHttpResponse> {
  /**
   * HTTP entity headers in addition to the original request headers. This allows the authorization
   * service to append, to add or to override headers from the original request before
   * dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
   * false when used in this message. By setting the ``append`` field to ``true``,
   * the filter will append the correspondent header value to the matched request header.
   * By leaving ``append`` as false, the filter will either add a new header, or override an existing
   * one if there is a match.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption headers = 2;
   */
  headers: HeaderValueOption[];

  /**
   * HTTP entity headers to remove from the original request before dispatching
   * it to the upstream. This allows the authorization service to act on auth
   * related headers (like ``Authorization``), process them, and consume them.
   * Under this model, the upstream will either receive the request (if it's
   * authorized) or not receive it (if it's not), but will not see headers
   * containing authorization credentials.
   *
   * Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
   * the header ``Host``, may not be removed as that would make the request
   * malformed. If mentioned in ``headers_to_remove`` these special headers will
   * be ignored.
   *
   * When using the HTTP service this must instead be set by the HTTP
   * authorization service as a comma separated list like so:
   * ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
   *
   * @generated from field: repeated string headers_to_remove = 5;
   */
  headersToRemove: string[];

  /**
   * This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
   * <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
   * setting this field overrides :ref:`CheckResponse.dynamic_metadata
   * <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
   *
   * @generated from field: google.protobuf.Struct dynamic_metadata = 3 [deprecated = true];
   * @deprecated
   */
  dynamicMetadata?: Struct;

  /**
   * This field allows the authorization service to send HTTP response headers
   * to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
   * defaults to false when used in this message.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 6;
   */
  responseHeadersToAdd: HeaderValueOption[];

  /**
   * This field allows the authorization service to set (and overwrite) query
   * string parameters on the original request before it is sent upstream.
   *
   * @generated from field: repeated envoy.config.core.v3.QueryParameter query_parameters_to_set = 7;
   */
  queryParametersToSet: QueryParameter[];

  /**
   * This field allows the authorization service to specify which query parameters
   * should be removed from the original request before it is sent upstream. Each
   * element in this list is a case-sensitive query parameter name to be removed.
   *
   * @generated from field: repeated string query_parameters_to_remove = 8;
   */
  queryParametersToRemove: string[];

  constructor(data?: PartialMessage<OkHttpResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.OkHttpResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OkHttpResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OkHttpResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OkHttpResponse;

  static equals(a: OkHttpResponse | PlainMessage<OkHttpResponse> | undefined, b: OkHttpResponse | PlainMessage<OkHttpResponse> | undefined): boolean;
}

/**
 * Intended for gRPC and Network Authorization servers ``only``.
 *
 * @generated from message envoy.service.auth.v3.CheckResponse
 */
export declare class CheckResponse extends Message<CheckResponse> {
  /**
   * Status ``OK`` allows the request. Any other status indicates the request should be denied, and
   * for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
   * Envoy sends ``403 Forbidden`` HTTP status code by default.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * An message that contains HTTP response attributes. This message is
   * used when the authorization service needs to send custom responses to the
   * downstream client or, to modify/add request headers being dispatched to the upstream.
   *
   * @generated from oneof envoy.service.auth.v3.CheckResponse.http_response
   */
  httpResponse: {
    /**
     * Supplies http attributes for a denied response.
     *
     * @generated from field: envoy.service.auth.v3.DeniedHttpResponse denied_response = 2;
     */
    value: DeniedHttpResponse;
    case: "deniedResponse";
  } | {
    /**
     * Supplies http attributes for an ok response.
     *
     * @generated from field: envoy.service.auth.v3.OkHttpResponse ok_response = 3;
     */
    value: OkHttpResponse;
    case: "okResponse";
  } | { case: undefined; value?: undefined };

  /**
   * Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
   * filter. This metadata lives in a namespace specified by the canonical name of extension filter
   * that requires it:
   *
   * - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
   * - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
   *
   * @generated from field: google.protobuf.Struct dynamic_metadata = 4;
   */
  dynamicMetadata?: Struct;

  constructor(data?: PartialMessage<CheckResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.CheckResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse;

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean;
}

