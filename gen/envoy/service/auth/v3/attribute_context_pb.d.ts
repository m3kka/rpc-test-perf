// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/auth/v3/attribute_context.proto (package envoy.service.auth.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Metadata } from "../../../config/core/v3/base_pb.js";
import type { Address } from "../../../config/core/v3/address_pb.js";

/**
 * An attribute is a piece of metadata that describes an activity on a network.
 * For example, the size of an HTTP request, or the status code of an HTTP response.
 *
 * Each attribute has a type and a name, which is logically defined as a proto message field
 * of the ``AttributeContext``. The ``AttributeContext`` is a collection of individual attributes
 * supported by Envoy authorization system.
 * [#comment: The following items are left out of this proto
 * Request.Auth field for jwt tokens
 * Request.Api for api management
 * Origin peer that originated the request
 * Caching Protocol
 * request_context return values to inject back into the filter chain
 * peer.claims -- from X.509 extensions
 * Configuration
 * - field mask to send
 * - which return values from request_context are copied back
 * - which return values are copied into request_headers]
 * [#next-free-field: 13]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext
 */
export declare class AttributeContext extends Message<AttributeContext> {
  /**
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext.Peer source = 1;
   */
  source?: AttributeContext_Peer;

  /**
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext.Peer destination = 2;
   */
  destination?: AttributeContext_Peer;

  /**
   * Represents a network request, such as an HTTP request.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext.Request request = 4;
   */
  request?: AttributeContext_Request;

  /**
   * This is analogous to http_request.headers, however these contents will not be sent to the
   * upstream server. Context_extensions provide an extension mechanism for sending additional
   * information to the auth server without modifying the proto definition. It maps to the
   * internal opaque context in the filter chain.
   *
   * @generated from field: map<string, string> context_extensions = 10;
   */
  contextExtensions: { [key: string]: string };

  /**
   * Dynamic metadata associated with the request.
   *
   * @generated from field: envoy.config.core.v3.Metadata metadata_context = 11;
   */
  metadataContext?: Metadata;

  /**
   * TLS session details of the underlying connection.
   * This is not populated by default and will be populated if ext_authz filter's
   * :ref:`include_tls_session <config_http_filters_ext_authz>` is set to true.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext.TLSSession tls_session = 12;
   */
  tlsSession?: AttributeContext_TLSSession;

  constructor(data?: PartialMessage<AttributeContext>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.AttributeContext";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeContext;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeContext;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeContext;

  static equals(a: AttributeContext | PlainMessage<AttributeContext> | undefined, b: AttributeContext | PlainMessage<AttributeContext> | undefined): boolean;
}

/**
 * This message defines attributes for a node that handles a network request.
 * The node can be either a service or an application that sends, forwards,
 * or receives the request. Service peers should fill in the ``service``,
 * ``principal``, and ``labels`` as appropriate.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.Peer
 */
export declare class AttributeContext_Peer extends Message<AttributeContext_Peer> {
  /**
   * The address of the peer, this is typically the IP address.
   * It can also be UDS path, or others.
   *
   * @generated from field: envoy.config.core.v3.Address address = 1;
   */
  address?: Address;

  /**
   * The canonical service name of the peer.
   * It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
   * <config_http_conn_man_headers_downstream-service-cluster>`
   * If a more trusted source of the service name is available through mTLS/secure naming, it
   * should be used.
   *
   * @generated from field: string service = 2;
   */
  service: string;

  /**
   * The labels associated with the peer.
   * These could be pod labels for Kubernetes or tags for VMs.
   * The source of the labels could be an X.509 certificate or other configuration.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The authenticated identity of this peer.
   * For example, the identity associated with the workload such as a service account.
   * If an X.509 certificate is used to assert the identity this field should be sourced from
   * ``URI Subject Alternative Names``, ``DNS Subject Alternate Names`` or ``Subject`` in that order.
   * The primary identity should be the principal. The principal format is issuer specific.
   *
   * Examples:
   *
   * - SPIFFE format is ``spiffe://trust-domain/path``.
   * - Google account format is ``https://accounts.google.com/{userid}``.
   *
   * @generated from field: string principal = 4;
   */
  principal: string;

  /**
   * The X.509 certificate used to authenticate the identify of this peer.
   * When present, the certificate contents are encoded in URL and PEM format.
   *
   * @generated from field: string certificate = 5;
   */
  certificate: string;

  constructor(data?: PartialMessage<AttributeContext_Peer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.AttributeContext.Peer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeContext_Peer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeContext_Peer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeContext_Peer;

  static equals(a: AttributeContext_Peer | PlainMessage<AttributeContext_Peer> | undefined, b: AttributeContext_Peer | PlainMessage<AttributeContext_Peer> | undefined): boolean;
}

/**
 * Represents a network request, such as an HTTP request.
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.Request
 */
export declare class AttributeContext_Request extends Message<AttributeContext_Request> {
  /**
   * The timestamp when the proxy receives the first byte of the request.
   *
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * Represents an HTTP request or an HTTP-like request.
   *
   * @generated from field: envoy.service.auth.v3.AttributeContext.HttpRequest http = 2;
   */
  http?: AttributeContext_HttpRequest;

  constructor(data?: PartialMessage<AttributeContext_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.AttributeContext.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeContext_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeContext_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeContext_Request;

  static equals(a: AttributeContext_Request | PlainMessage<AttributeContext_Request> | undefined, b: AttributeContext_Request | PlainMessage<AttributeContext_Request> | undefined): boolean;
}

/**
 * This message defines attributes for an HTTP request.
 * HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
 * [#next-free-field: 13]
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.HttpRequest
 */
export declare class AttributeContext_HttpRequest extends Message<AttributeContext_HttpRequest> {
  /**
   * The unique ID for a request, which can be propagated to downstream
   * systems. The ID should have low probability of collision
   * within a single day for a specific service.
   * For HTTP requests, it should be X-Request-ID or equivalent.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The HTTP request method, such as ``GET``, ``POST``.
   *
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * The HTTP request headers. If multiple headers share the same key, they
   * must be merged according to the HTTP spec. All header keys must be
   * lower-cased, because HTTP header keys are case-insensitive.
   *
   * @generated from field: map<string, string> headers = 3;
   */
  headers: { [key: string]: string };

  /**
   * The request target, as it appears in the first line of the HTTP request. This includes
   * the URL path and query-string. No decoding is performed.
   *
   * @generated from field: string path = 4;
   */
  path: string;

  /**
   * The HTTP request ``Host`` or ``:authority`` header value.
   *
   * @generated from field: string host = 5;
   */
  host: string;

  /**
   * The HTTP URL scheme, such as ``http`` and ``https``.
   *
   * @generated from field: string scheme = 6;
   */
  scheme: string;

  /**
   * This field is always empty, and exists for compatibility reasons. The HTTP URL query is
   * included in ``path`` field.
   *
   * @generated from field: string query = 7;
   */
  query: string;

  /**
   * This field is always empty, and exists for compatibility reasons. The URL fragment is
   * not submitted as part of HTTP requests; it is unknowable.
   *
   * @generated from field: string fragment = 8;
   */
  fragment: string;

  /**
   * The HTTP request size in bytes. If unknown, it must be -1.
   *
   * @generated from field: int64 size = 9;
   */
  size: bigint;

  /**
   * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
   *
   * See :repo:`headers.h:ProtocolStrings <source/common/http/headers.h>` for a list of all
   * possible values.
   *
   * @generated from field: string protocol = 10;
   */
  protocol: string;

  /**
   * The HTTP request body.
   *
   * @generated from field: string body = 11;
   */
  body: string;

  /**
   * The HTTP request body in bytes. This is used instead of
   * :ref:`body <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` when
   * :ref:`pack_as_bytes <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.pack_as_bytes>`
   * is set to true.
   *
   * @generated from field: bytes raw_body = 12;
   */
  rawBody: Uint8Array;

  constructor(data?: PartialMessage<AttributeContext_HttpRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.AttributeContext.HttpRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeContext_HttpRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeContext_HttpRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeContext_HttpRequest;

  static equals(a: AttributeContext_HttpRequest | PlainMessage<AttributeContext_HttpRequest> | undefined, b: AttributeContext_HttpRequest | PlainMessage<AttributeContext_HttpRequest> | undefined): boolean;
}

/**
 * This message defines attributes for the underlying TLS session.
 *
 * @generated from message envoy.service.auth.v3.AttributeContext.TLSSession
 */
export declare class AttributeContext_TLSSession extends Message<AttributeContext_TLSSession> {
  /**
   * SNI used for TLS session.
   *
   * @generated from field: string sni = 1;
   */
  sni: string;

  constructor(data?: PartialMessage<AttributeContext_TLSSession>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.auth.v3.AttributeContext.TLSSession";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeContext_TLSSession;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeContext_TLSSession;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeContext_TLSSession;

  static equals(a: AttributeContext_TLSSession | PlainMessage<AttributeContext_TLSSession> | undefined, b: AttributeContext_TLSSession | PlainMessage<AttributeContext_TLSSession> | undefined): boolean;
}

