// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/metrics/v2/metrics_service.proto" (package "envoy.service.metrics.v2", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MetricsService } from "./metrics_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamMetricsResponse } from "./metrics_service";
import type { StreamMetricsMessage } from "./metrics_service";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Metrics service]

/**
 * Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
 * data model as a standard to represent metrics information.
 *
 * @generated from protobuf service envoy.service.metrics.v2.MetricsService
 */
export interface IMetricsServiceClient {
    /**
     * Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure.
     *
     * @generated from protobuf rpc: StreamMetrics(stream envoy.service.metrics.v2.StreamMetricsMessage) returns (envoy.service.metrics.v2.StreamMetricsResponse);
     */
    streamMetrics(options?: RpcOptions): ClientStreamingCall<StreamMetricsMessage, StreamMetricsResponse>;
}
// [#protodoc-title: Metrics service]

/**
 * Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
 * data model as a standard to represent metrics information.
 *
 * @generated from protobuf service envoy.service.metrics.v2.MetricsService
 */
export class MetricsServiceClient implements IMetricsServiceClient, ServiceInfo {
    typeName = MetricsService.typeName;
    methods = MetricsService.methods;
    options = MetricsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure.
     *
     * @generated from protobuf rpc: StreamMetrics(stream envoy.service.metrics.v2.StreamMetricsMessage) returns (envoy.service.metrics.v2.StreamMetricsResponse);
     */
    streamMetrics(options?: RpcOptions): ClientStreamingCall<StreamMetricsMessage, StreamMetricsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamMetricsMessage, StreamMetricsResponse>("clientStreaming", this._transport, method, opt);
    }
}
