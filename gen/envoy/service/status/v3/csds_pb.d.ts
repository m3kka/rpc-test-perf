// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/status/v3/csds.proto (package envoy.service.status.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { NodeMatcher } from "../../../type/matcher/v3/node_pb.js";
import type { Node } from "../../../config/core/v3/base_pb.js";
import type { ClientResourceStatus, ClustersConfigDump, EndpointsConfigDump, ListenersConfigDump, RoutesConfigDump, ScopedRoutesConfigDump, UpdateFailureState } from "../../../admin/v3/config_dump_shared_pb.js";

/**
 * Status of a config from a management server view.
 *
 * @generated from enum envoy.service.status.v3.ConfigStatus
 */
export declare enum ConfigStatus {
  /**
   * Status info is not available/unknown.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Management server has sent the config to client and received ACK.
   *
   * @generated from enum value: SYNCED = 1;
   */
  SYNCED = 1,

  /**
   * Config is not sent.
   *
   * @generated from enum value: NOT_SENT = 2;
   */
  NOT_SENT = 2,

  /**
   * Management server has sent the config to client but hasnâ€™t received
   * ACK/NACK.
   *
   * @generated from enum value: STALE = 3;
   */
  STALE = 3,

  /**
   * Management server has sent the config to client but received NACK. The
   * attached config dump will be the latest config (the rejected one), since
   * it is the persisted version in the management server.
   *
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Config status from a client-side view.
 *
 * @generated from enum envoy.service.status.v3.ClientConfigStatus
 */
export declare enum ClientConfigStatus {
  /**
   * Config status is not available/unknown.
   *
   * @generated from enum value: CLIENT_UNKNOWN = 0;
   */
  CLIENT_UNKNOWN = 0,

  /**
   * Client requested the config but hasn't received any config from management
   * server yet.
   *
   * @generated from enum value: CLIENT_REQUESTED = 1;
   */
  CLIENT_REQUESTED = 1,

  /**
   * Client received the config and replied with ACK.
   *
   * @generated from enum value: CLIENT_ACKED = 2;
   */
  CLIENT_ACKED = 2,

  /**
   * Client received the config and replied with NACK. Notably, the attached
   * config dump is not the NACKed version, but the most recent accepted one. If
   * no config is accepted yet, the attached config dump will be empty.
   *
   * @generated from enum value: CLIENT_NACKED = 3;
   */
  CLIENT_NACKED = 3,
}

/**
 * Request for client status of clients identified by a list of NodeMatchers.
 *
 * @generated from message envoy.service.status.v3.ClientStatusRequest
 */
export declare class ClientStatusRequest extends Message<ClientStatusRequest> {
  /**
   * Management server can use these match criteria to identify clients.
   * The match follows OR semantics.
   *
   * @generated from field: repeated envoy.type.matcher.v3.NodeMatcher node_matchers = 1;
   */
  nodeMatchers: NodeMatcher[];

  /**
   * The node making the csds request.
   *
   * @generated from field: envoy.config.core.v3.Node node = 2;
   */
  node?: Node;

  /**
   * If true, the server will not include the resource contents in the response
   * (i.e., the generic_xds_configs.xds_config field will not be populated).
   * [#not-implemented-hide:]
   *
   * @generated from field: bool exclude_resource_contents = 3;
   */
  excludeResourceContents: boolean;

  constructor(data?: PartialMessage<ClientStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v3.ClientStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStatusRequest;

  static equals(a: ClientStatusRequest | PlainMessage<ClientStatusRequest> | undefined, b: ClientStatusRequest | PlainMessage<ClientStatusRequest> | undefined): boolean;
}

/**
 * Detailed config (per xDS) with status.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.service.status.v3.PerXdsConfig
 */
export declare class PerXdsConfig extends Message<PerXdsConfig> {
  /**
   * Config status generated by management servers. Will not be present if the
   * CSDS server is an xDS client.
   *
   * @generated from field: envoy.service.status.v3.ConfigStatus status = 1;
   */
  status: ConfigStatus;

  /**
   * Client config status is populated by xDS clients. Will not be present if
   * the CSDS server is an xDS server. No matter what the client config status
   * is, xDS clients should always dump the most recent accepted xDS config.
   *
   * .. attention::
   *   This field is deprecated. Use :ref:`ClientResourceStatus
   *   <envoy_v3_api_enum_admin.v3.ClientResourceStatus>` for per-resource
   *   config status instead.
   *
   * @generated from field: envoy.service.status.v3.ClientConfigStatus client_status = 7 [deprecated = true];
   * @deprecated
   */
  clientStatus: ClientConfigStatus;

  /**
   * @generated from oneof envoy.service.status.v3.PerXdsConfig.per_xds_config
   */
  perXdsConfig: {
    /**
     * @generated from field: envoy.admin.v3.ListenersConfigDump listener_config = 2;
     */
    value: ListenersConfigDump;
    case: "listenerConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v3.ClustersConfigDump cluster_config = 3;
     */
    value: ClustersConfigDump;
    case: "clusterConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v3.RoutesConfigDump route_config = 4;
     */
    value: RoutesConfigDump;
    case: "routeConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v3.ScopedRoutesConfigDump scoped_route_config = 5;
     */
    value: ScopedRoutesConfigDump;
    case: "scopedRouteConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v3.EndpointsConfigDump endpoint_config = 6;
     */
    value: EndpointsConfigDump;
    case: "endpointConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PerXdsConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v3.PerXdsConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerXdsConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerXdsConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerXdsConfig;

  static equals(a: PerXdsConfig | PlainMessage<PerXdsConfig> | undefined, b: PerXdsConfig | PlainMessage<PerXdsConfig> | undefined): boolean;
}

/**
 * All xds configs for a particular client.
 *
 * @generated from message envoy.service.status.v3.ClientConfig
 */
export declare class ClientConfig extends Message<ClientConfig> {
  /**
   * Node for a particular client.
   *
   * @generated from field: envoy.config.core.v3.Node node = 1;
   */
  node?: Node;

  /**
   * This field is deprecated in favor of generic_xds_configs which is
   * much simpler and uniform in structure.
   *
   * @generated from field: repeated envoy.service.status.v3.PerXdsConfig xds_config = 2 [deprecated = true];
   * @deprecated
   */
  xdsConfig: PerXdsConfig[];

  /**
   * Represents generic xDS config and the exact config structure depends on
   * the type URL (like Cluster if it is CDS)
   *
   * @generated from field: repeated envoy.service.status.v3.ClientConfig.GenericXdsConfig generic_xds_configs = 3;
   */
  genericXdsConfigs: ClientConfig_GenericXdsConfig[];

  constructor(data?: PartialMessage<ClientConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v3.ClientConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfig;

  static equals(a: ClientConfig | PlainMessage<ClientConfig> | undefined, b: ClientConfig | PlainMessage<ClientConfig> | undefined): boolean;
}

/**
 * GenericXdsConfig is used to specify the config status and the dump
 * of any xDS resource identified by their type URL. It is the generalized
 * version of the now deprecated ListenersConfigDump, ClustersConfigDump etc
 * [#next-free-field: 10]
 *
 * @generated from message envoy.service.status.v3.ClientConfig.GenericXdsConfig
 */
export declare class ClientConfig_GenericXdsConfig extends Message<ClientConfig_GenericXdsConfig> {
  /**
   * Type_url represents the fully qualified name of xDS resource type
   * like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
   *
   * @generated from field: string type_url = 1;
   */
  typeUrl: string;

  /**
   * Name of the xDS resource
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * This is the :ref:`version_info <envoy_v3_api_field_service.discovery.v3.DiscoveryResponse.version_info>`
   * in the last processed xDS discovery response. If there are only
   * static bootstrap listeners, this field will be ""
   *
   * @generated from field: string version_info = 3;
   */
  versionInfo: string;

  /**
   * The xDS resource config. Actual content depends on the type
   *
   * @generated from field: google.protobuf.Any xds_config = 4;
   */
  xdsConfig?: Any;

  /**
   * Timestamp when the xDS resource was last updated
   *
   * @generated from field: google.protobuf.Timestamp last_updated = 5;
   */
  lastUpdated?: Timestamp;

  /**
   * Per xDS resource config status. It is generated by management servers.
   * It will not be present if the CSDS server is an xDS client.
   *
   * @generated from field: envoy.service.status.v3.ConfigStatus config_status = 6;
   */
  configStatus: ConfigStatus;

  /**
   * Per xDS resource status from the view of a xDS client
   *
   * @generated from field: envoy.admin.v3.ClientResourceStatus client_status = 7;
   */
  clientStatus: ClientResourceStatus;

  /**
   * Set if the last update failed, cleared after the next successful
   * update. The *error_state* field contains the rejected version of
   * this particular resource along with the reason and timestamp. For
   * successfully updated or acknowledged resource, this field should
   * be empty.
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.admin.v3.UpdateFailureState error_state = 8;
   */
  errorState?: UpdateFailureState;

  /**
   * Is static resource is true if it is specified in the config supplied
   * through the file at the startup.
   *
   * @generated from field: bool is_static_resource = 9;
   */
  isStaticResource: boolean;

  constructor(data?: PartialMessage<ClientConfig_GenericXdsConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v3.ClientConfig.GenericXdsConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfig_GenericXdsConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfig_GenericXdsConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfig_GenericXdsConfig;

  static equals(a: ClientConfig_GenericXdsConfig | PlainMessage<ClientConfig_GenericXdsConfig> | undefined, b: ClientConfig_GenericXdsConfig | PlainMessage<ClientConfig_GenericXdsConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.service.status.v3.ClientStatusResponse
 */
export declare class ClientStatusResponse extends Message<ClientStatusResponse> {
  /**
   * Client configs for the clients specified in the ClientStatusRequest.
   *
   * @generated from field: repeated envoy.service.status.v3.ClientConfig config = 1;
   */
  config: ClientConfig[];

  constructor(data?: PartialMessage<ClientStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v3.ClientStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStatusResponse;

  static equals(a: ClientStatusResponse | PlainMessage<ClientStatusResponse> | undefined, b: ClientStatusResponse | PlainMessage<ClientStatusResponse> | undefined): boolean;
}

