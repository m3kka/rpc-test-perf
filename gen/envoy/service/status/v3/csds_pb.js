// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/status/v3/csds.proto (package envoy.service.status.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3, Timestamp } from "@bufbuild/protobuf";
import { NodeMatcher } from "../../../type/matcher/v3/node_pb.js";
import { Node } from "../../../config/core/v3/base_pb.js";
import { ClientResourceStatus, ClustersConfigDump, EndpointsConfigDump, ListenersConfigDump, RoutesConfigDump, ScopedRoutesConfigDump, UpdateFailureState } from "../../../admin/v3/config_dump_shared_pb.js";

/**
 * Status of a config from a management server view.
 *
 * @generated from enum envoy.service.status.v3.ConfigStatus
 */
export const ConfigStatus = proto3.makeEnum(
  "envoy.service.status.v3.ConfigStatus",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "SYNCED"},
    {no: 2, name: "NOT_SENT"},
    {no: 3, name: "STALE"},
    {no: 4, name: "ERROR"},
  ],
);

/**
 * Config status from a client-side view.
 *
 * @generated from enum envoy.service.status.v3.ClientConfigStatus
 */
export const ClientConfigStatus = proto3.makeEnum(
  "envoy.service.status.v3.ClientConfigStatus",
  [
    {no: 0, name: "CLIENT_UNKNOWN"},
    {no: 1, name: "CLIENT_REQUESTED"},
    {no: 2, name: "CLIENT_ACKED"},
    {no: 3, name: "CLIENT_NACKED"},
  ],
);

/**
 * Request for client status of clients identified by a list of NodeMatchers.
 *
 * @generated from message envoy.service.status.v3.ClientStatusRequest
 */
export const ClientStatusRequest = proto3.makeMessageType(
  "envoy.service.status.v3.ClientStatusRequest",
  () => [
    { no: 1, name: "node_matchers", kind: "message", T: NodeMatcher, repeated: true },
    { no: 2, name: "node", kind: "message", T: Node },
    { no: 3, name: "exclude_resource_contents", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Detailed config (per xDS) with status.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.service.status.v3.PerXdsConfig
 */
export const PerXdsConfig = proto3.makeMessageType(
  "envoy.service.status.v3.PerXdsConfig",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ConfigStatus) },
    { no: 7, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientConfigStatus) },
    { no: 2, name: "listener_config", kind: "message", T: ListenersConfigDump, oneof: "per_xds_config" },
    { no: 3, name: "cluster_config", kind: "message", T: ClustersConfigDump, oneof: "per_xds_config" },
    { no: 4, name: "route_config", kind: "message", T: RoutesConfigDump, oneof: "per_xds_config" },
    { no: 5, name: "scoped_route_config", kind: "message", T: ScopedRoutesConfigDump, oneof: "per_xds_config" },
    { no: 6, name: "endpoint_config", kind: "message", T: EndpointsConfigDump, oneof: "per_xds_config" },
  ],
);

/**
 * All xds configs for a particular client.
 *
 * @generated from message envoy.service.status.v3.ClientConfig
 */
export const ClientConfig = proto3.makeMessageType(
  "envoy.service.status.v3.ClientConfig",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "xds_config", kind: "message", T: PerXdsConfig, repeated: true },
    { no: 3, name: "generic_xds_configs", kind: "message", T: ClientConfig_GenericXdsConfig, repeated: true },
  ],
);

/**
 * GenericXdsConfig is used to specify the config status and the dump
 * of any xDS resource identified by their type URL. It is the generalized
 * version of the now deprecated ListenersConfigDump, ClustersConfigDump etc
 * [#next-free-field: 10]
 *
 * @generated from message envoy.service.status.v3.ClientConfig.GenericXdsConfig
 */
export const ClientConfig_GenericXdsConfig = proto3.makeMessageType(
  "envoy.service.status.v3.ClientConfig.GenericXdsConfig",
  () => [
    { no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "xds_config", kind: "message", T: Any },
    { no: 5, name: "last_updated", kind: "message", T: Timestamp },
    { no: 6, name: "config_status", kind: "enum", T: proto3.getEnumType(ConfigStatus) },
    { no: 7, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
    { no: 8, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 9, name: "is_static_resource", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "ClientConfig_GenericXdsConfig"},
);

/**
 * @generated from message envoy.service.status.v3.ClientStatusResponse
 */
export const ClientStatusResponse = proto3.makeMessageType(
  "envoy.service.status.v3.ClientStatusResponse",
  () => [
    { no: 1, name: "config", kind: "message", T: ClientConfig, repeated: true },
  ],
);

