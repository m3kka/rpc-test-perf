// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/status/v2/csds.proto (package envoy.service.status.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { NodeMatcher } from "../../../type/matcher/node_pb.js";
import type { ClustersConfigDump, ListenersConfigDump, RoutesConfigDump, ScopedRoutesConfigDump } from "../../../admin/v2alpha/config_dump_pb.js";
import type { Node } from "../../../api/v2/core/base_pb.js";

/**
 * Status of a config.
 *
 * @generated from enum envoy.service.status.v2.ConfigStatus
 */
export declare enum ConfigStatus {
  /**
   * Status info is not available/unknown.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Management server has sent the config to client and received ACK.
   *
   * @generated from enum value: SYNCED = 1;
   */
  SYNCED = 1,

  /**
   * Config is not sent.
   *
   * @generated from enum value: NOT_SENT = 2;
   */
  NOT_SENT = 2,

  /**
   * Management server has sent the config to client but hasnâ€™t received
   * ACK/NACK.
   *
   * @generated from enum value: STALE = 3;
   */
  STALE = 3,

  /**
   * Management server has sent the config to client but received NACK.
   *
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Request for client status of clients identified by a list of NodeMatchers.
 *
 * @generated from message envoy.service.status.v2.ClientStatusRequest
 */
export declare class ClientStatusRequest extends Message<ClientStatusRequest> {
  /**
   * Management server can use these match criteria to identify clients.
   * The match follows OR semantics.
   *
   * @generated from field: repeated envoy.type.matcher.NodeMatcher node_matchers = 1;
   */
  nodeMatchers: NodeMatcher[];

  constructor(data?: PartialMessage<ClientStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v2.ClientStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStatusRequest;

  static equals(a: ClientStatusRequest | PlainMessage<ClientStatusRequest> | undefined, b: ClientStatusRequest | PlainMessage<ClientStatusRequest> | undefined): boolean;
}

/**
 * Detailed config (per xDS) with status.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.status.v2.PerXdsConfig
 */
export declare class PerXdsConfig extends Message<PerXdsConfig> {
  /**
   * @generated from field: envoy.service.status.v2.ConfigStatus status = 1;
   */
  status: ConfigStatus;

  /**
   * @generated from oneof envoy.service.status.v2.PerXdsConfig.per_xds_config
   */
  perXdsConfig: {
    /**
     * @generated from field: envoy.admin.v2alpha.ListenersConfigDump listener_config = 2;
     */
    value: ListenersConfigDump;
    case: "listenerConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v2alpha.ClustersConfigDump cluster_config = 3;
     */
    value: ClustersConfigDump;
    case: "clusterConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v2alpha.RoutesConfigDump route_config = 4;
     */
    value: RoutesConfigDump;
    case: "routeConfig";
  } | {
    /**
     * @generated from field: envoy.admin.v2alpha.ScopedRoutesConfigDump scoped_route_config = 5;
     */
    value: ScopedRoutesConfigDump;
    case: "scopedRouteConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PerXdsConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v2.PerXdsConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerXdsConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerXdsConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerXdsConfig;

  static equals(a: PerXdsConfig | PlainMessage<PerXdsConfig> | undefined, b: PerXdsConfig | PlainMessage<PerXdsConfig> | undefined): boolean;
}

/**
 * All xds configs for a particular client.
 *
 * @generated from message envoy.service.status.v2.ClientConfig
 */
export declare class ClientConfig extends Message<ClientConfig> {
  /**
   * Node for a particular client.
   *
   * @generated from field: envoy.api.v2.core.Node node = 1;
   */
  node?: Node;

  /**
   * @generated from field: repeated envoy.service.status.v2.PerXdsConfig xds_config = 2;
   */
  xdsConfig: PerXdsConfig[];

  constructor(data?: PartialMessage<ClientConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v2.ClientConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfig;

  static equals(a: ClientConfig | PlainMessage<ClientConfig> | undefined, b: ClientConfig | PlainMessage<ClientConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.service.status.v2.ClientStatusResponse
 */
export declare class ClientStatusResponse extends Message<ClientStatusResponse> {
  /**
   * Client configs for the clients specified in the ClientStatusRequest.
   *
   * @generated from field: repeated envoy.service.status.v2.ClientConfig config = 1;
   */
  config: ClientConfig[];

  constructor(data?: PartialMessage<ClientStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.status.v2.ClientStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStatusResponse;

  static equals(a: ClientStatusResponse | PlainMessage<ClientStatusResponse> | undefined, b: ClientStatusResponse | PlainMessage<ClientStatusResponse> | undefined): boolean;
}

