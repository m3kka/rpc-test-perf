// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/status/v2/csds.proto (package envoy.service.status.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { NodeMatcher } from "../../../type/matcher/node_pb.js";
import { ClustersConfigDump, ListenersConfigDump, RoutesConfigDump, ScopedRoutesConfigDump } from "../../../admin/v2alpha/config_dump_pb.js";
import { Node } from "../../../api/v2/core/base_pb.js";

/**
 * Status of a config.
 *
 * @generated from enum envoy.service.status.v2.ConfigStatus
 */
export const ConfigStatus = proto3.makeEnum(
  "envoy.service.status.v2.ConfigStatus",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "SYNCED"},
    {no: 2, name: "NOT_SENT"},
    {no: 3, name: "STALE"},
    {no: 4, name: "ERROR"},
  ],
);

/**
 * Request for client status of clients identified by a list of NodeMatchers.
 *
 * @generated from message envoy.service.status.v2.ClientStatusRequest
 */
export const ClientStatusRequest = proto3.makeMessageType(
  "envoy.service.status.v2.ClientStatusRequest",
  () => [
    { no: 1, name: "node_matchers", kind: "message", T: NodeMatcher, repeated: true },
  ],
);

/**
 * Detailed config (per xDS) with status.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.status.v2.PerXdsConfig
 */
export const PerXdsConfig = proto3.makeMessageType(
  "envoy.service.status.v2.PerXdsConfig",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ConfigStatus) },
    { no: 2, name: "listener_config", kind: "message", T: ListenersConfigDump, oneof: "per_xds_config" },
    { no: 3, name: "cluster_config", kind: "message", T: ClustersConfigDump, oneof: "per_xds_config" },
    { no: 4, name: "route_config", kind: "message", T: RoutesConfigDump, oneof: "per_xds_config" },
    { no: 5, name: "scoped_route_config", kind: "message", T: ScopedRoutesConfigDump, oneof: "per_xds_config" },
  ],
);

/**
 * All xds configs for a particular client.
 *
 * @generated from message envoy.service.status.v2.ClientConfig
 */
export const ClientConfig = proto3.makeMessageType(
  "envoy.service.status.v2.ClientConfig",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "xds_config", kind: "message", T: PerXdsConfig, repeated: true },
  ],
);

/**
 * @generated from message envoy.service.status.v2.ClientStatusResponse
 */
export const ClientStatusResponse = proto3.makeMessageType(
  "envoy.service.status.v2.ClientStatusResponse",
  () => [
    { no: 1, name: "config", kind: "message", T: ClientConfig, repeated: true },
  ],
);

