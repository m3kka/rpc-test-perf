// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/trace/v3/trace_service.proto" (package "envoy.service.trace.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TraceService } from "./trace_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamTracesResponse } from "./trace_service";
import type { StreamTracesMessage } from "./trace_service";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Trace service]

/**
 * Service for streaming traces to server that consumes the trace data. It
 * uses OpenCensus data model as a standard to represent trace information.
 *
 * @generated from protobuf service envoy.service.trace.v3.TraceService
 */
export interface ITraceServiceClient {
    /**
     * Envoy will connect and send StreamTracesMessage messages forever. It does
     * not expect any response to be sent as nothing would be done in the case
     * of failure.
     *
     * @generated from protobuf rpc: StreamTraces(stream envoy.service.trace.v3.StreamTracesMessage) returns (envoy.service.trace.v3.StreamTracesResponse);
     */
    streamTraces(options?: RpcOptions): ClientStreamingCall<StreamTracesMessage, StreamTracesResponse>;
}
// [#protodoc-title: Trace service]

/**
 * Service for streaming traces to server that consumes the trace data. It
 * uses OpenCensus data model as a standard to represent trace information.
 *
 * @generated from protobuf service envoy.service.trace.v3.TraceService
 */
export class TraceServiceClient implements ITraceServiceClient, ServiceInfo {
    typeName = TraceService.typeName;
    methods = TraceService.methods;
    options = TraceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Envoy will connect and send StreamTracesMessage messages forever. It does
     * not expect any response to be sent as nothing would be done in the case
     * of failure.
     *
     * @generated from protobuf rpc: StreamTraces(stream envoy.service.trace.v3.StreamTracesMessage) returns (envoy.service.trace.v3.StreamTracesResponse);
     */
    streamTraces(options?: RpcOptions): ClientStreamingCall<StreamTracesMessage, StreamTracesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamTracesMessage, StreamTracesResponse>("clientStreaming", this._transport, method, opt);
    }
}
