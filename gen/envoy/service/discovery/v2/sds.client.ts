// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/discovery/v2/sds.proto" (package "envoy.service.discovery.v2", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SecretDiscoveryService } from "./sds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "../../../api/v2/discovery";
import type { DiscoveryRequest } from "../../../api/v2/discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "../../../api/v2/discovery";
import type { DeltaDiscoveryRequest } from "../../../api/v2/discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Secret Discovery Service (SDS)]

/**
 * @generated from protobuf service envoy.service.discovery.v2.SecretDiscoveryService
 */
export interface ISecretDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: DeltaSecrets(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaSecrets(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: StreamSecrets(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamSecrets(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchSecrets(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchSecrets(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: Secret Discovery Service (SDS)]

/**
 * @generated from protobuf service envoy.service.discovery.v2.SecretDiscoveryService
 */
export class SecretDiscoveryServiceClient implements ISecretDiscoveryServiceClient, ServiceInfo {
    typeName = SecretDiscoveryService.typeName;
    methods = SecretDiscoveryService.methods;
    options = SecretDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DeltaSecrets(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaSecrets(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: StreamSecrets(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamSecrets(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchSecrets(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchSecrets(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
