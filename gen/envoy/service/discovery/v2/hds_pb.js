// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/discovery/v2/hds.proto (package envoy.service.discovery.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";
import { Locality, Node } from "../../../api/v2/core/base_pb.js";
import { Endpoint } from "../../../api/v2/endpoint/endpoint_components_pb.js";
import { HealthCheck, HealthStatus } from "../../../api/v2/core/health_check_pb.js";

/**
 * Defines supported protocols etc, so the management server can assign proper
 * endpoints to healthcheck.
 *
 * @generated from message envoy.service.discovery.v2.Capability
 */
export const Capability = proto3.makeMessageType(
  "envoy.service.discovery.v2.Capability",
  () => [
    { no: 1, name: "health_check_protocols", kind: "enum", T: proto3.getEnumType(Capability_Protocol), repeated: true },
  ],
);

/**
 * Different Envoy instances may have different capabilities (e.g. Redis)
 * and/or have ports enabled for different protocols.
 *
 * @generated from enum envoy.service.discovery.v2.Capability.Protocol
 */
export const Capability_Protocol = proto3.makeEnum(
  "envoy.service.discovery.v2.Capability.Protocol",
  [
    {no: 0, name: "HTTP"},
    {no: 1, name: "TCP"},
    {no: 2, name: "REDIS"},
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.HealthCheckRequest
 */
export const HealthCheckRequest = proto3.makeMessageType(
  "envoy.service.discovery.v2.HealthCheckRequest",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "capability", kind: "message", T: Capability },
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.EndpointHealth
 */
export const EndpointHealth = proto3.makeMessageType(
  "envoy.service.discovery.v2.EndpointHealth",
  () => [
    { no: 1, name: "endpoint", kind: "message", T: Endpoint },
    { no: 2, name: "health_status", kind: "enum", T: proto3.getEnumType(HealthStatus) },
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.EndpointHealthResponse
 */
export const EndpointHealthResponse = proto3.makeMessageType(
  "envoy.service.discovery.v2.EndpointHealthResponse",
  () => [
    { no: 1, name: "endpoints_health", kind: "message", T: EndpointHealth, repeated: true },
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse
 */
export const HealthCheckRequestOrEndpointHealthResponse = proto3.makeMessageType(
  "envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse",
  () => [
    { no: 1, name: "health_check_request", kind: "message", T: HealthCheckRequest, oneof: "request_type" },
    { no: 2, name: "endpoint_health_response", kind: "message", T: EndpointHealthResponse, oneof: "request_type" },
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.LocalityEndpoints
 */
export const LocalityEndpoints = proto3.makeMessageType(
  "envoy.service.discovery.v2.LocalityEndpoints",
  () => [
    { no: 1, name: "locality", kind: "message", T: Locality },
    { no: 2, name: "endpoints", kind: "message", T: Endpoint, repeated: true },
  ],
);

/**
 * The cluster name and locality is provided to Envoy for the endpoints that it
 * health checks to support statistics reporting, logging and debugging by the
 * Envoy instance (outside of HDS). For maximum usefulness, it should match the
 * same cluster structure as that provided by EDS.
 *
 * @generated from message envoy.service.discovery.v2.ClusterHealthCheck
 */
export const ClusterHealthCheck = proto3.makeMessageType(
  "envoy.service.discovery.v2.ClusterHealthCheck",
  () => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "health_checks", kind: "message", T: HealthCheck, repeated: true },
    { no: 3, name: "locality_endpoints", kind: "message", T: LocalityEndpoints, repeated: true },
  ],
);

/**
 * @generated from message envoy.service.discovery.v2.HealthCheckSpecifier
 */
export const HealthCheckSpecifier = proto3.makeMessageType(
  "envoy.service.discovery.v2.HealthCheckSpecifier",
  () => [
    { no: 1, name: "cluster_health_checks", kind: "message", T: ClusterHealthCheck, repeated: true },
    { no: 2, name: "interval", kind: "message", T: Duration },
  ],
);

