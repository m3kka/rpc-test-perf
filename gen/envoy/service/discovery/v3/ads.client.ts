// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/discovery/v3/ads.proto" (package "envoy.service.discovery.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AggregatedDiscoveryService } from "./ads";
import type { DeltaDiscoveryResponse } from "./discovery";
import type { DeltaDiscoveryRequest } from "./discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "./discovery";
import type { DiscoveryRequest } from "./discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Aggregated Discovery Service (ADS)]

// Discovery services for endpoints, clusters, routes,
// and listeners are retained in the package `envoy.api.v2` for backwards
// compatibility with existing management servers. New development in discovery
// services should proceed in the package `envoy.service.discovery.v2`.

/**
 * See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
 * ADS and how it is intended to be used by a management server. ADS requests
 * have the same structure as their singleton xDS counterparts, but can
 * multiplex many resource types on a single stream. The type_url in the
 * DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
 * the multiplexed singleton APIs at the Envoy instance and management server.
 *
 * @generated from protobuf service envoy.service.discovery.v3.AggregatedDiscoveryService
 */
export interface IAggregatedDiscoveryServiceClient {
    /**
     * This is a gRPC-only API.
     *
     * @generated from protobuf rpc: StreamAggregatedResources(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamAggregatedResources(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaAggregatedResources(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaAggregatedResources(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
}
// [#protodoc-title: Aggregated Discovery Service (ADS)]

// Discovery services for endpoints, clusters, routes,
// and listeners are retained in the package `envoy.api.v2` for backwards
// compatibility with existing management servers. New development in discovery
// services should proceed in the package `envoy.service.discovery.v2`.

/**
 * See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
 * ADS and how it is intended to be used by a management server. ADS requests
 * have the same structure as their singleton xDS counterparts, but can
 * multiplex many resource types on a single stream. The type_url in the
 * DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
 * the multiplexed singleton APIs at the Envoy instance and management server.
 *
 * @generated from protobuf service envoy.service.discovery.v3.AggregatedDiscoveryService
 */
export class AggregatedDiscoveryServiceClient implements IAggregatedDiscoveryServiceClient, ServiceInfo {
    typeName = AggregatedDiscoveryService.typeName;
    methods = AggregatedDiscoveryService.methods;
    options = AggregatedDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * This is a gRPC-only API.
     *
     * @generated from protobuf rpc: StreamAggregatedResources(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamAggregatedResources(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaAggregatedResources(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaAggregatedResources(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
}
