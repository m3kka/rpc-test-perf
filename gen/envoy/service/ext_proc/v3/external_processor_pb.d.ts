// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/ext_proc/v3/external_processor.proto (package envoy.service.ext_proc.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ProcessingMode } from "../../../extensions/filters/http/ext_proc/v3/processing_mode_pb.js";
import type { HeaderMap, HeaderValueOption } from "../../../config/core/v3/base_pb.js";
import type { HttpStatus } from "../../../type/v3/http_status_pb.js";

/**
 * This represents the different types of messages that Envoy can send
 * to an external processing server.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingRequest
 */
export declare class ProcessingRequest extends Message<ProcessingRequest> {
  /**
   * Specify whether the filter that sent this request is running in synchronous
   * or asynchronous mode. The choice of synchronous or asynchronous mode
   * can be set in the filter configuration, and defaults to false.
   *
   * * A value of ``false`` indicates that the server must respond
   *   to this message by either sending back a matching ProcessingResponse message,
   *   or by closing the stream.
   * * A value of ``true`` indicates that the server must not respond to this
   *   message, although it may still close the stream to indicate that no more messages
   *   are needed.
   *
   *
   * @generated from field: bool async_mode = 1;
   */
  asyncMode: boolean;

  /**
   * Each request message will include one of the following sub-messages. Which
   * ones are set for a particular HTTP request/response depend on the
   * processing mode.
   *
   * @generated from oneof envoy.service.ext_proc.v3.ProcessingRequest.request
   */
  request: {
    /**
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;
     */
    value: HttpHeaders;
    case: "requestHeaders";
  } | {
    /**
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;
     */
    value: HttpHeaders;
    case: "responseHeaders";
  } | {
    /**
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpBody request_body = 4;
     */
    value: HttpBody;
    case: "requestBody";
  } | {
    /**
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpBody response_body = 5;
     */
    value: HttpBody;
    case: "responseBody";
  } | {
    /**
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     *
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;
     */
    value: HttpTrailers;
    case: "requestTrailers";
  } | {
    /**
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     *
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;
     */
    value: HttpTrailers;
    case: "responseTrailers";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ProcessingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.ProcessingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingRequest;

  static equals(a: ProcessingRequest | PlainMessage<ProcessingRequest> | undefined, b: ProcessingRequest | PlainMessage<ProcessingRequest> | undefined): boolean;
}

/**
 * For every ProcessingRequest received by the server with the ``async_mode`` field
 * set to false, the server must send back exactly one ProcessingResponse message.
 * [#next-free-field: 11]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingResponse
 */
export declare class ProcessingResponse extends Message<ProcessingResponse> {
  /**
   * @generated from oneof envoy.service.ext_proc.v3.ProcessingResponse.response
   */
  response: {
    /**
     * The server must send back this message in response to a message with the
     * ``request_headers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.HeadersResponse request_headers = 1;
     */
    value: HeadersResponse;
    case: "requestHeaders";
  } | {
    /**
     * The server must send back this message in response to a message with the
     * ``response_headers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.HeadersResponse response_headers = 2;
     */
    value: HeadersResponse;
    case: "responseHeaders";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``request_body`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.BodyResponse request_body = 3;
     */
    value: BodyResponse;
    case: "requestBody";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``response_body`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.BodyResponse response_body = 4;
     */
    value: BodyResponse;
    case: "responseBody";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``request_trailers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.TrailersResponse request_trailers = 5;
     */
    value: TrailersResponse;
    case: "requestTrailers";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``response_trailers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.TrailersResponse response_trailers = 6;
     */
    value: TrailersResponse;
    case: "responseTrailers";
  } | {
    /**
     * If specified, attempt to create a locally generated response, send it
     * downstream, and stop processing additional filters and ignore any
     * additional messages received from the remote server for this request or
     * response. If a response has already started -- for example, if this
     * message is sent response to a ``response_body`` message -- then
     * this will either ship the reply directly to the downstream codec,
     * or reset the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.ImmediateResponse immediate_response = 7;
     */
    value: ImmediateResponse;
    case: "immediateResponse";
  } | { case: undefined; value?: undefined };

  /**
   * [#not-implemented-hide:]
   * Optional metadata that will be emitted as dynamic metadata to be consumed by the next
   * filter. This metadata will be placed in the namespace ``envoy.filters.http.ext_proc``.
   *
   * @generated from field: google.protobuf.Struct dynamic_metadata = 8;
   */
  dynamicMetadata?: Struct;

  /**
   * Override how parts of the HTTP request and response are processed
   * for the duration of this particular request/response only. Servers
   * may use this to intelligently control how requests are processed
   * based on the headers and other metadata that they see.
   * This field is ignored by Envoy when the ext_proc filter config
   * :ref:`allow_mode_override
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allow_mode_override>`
   * is set to false.
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode mode_override = 9;
   */
  modeOverride?: ProcessingMode;

  /**
   * When ext_proc server receives a request message, in case it needs more
   * time to process the message, it sends back a ProcessingResponse message
   * with a new timeout value. When Envoy receives this response message,
   * it ignores other fields in the response, just stop the original timer,
   * which has the timeout value specified in
   * :ref:`message_timeout
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.message_timeout>`
   * and start a new timer with this ``override_message_timeout`` value and keep the
   * Envoy ext_proc filter state machine intact.
   * Has to be >= 1ms and <=
   * :ref:`max_message_timeout <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.max_message_timeout>`
   * Such message can be sent at most once in a particular Envoy ext_proc filter processing state.
   * To enable this API, one has to set ``max_message_timeout`` to a number >= 1ms.
   *
   * @generated from field: google.protobuf.Duration override_message_timeout = 10;
   */
  overrideMessageTimeout?: Duration;

  constructor(data?: PartialMessage<ProcessingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.ProcessingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingResponse;

  static equals(a: ProcessingResponse | PlainMessage<ProcessingResponse> | undefined, b: ProcessingResponse | PlainMessage<ProcessingResponse> | undefined): boolean;
}

/**
 * This message is sent to the external server when the HTTP request and responses
 * are first received.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpHeaders
 */
export declare class HttpHeaders extends Message<HttpHeaders> {
  /**
   * The HTTP request headers. All header keys will be
   * lower-cased, because HTTP header keys are case-insensitive.
   * The ``headers`` encoding is based on the runtime guard
   * envoy_reloadable_features_send_header_raw_value setting.
   * When it is true, the header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   * When it is false, the header value is encoded in the
   * :ref:`value <envoy_v3_api_field_config.core.v3.HeaderValue.value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap headers = 1;
   */
  headers?: HeaderMap;

  /**
   * [#not-implemented-hide:]
   * The values of properties selected by the ``request_attributes``
   * or ``response_attributes`` list in the configuration. Each entry
   * in the list is populated
   * from the standard :ref:`attributes <arch_overview_attributes>`
   * supported across Envoy.
   *
   * @generated from field: map<string, google.protobuf.Struct> attributes = 2;
   */
  attributes: { [key: string]: Struct };

  /**
   * If true, then there is no message body associated with this
   * request or response.
   *
   * @generated from field: bool end_of_stream = 3;
   */
  endOfStream: boolean;

  constructor(data?: PartialMessage<HttpHeaders>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.HttpHeaders";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpHeaders;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpHeaders;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpHeaders;

  static equals(a: HttpHeaders | PlainMessage<HttpHeaders> | undefined, b: HttpHeaders | PlainMessage<HttpHeaders> | undefined): boolean;
}

/**
 * This message contains the message body that Envoy sends to the external server.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpBody
 */
export declare class HttpBody extends Message<HttpBody> {
  /**
   * @generated from field: bytes body = 1;
   */
  body: Uint8Array;

  /**
   * @generated from field: bool end_of_stream = 2;
   */
  endOfStream: boolean;

  constructor(data?: PartialMessage<HttpBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.HttpBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpBody;

  static equals(a: HttpBody | PlainMessage<HttpBody> | undefined, b: HttpBody | PlainMessage<HttpBody> | undefined): boolean;
}

/**
 * This message contains the trailers.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpTrailers
 */
export declare class HttpTrailers extends Message<HttpTrailers> {
  /**
   * The ``trailers`` encoding is based on the runtime guard
   * envoy_reloadable_features_send_header_raw_value setting.
   * When it is true, the header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   * When it is false, the header value is encoded in the
   * :ref:`value <envoy_v3_api_field_config.core.v3.HeaderValue.value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap trailers = 1;
   */
  trailers?: HeaderMap;

  constructor(data?: PartialMessage<HttpTrailers>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.HttpTrailers";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpTrailers;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpTrailers;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpTrailers;

  static equals(a: HttpTrailers | PlainMessage<HttpTrailers> | undefined, b: HttpTrailers | PlainMessage<HttpTrailers> | undefined): boolean;
}

/**
 * This message must be sent in response to an HttpHeaders message.
 *
 * @generated from message envoy.service.ext_proc.v3.HeadersResponse
 */
export declare class HeadersResponse extends Message<HeadersResponse> {
  /**
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse response = 1;
   */
  response?: CommonResponse;

  constructor(data?: PartialMessage<HeadersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.HeadersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeadersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeadersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeadersResponse;

  static equals(a: HeadersResponse | PlainMessage<HeadersResponse> | undefined, b: HeadersResponse | PlainMessage<HeadersResponse> | undefined): boolean;
}

/**
 * This message must be sent in response to an HttpTrailers message.
 *
 * @generated from message envoy.service.ext_proc.v3.TrailersResponse
 */
export declare class TrailersResponse extends Message<TrailersResponse> {
  /**
   * Instructions on how to manipulate the trailers
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation header_mutation = 1;
   */
  headerMutation?: HeaderMutation;

  constructor(data?: PartialMessage<TrailersResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.TrailersResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrailersResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrailersResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrailersResponse;

  static equals(a: TrailersResponse | PlainMessage<TrailersResponse> | undefined, b: TrailersResponse | PlainMessage<TrailersResponse> | undefined): boolean;
}

/**
 * This message must be sent in response to an HttpBody message.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyResponse
 */
export declare class BodyResponse extends Message<BodyResponse> {
  /**
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse response = 1;
   */
  response?: CommonResponse;

  constructor(data?: PartialMessage<BodyResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.BodyResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BodyResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BodyResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BodyResponse;

  static equals(a: BodyResponse | PlainMessage<BodyResponse> | undefined, b: BodyResponse | PlainMessage<BodyResponse> | undefined): boolean;
}

/**
 * This message contains common fields between header and body responses.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.CommonResponse
 */
export declare class CommonResponse extends Message<CommonResponse> {
  /**
   * If set, provide additional direction on how the Envoy proxy should
   * handle the rest of the HTTP filter chain.
   *
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse.ResponseStatus status = 1;
   */
  status: CommonResponse_ResponseStatus;

  /**
   * Instructions on how to manipulate the headers. When responding to an
   * HttpBody request, header mutations will only take effect if
   * the current processing mode for the body is BUFFERED.
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation header_mutation = 2;
   */
  headerMutation?: HeaderMutation;

  /**
   * Replace the body of the last message sent to the remote server on this
   * stream. If responding to an HttpBody request, simply replace or clear
   * the body chunk that was sent with that request. Body mutations may take
   * effect in response either to ``header`` or ``body`` messages. When it is
   * in response to ``header`` messages, it only take effect if the
   * :ref:`status <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.status>`
   * is set to CONTINUE_AND_REPLACE.
   *
   * @generated from field: envoy.service.ext_proc.v3.BodyMutation body_mutation = 3;
   */
  bodyMutation?: BodyMutation;

  /**
   * [#not-implemented-hide:]
   * Add new trailers to the message. This may be used when responding to either a
   * HttpHeaders or HttpBody message, but only if this message is returned
   * along with the CONTINUE_AND_REPLACE status.
   * The ``trailers`` encoding is based on the runtime guard
   * envoy_reloadable_features_send_header_raw_value setting.
   * When it is true, the header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   * When it is false, the header value is encoded in the
   * :ref:`value <envoy_v3_api_field_config.core.v3.HeaderValue.value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap trailers = 4;
   */
  trailers?: HeaderMap;

  /**
   * Clear the route cache for the current client request. This is necessary
   * if the remote server modified headers that are used to calculate the route.
   * This field is ignored in the response direction.
   *
   * @generated from field: bool clear_route_cache = 5;
   */
  clearRouteCache: boolean;

  constructor(data?: PartialMessage<CommonResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.CommonResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonResponse;

  static equals(a: CommonResponse | PlainMessage<CommonResponse> | undefined, b: CommonResponse | PlainMessage<CommonResponse> | undefined): boolean;
}

/**
 * @generated from enum envoy.service.ext_proc.v3.CommonResponse.ResponseStatus
 */
export declare enum CommonResponse_ResponseStatus {
  /**
   * Apply the mutation instructions in this message to the
   * request or response, and then continue processing the filter
   * stream as normal. This is the default.
   *
   * @generated from enum value: CONTINUE = 0;
   */
  CONTINUE = 0,

  /**
   * Apply the specified header mutation, replace the body with the body
   * specified in the body mutation (if present), and do not send any
   * further messages for this request or response even if the processing
   * mode is configured to do so.
   *
   * When used in response to a request_headers or response_headers message,
   * this status makes it possible to either completely replace the body
   * while discarding the original body, or to add a body to a message that
   * formerly did not have one.
   *
   * In other words, this response makes it possible to turn an HTTP GET
   * into a POST, PUT, or PATCH.
   *
   * @generated from enum value: CONTINUE_AND_REPLACE = 1;
   */
  CONTINUE_AND_REPLACE = 1,
}

/**
 * This message causes the filter to attempt to create a locally
 * generated response, send it  downstream, stop processing
 * additional filters, and ignore any additional messages received
 * from the remote server for this request or response. If a response
 * has already started, then  this will either ship the reply directly
 * to the downstream codec, or reset the stream.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.ImmediateResponse
 */
export declare class ImmediateResponse extends Message<ImmediateResponse> {
  /**
   * The response code to return
   *
   * @generated from field: envoy.type.v3.HttpStatus status = 1;
   */
  status?: HttpStatus;

  /**
   * Apply changes to the default headers, which will include content-type.
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation headers = 2;
   */
  headers?: HeaderMutation;

  /**
   * The message body to return with the response which is sent using the
   * text/plain content type, or encoded in the grpc-message header.
   *
   * @generated from field: string body = 3;
   */
  body: string;

  /**
   * If set, then include a gRPC status trailer.
   *
   * @generated from field: envoy.service.ext_proc.v3.GrpcStatus grpc_status = 4;
   */
  grpcStatus?: GrpcStatus;

  /**
   * A string detailing why this local reply was sent, which may be included
   * in log and debug output (e.g. this populates the %RESPONSE_CODE_DETAILS%
   * command operator field for use in access logging).
   *
   * @generated from field: string details = 5;
   */
  details: string;

  constructor(data?: PartialMessage<ImmediateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.ImmediateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImmediateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImmediateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImmediateResponse;

  static equals(a: ImmediateResponse | PlainMessage<ImmediateResponse> | undefined, b: ImmediateResponse | PlainMessage<ImmediateResponse> | undefined): boolean;
}

/**
 * This message specifies a gRPC status for an ImmediateResponse message.
 *
 * @generated from message envoy.service.ext_proc.v3.GrpcStatus
 */
export declare class GrpcStatus extends Message<GrpcStatus> {
  /**
   * The actual gRPC status
   *
   * @generated from field: uint32 status = 1;
   */
  status: number;

  constructor(data?: PartialMessage<GrpcStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.GrpcStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStatus;

  static equals(a: GrpcStatus | PlainMessage<GrpcStatus> | undefined, b: GrpcStatus | PlainMessage<GrpcStatus> | undefined): boolean;
}

/**
 * Change HTTP headers or trailers by appending, replacing, or removing
 * headers.
 *
 * @generated from message envoy.service.ext_proc.v3.HeaderMutation
 */
export declare class HeaderMutation extends Message<HeaderMutation> {
  /**
   * Add or replace HTTP headers. Attempts to set the value of
   * any ``x-envoy`` header, and attempts to set the ``:method``,
   * ``:authority``, ``:scheme``, or ``host`` headers will be ignored.
   * The ``set_headers`` encoding is based on the runtime guard
   * envoy_reloadable_features_send_header_raw_value setting.
   * When it is true, the header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   * When it is false, the header value is encoded in the
   * :ref:`value <envoy_v3_api_field_config.core.v3.HeaderValue.value>` field.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption set_headers = 1;
   */
  setHeaders: HeaderValueOption[];

  /**
   * Remove these HTTP headers. Attempts to remove system headers --
   * any header starting with ``:``, plus ``host`` -- will be ignored.
   *
   * @generated from field: repeated string remove_headers = 2;
   */
  removeHeaders: string[];

  constructor(data?: PartialMessage<HeaderMutation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.HeaderMutation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMutation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMutation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMutation;

  static equals(a: HeaderMutation | PlainMessage<HeaderMutation> | undefined, b: HeaderMutation | PlainMessage<HeaderMutation> | undefined): boolean;
}

/**
 * Replace the entire message body chunk received in the corresponding
 * HttpBody message with this new body, or clear the body.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyMutation
 */
export declare class BodyMutation extends Message<BodyMutation> {
  /**
   * @generated from oneof envoy.service.ext_proc.v3.BodyMutation.mutation
   */
  mutation: {
    /**
     * The entire body to replace
     *
     * @generated from field: bytes body = 1;
     */
    value: Uint8Array;
    case: "body";
  } | {
    /**
     * Clear the corresponding body chunk
     *
     * @generated from field: bool clear_body = 2;
     */
    value: boolean;
    case: "clearBody";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<BodyMutation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ext_proc.v3.BodyMutation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BodyMutation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BodyMutation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BodyMutation;

  static equals(a: BodyMutation | PlainMessage<BodyMutation> | undefined, b: BodyMutation | PlainMessage<BodyMutation> | undefined): boolean;
}

