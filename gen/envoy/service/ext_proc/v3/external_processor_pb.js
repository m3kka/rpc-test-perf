// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/ext_proc/v3/external_processor.proto (package envoy.service.ext_proc.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Struct } from "@bufbuild/protobuf";
import { ProcessingMode } from "../../../extensions/filters/http/ext_proc/v3/processing_mode_pb.js";
import { HeaderMap, HeaderValueOption } from "../../../config/core/v3/base_pb.js";
import { HttpStatus } from "../../../type/v3/http_status_pb.js";

/**
 * This represents the different types of messages that Envoy can send
 * to an external processing server.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingRequest
 */
export const ProcessingRequest = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.ProcessingRequest",
  () => [
    { no: 1, name: "async_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "request_headers", kind: "message", T: HttpHeaders, oneof: "request" },
    { no: 3, name: "response_headers", kind: "message", T: HttpHeaders, oneof: "request" },
    { no: 4, name: "request_body", kind: "message", T: HttpBody, oneof: "request" },
    { no: 5, name: "response_body", kind: "message", T: HttpBody, oneof: "request" },
    { no: 6, name: "request_trailers", kind: "message", T: HttpTrailers, oneof: "request" },
    { no: 7, name: "response_trailers", kind: "message", T: HttpTrailers, oneof: "request" },
  ],
);

/**
 * For every ProcessingRequest received by the server with the ``async_mode`` field
 * set to false, the server must send back exactly one ProcessingResponse message.
 * [#next-free-field: 11]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingResponse
 */
export const ProcessingResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.ProcessingResponse",
  () => [
    { no: 1, name: "request_headers", kind: "message", T: HeadersResponse, oneof: "response" },
    { no: 2, name: "response_headers", kind: "message", T: HeadersResponse, oneof: "response" },
    { no: 3, name: "request_body", kind: "message", T: BodyResponse, oneof: "response" },
    { no: 4, name: "response_body", kind: "message", T: BodyResponse, oneof: "response" },
    { no: 5, name: "request_trailers", kind: "message", T: TrailersResponse, oneof: "response" },
    { no: 6, name: "response_trailers", kind: "message", T: TrailersResponse, oneof: "response" },
    { no: 7, name: "immediate_response", kind: "message", T: ImmediateResponse, oneof: "response" },
    { no: 8, name: "dynamic_metadata", kind: "message", T: Struct },
    { no: 9, name: "mode_override", kind: "message", T: ProcessingMode },
    { no: 10, name: "override_message_timeout", kind: "message", T: Duration },
  ],
);

/**
 * This message is sent to the external server when the HTTP request and responses
 * are first received.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpHeaders
 */
export const HttpHeaders = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.HttpHeaders",
  () => [
    { no: 1, name: "headers", kind: "message", T: HeaderMap },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Struct} },
    { no: 3, name: "end_of_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * This message contains the message body that Envoy sends to the external server.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpBody
 */
export const HttpBody = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.HttpBody",
  () => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "end_of_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * This message contains the trailers.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpTrailers
 */
export const HttpTrailers = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.HttpTrailers",
  () => [
    { no: 1, name: "trailers", kind: "message", T: HeaderMap },
  ],
);

/**
 * This message must be sent in response to an HttpHeaders message.
 *
 * @generated from message envoy.service.ext_proc.v3.HeadersResponse
 */
export const HeadersResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.HeadersResponse",
  () => [
    { no: 1, name: "response", kind: "message", T: CommonResponse },
  ],
);

/**
 * This message must be sent in response to an HttpTrailers message.
 *
 * @generated from message envoy.service.ext_proc.v3.TrailersResponse
 */
export const TrailersResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.TrailersResponse",
  () => [
    { no: 1, name: "header_mutation", kind: "message", T: HeaderMutation },
  ],
);

/**
 * This message must be sent in response to an HttpBody message.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyResponse
 */
export const BodyResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.BodyResponse",
  () => [
    { no: 1, name: "response", kind: "message", T: CommonResponse },
  ],
);

/**
 * This message contains common fields between header and body responses.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.CommonResponse
 */
export const CommonResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.CommonResponse",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(CommonResponse_ResponseStatus) },
    { no: 2, name: "header_mutation", kind: "message", T: HeaderMutation },
    { no: 3, name: "body_mutation", kind: "message", T: BodyMutation },
    { no: 4, name: "trailers", kind: "message", T: HeaderMap },
    { no: 5, name: "clear_route_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from enum envoy.service.ext_proc.v3.CommonResponse.ResponseStatus
 */
export const CommonResponse_ResponseStatus = proto3.makeEnum(
  "envoy.service.ext_proc.v3.CommonResponse.ResponseStatus",
  [
    {no: 0, name: "CONTINUE"},
    {no: 1, name: "CONTINUE_AND_REPLACE"},
  ],
);

/**
 * This message causes the filter to attempt to create a locally
 * generated response, send it  downstream, stop processing
 * additional filters, and ignore any additional messages received
 * from the remote server for this request or response. If a response
 * has already started, then  this will either ship the reply directly
 * to the downstream codec, or reset the stream.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.ImmediateResponse
 */
export const ImmediateResponse = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.ImmediateResponse",
  () => [
    { no: 1, name: "status", kind: "message", T: HttpStatus },
    { no: 2, name: "headers", kind: "message", T: HeaderMutation },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "grpc_status", kind: "message", T: GrpcStatus },
    { no: 5, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * This message specifies a gRPC status for an ImmediateResponse message.
 *
 * @generated from message envoy.service.ext_proc.v3.GrpcStatus
 */
export const GrpcStatus = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.GrpcStatus",
  () => [
    { no: 1, name: "status", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Change HTTP headers or trailers by appending, replacing, or removing
 * headers.
 *
 * @generated from message envoy.service.ext_proc.v3.HeaderMutation
 */
export const HeaderMutation = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.HeaderMutation",
  () => [
    { no: 1, name: "set_headers", kind: "message", T: HeaderValueOption, repeated: true },
    { no: 2, name: "remove_headers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Replace the entire message body chunk received in the corresponding
 * HttpBody message with this new body, or clear the body.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyMutation
 */
export const BodyMutation = proto3.makeMessageType(
  "envoy.service.ext_proc.v3.BodyMutation",
  () => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "mutation" },
    { no: 2, name: "clear_body", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "mutation" },
  ],
);

