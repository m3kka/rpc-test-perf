// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/load_stats/v2/lrs.proto" (package "envoy.service.load_stats.v2", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../google/protobuf/duration";
import { ClusterStats } from "../../../api/v2/endpoint/load_report";
import { Node } from "../../../api/v2/core/base";
/**
 * A load report Envoy sends to the management server.
 * [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
 *
 * @generated from protobuf message envoy.service.load_stats.v2.LoadStatsRequest
 */
export interface LoadStatsRequest {
    /**
     * Node identifier for Envoy instance.
     *
     * @generated from protobuf field: envoy.api.v2.core.Node node = 1;
     */
    node?: Node;
    /**
     * A list of load stats to report.
     *
     * @generated from protobuf field: repeated envoy.api.v2.endpoint.ClusterStats cluster_stats = 2;
     */
    clusterStats: ClusterStats[];
}
/**
 * The management server sends envoy a LoadStatsResponse with all clusters it
 * is interested in learning load stats about.
 * [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
 *
 * @generated from protobuf message envoy.service.load_stats.v2.LoadStatsResponse
 */
export interface LoadStatsResponse {
    /**
     * Clusters to report stats for.
     * Not populated if *send_all_clusters* is true.
     *
     * @generated from protobuf field: repeated string clusters = 1;
     */
    clusters: string[];
    /**
     * If true, the client should send all clusters it knows about.
     * Only clients that advertise the "envoy.lrs.supports_send_all_clusters" capability in their
     * :ref:`client_features<envoy_api_field_core.Node.client_features>` field will honor this field.
     *
     * @generated from protobuf field: bool send_all_clusters = 4;
     */
    sendAllClusters: boolean;
    /**
     * The minimum interval of time to collect stats over. This is only a minimum for two reasons:
     * 1. There may be some delay from when the timer fires until stats sampling occurs.
     * 2. For clusters that were already feature in the previous *LoadStatsResponse*, any traffic
     *    that is observed in between the corresponding previous *LoadStatsRequest* and this
     *    *LoadStatsResponse* will also be accumulated and billed to the cluster. This avoids a period
     *    of inobservability that might otherwise exists between the messages. New clusters are not
     *    subject to this consideration.
     *
     * @generated from protobuf field: google.protobuf.Duration load_reporting_interval = 2;
     */
    loadReportingInterval?: Duration;
    /**
     * Set to *true* if the management server supports endpoint granularity
     * report.
     *
     * @generated from protobuf field: bool report_endpoint_granularity = 3;
     */
    reportEndpointGranularity: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatsRequest$Type extends MessageType<LoadStatsRequest> {
    constructor() {
        super("envoy.service.load_stats.v2.LoadStatsRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "cluster_stats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClusterStats }
        ]);
    }
    create(value?: PartialMessage<LoadStatsRequest>): LoadStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterStats = [];
        if (value !== undefined)
            reflectionMergePartial<LoadStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatsRequest): LoadStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated envoy.api.v2.endpoint.ClusterStats cluster_stats */ 2:
                    message.clusterStats.push(ClusterStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.endpoint.ClusterStats cluster_stats = 2; */
        for (let i = 0; i < message.clusterStats.length; i++)
            ClusterStats.internalBinaryWrite(message.clusterStats[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.load_stats.v2.LoadStatsRequest
 */
export const LoadStatsRequest = new LoadStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatsResponse$Type extends MessageType<LoadStatsResponse> {
    constructor() {
        super("envoy.service.load_stats.v2.LoadStatsResponse", [
            { no: 1, name: "clusters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "send_all_clusters", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "load_reporting_interval", kind: "message", T: () => Duration },
            { no: 3, name: "report_endpoint_granularity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LoadStatsResponse>): LoadStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusters = [];
        message.sendAllClusters = false;
        message.reportEndpointGranularity = false;
        if (value !== undefined)
            reflectionMergePartial<LoadStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatsResponse): LoadStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string clusters */ 1:
                    message.clusters.push(reader.string());
                    break;
                case /* bool send_all_clusters */ 4:
                    message.sendAllClusters = reader.bool();
                    break;
                case /* google.protobuf.Duration load_reporting_interval */ 2:
                    message.loadReportingInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.loadReportingInterval);
                    break;
                case /* bool report_endpoint_granularity */ 3:
                    message.reportEndpointGranularity = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string clusters = 1; */
        for (let i = 0; i < message.clusters.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.clusters[i]);
        /* bool send_all_clusters = 4; */
        if (message.sendAllClusters !== false)
            writer.tag(4, WireType.Varint).bool(message.sendAllClusters);
        /* google.protobuf.Duration load_reporting_interval = 2; */
        if (message.loadReportingInterval)
            Duration.internalBinaryWrite(message.loadReportingInterval, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool report_endpoint_granularity = 3; */
        if (message.reportEndpointGranularity !== false)
            writer.tag(3, WireType.Varint).bool(message.reportEndpointGranularity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.load_stats.v2.LoadStatsResponse
 */
export const LoadStatsResponse = new LoadStatsResponse$Type();
/**
 * @generated ServiceType for protobuf service envoy.service.load_stats.v2.LoadReportingService
 */
export const LoadReportingService = new ServiceType("envoy.service.load_stats.v2.LoadReportingService", [
    { name: "StreamLoadStats", serverStreaming: true, clientStreaming: true, options: {}, I: LoadStatsRequest, O: LoadStatsResponse }
]);
