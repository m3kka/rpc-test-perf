// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/ratelimit/v2/rls.proto (package envoy.service.ratelimit.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RateLimitDescriptor } from "../../../api/v2/ratelimit/ratelimit_pb.js";
import type { HeaderValue } from "../../../api/v2/core/base_pb.js";

/**
 * Main message for a rate limit request. The rate limit service is designed to be fully generic
 * in the sense that it can operate on arbitrary hierarchical key/value pairs. The loaded
 * configuration will parse the request and find the most specific limit to apply. In addition,
 * a RateLimitRequest can contain multiple "descriptors" to limit on. When multiple descriptors
 * are provided, the server will limit on *ALL* of them and return an OVER_LIMIT response if any
 * of them are over limit. This enables more complex application level rate limiting scenarios
 * if desired.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitRequest
 */
export declare class RateLimitRequest extends Message<RateLimitRequest> {
  /**
   * All rate limit requests must specify a domain. This enables the configuration to be per
   * application without fear of overlap. E.g., "envoy".
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * All rate limit requests must specify at least one RateLimitDescriptor. Each descriptor is
   * processed by the service (see below). If any of the descriptors are over limit, the entire
   * request is considered to be over limit.
   *
   * @generated from field: repeated envoy.api.v2.ratelimit.RateLimitDescriptor descriptors = 2;
   */
  descriptors: RateLimitDescriptor[];

  /**
   * Rate limit requests can optionally specify the number of hits a request adds to the matched
   * limit. If the value is not set in the message, a request increases the matched limit by 1.
   *
   * @generated from field: uint32 hits_addend = 3;
   */
  hitsAddend: number;

  constructor(data?: PartialMessage<RateLimitRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ratelimit.v2.RateLimitRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitRequest;

  static equals(a: RateLimitRequest | PlainMessage<RateLimitRequest> | undefined, b: RateLimitRequest | PlainMessage<RateLimitRequest> | undefined): boolean;
}

/**
 * A response from a ShouldRateLimit call.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse
 */
export declare class RateLimitResponse extends Message<RateLimitResponse> {
  /**
   * The overall response code which takes into account all of the descriptors that were passed
   * in the RateLimitRequest message.
   *
   * @generated from field: envoy.service.ratelimit.v2.RateLimitResponse.Code overall_code = 1;
   */
  overallCode: RateLimitResponse_Code;

  /**
   * A list of DescriptorStatus messages which matches the length of the descriptor list passed
   * in the RateLimitRequest. This can be used by the caller to determine which individual
   * descriptors failed and/or what the currently configured limits are for all of them.
   *
   * @generated from field: repeated envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus statuses = 2;
   */
  statuses: RateLimitResponse_DescriptorStatus[];

  /**
   * A list of headers to add to the response
   *
   * @generated from field: repeated envoy.api.v2.core.HeaderValue headers = 3;
   */
  headers: HeaderValue[];

  /**
   * A list of headers to add to the request when forwarded
   *
   * @generated from field: repeated envoy.api.v2.core.HeaderValue request_headers_to_add = 4;
   */
  requestHeadersToAdd: HeaderValue[];

  constructor(data?: PartialMessage<RateLimitResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ratelimit.v2.RateLimitResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitResponse;

  static equals(a: RateLimitResponse | PlainMessage<RateLimitResponse> | undefined, b: RateLimitResponse | PlainMessage<RateLimitResponse> | undefined): boolean;
}

/**
 * @generated from enum envoy.service.ratelimit.v2.RateLimitResponse.Code
 */
export declare enum RateLimitResponse_Code {
  /**
   * The response code is not known.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * The response code to notify that the number of requests are under limit.
   *
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * The response code to notify that the number of requests are over limit.
   *
   * @generated from enum value: OVER_LIMIT = 2;
   */
  OVER_LIMIT = 2,
}

/**
 * Defines an actual rate limit in terms of requests per unit of time and the unit itself.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse.RateLimit
 */
export declare class RateLimitResponse_RateLimit extends Message<RateLimitResponse_RateLimit> {
  /**
   * A name or description of this limit.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The number of requests per unit of time.
   *
   * @generated from field: uint32 requests_per_unit = 1;
   */
  requestsPerUnit: number;

  /**
   * The unit of time.
   *
   * @generated from field: envoy.service.ratelimit.v2.RateLimitResponse.RateLimit.Unit unit = 2;
   */
  unit: RateLimitResponse_RateLimit_Unit;

  constructor(data?: PartialMessage<RateLimitResponse_RateLimit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ratelimit.v2.RateLimitResponse.RateLimit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitResponse_RateLimit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitResponse_RateLimit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitResponse_RateLimit;

  static equals(a: RateLimitResponse_RateLimit | PlainMessage<RateLimitResponse_RateLimit> | undefined, b: RateLimitResponse_RateLimit | PlainMessage<RateLimitResponse_RateLimit> | undefined): boolean;
}

/**
 * @generated from enum envoy.service.ratelimit.v2.RateLimitResponse.RateLimit.Unit
 */
export declare enum RateLimitResponse_RateLimit_Unit {
  /**
   * The time unit is not known.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * The time unit representing a second.
   *
   * @generated from enum value: SECOND = 1;
   */
  SECOND = 1,

  /**
   * The time unit representing a minute.
   *
   * @generated from enum value: MINUTE = 2;
   */
  MINUTE = 2,

  /**
   * The time unit representing an hour.
   *
   * @generated from enum value: HOUR = 3;
   */
  HOUR = 3,

  /**
   * The time unit representing a day.
   *
   * @generated from enum value: DAY = 4;
   */
  DAY = 4,
}

/**
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus
 */
export declare class RateLimitResponse_DescriptorStatus extends Message<RateLimitResponse_DescriptorStatus> {
  /**
   * The response code for an individual descriptor.
   *
   * @generated from field: envoy.service.ratelimit.v2.RateLimitResponse.Code code = 1;
   */
  code: RateLimitResponse_Code;

  /**
   * The current limit as configured by the server. Useful for debugging, etc.
   *
   * @generated from field: envoy.service.ratelimit.v2.RateLimitResponse.RateLimit current_limit = 2;
   */
  currentLimit?: RateLimitResponse_RateLimit;

  /**
   * The limit remaining in the current time unit.
   *
   * @generated from field: uint32 limit_remaining = 3;
   */
  limitRemaining: number;

  constructor(data?: PartialMessage<RateLimitResponse_DescriptorStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitResponse_DescriptorStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitResponse_DescriptorStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitResponse_DescriptorStatus;

  static equals(a: RateLimitResponse_DescriptorStatus | PlainMessage<RateLimitResponse_DescriptorStatus> | undefined, b: RateLimitResponse_DescriptorStatus | PlainMessage<RateLimitResponse_DescriptorStatus> | undefined): boolean;
}

