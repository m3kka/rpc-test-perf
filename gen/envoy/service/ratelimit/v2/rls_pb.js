// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/ratelimit/v2/rls.proto (package envoy.service.ratelimit.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { RateLimitDescriptor } from "../../../api/v2/ratelimit/ratelimit_pb.js";
import { HeaderValue } from "../../../api/v2/core/base_pb.js";

/**
 * Main message for a rate limit request. The rate limit service is designed to be fully generic
 * in the sense that it can operate on arbitrary hierarchical key/value pairs. The loaded
 * configuration will parse the request and find the most specific limit to apply. In addition,
 * a RateLimitRequest can contain multiple "descriptors" to limit on. When multiple descriptors
 * are provided, the server will limit on *ALL* of them and return an OVER_LIMIT response if any
 * of them are over limit. This enables more complex application level rate limiting scenarios
 * if desired.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitRequest
 */
export const RateLimitRequest = proto3.makeMessageType(
  "envoy.service.ratelimit.v2.RateLimitRequest",
  () => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "descriptors", kind: "message", T: RateLimitDescriptor, repeated: true },
    { no: 3, name: "hits_addend", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * A response from a ShouldRateLimit call.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse
 */
export const RateLimitResponse = proto3.makeMessageType(
  "envoy.service.ratelimit.v2.RateLimitResponse",
  () => [
    { no: 1, name: "overall_code", kind: "enum", T: proto3.getEnumType(RateLimitResponse_Code) },
    { no: 2, name: "statuses", kind: "message", T: RateLimitResponse_DescriptorStatus, repeated: true },
    { no: 3, name: "headers", kind: "message", T: HeaderValue, repeated: true },
    { no: 4, name: "request_headers_to_add", kind: "message", T: HeaderValue, repeated: true },
  ],
);

/**
 * @generated from enum envoy.service.ratelimit.v2.RateLimitResponse.Code
 */
export const RateLimitResponse_Code = proto3.makeEnum(
  "envoy.service.ratelimit.v2.RateLimitResponse.Code",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "OK"},
    {no: 2, name: "OVER_LIMIT"},
  ],
);

/**
 * Defines an actual rate limit in terms of requests per unit of time and the unit itself.
 *
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse.RateLimit
 */
export const RateLimitResponse_RateLimit = proto3.makeMessageType(
  "envoy.service.ratelimit.v2.RateLimitResponse.RateLimit",
  () => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "requests_per_unit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "unit", kind: "enum", T: proto3.getEnumType(RateLimitResponse_RateLimit_Unit) },
  ],
  {localName: "RateLimitResponse_RateLimit"},
);

/**
 * @generated from enum envoy.service.ratelimit.v2.RateLimitResponse.RateLimit.Unit
 */
export const RateLimitResponse_RateLimit_Unit = proto3.makeEnum(
  "envoy.service.ratelimit.v2.RateLimitResponse.RateLimit.Unit",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "SECOND"},
    {no: 2, name: "MINUTE"},
    {no: 3, name: "HOUR"},
    {no: 4, name: "DAY"},
  ],
);

/**
 * @generated from message envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus
 */
export const RateLimitResponse_DescriptorStatus = proto3.makeMessageType(
  "envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus",
  () => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(RateLimitResponse_Code) },
    { no: 2, name: "current_limit", kind: "message", T: RateLimitResponse_RateLimit },
    { no: 3, name: "limit_remaining", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "RateLimitResponse_DescriptorStatus"},
);

