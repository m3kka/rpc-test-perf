// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/ratelimit/v3/rls.proto" (package "envoy.service.ratelimit.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RateLimitService } from "./rls";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RateLimitResponse } from "./rls";
import type { RateLimitRequest } from "./rls";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Rate limit service (RLS)]

/**
 * @generated from protobuf service envoy.service.ratelimit.v3.RateLimitService
 */
export interface IRateLimitServiceClient {
    /**
     * Determine whether rate limiting should take place.
     *
     * @generated from protobuf rpc: ShouldRateLimit(envoy.service.ratelimit.v3.RateLimitRequest) returns (envoy.service.ratelimit.v3.RateLimitResponse);
     */
    shouldRateLimit(input: RateLimitRequest, options?: RpcOptions): UnaryCall<RateLimitRequest, RateLimitResponse>;
}
// [#protodoc-title: Rate limit service (RLS)]

/**
 * @generated from protobuf service envoy.service.ratelimit.v3.RateLimitService
 */
export class RateLimitServiceClient implements IRateLimitServiceClient, ServiceInfo {
    typeName = RateLimitService.typeName;
    methods = RateLimitService.methods;
    options = RateLimitService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Determine whether rate limiting should take place.
     *
     * @generated from protobuf rpc: ShouldRateLimit(envoy.service.ratelimit.v3.RateLimitRequest) returns (envoy.service.ratelimit.v3.RateLimitResponse);
     */
    shouldRateLimit(input: RateLimitRequest, options?: RpcOptions): UnaryCall<RateLimitRequest, RateLimitResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RateLimitRequest, RateLimitResponse>("unary", this._transport, method, opt, input);
    }
}
