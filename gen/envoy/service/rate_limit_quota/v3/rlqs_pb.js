// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/service/rate_limit_quota/v3/rlqs.proto (package envoy.service.rate_limit_quota.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";
import { RateLimitStrategy } from "../../../type/v3/ratelimit_strategy_pb.js";

/**
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports
 */
export const RateLimitQuotaUsageReports = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports",
  () => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bucket_quota_usages", kind: "message", T: RateLimitQuotaUsageReports_BucketQuotaUsage, repeated: true },
  ],
);

/**
 * The usage report for a bucket.
 *
 * .. note::
 *   Note that the first report sent for a ``BucketId`` indicates to the RLQS server that
 *   the RLQS client is subscribing for the future assignments for this ``BucketId``.
 *
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage
 */
export const RateLimitQuotaUsageReports_BucketQuotaUsage = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage",
  () => [
    { no: 1, name: "bucket_id", kind: "message", T: BucketId },
    { no: 2, name: "time_elapsed", kind: "message", T: Duration },
    { no: 3, name: "num_requests_allowed", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "num_requests_denied", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
  {localName: "RateLimitQuotaUsageReports_BucketQuotaUsage"},
);

/**
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse
 */
export const RateLimitQuotaResponse = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse",
  () => [
    { no: 1, name: "bucket_action", kind: "message", T: RateLimitQuotaResponse_BucketAction, repeated: true },
  ],
);

/**
 * Commands the data plane to apply one of the actions to the bucket with the
 * :ref:`bucket_id <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
 *
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction
 */
export const RateLimitQuotaResponse_BucketAction = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction",
  () => [
    { no: 1, name: "bucket_id", kind: "message", T: BucketId },
    { no: 2, name: "quota_assignment_action", kind: "message", T: RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction, oneof: "bucket_action" },
    { no: 3, name: "abandon_action", kind: "message", T: RateLimitQuotaResponse_BucketAction_AbandonAction, oneof: "bucket_action" },
  ],
  {localName: "RateLimitQuotaResponse_BucketAction"},
);

/**
 * Quota assignment for the bucket. Configures the rate limiting strategy and the duration
 * for the given :ref:`bucket_id
 * <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
 *
 * **Applying the first assignment to the bucket**
 *
 * Once the data plane receives the ``QuotaAssignmentAction``, it must send the current usage
 * report for the bucket, and start rate limiting requests matched into the bucket
 * using the strategy configured in the :ref:`rate_limit_strategy
 * <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.rate_limit_strategy>`
 * field. The assignment becomes bucket's ``active`` assignment.
 *
 * **Expiring the assignment**
 *
 * The duration of the assignment defined in the :ref:`assignment_time_to_live
 * <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
 * field. When the duration runs off, the assignment is ``expired``, and no longer ``active``.
 * The data plane should stop applying the rate limiting strategy to the bucket, and transition
 * the bucket to the "expired assignment" state. This activates the behavior configured in the
 * :ref:`expired_assignment_behavior <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.expired_assignment_behavior>`
 * field.
 *
 * **Replacing the assignment**
 *
 * * If the rate limiting strategy is different from bucket's ``active`` assignment, or
 *   the current bucket assignment is ``expired``, the data plane must immediately
 *   end the current assignment, report the bucket usage, and apply the new assignment.
 *   The new assignment becomes bucket's ``active`` assignment.
 * * If the rate limiting strategy is the same as the bucket's ``active`` (not ``expired``)
 *   assignment, the data plane should extend the duration of the ``active`` assignment
 *   for the duration of the new assignment provided in the :ref:`assignment_time_to_live
 *   <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
 *   field. The ``active`` assignment is considered unchanged.
 *
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction
 */
export const RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction",
  () => [
    { no: 2, name: "assignment_time_to_live", kind: "message", T: Duration },
    { no: 3, name: "rate_limit_strategy", kind: "message", T: RateLimitStrategy },
  ],
  {localName: "RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction"},
);

/**
 * Abandon action for the bucket. Indicates that the RLQS server will no longer be
 * sending updates for the given :ref:`bucket_id
 * <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
 *
 * If no requests are reported for a bucket, after some time the server considers the bucket
 * inactive. The server stops tracking the bucket, and instructs the the data plane to abandon
 * the bucket via this message.
 *
 * **Abandoning the assignment**
 *
 * The data plane is to erase the bucket (including its usage data) from the memory.
 * It should stop tracking the bucket, and stop reporting its usage. This effectively resets
 * the data plane to the state prior to matching the first request into the bucket.
 *
 * **Restarting the subscription**
 *
 * If a new request is matched into a bucket previously abandoned, the data plane must behave
 * as if it has never tracked the bucket, and it's the first request matched into it:
 *
 * 1. The process of :ref:`subscription and reporting
 *    <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.reporting_interval>`
 *    starts from the beginning.
 *
 * 2. The bucket transitions to the :ref:`"no assignment"
 *    <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.no_assignment_behavior>`
 *    state.
 *
 * 3. Once the new assignment is received, it's applied per
 *    "Applying the first assignment to the bucket" section of the :ref:`QuotaAssignmentAction
 *    <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`.
 *
 * @generated from message envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction
 */
export const RateLimitQuotaResponse_BucketAction_AbandonAction = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction",
  [],
  {localName: "RateLimitQuotaResponse_BucketAction_AbandonAction"},
);

/**
 * The identifier for the bucket. Used to match the bucket between the control plane (RLQS server),
 * and the data plane (RLQS client), f.e.:
 *
 * * the data plane sends a usage report for requests matched into the bucket with ``BucketId``
 *   to the control plane
 * * the control plane sends an assignment for the bucket with ``BucketId`` to the data plane
 *   Bucket ID.
 *
 * Example:
 *
 * .. validated-code-block:: yaml
 *   :type-name: envoy.service.rate_limit_quota.v3.BucketId
 *
 *   bucket:
 *     name: my_bucket
 *     env: staging
 *
 * .. note::
 *   The order of ``BucketId`` keys do not matter. Buckets ``{ a: 'A', b: 'B' }`` and
 *   ``{ b: 'B', a: 'A' }`` are identical.
 *
 * @generated from message envoy.service.rate_limit_quota.v3.BucketId
 */
export const BucketId = proto3.makeMessageType(
  "envoy.service.rate_limit_quota.v3.BucketId",
  () => [
    { no: 1, name: "bucket", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

