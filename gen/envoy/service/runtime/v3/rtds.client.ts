// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/runtime/v3/rtds.proto" (package "envoy.service.runtime.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RuntimeDiscoveryService } from "./rtds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "../../discovery/v3/discovery";
import type { DeltaDiscoveryRequest } from "../../discovery/v3/discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "../../discovery/v3/discovery";
import type { DiscoveryRequest } from "../../discovery/v3/discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Runtime discovery service (RTDS)]
// RTDS :ref:`configuration overview <config_runtime_rtds>`

/**
 * Discovery service for Runtime resources.
 *
 * @generated from protobuf service envoy.service.runtime.v3.RuntimeDiscoveryService
 */
export interface IRuntimeDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: StreamRuntime(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamRuntime(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaRuntime(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaRuntime(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchRuntime(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchRuntime(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: Runtime discovery service (RTDS)]
// RTDS :ref:`configuration overview <config_runtime_rtds>`

/**
 * Discovery service for Runtime resources.
 *
 * @generated from protobuf service envoy.service.runtime.v3.RuntimeDiscoveryService
 */
export class RuntimeDiscoveryServiceClient implements IRuntimeDiscoveryServiceClient, ServiceInfo {
    typeName = RuntimeDiscoveryService.typeName;
    methods = RuntimeDiscoveryService.methods;
    options = RuntimeDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamRuntime(stream envoy.service.discovery.v3.DiscoveryRequest) returns (stream envoy.service.discovery.v3.DiscoveryResponse);
     */
    streamRuntime(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaRuntime(stream envoy.service.discovery.v3.DeltaDiscoveryRequest) returns (stream envoy.service.discovery.v3.DeltaDiscoveryResponse);
     */
    deltaRuntime(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchRuntime(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse);
     */
    fetchRuntime(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
