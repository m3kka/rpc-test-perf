// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/accesslog/v3/als.proto" (package "envoy.service.accesslog.v3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AccessLogService } from "./als";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamAccessLogsResponse } from "./als";
import type { StreamAccessLogsMessage } from "./als";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: gRPC access log service (ALS)]

/**
 * Service for streaming access logs from Envoy to an access log server.
 *
 * @generated from protobuf service envoy.service.accesslog.v3.AccessLogService
 */
export interface IAccessLogServiceClient {
    /**
     * Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure. The server should
     * disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
     * API for "critical" access logs in which Envoy will buffer access logs for some period of time
     * until it gets an ACK so it could then retry. This API is designed for high throughput with the
     * expectation that it might be lossy.
     *
     * @generated from protobuf rpc: StreamAccessLogs(stream envoy.service.accesslog.v3.StreamAccessLogsMessage) returns (envoy.service.accesslog.v3.StreamAccessLogsResponse);
     */
    streamAccessLogs(options?: RpcOptions): ClientStreamingCall<StreamAccessLogsMessage, StreamAccessLogsResponse>;
}
// [#protodoc-title: gRPC access log service (ALS)]

/**
 * Service for streaming access logs from Envoy to an access log server.
 *
 * @generated from protobuf service envoy.service.accesslog.v3.AccessLogService
 */
export class AccessLogServiceClient implements IAccessLogServiceClient, ServiceInfo {
    typeName = AccessLogService.typeName;
    methods = AccessLogService.methods;
    options = AccessLogService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure. The server should
     * disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
     * API for "critical" access logs in which Envoy will buffer access logs for some period of time
     * until it gets an ACK so it could then retry. This API is designed for high throughput with the
     * expectation that it might be lossy.
     *
     * @generated from protobuf rpc: StreamAccessLogs(stream envoy.service.accesslog.v3.StreamAccessLogsMessage) returns (envoy.service.accesslog.v3.StreamAccessLogsResponse);
     */
    streamAccessLogs(options?: RpcOptions): ClientStreamingCall<StreamAccessLogsMessage, StreamAccessLogsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamAccessLogsMessage, StreamAccessLogsResponse>("clientStreaming", this._transport, method, opt);
    }
}
