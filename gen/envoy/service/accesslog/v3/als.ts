// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/service/accesslog/v3/als.proto" (package "envoy.service.accesslog.v3", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TCPAccessLogEntry } from "../../../data/accesslog/v3/accesslog";
import { HTTPAccessLogEntry } from "../../../data/accesslog/v3/accesslog";
import { Node } from "../../../config/core/v3/base";
/**
 * Empty response for the StreamAccessLogs API. Will never be sent. See below.
 *
 * @generated from protobuf message envoy.service.accesslog.v3.StreamAccessLogsResponse
 */
export interface StreamAccessLogsResponse {
}
/**
 * Stream message for the StreamAccessLogs API. Envoy will open a stream to the server and stream
 * access logs without ever expecting a response.
 *
 * @generated from protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage
 */
export interface StreamAccessLogsMessage {
    /**
     * Identifier data that will only be sent in the first message on the stream. This is effectively
     * structured metadata and is a performance optimization.
     *
     * @generated from protobuf field: envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier identifier = 1;
     */
    identifier?: StreamAccessLogsMessage_Identifier;
    /**
     * @generated from protobuf oneof: log_entries
     */
    logEntries: {
        oneofKind: "httpLogs";
        /**
         * @generated from protobuf field: envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2;
         */
        httpLogs: StreamAccessLogsMessage_HTTPAccessLogEntries;
    } | {
        oneofKind: "tcpLogs";
        /**
         * @generated from protobuf field: envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3;
         */
        tcpLogs: StreamAccessLogsMessage_TCPAccessLogEntries;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier
 */
export interface StreamAccessLogsMessage_Identifier {
    /**
     * The node sending the access log messages over the stream.
     *
     * @generated from protobuf field: envoy.config.core.v3.Node node = 1;
     */
    node?: Node;
    /**
     * The friendly name of the log configured in :ref:`CommonGrpcAccessLogConfig
     * <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig>`.
     *
     * @generated from protobuf field: string log_name = 2;
     */
    logName: string;
}
/**
 * Wrapper for batches of HTTP access log entries.
 *
 * @generated from protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries
 */
export interface StreamAccessLogsMessage_HTTPAccessLogEntries {
    /**
     * @generated from protobuf field: repeated envoy.data.accesslog.v3.HTTPAccessLogEntry log_entry = 1;
     */
    logEntry: HTTPAccessLogEntry[];
}
/**
 * Wrapper for batches of TCP access log entries.
 *
 * @generated from protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries
 */
export interface StreamAccessLogsMessage_TCPAccessLogEntries {
    /**
     * @generated from protobuf field: repeated envoy.data.accesslog.v3.TCPAccessLogEntry log_entry = 1;
     */
    logEntry: TCPAccessLogEntry[];
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamAccessLogsResponse$Type extends MessageType<StreamAccessLogsResponse> {
    constructor() {
        super("envoy.service.accesslog.v3.StreamAccessLogsResponse", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.accesslog.v2.StreamAccessLogsResponse" } });
    }
    create(value?: PartialMessage<StreamAccessLogsResponse>): StreamAccessLogsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StreamAccessLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamAccessLogsResponse): StreamAccessLogsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StreamAccessLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.accesslog.v3.StreamAccessLogsResponse
 */
export const StreamAccessLogsResponse = new StreamAccessLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamAccessLogsMessage$Type extends MessageType<StreamAccessLogsMessage> {
    constructor() {
        super("envoy.service.accesslog.v3.StreamAccessLogsMessage", [
            { no: 1, name: "identifier", kind: "message", T: () => StreamAccessLogsMessage_Identifier },
            { no: 2, name: "http_logs", kind: "message", oneof: "logEntries", T: () => StreamAccessLogsMessage_HTTPAccessLogEntries },
            { no: 3, name: "tcp_logs", kind: "message", oneof: "logEntries", T: () => StreamAccessLogsMessage_TCPAccessLogEntries }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.accesslog.v2.StreamAccessLogsMessage" } });
    }
    create(value?: PartialMessage<StreamAccessLogsMessage>): StreamAccessLogsMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logEntries = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StreamAccessLogsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamAccessLogsMessage): StreamAccessLogsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier identifier */ 1:
                    message.identifier = StreamAccessLogsMessage_Identifier.internalBinaryRead(reader, reader.uint32(), options, message.identifier);
                    break;
                case /* envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs */ 2:
                    message.logEntries = {
                        oneofKind: "httpLogs",
                        httpLogs: StreamAccessLogsMessage_HTTPAccessLogEntries.internalBinaryRead(reader, reader.uint32(), options, (message.logEntries as any).httpLogs)
                    };
                    break;
                case /* envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs */ 3:
                    message.logEntries = {
                        oneofKind: "tcpLogs",
                        tcpLogs: StreamAccessLogsMessage_TCPAccessLogEntries.internalBinaryRead(reader, reader.uint32(), options, (message.logEntries as any).tcpLogs)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamAccessLogsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier identifier = 1; */
        if (message.identifier)
            StreamAccessLogsMessage_Identifier.internalBinaryWrite(message.identifier, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries http_logs = 2; */
        if (message.logEntries.oneofKind === "httpLogs")
            StreamAccessLogsMessage_HTTPAccessLogEntries.internalBinaryWrite(message.logEntries.httpLogs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries tcp_logs = 3; */
        if (message.logEntries.oneofKind === "tcpLogs")
            StreamAccessLogsMessage_TCPAccessLogEntries.internalBinaryWrite(message.logEntries.tcpLogs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage
 */
export const StreamAccessLogsMessage = new StreamAccessLogsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamAccessLogsMessage_Identifier$Type extends MessageType<StreamAccessLogsMessage_Identifier> {
    constructor() {
        super("envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier", [
            { no: 1, name: "node", kind: "message", T: () => Node, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "log_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier" } });
    }
    create(value?: PartialMessage<StreamAccessLogsMessage_Identifier>): StreamAccessLogsMessage_Identifier {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logName = "";
        if (value !== undefined)
            reflectionMergePartial<StreamAccessLogsMessage_Identifier>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamAccessLogsMessage_Identifier): StreamAccessLogsMessage_Identifier {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* string log_name */ 2:
                    message.logName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamAccessLogsMessage_Identifier, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string log_name = 2; */
        if (message.logName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.logName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.Identifier
 */
export const StreamAccessLogsMessage_Identifier = new StreamAccessLogsMessage_Identifier$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamAccessLogsMessage_HTTPAccessLogEntries$Type extends MessageType<StreamAccessLogsMessage_HTTPAccessLogEntries> {
    constructor() {
        super("envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries", [
            { no: 1, name: "log_entry", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HTTPAccessLogEntry, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntries" } });
    }
    create(value?: PartialMessage<StreamAccessLogsMessage_HTTPAccessLogEntries>): StreamAccessLogsMessage_HTTPAccessLogEntries {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logEntry = [];
        if (value !== undefined)
            reflectionMergePartial<StreamAccessLogsMessage_HTTPAccessLogEntries>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamAccessLogsMessage_HTTPAccessLogEntries): StreamAccessLogsMessage_HTTPAccessLogEntries {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.data.accesslog.v3.HTTPAccessLogEntry log_entry */ 1:
                    message.logEntry.push(HTTPAccessLogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamAccessLogsMessage_HTTPAccessLogEntries, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.data.accesslog.v3.HTTPAccessLogEntry log_entry = 1; */
        for (let i = 0; i < message.logEntry.length; i++)
            HTTPAccessLogEntry.internalBinaryWrite(message.logEntry[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.HTTPAccessLogEntries
 */
export const StreamAccessLogsMessage_HTTPAccessLogEntries = new StreamAccessLogsMessage_HTTPAccessLogEntries$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamAccessLogsMessage_TCPAccessLogEntries$Type extends MessageType<StreamAccessLogsMessage_TCPAccessLogEntries> {
    constructor() {
        super("envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries", [
            { no: 1, name: "log_entry", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TCPAccessLogEntry, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntries" } });
    }
    create(value?: PartialMessage<StreamAccessLogsMessage_TCPAccessLogEntries>): StreamAccessLogsMessage_TCPAccessLogEntries {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logEntry = [];
        if (value !== undefined)
            reflectionMergePartial<StreamAccessLogsMessage_TCPAccessLogEntries>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamAccessLogsMessage_TCPAccessLogEntries): StreamAccessLogsMessage_TCPAccessLogEntries {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.data.accesslog.v3.TCPAccessLogEntry log_entry */ 1:
                    message.logEntry.push(TCPAccessLogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamAccessLogsMessage_TCPAccessLogEntries, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.data.accesslog.v3.TCPAccessLogEntry log_entry = 1; */
        for (let i = 0; i < message.logEntry.length; i++)
            TCPAccessLogEntry.internalBinaryWrite(message.logEntry[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.service.accesslog.v3.StreamAccessLogsMessage.TCPAccessLogEntries
 */
export const StreamAccessLogsMessage_TCPAccessLogEntries = new StreamAccessLogsMessage_TCPAccessLogEntries$Type();
/**
 * @generated ServiceType for protobuf service envoy.service.accesslog.v3.AccessLogService
 */
export const AccessLogService = new ServiceType("envoy.service.accesslog.v3.AccessLogService", [
    { name: "StreamAccessLogs", clientStreaming: true, options: {}, I: StreamAccessLogsMessage, O: StreamAccessLogsResponse }
]);
