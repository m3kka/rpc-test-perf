// @generated by protoc-gen-connect-es v1.1.4
// @generated from file envoy/service/accesslog/v2/als.proto (package envoy.service.accesslog.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { StreamAccessLogsMessage, StreamAccessLogsResponse } from "./als_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Service for streaming access logs from Envoy to an access log server.
 *
 * @generated from service envoy.service.accesslog.v2.AccessLogService
 */
export declare const AccessLogService: {
  readonly typeName: "envoy.service.accesslog.v2.AccessLogService",
  readonly methods: {
    /**
     * Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
     * response to be sent as nothing would be done in the case of failure. The server should
     * disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
     * API for "critical" access logs in which Envoy will buffer access logs for some period of time
     * until it gets an ACK so it could then retry. This API is designed for high throughput with the
     * expectation that it might be lossy.
     *
     * @generated from rpc envoy.service.accesslog.v2.AccessLogService.StreamAccessLogs
     */
    readonly streamAccessLogs: {
      readonly name: "StreamAccessLogs",
      readonly I: typeof StreamAccessLogsMessage,
      readonly O: typeof StreamAccessLogsResponse,
      readonly kind: MethodKind.ClientStreaming,
    },
  }
};

