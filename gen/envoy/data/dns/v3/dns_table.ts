// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/data/dns/v3/dns_table.proto" (package "envoy.data.dns.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../google/protobuf/duration";
import { StringMatcher } from "../../../type/matcher/v3/string";
// [#protodoc-title: DNS Filter Table Data]
// :ref:`DNS Filter config overview <config_udp_listener_filters_dns_filter>`.

/**
 * This message contains the configuration for the DNS Filter if populated
 * from the control plane
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable
 */
export interface DnsTable {
    /**
     * Control how many times Envoy makes an attempt to forward a query to an external DNS server
     *
     * @generated from protobuf field: uint32 external_retry_count = 1;
     */
    externalRetryCount: number;
    /**
     * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
     * list empty, Envoy will forward all queries to external resolvers
     *
     * @generated from protobuf field: repeated envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;
     */
    virtualDomains: DnsTable_DnsVirtualDomain[];
    /**
     * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
     * internally to use a different data structure allowing the filter to determine whether a
     * query is for known domain without the use of this field.
     *
     * This field serves to help Envoy determine whether it can authoritatively answer a query
     * for a name matching a suffix in this list. If the query name does not match a suffix in
     * this list, Envoy will forward the query to an upstream DNS server
     *
     * @deprecated
     * @generated from protobuf field: repeated envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true];
     */
    knownSuffixes: StringMatcher[];
}
/**
 * This message contains a list of IP addresses returned for a query for a known name
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.AddressList
 */
export interface DnsTable_AddressList {
    /**
     * This field contains a well formed IP address that is returned in the answer for a
     * name query. The address field can be an IPv4 or IPv6 address. Address family
     * detection is done automatically when Envoy parses the string. Since this field is
     * repeated, Envoy will return as many entries from this list in the DNS response while
     * keeping the response under 512 bytes
     *
     * @generated from protobuf field: repeated string address = 1;
     */
    address: string[];
}
/**
 * Specify the service protocol using a numeric or string value
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsServiceProtocol
 */
export interface DnsTable_DnsServiceProtocol {
    /**
     * @generated from protobuf oneof: protocol_config
     */
    protocolConfig: {
        oneofKind: "number";
        /**
         * Specify the protocol number for the service. Envoy will try to resolve the number to
         * the protocol name. For example, 6 will resolve to "tcp". Refer to:
         * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
         * for protocol names and numbers
         *
         * @generated from protobuf field: uint32 number = 1;
         */
        number: number;
    } | {
        oneofKind: "name";
        /**
         * Specify the protocol name for the service.
         *
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Specify the target for a given DNS service
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsServiceTarget
 */
export interface DnsTable_DnsServiceTarget {
    /**
     * @generated from protobuf oneof: endpoint_type
     */
    endpointType: {
        oneofKind: "hostName";
        /**
         * Use a resolvable hostname as the endpoint for a service.
         *
         * @generated from protobuf field: string host_name = 1;
         */
        hostName: string;
    } | {
        oneofKind: "clusterName";
        /**
         * Use a cluster name as the endpoint for a service.
         *
         * @generated from protobuf field: string cluster_name = 2;
         */
        clusterName: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * The priority of the service record target
     *
     * @generated from protobuf field: uint32 priority = 3;
     */
    priority: number;
    /**
     * The weight of the service record target
     *
     * @generated from protobuf field: uint32 weight = 4;
     */
    weight: number;
    /**
     * The port to which the service is bound. This value is optional if the target is a
     * cluster. Setting port to zero in this case makes the filter use the port value
     * from the cluster host
     *
     * @generated from protobuf field: uint32 port = 5;
     */
    port: number;
}
/**
 * This message defines a service selection record returned for a service query in a domain
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsService
 */
export interface DnsTable_DnsService {
    /**
     * The name of the service without the protocol or domain name
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * The service protocol. This can be specified as a string or the numeric value of the protocol
     *
     * @generated from protobuf field: envoy.data.dns.v3.DnsTable.DnsServiceProtocol protocol = 2;
     */
    protocol?: DnsTable_DnsServiceProtocol;
    /**
     * The service entry time to live. This is independent from the DNS Answer record TTL
     *
     * @generated from protobuf field: google.protobuf.Duration ttl = 3;
     */
    ttl?: Duration;
    /**
     * The list of targets hosting the service
     *
     * @generated from protobuf field: repeated envoy.data.dns.v3.DnsTable.DnsServiceTarget targets = 4;
     */
    targets: DnsTable_DnsServiceTarget[];
}
/**
 * Define a list of service records for a given service
 *
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsServiceList
 */
export interface DnsTable_DnsServiceList {
    /**
     * @generated from protobuf field: repeated envoy.data.dns.v3.DnsTable.DnsService services = 1;
     */
    services: DnsTable_DnsService[];
}
/**
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsEndpoint
 */
export interface DnsTable_DnsEndpoint {
    /**
     * @generated from protobuf oneof: endpoint_config
     */
    endpointConfig: {
        oneofKind: "addressList";
        /**
         * Define a list of addresses to return for the specified endpoint
         *
         * @generated from protobuf field: envoy.data.dns.v3.DnsTable.AddressList address_list = 1;
         */
        addressList: DnsTable_AddressList;
    } | {
        oneofKind: "clusterName";
        /**
         * Define a cluster whose addresses are returned for the specified endpoint
         *
         * @generated from protobuf field: string cluster_name = 2;
         */
        clusterName: string;
    } | {
        oneofKind: "serviceList";
        /**
         * Define a DNS Service List for the specified endpoint
         *
         * @generated from protobuf field: envoy.data.dns.v3.DnsTable.DnsServiceList service_list = 3;
         */
        serviceList: DnsTable_DnsServiceList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.data.dns.v3.DnsTable.DnsVirtualDomain
 */
export interface DnsTable_DnsVirtualDomain {
    /**
     * A domain name for which Envoy will respond to query requests
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The configuration containing the method to determine the address of this endpoint
     *
     * @generated from protobuf field: envoy.data.dns.v3.DnsTable.DnsEndpoint endpoint = 2;
     */
    endpoint?: DnsTable_DnsEndpoint;
    /**
     * Sets the TTL in DNS answers from Envoy returned to the client. The default TTL is 300s
     *
     * @generated from protobuf field: google.protobuf.Duration answer_ttl = 3;
     */
    answerTtl?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable$Type extends MessageType<DnsTable> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable", [
            { no: 1, name: "external_retry_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 3 } } } },
            { no: 2, name: "virtual_domains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DnsTable_DnsVirtualDomain },
            { no: 3, name: "known_suffixes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.dns.v2alpha.DnsTable" } });
    }
    create(value?: PartialMessage<DnsTable>): DnsTable {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.externalRetryCount = 0;
        message.virtualDomains = [];
        message.knownSuffixes = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable): DnsTable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 external_retry_count */ 1:
                    message.externalRetryCount = reader.uint32();
                    break;
                case /* repeated envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains */ 2:
                    message.virtualDomains.push(DnsTable_DnsVirtualDomain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true];*/ 3:
                    message.knownSuffixes.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 external_retry_count = 1; */
        if (message.externalRetryCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.externalRetryCount);
        /* repeated envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2; */
        for (let i = 0; i < message.virtualDomains.length; i++)
            DnsTable_DnsVirtualDomain.internalBinaryWrite(message.virtualDomains[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true]; */
        for (let i = 0; i < message.knownSuffixes.length; i++)
            StringMatcher.internalBinaryWrite(message.knownSuffixes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable
 */
export const DnsTable = new DnsTable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_AddressList$Type extends MessageType<DnsTable_AddressList> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.AddressList", [
            { no: 1, name: "address", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", items: { string: { minLen: "3" } } } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.dns.v2alpha.DnsTable.AddressList" } });
    }
    create(value?: PartialMessage<DnsTable_AddressList>): DnsTable_AddressList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable_AddressList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_AddressList): DnsTable_AddressList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string address */ 1:
                    message.address.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_AddressList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string address = 1; */
        for (let i = 0; i < message.address.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.address[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.AddressList
 */
export const DnsTable_AddressList = new DnsTable_AddressList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsServiceProtocol$Type extends MessageType<DnsTable_DnsServiceProtocol> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsServiceProtocol", [
            { no: 1, name: "number", kind: "scalar", oneof: "protocolConfig", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 255 } } } },
            { no: 2, name: "name", kind: "scalar", oneof: "protocolConfig", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME" } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsServiceProtocol>): DnsTable_DnsServiceProtocol {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.protocolConfig = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsServiceProtocol>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsServiceProtocol): DnsTable_DnsServiceProtocol {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 number */ 1:
                    message.protocolConfig = {
                        oneofKind: "number",
                        number: reader.uint32()
                    };
                    break;
                case /* string name */ 2:
                    message.protocolConfig = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsServiceProtocol, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 number = 1; */
        if (message.protocolConfig.oneofKind === "number")
            writer.tag(1, WireType.Varint).uint32(message.protocolConfig.number);
        /* string name = 2; */
        if (message.protocolConfig.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.protocolConfig.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsServiceProtocol
 */
export const DnsTable_DnsServiceProtocol = new DnsTable_DnsServiceProtocol$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsServiceTarget$Type extends MessageType<DnsTable_DnsServiceTarget> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsServiceTarget", [
            { no: 1, name: "host_name", kind: "scalar", oneof: "endpointType", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME" } } } },
            { no: 2, name: "cluster_name", kind: "scalar", oneof: "endpointType", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME" } } } },
            { no: 3, name: "priority", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 65536 } } } },
            { no: 4, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 65536 } } } },
            { no: 5, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 65536 } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsServiceTarget>): DnsTable_DnsServiceTarget {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endpointType = { oneofKind: undefined };
        message.priority = 0;
        message.weight = 0;
        message.port = 0;
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsServiceTarget>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsServiceTarget): DnsTable_DnsServiceTarget {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host_name */ 1:
                    message.endpointType = {
                        oneofKind: "hostName",
                        hostName: reader.string()
                    };
                    break;
                case /* string cluster_name */ 2:
                    message.endpointType = {
                        oneofKind: "clusterName",
                        clusterName: reader.string()
                    };
                    break;
                case /* uint32 priority */ 3:
                    message.priority = reader.uint32();
                    break;
                case /* uint32 weight */ 4:
                    message.weight = reader.uint32();
                    break;
                case /* uint32 port */ 5:
                    message.port = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsServiceTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host_name = 1; */
        if (message.endpointType.oneofKind === "hostName")
            writer.tag(1, WireType.LengthDelimited).string(message.endpointType.hostName);
        /* string cluster_name = 2; */
        if (message.endpointType.oneofKind === "clusterName")
            writer.tag(2, WireType.LengthDelimited).string(message.endpointType.clusterName);
        /* uint32 priority = 3; */
        if (message.priority !== 0)
            writer.tag(3, WireType.Varint).uint32(message.priority);
        /* uint32 weight = 4; */
        if (message.weight !== 0)
            writer.tag(4, WireType.Varint).uint32(message.weight);
        /* uint32 port = 5; */
        if (message.port !== 0)
            writer.tag(5, WireType.Varint).uint32(message.port);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsServiceTarget
 */
export const DnsTable_DnsServiceTarget = new DnsTable_DnsServiceTarget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsService$Type extends MessageType<DnsTable_DnsService> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsService", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME" } } } },
            { no: 2, name: "protocol", kind: "message", T: () => DnsTable_DnsServiceProtocol },
            { no: 3, name: "ttl", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gte: { seconds: "1" } } } } },
            { no: 4, name: "targets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DnsTable_DnsServiceTarget, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsService>): DnsTable_DnsService {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceName = "";
        message.targets = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsService>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsService): DnsTable_DnsService {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* envoy.data.dns.v3.DnsTable.DnsServiceProtocol protocol */ 2:
                    message.protocol = DnsTable_DnsServiceProtocol.internalBinaryRead(reader, reader.uint32(), options, message.protocol);
                    break;
                case /* google.protobuf.Duration ttl */ 3:
                    message.ttl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                case /* repeated envoy.data.dns.v3.DnsTable.DnsServiceTarget targets */ 4:
                    message.targets.push(DnsTable_DnsServiceTarget.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsService, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* envoy.data.dns.v3.DnsTable.DnsServiceProtocol protocol = 2; */
        if (message.protocol)
            DnsTable_DnsServiceProtocol.internalBinaryWrite(message.protocol, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration ttl = 3; */
        if (message.ttl)
            Duration.internalBinaryWrite(message.ttl, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.data.dns.v3.DnsTable.DnsServiceTarget targets = 4; */
        for (let i = 0; i < message.targets.length; i++)
            DnsTable_DnsServiceTarget.internalBinaryWrite(message.targets[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsService
 */
export const DnsTable_DnsService = new DnsTable_DnsService$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsServiceList$Type extends MessageType<DnsTable_DnsServiceList> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsServiceList", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DnsTable_DnsService, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsServiceList>): DnsTable_DnsServiceList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.services = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsServiceList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsServiceList): DnsTable_DnsServiceList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.data.dns.v3.DnsTable.DnsService services */ 1:
                    message.services.push(DnsTable_DnsService.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsServiceList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.data.dns.v3.DnsTable.DnsService services = 1; */
        for (let i = 0; i < message.services.length; i++)
            DnsTable_DnsService.internalBinaryWrite(message.services[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsServiceList
 */
export const DnsTable_DnsServiceList = new DnsTable_DnsServiceList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsEndpoint$Type extends MessageType<DnsTable_DnsEndpoint> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsEndpoint", [
            { no: 1, name: "address_list", kind: "message", oneof: "endpointConfig", T: () => DnsTable_AddressList },
            { no: 2, name: "cluster_name", kind: "scalar", oneof: "endpointConfig", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_list", kind: "message", oneof: "endpointConfig", T: () => DnsTable_DnsServiceList }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.dns.v2alpha.DnsTable.DnsEndpoint" } });
    }
    create(value?: PartialMessage<DnsTable_DnsEndpoint>): DnsTable_DnsEndpoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endpointConfig = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsEndpoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsEndpoint): DnsTable_DnsEndpoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.data.dns.v3.DnsTable.AddressList address_list */ 1:
                    message.endpointConfig = {
                        oneofKind: "addressList",
                        addressList: DnsTable_AddressList.internalBinaryRead(reader, reader.uint32(), options, (message.endpointConfig as any).addressList)
                    };
                    break;
                case /* string cluster_name */ 2:
                    message.endpointConfig = {
                        oneofKind: "clusterName",
                        clusterName: reader.string()
                    };
                    break;
                case /* envoy.data.dns.v3.DnsTable.DnsServiceList service_list */ 3:
                    message.endpointConfig = {
                        oneofKind: "serviceList",
                        serviceList: DnsTable_DnsServiceList.internalBinaryRead(reader, reader.uint32(), options, (message.endpointConfig as any).serviceList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsEndpoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.data.dns.v3.DnsTable.AddressList address_list = 1; */
        if (message.endpointConfig.oneofKind === "addressList")
            DnsTable_AddressList.internalBinaryWrite(message.endpointConfig.addressList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string cluster_name = 2; */
        if (message.endpointConfig.oneofKind === "clusterName")
            writer.tag(2, WireType.LengthDelimited).string(message.endpointConfig.clusterName);
        /* envoy.data.dns.v3.DnsTable.DnsServiceList service_list = 3; */
        if (message.endpointConfig.oneofKind === "serviceList")
            DnsTable_DnsServiceList.internalBinaryWrite(message.endpointConfig.serviceList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsEndpoint
 */
export const DnsTable_DnsEndpoint = new DnsTable_DnsEndpoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsVirtualDomain$Type extends MessageType<DnsTable_DnsVirtualDomain> {
    constructor() {
        super("envoy.data.dns.v3.DnsTable.DnsVirtualDomain", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", wellKnownRegex: "HTTP_HEADER_NAME" } } } },
            { no: 2, name: "endpoint", kind: "message", T: () => DnsTable_DnsEndpoint },
            { no: 3, name: "answer_ttl", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gte: { seconds: "30" } } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain" } });
    }
    create(value?: PartialMessage<DnsTable_DnsVirtualDomain>): DnsTable_DnsVirtualDomain {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsVirtualDomain>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsVirtualDomain): DnsTable_DnsVirtualDomain {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.data.dns.v3.DnsTable.DnsEndpoint endpoint */ 2:
                    message.endpoint = DnsTable_DnsEndpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                case /* google.protobuf.Duration answer_ttl */ 3:
                    message.answerTtl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.answerTtl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsVirtualDomain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.data.dns.v3.DnsTable.DnsEndpoint endpoint = 2; */
        if (message.endpoint)
            DnsTable_DnsEndpoint.internalBinaryWrite(message.endpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration answer_ttl = 3; */
        if (message.answerTtl)
            Duration.internalBinaryWrite(message.answerTtl, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v3.DnsTable.DnsVirtualDomain
 */
export const DnsTable_DnsVirtualDomain = new DnsTable_DnsVirtualDomain$Type();
