// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/data/dns/v2alpha/dns_table.proto" (package "envoy.data.dns.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../google/protobuf/duration";
import { StringMatcher } from "../../../type/matcher/string";
// [#protodoc-title: DNS Filter Table Data]
// :ref:`DNS Filter config overview <config_udp_listener_filters_dns_filter>`.

/**
 * This message contains the configuration for the DNS Filter if populated
 * from the control plane
 *
 * @generated from protobuf message envoy.data.dns.v2alpha.DnsTable
 */
export interface DnsTable {
    /**
     * Control how many times envoy makes an attempt to forward a query to
     * an external server
     *
     * @generated from protobuf field: uint32 external_retry_count = 1;
     */
    externalRetryCount: number;
    /**
     * Fully qualified domain names for which Envoy will respond to queries
     *
     * @generated from protobuf field: repeated envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2;
     */
    virtualDomains: DnsTable_DnsVirtualDomain[];
    /**
     * This field serves to help Envoy determine whether it can authoritatively
     * answer a query for a name matching a suffix in this list. If the query
     * name does not match a suffix in this list, Envoy will forward
     * the query to an upstream DNS server
     *
     * @generated from protobuf field: repeated envoy.type.matcher.StringMatcher known_suffixes = 3;
     */
    knownSuffixes: StringMatcher[];
}
/**
 * This message contains a list of IP addresses returned for a query for a known name
 *
 * @generated from protobuf message envoy.data.dns.v2alpha.DnsTable.AddressList
 */
export interface DnsTable_AddressList {
    /**
     * This field contains a well formed IP address that is returned
     * in the answer for a name query. The address field can be an
     * IPv4 or IPv6 address. Address family detection is done automatically
     * when Envoy parses the string. Since this field is repeated,
     * Envoy will return one randomly chosen entry from this list in the
     * DNS response. The random index will vary per query so that we prevent
     * clients pinning on a single address for a configured domain
     *
     * @generated from protobuf field: repeated string address = 1;
     */
    address: string[];
}
/**
 * This message type is extensible and can contain a list of addresses
 * or dictate some other method for resolving the addresses for an
 * endpoint
 *
 * @generated from protobuf message envoy.data.dns.v2alpha.DnsTable.DnsEndpoint
 */
export interface DnsTable_DnsEndpoint {
    /**
     * @generated from protobuf oneof: endpoint_config
     */
    endpointConfig: {
        oneofKind: "addressList";
        /**
         * @generated from protobuf field: envoy.data.dns.v2alpha.DnsTable.AddressList address_list = 1;
         */
        addressList: DnsTable_AddressList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain
 */
export interface DnsTable_DnsVirtualDomain {
    /**
     * The domain name for which Envoy will respond to query requests
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The configuration containing the method to determine the address
     * of this endpoint
     *
     * @generated from protobuf field: envoy.data.dns.v2alpha.DnsTable.DnsEndpoint endpoint = 2;
     */
    endpoint?: DnsTable_DnsEndpoint;
    /**
     * Sets the TTL in dns answers from Envoy returned to the client
     *
     * @generated from protobuf field: google.protobuf.Duration answer_ttl = 3;
     */
    answerTtl?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable$Type extends MessageType<DnsTable> {
    constructor() {
        super("envoy.data.dns.v2alpha.DnsTable", [
            { no: 1, name: "external_retry_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "virtual_domains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DnsTable_DnsVirtualDomain, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "known_suffixes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher }
        ]);
    }
    create(value?: PartialMessage<DnsTable>): DnsTable {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.externalRetryCount = 0;
        message.virtualDomains = [];
        message.knownSuffixes = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable): DnsTable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 external_retry_count */ 1:
                    message.externalRetryCount = reader.uint32();
                    break;
                case /* repeated envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains */ 2:
                    message.virtualDomains.push(DnsTable_DnsVirtualDomain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.type.matcher.StringMatcher known_suffixes */ 3:
                    message.knownSuffixes.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 external_retry_count = 1; */
        if (message.externalRetryCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.externalRetryCount);
        /* repeated envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2; */
        for (let i = 0; i < message.virtualDomains.length; i++)
            DnsTable_DnsVirtualDomain.internalBinaryWrite(message.virtualDomains[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.type.matcher.StringMatcher known_suffixes = 3; */
        for (let i = 0; i < message.knownSuffixes.length; i++)
            StringMatcher.internalBinaryWrite(message.knownSuffixes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v2alpha.DnsTable
 */
export const DnsTable = new DnsTable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_AddressList$Type extends MessageType<DnsTable_AddressList> {
    constructor() {
        super("envoy.data.dns.v2alpha.DnsTable.AddressList", [
            { no: 1, name: "address", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", items: { string: { minLen: "3" } } } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_AddressList>): DnsTable_AddressList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = [];
        if (value !== undefined)
            reflectionMergePartial<DnsTable_AddressList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_AddressList): DnsTable_AddressList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string address */ 1:
                    message.address.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_AddressList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string address = 1; */
        for (let i = 0; i < message.address.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.address[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v2alpha.DnsTable.AddressList
 */
export const DnsTable_AddressList = new DnsTable_AddressList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsEndpoint$Type extends MessageType<DnsTable_DnsEndpoint> {
    constructor() {
        super("envoy.data.dns.v2alpha.DnsTable.DnsEndpoint", [
            { no: 1, name: "address_list", kind: "message", oneof: "endpointConfig", T: () => DnsTable_AddressList }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsEndpoint>): DnsTable_DnsEndpoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endpointConfig = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsEndpoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsEndpoint): DnsTable_DnsEndpoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.data.dns.v2alpha.DnsTable.AddressList address_list */ 1:
                    message.endpointConfig = {
                        oneofKind: "addressList",
                        addressList: DnsTable_AddressList.internalBinaryRead(reader, reader.uint32(), options, (message.endpointConfig as any).addressList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsEndpoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.data.dns.v2alpha.DnsTable.AddressList address_list = 1; */
        if (message.endpointConfig.oneofKind === "addressList")
            DnsTable_AddressList.internalBinaryWrite(message.endpointConfig.addressList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v2alpha.DnsTable.DnsEndpoint
 */
export const DnsTable_DnsEndpoint = new DnsTable_DnsEndpoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsTable_DnsVirtualDomain$Type extends MessageType<DnsTable_DnsVirtualDomain> {
    constructor() {
        super("envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", wellKnownRegex: "HTTP_HEADER_NAME" } } } },
            { no: 2, name: "endpoint", kind: "message", T: () => DnsTable_DnsEndpoint },
            { no: 3, name: "answer_ttl", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } }
        ]);
    }
    create(value?: PartialMessage<DnsTable_DnsVirtualDomain>): DnsTable_DnsVirtualDomain {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DnsTable_DnsVirtualDomain>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsTable_DnsVirtualDomain): DnsTable_DnsVirtualDomain {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.data.dns.v2alpha.DnsTable.DnsEndpoint endpoint */ 2:
                    message.endpoint = DnsTable_DnsEndpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                case /* google.protobuf.Duration answer_ttl */ 3:
                    message.answerTtl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.answerTtl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsTable_DnsVirtualDomain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.data.dns.v2alpha.DnsTable.DnsEndpoint endpoint = 2; */
        if (message.endpoint)
            DnsTable_DnsEndpoint.internalBinaryWrite(message.endpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration answer_ttl = 3; */
        if (message.answerTtl)
            Duration.internalBinaryWrite(message.answerTtl, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain
 */
export const DnsTable_DnsVirtualDomain = new DnsTable_DnsVirtualDomain$Type();
