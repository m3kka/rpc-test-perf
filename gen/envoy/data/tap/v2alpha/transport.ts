// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/data/tap/v2alpha/transport.proto" (package "envoy.data.tap.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Body } from "./common";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { Address } from "../../../api/v2/core/address";
// [#protodoc-title: Transport tap data]
// Trace format for the tap transport socket extension. This dumps plain text read/write
// sequences on a socket.

/**
 * Connection properties.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.Connection
 */
export interface Connection {
    /**
     * Local address.
     *
     * @generated from protobuf field: envoy.api.v2.core.Address local_address = 2;
     */
    localAddress?: Address;
    /**
     * Remote address.
     *
     * @generated from protobuf field: envoy.api.v2.core.Address remote_address = 3;
     */
    remoteAddress?: Address;
}
/**
 * Event in a socket trace.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketEvent
 */
export interface SocketEvent {
    /**
     * Timestamp for event.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf oneof: event_selector
     */
    eventSelector: {
        oneofKind: "read";
        /**
         * @generated from protobuf field: envoy.data.tap.v2alpha.SocketEvent.Read read = 2;
         */
        read: SocketEvent_Read;
    } | {
        oneofKind: "write";
        /**
         * @generated from protobuf field: envoy.data.tap.v2alpha.SocketEvent.Write write = 3;
         */
        write: SocketEvent_Write;
    } | {
        oneofKind: "closed";
        /**
         * @generated from protobuf field: envoy.data.tap.v2alpha.SocketEvent.Closed closed = 4;
         */
        closed: SocketEvent_Closed;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Data read by Envoy from the transport socket.
 *
 * TODO(htuch): Half-close for reads.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketEvent.Read
 */
export interface SocketEvent_Read {
    /**
     * Binary data read.
     *
     * @generated from protobuf field: envoy.data.tap.v2alpha.Body data = 1;
     */
    data?: Body;
}
/**
 * Data written by Envoy to the transport socket.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketEvent.Write
 */
export interface SocketEvent_Write {
    /**
     * Binary data written.
     *
     * @generated from protobuf field: envoy.data.tap.v2alpha.Body data = 1;
     */
    data?: Body;
    /**
     * Stream was half closed after this write.
     *
     * @generated from protobuf field: bool end_stream = 2;
     */
    endStream: boolean;
}
/**
 * The connection was closed.
 *
 * TODO(mattklein123): Close event type.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketEvent.Closed
 */
export interface SocketEvent_Closed {
}
/**
 * Sequence of read/write events that constitute a buffered trace on a socket.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketBufferedTrace
 */
export interface SocketBufferedTrace {
    /**
     * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
     * for long term stable uniqueness. Matches connection IDs used in Envoy logs.
     *
     * @generated from protobuf field: uint64 trace_id = 1;
     */
    traceId: bigint;
    /**
     * Connection properties.
     *
     * @generated from protobuf field: envoy.data.tap.v2alpha.Connection connection = 2;
     */
    connection?: Connection;
    /**
     * Sequence of observed events.
     *
     * @generated from protobuf field: repeated envoy.data.tap.v2alpha.SocketEvent events = 3;
     */
    events: SocketEvent[];
    /**
     * Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes
     * <envoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_rx_bytes>` setting.
     *
     * @generated from protobuf field: bool read_truncated = 4;
     */
    readTruncated: boolean;
    /**
     * Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes
     * <envoy_api_field_service.tap.v2alpha.OutputConfig.max_buffered_tx_bytes>` setting.
     *
     * @generated from protobuf field: bool write_truncated = 5;
     */
    writeTruncated: boolean;
}
/**
 * A streamed socket trace segment. Multiple segments make up a full trace.
 *
 * @generated from protobuf message envoy.data.tap.v2alpha.SocketStreamedTraceSegment
 */
export interface SocketStreamedTraceSegment {
    /**
     * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
     * for long term stable uniqueness. Matches connection IDs used in Envoy logs.
     *
     * @generated from protobuf field: uint64 trace_id = 1;
     */
    traceId: bigint;
    /**
     * @generated from protobuf oneof: message_piece
     */
    messagePiece: {
        oneofKind: "connection";
        /**
         * Connection properties.
         *
         * @generated from protobuf field: envoy.data.tap.v2alpha.Connection connection = 2;
         */
        connection: Connection;
    } | {
        oneofKind: "event";
        /**
         * Socket event.
         *
         * @generated from protobuf field: envoy.data.tap.v2alpha.SocketEvent event = 3;
         */
        event: SocketEvent;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Connection$Type extends MessageType<Connection> {
    constructor() {
        super("envoy.data.tap.v2alpha.Connection", [
            { no: 2, name: "local_address", kind: "message", T: () => Address },
            { no: 3, name: "remote_address", kind: "message", T: () => Address }
        ]);
    }
    create(value?: PartialMessage<Connection>): Connection {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Connection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Connection): Connection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.Address local_address */ 2:
                    message.localAddress = Address.internalBinaryRead(reader, reader.uint32(), options, message.localAddress);
                    break;
                case /* envoy.api.v2.core.Address remote_address */ 3:
                    message.remoteAddress = Address.internalBinaryRead(reader, reader.uint32(), options, message.remoteAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Connection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.Address local_address = 2; */
        if (message.localAddress)
            Address.internalBinaryWrite(message.localAddress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.Address remote_address = 3; */
        if (message.remoteAddress)
            Address.internalBinaryWrite(message.remoteAddress, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.Connection
 */
export const Connection = new Connection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketEvent$Type extends MessageType<SocketEvent> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketEvent", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "read", kind: "message", oneof: "eventSelector", T: () => SocketEvent_Read },
            { no: 3, name: "write", kind: "message", oneof: "eventSelector", T: () => SocketEvent_Write },
            { no: 4, name: "closed", kind: "message", oneof: "eventSelector", T: () => SocketEvent_Closed }
        ]);
    }
    create(value?: PartialMessage<SocketEvent>): SocketEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.eventSelector = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SocketEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketEvent): SocketEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* envoy.data.tap.v2alpha.SocketEvent.Read read */ 2:
                    message.eventSelector = {
                        oneofKind: "read",
                        read: SocketEvent_Read.internalBinaryRead(reader, reader.uint32(), options, (message.eventSelector as any).read)
                    };
                    break;
                case /* envoy.data.tap.v2alpha.SocketEvent.Write write */ 3:
                    message.eventSelector = {
                        oneofKind: "write",
                        write: SocketEvent_Write.internalBinaryRead(reader, reader.uint32(), options, (message.eventSelector as any).write)
                    };
                    break;
                case /* envoy.data.tap.v2alpha.SocketEvent.Closed closed */ 4:
                    message.eventSelector = {
                        oneofKind: "closed",
                        closed: SocketEvent_Closed.internalBinaryRead(reader, reader.uint32(), options, (message.eventSelector as any).closed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 1; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v2alpha.SocketEvent.Read read = 2; */
        if (message.eventSelector.oneofKind === "read")
            SocketEvent_Read.internalBinaryWrite(message.eventSelector.read, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v2alpha.SocketEvent.Write write = 3; */
        if (message.eventSelector.oneofKind === "write")
            SocketEvent_Write.internalBinaryWrite(message.eventSelector.write, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v2alpha.SocketEvent.Closed closed = 4; */
        if (message.eventSelector.oneofKind === "closed")
            SocketEvent_Closed.internalBinaryWrite(message.eventSelector.closed, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketEvent
 */
export const SocketEvent = new SocketEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketEvent_Read$Type extends MessageType<SocketEvent_Read> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketEvent.Read", [
            { no: 1, name: "data", kind: "message", T: () => Body }
        ]);
    }
    create(value?: PartialMessage<SocketEvent_Read>): SocketEvent_Read {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SocketEvent_Read>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketEvent_Read): SocketEvent_Read {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.data.tap.v2alpha.Body data */ 1:
                    message.data = Body.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketEvent_Read, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.data.tap.v2alpha.Body data = 1; */
        if (message.data)
            Body.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketEvent.Read
 */
export const SocketEvent_Read = new SocketEvent_Read$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketEvent_Write$Type extends MessageType<SocketEvent_Write> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketEvent.Write", [
            { no: 1, name: "data", kind: "message", T: () => Body },
            { no: 2, name: "end_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SocketEvent_Write>): SocketEvent_Write {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endStream = false;
        if (value !== undefined)
            reflectionMergePartial<SocketEvent_Write>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketEvent_Write): SocketEvent_Write {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.data.tap.v2alpha.Body data */ 1:
                    message.data = Body.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* bool end_stream */ 2:
                    message.endStream = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketEvent_Write, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.data.tap.v2alpha.Body data = 1; */
        if (message.data)
            Body.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool end_stream = 2; */
        if (message.endStream !== false)
            writer.tag(2, WireType.Varint).bool(message.endStream);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketEvent.Write
 */
export const SocketEvent_Write = new SocketEvent_Write$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketEvent_Closed$Type extends MessageType<SocketEvent_Closed> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketEvent.Closed", []);
    }
    create(value?: PartialMessage<SocketEvent_Closed>): SocketEvent_Closed {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SocketEvent_Closed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketEvent_Closed): SocketEvent_Closed {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SocketEvent_Closed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketEvent.Closed
 */
export const SocketEvent_Closed = new SocketEvent_Closed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketBufferedTrace$Type extends MessageType<SocketBufferedTrace> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketBufferedTrace", [
            { no: 1, name: "trace_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "connection", kind: "message", T: () => Connection },
            { no: 3, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SocketEvent },
            { no: 4, name: "read_truncated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "write_truncated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SocketBufferedTrace>): SocketBufferedTrace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceId = 0n;
        message.events = [];
        message.readTruncated = false;
        message.writeTruncated = false;
        if (value !== undefined)
            reflectionMergePartial<SocketBufferedTrace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketBufferedTrace): SocketBufferedTrace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 trace_id */ 1:
                    message.traceId = reader.uint64().toBigInt();
                    break;
                case /* envoy.data.tap.v2alpha.Connection connection */ 2:
                    message.connection = Connection.internalBinaryRead(reader, reader.uint32(), options, message.connection);
                    break;
                case /* repeated envoy.data.tap.v2alpha.SocketEvent events */ 3:
                    message.events.push(SocketEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool read_truncated */ 4:
                    message.readTruncated = reader.bool();
                    break;
                case /* bool write_truncated */ 5:
                    message.writeTruncated = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketBufferedTrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 trace_id = 1; */
        if (message.traceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.traceId);
        /* envoy.data.tap.v2alpha.Connection connection = 2; */
        if (message.connection)
            Connection.internalBinaryWrite(message.connection, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.data.tap.v2alpha.SocketEvent events = 3; */
        for (let i = 0; i < message.events.length; i++)
            SocketEvent.internalBinaryWrite(message.events[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool read_truncated = 4; */
        if (message.readTruncated !== false)
            writer.tag(4, WireType.Varint).bool(message.readTruncated);
        /* bool write_truncated = 5; */
        if (message.writeTruncated !== false)
            writer.tag(5, WireType.Varint).bool(message.writeTruncated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketBufferedTrace
 */
export const SocketBufferedTrace = new SocketBufferedTrace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketStreamedTraceSegment$Type extends MessageType<SocketStreamedTraceSegment> {
    constructor() {
        super("envoy.data.tap.v2alpha.SocketStreamedTraceSegment", [
            { no: 1, name: "trace_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "connection", kind: "message", oneof: "messagePiece", T: () => Connection },
            { no: 3, name: "event", kind: "message", oneof: "messagePiece", T: () => SocketEvent }
        ]);
    }
    create(value?: PartialMessage<SocketStreamedTraceSegment>): SocketStreamedTraceSegment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceId = 0n;
        message.messagePiece = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SocketStreamedTraceSegment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketStreamedTraceSegment): SocketStreamedTraceSegment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 trace_id */ 1:
                    message.traceId = reader.uint64().toBigInt();
                    break;
                case /* envoy.data.tap.v2alpha.Connection connection */ 2:
                    message.messagePiece = {
                        oneofKind: "connection",
                        connection: Connection.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).connection)
                    };
                    break;
                case /* envoy.data.tap.v2alpha.SocketEvent event */ 3:
                    message.messagePiece = {
                        oneofKind: "event",
                        event: SocketEvent.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).event)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketStreamedTraceSegment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 trace_id = 1; */
        if (message.traceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.traceId);
        /* envoy.data.tap.v2alpha.Connection connection = 2; */
        if (message.messagePiece.oneofKind === "connection")
            Connection.internalBinaryWrite(message.messagePiece.connection, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v2alpha.SocketEvent event = 3; */
        if (message.messagePiece.oneofKind === "event")
            SocketEvent.internalBinaryWrite(message.messagePiece.event, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v2alpha.SocketStreamedTraceSegment
 */
export const SocketStreamedTraceSegment = new SocketStreamedTraceSegment$Type();
