// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/data/tap/v3/http.proto" (package "envoy.data.tap.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HeaderMap } from "../../../config/core/v3/base";
import { Body } from "./common";
import { HeaderValue } from "../../../config/core/v3/base";
// [#protodoc-title: HTTP tap data]

/**
 * A fully buffered HTTP trace message.
 *
 * @generated from protobuf message envoy.data.tap.v3.HttpBufferedTrace
 */
export interface HttpBufferedTrace {
    /**
     * Request message.
     *
     * @generated from protobuf field: envoy.data.tap.v3.HttpBufferedTrace.Message request = 1;
     */
    request?: HttpBufferedTrace_Message;
    /**
     * Response message.
     *
     * @generated from protobuf field: envoy.data.tap.v3.HttpBufferedTrace.Message response = 2;
     */
    response?: HttpBufferedTrace_Message;
}
/**
 * HTTP message wrapper.
 *
 * @generated from protobuf message envoy.data.tap.v3.HttpBufferedTrace.Message
 */
export interface HttpBufferedTrace_Message {
    /**
     * Message headers.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValue headers = 1;
     */
    headers: HeaderValue[];
    /**
     * Message body.
     *
     * @generated from protobuf field: envoy.data.tap.v3.Body body = 2;
     */
    body?: Body;
    /**
     * Message trailers.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValue trailers = 3;
     */
    trailers: HeaderValue[];
}
/**
 * A streamed HTTP trace segment. Multiple segments make up a full trace.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.data.tap.v3.HttpStreamedTraceSegment
 */
export interface HttpStreamedTraceSegment {
    /**
     * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
     * for long term stable uniqueness.
     *
     * @generated from protobuf field: uint64 trace_id = 1;
     */
    traceId: bigint;
    /**
     * @generated from protobuf oneof: message_piece
     */
    messagePiece: {
        oneofKind: "requestHeaders";
        /**
         * Request headers.
         *
         * @generated from protobuf field: envoy.config.core.v3.HeaderMap request_headers = 2;
         */
        requestHeaders: HeaderMap;
    } | {
        oneofKind: "requestBodyChunk";
        /**
         * Request body chunk.
         *
         * @generated from protobuf field: envoy.data.tap.v3.Body request_body_chunk = 3;
         */
        requestBodyChunk: Body;
    } | {
        oneofKind: "requestTrailers";
        /**
         * Request trailers.
         *
         * @generated from protobuf field: envoy.config.core.v3.HeaderMap request_trailers = 4;
         */
        requestTrailers: HeaderMap;
    } | {
        oneofKind: "responseHeaders";
        /**
         * Response headers.
         *
         * @generated from protobuf field: envoy.config.core.v3.HeaderMap response_headers = 5;
         */
        responseHeaders: HeaderMap;
    } | {
        oneofKind: "responseBodyChunk";
        /**
         * Response body chunk.
         *
         * @generated from protobuf field: envoy.data.tap.v3.Body response_body_chunk = 6;
         */
        responseBodyChunk: Body;
    } | {
        oneofKind: "responseTrailers";
        /**
         * Response trailers.
         *
         * @generated from protobuf field: envoy.config.core.v3.HeaderMap response_trailers = 7;
         */
        responseTrailers: HeaderMap;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class HttpBufferedTrace$Type extends MessageType<HttpBufferedTrace> {
    constructor() {
        super("envoy.data.tap.v3.HttpBufferedTrace", [
            { no: 1, name: "request", kind: "message", T: () => HttpBufferedTrace_Message },
            { no: 2, name: "response", kind: "message", T: () => HttpBufferedTrace_Message }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.tap.v2alpha.HttpBufferedTrace" } });
    }
    create(value?: PartialMessage<HttpBufferedTrace>): HttpBufferedTrace {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HttpBufferedTrace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpBufferedTrace): HttpBufferedTrace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.data.tap.v3.HttpBufferedTrace.Message request */ 1:
                    message.request = HttpBufferedTrace_Message.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* envoy.data.tap.v3.HttpBufferedTrace.Message response */ 2:
                    message.response = HttpBufferedTrace_Message.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpBufferedTrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.data.tap.v3.HttpBufferedTrace.Message request = 1; */
        if (message.request)
            HttpBufferedTrace_Message.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v3.HttpBufferedTrace.Message response = 2; */
        if (message.response)
            HttpBufferedTrace_Message.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v3.HttpBufferedTrace
 */
export const HttpBufferedTrace = new HttpBufferedTrace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpBufferedTrace_Message$Type extends MessageType<HttpBufferedTrace_Message> {
    constructor() {
        super("envoy.data.tap.v3.HttpBufferedTrace.Message", [
            { no: 1, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValue },
            { no: 2, name: "body", kind: "message", T: () => Body },
            { no: 3, name: "trailers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValue }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.tap.v2alpha.HttpBufferedTrace.Message" } });
    }
    create(value?: PartialMessage<HttpBufferedTrace_Message>): HttpBufferedTrace_Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.trailers = [];
        if (value !== undefined)
            reflectionMergePartial<HttpBufferedTrace_Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpBufferedTrace_Message): HttpBufferedTrace_Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.HeaderValue headers */ 1:
                    message.headers.push(HeaderValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.data.tap.v3.Body body */ 2:
                    message.body = Body.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                case /* repeated envoy.config.core.v3.HeaderValue trailers */ 3:
                    message.trailers.push(HeaderValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpBufferedTrace_Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.HeaderValue headers = 1; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderValue.internalBinaryWrite(message.headers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v3.Body body = 2; */
        if (message.body)
            Body.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.HeaderValue trailers = 3; */
        for (let i = 0; i < message.trailers.length; i++)
            HeaderValue.internalBinaryWrite(message.trailers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v3.HttpBufferedTrace.Message
 */
export const HttpBufferedTrace_Message = new HttpBufferedTrace_Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpStreamedTraceSegment$Type extends MessageType<HttpStreamedTraceSegment> {
    constructor() {
        super("envoy.data.tap.v3.HttpStreamedTraceSegment", [
            { no: 1, name: "trace_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "request_headers", kind: "message", oneof: "messagePiece", T: () => HeaderMap },
            { no: 3, name: "request_body_chunk", kind: "message", oneof: "messagePiece", T: () => Body },
            { no: 4, name: "request_trailers", kind: "message", oneof: "messagePiece", T: () => HeaderMap },
            { no: 5, name: "response_headers", kind: "message", oneof: "messagePiece", T: () => HeaderMap },
            { no: 6, name: "response_body_chunk", kind: "message", oneof: "messagePiece", T: () => Body },
            { no: 7, name: "response_trailers", kind: "message", oneof: "messagePiece", T: () => HeaderMap }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.data.tap.v2alpha.HttpStreamedTraceSegment" } });
    }
    create(value?: PartialMessage<HttpStreamedTraceSegment>): HttpStreamedTraceSegment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceId = 0n;
        message.messagePiece = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<HttpStreamedTraceSegment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpStreamedTraceSegment): HttpStreamedTraceSegment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 trace_id */ 1:
                    message.traceId = reader.uint64().toBigInt();
                    break;
                case /* envoy.config.core.v3.HeaderMap request_headers */ 2:
                    message.messagePiece = {
                        oneofKind: "requestHeaders",
                        requestHeaders: HeaderMap.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).requestHeaders)
                    };
                    break;
                case /* envoy.data.tap.v3.Body request_body_chunk */ 3:
                    message.messagePiece = {
                        oneofKind: "requestBodyChunk",
                        requestBodyChunk: Body.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).requestBodyChunk)
                    };
                    break;
                case /* envoy.config.core.v3.HeaderMap request_trailers */ 4:
                    message.messagePiece = {
                        oneofKind: "requestTrailers",
                        requestTrailers: HeaderMap.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).requestTrailers)
                    };
                    break;
                case /* envoy.config.core.v3.HeaderMap response_headers */ 5:
                    message.messagePiece = {
                        oneofKind: "responseHeaders",
                        responseHeaders: HeaderMap.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).responseHeaders)
                    };
                    break;
                case /* envoy.data.tap.v3.Body response_body_chunk */ 6:
                    message.messagePiece = {
                        oneofKind: "responseBodyChunk",
                        responseBodyChunk: Body.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).responseBodyChunk)
                    };
                    break;
                case /* envoy.config.core.v3.HeaderMap response_trailers */ 7:
                    message.messagePiece = {
                        oneofKind: "responseTrailers",
                        responseTrailers: HeaderMap.internalBinaryRead(reader, reader.uint32(), options, (message.messagePiece as any).responseTrailers)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpStreamedTraceSegment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 trace_id = 1; */
        if (message.traceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.traceId);
        /* envoy.config.core.v3.HeaderMap request_headers = 2; */
        if (message.messagePiece.oneofKind === "requestHeaders")
            HeaderMap.internalBinaryWrite(message.messagePiece.requestHeaders, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v3.Body request_body_chunk = 3; */
        if (message.messagePiece.oneofKind === "requestBodyChunk")
            Body.internalBinaryWrite(message.messagePiece.requestBodyChunk, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.HeaderMap request_trailers = 4; */
        if (message.messagePiece.oneofKind === "requestTrailers")
            HeaderMap.internalBinaryWrite(message.messagePiece.requestTrailers, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.HeaderMap response_headers = 5; */
        if (message.messagePiece.oneofKind === "responseHeaders")
            HeaderMap.internalBinaryWrite(message.messagePiece.responseHeaders, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.data.tap.v3.Body response_body_chunk = 6; */
        if (message.messagePiece.oneofKind === "responseBodyChunk")
            Body.internalBinaryWrite(message.messagePiece.responseBodyChunk, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.HeaderMap response_trailers = 7; */
        if (message.messagePiece.oneofKind === "responseTrailers")
            HeaderMap.internalBinaryWrite(message.messagePiece.responseTrailers, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.data.tap.v3.HttpStreamedTraceSegment
 */
export const HttpStreamedTraceSegment = new HttpStreamedTraceSegment$Type();
