// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/core/http_uri.proto" (package "envoy.api.v2.core", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../google/protobuf/duration";
// [#protodoc-title: HTTP Service URI ]

/**
 * Envoy external URI descriptor
 *
 * @generated from protobuf message envoy.api.v2.core.HttpUri
 */
export interface HttpUri {
    /**
     * The HTTP server URI. It should be a full FQDN with protocol, host and path.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *    uri: https://www.googleapis.com/oauth2/v1/certs
     *
     *
     * @generated from protobuf field: string uri = 1;
     */
    uri: string;
    /**
     * @generated from protobuf oneof: http_upstream_type
     */
    httpUpstreamType: {
        oneofKind: "cluster";
        /**
         * A cluster is created in the Envoy "cluster_manager" config
         * section. This field specifies the cluster name.
         *
         * Example:
         *
         * .. code-block:: yaml
         *
         *    cluster: jwks_cluster
         *
         *
         * @generated from protobuf field: string cluster = 2;
         */
        cluster: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * Sets the maximum duration in milliseconds that a response can take to arrive upon request.
     *
     * @generated from protobuf field: google.protobuf.Duration timeout = 3;
     */
    timeout?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class HttpUri$Type extends MessageType<HttpUri> {
    constructor() {
        super("envoy.api.v2.core.HttpUri", [
            { no: 1, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "cluster", kind: "scalar", oneof: "httpUpstreamType", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 3, name: "timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, gte: {} } } } }
        ]);
    }
    create(value?: PartialMessage<HttpUri>): HttpUri {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uri = "";
        message.httpUpstreamType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<HttpUri>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpUri): HttpUri {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* string cluster */ 2:
                    message.httpUpstreamType = {
                        oneofKind: "cluster",
                        cluster: reader.string()
                    };
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpUri, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uri = 1; */
        if (message.uri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* string cluster = 2; */
        if (message.httpUpstreamType.oneofKind === "cluster")
            writer.tag(2, WireType.LengthDelimited).string(message.httpUpstreamType.cluster);
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.HttpUri
 */
export const HttpUri = new HttpUri$Type();
