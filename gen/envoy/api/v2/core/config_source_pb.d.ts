// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/core/config_source.proto (package envoy.api.v2.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcService } from "./grpc_service_pb.js";

/**
 * xDS API version. This is used to describe both resource and transport
 * protocol versions (in distinct configuration fields).
 *
 * @generated from enum envoy.api.v2.core.ApiVersion
 */
export declare enum ApiVersion {
  /**
   * When not specified, we assume v2, to ease migration to Envoy's stable API
   * versioning. If a client does not support v2 (e.g. due to deprecation), this
   * is an invalid value.
   *
   * @generated from enum value: AUTO = 0 [deprecated = true];
   * @deprecated
   */
  AUTO = 0,

  /**
   * Use xDS v2 API.
   *
   * @generated from enum value: V2 = 1 [deprecated = true];
   * @deprecated
   */
  V2 = 1,

  /**
   * Use xDS v3 API.
   *
   * @generated from enum value: V3 = 2;
   */
  V3 = 2,
}

/**
 * API configuration source. This identifies the API type and cluster that Envoy
 * will use to fetch an xDS API.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.api.v2.core.ApiConfigSource
 */
export declare class ApiConfigSource extends Message<ApiConfigSource> {
  /**
   * API type (gRPC, REST, delta gRPC)
   *
   * @generated from field: envoy.api.v2.core.ApiConfigSource.ApiType api_type = 1;
   */
  apiType: ApiConfigSource_ApiType;

  /**
   * API version for xDS transport protocol. This describes the xDS gRPC/REST
   * endpoint and version of [Delta]DiscoveryRequest/Response used on the wire.
   *
   * @generated from field: envoy.api.v2.core.ApiVersion transport_api_version = 8;
   */
  transportApiVersion: ApiVersion;

  /**
   * Cluster names should be used only with REST. If > 1
   * cluster is defined, clusters will be cycled through if any kind of failure
   * occurs.
   *
   * .. note::
   *
   *  The cluster with name ``cluster_name`` must be statically defined and its
   *  type must not be ``EDS``.
   *
   * @generated from field: repeated string cluster_names = 2;
   */
  clusterNames: string[];

  /**
   * Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,
   * services will be cycled through if any kind of failure occurs.
   *
   * @generated from field: repeated envoy.api.v2.core.GrpcService grpc_services = 4;
   */
  grpcServices: GrpcService[];

  /**
   * For REST APIs, the delay between successive polls.
   *
   * @generated from field: google.protobuf.Duration refresh_delay = 3;
   */
  refreshDelay?: Duration;

  /**
   * For REST APIs, the request timeout. If not set, a default value of 1s will be used.
   *
   * @generated from field: google.protobuf.Duration request_timeout = 5;
   */
  requestTimeout?: Duration;

  /**
   * For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be
   * rate limited.
   *
   * @generated from field: envoy.api.v2.core.RateLimitSettings rate_limit_settings = 6;
   */
  rateLimitSettings?: RateLimitSettings;

  /**
   * Skip the node identifier in subsequent discovery requests for streaming gRPC config types.
   *
   * @generated from field: bool set_node_on_first_message_only = 7;
   */
  setNodeOnFirstMessageOnly: boolean;

  constructor(data?: PartialMessage<ApiConfigSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.core.ApiConfigSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiConfigSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiConfigSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiConfigSource;

  static equals(a: ApiConfigSource | PlainMessage<ApiConfigSource> | undefined, b: ApiConfigSource | PlainMessage<ApiConfigSource> | undefined): boolean;
}

/**
 * APIs may be fetched via either REST or gRPC.
 *
 * @generated from enum envoy.api.v2.core.ApiConfigSource.ApiType
 */
export declare enum ApiConfigSource_ApiType {
  /**
   * Ideally this would be 'reserved 0' but one can't reserve the default
   * value. Instead we throw an exception if this is ever used.
   *
   * @generated from enum value: UNSUPPORTED_REST_LEGACY = 0 [deprecated = true];
   * @deprecated
   */
  UNSUPPORTED_REST_LEGACY = 0,

  /**
   * REST-JSON v2 API. The `canonical JSON encoding
   * <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
   * the v2 protos is used.
   *
   * @generated from enum value: REST = 1;
   */
  REST = 1,

  /**
   * gRPC v2 API.
   *
   * @generated from enum value: GRPC = 2;
   */
  GRPC = 2,

  /**
   * Using the delta xDS gRPC service, i.e. DeltaDiscovery{Request,Response}
   * rather than Discovery{Request,Response}. Rather than sending Envoy the entire state
   * with every update, the xDS server only sends what has changed since the last update.
   *
   * @generated from enum value: DELTA_GRPC = 3;
   */
  DELTA_GRPC = 3,
}

/**
 * Aggregated Discovery Service (ADS) options. This is currently empty, but when
 * set in :ref:`ConfigSource <envoy_api_msg_core.ConfigSource>` can be used to
 * specify that ADS is to be used.
 *
 * @generated from message envoy.api.v2.core.AggregatedConfigSource
 */
export declare class AggregatedConfigSource extends Message<AggregatedConfigSource> {
  constructor(data?: PartialMessage<AggregatedConfigSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.core.AggregatedConfigSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregatedConfigSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregatedConfigSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregatedConfigSource;

  static equals(a: AggregatedConfigSource | PlainMessage<AggregatedConfigSource> | undefined, b: AggregatedConfigSource | PlainMessage<AggregatedConfigSource> | undefined): boolean;
}

/**
 * [#not-implemented-hide:]
 * Self-referencing config source options. This is currently empty, but when
 * set in :ref:`ConfigSource <envoy_api_msg_core.ConfigSource>` can be used to
 * specify that other data can be obtained from the same server.
 *
 * @generated from message envoy.api.v2.core.SelfConfigSource
 */
export declare class SelfConfigSource extends Message<SelfConfigSource> {
  /**
   * API version for xDS transport protocol. This describes the xDS gRPC/REST
   * endpoint and version of [Delta]DiscoveryRequest/Response used on the wire.
   *
   * @generated from field: envoy.api.v2.core.ApiVersion transport_api_version = 1;
   */
  transportApiVersion: ApiVersion;

  constructor(data?: PartialMessage<SelfConfigSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.core.SelfConfigSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelfConfigSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelfConfigSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelfConfigSource;

  static equals(a: SelfConfigSource | PlainMessage<SelfConfigSource> | undefined, b: SelfConfigSource | PlainMessage<SelfConfigSource> | undefined): boolean;
}

/**
 * Rate Limit settings to be applied for discovery requests made by Envoy.
 *
 * @generated from message envoy.api.v2.core.RateLimitSettings
 */
export declare class RateLimitSettings extends Message<RateLimitSettings> {
  /**
   * Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a
   * default value of 100 will be used.
   *
   * @generated from field: google.protobuf.UInt32Value max_tokens = 1;
   */
  maxTokens?: number;

  /**
   * Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens
   * per second will be used.
   *
   * @generated from field: google.protobuf.DoubleValue fill_rate = 2;
   */
  fillRate?: number;

  constructor(data?: PartialMessage<RateLimitSettings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.core.RateLimitSettings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitSettings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitSettings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitSettings;

  static equals(a: RateLimitSettings | PlainMessage<RateLimitSettings> | undefined, b: RateLimitSettings | PlainMessage<RateLimitSettings> | undefined): boolean;
}

/**
 * Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
 * <config_cluster_manager>`, :ref:`routes
 * <envoy_api_msg_RouteConfiguration>`, :ref:`endpoints
 * <arch_overview_service_discovery>` etc. may either be sourced from the
 * filesystem or from an xDS API source. Filesystem configs are watched with
 * inotify for updates.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.core.ConfigSource
 */
export declare class ConfigSource extends Message<ConfigSource> {
  /**
   * @generated from oneof envoy.api.v2.core.ConfigSource.config_source_specifier
   */
  configSourceSpecifier: {
    /**
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for :ref:`secret <envoy_api_msg_auth.Secret>`,
     * the certificate and key files are also watched for updates.
     *
     * .. note::
     *
     *  The path to the source must exist at config load time.
     *
     * .. note::
     *
     *   Envoy will only watch the file path for *moves.* This is because in general only moves
     *   are atomic. The same method of swapping files as is demonstrated in the
     *   :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also.
     *
     * @generated from field: string path = 1;
     */
    value: string;
    case: "path";
  } | {
    /**
     * API configuration source.
     *
     * @generated from field: envoy.api.v2.core.ApiConfigSource api_config_source = 2;
     */
    value: ApiConfigSource;
    case: "apiConfigSource";
  } | {
    /**
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     *
     * @generated from field: envoy.api.v2.core.AggregatedConfigSource ads = 3;
     */
    value: AggregatedConfigSource;
    case: "ads";
  } | {
    /**
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads<envoy_api_field.ConfigSource.ads>` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     *
     * @generated from field: envoy.api.v2.core.SelfConfigSource self = 5;
     */
    value: SelfConfigSource;
    case: "self";
  } | { case: undefined; value?: undefined };

  /**
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   *
   * @generated from field: google.protobuf.Duration initial_fetch_timeout = 4;
   */
  initialFetchTimeout?: Duration;

  /**
   * API version for xDS resources. This implies the type URLs that the client
   * will request for resources and the resource type that the client will in
   * turn expect to be delivered.
   *
   * @generated from field: envoy.api.v2.core.ApiVersion resource_api_version = 6;
   */
  resourceApiVersion: ApiVersion;

  constructor(data?: PartialMessage<ConfigSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.core.ConfigSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSource;

  static equals(a: ConfigSource | PlainMessage<ConfigSource> | undefined, b: ConfigSource | PlainMessage<ConfigSource> | undefined): boolean;
}

