// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/core/grpc_service.proto" (package "envoy.api.v2.core", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
import { Empty } from "../../../../google/protobuf/empty";
import { DataSource } from "./base";
import { Struct } from "../../../../google/protobuf/struct";
import { HeaderValue } from "./base";
import { Duration } from "../../../../google/protobuf/duration";
// [#protodoc-title: gRPC services]

/**
 * gRPC service configuration. This is used by :ref:`ApiConfigSource
 * <envoy_api_msg_core.ApiConfigSource>` and filter configurations.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService
 */
export interface GrpcService {
    /**
     * @generated from protobuf oneof: target_specifier
     */
    targetSpecifier: {
        oneofKind: "envoyGrpc";
        /**
         * Envoy's in-built gRPC client.
         * See the :ref:`gRPC services overview <arch_overview_grpc_services>`
         * documentation for discussion on gRPC client selection.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.EnvoyGrpc envoy_grpc = 1;
         */
        envoyGrpc: GrpcService_EnvoyGrpc;
    } | {
        oneofKind: "googleGrpc";
        /**
         * `Google C++ gRPC client <https://github.com/grpc/grpc>`_
         * See the :ref:`gRPC services overview <arch_overview_grpc_services>`
         * documentation for discussion on gRPC client selection.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc google_grpc = 2;
         */
        googleGrpc: GrpcService_GoogleGrpc;
    } | {
        oneofKind: undefined;
    };
    /**
     * The timeout for the gRPC request. This is the timeout for a specific
     * request.
     *
     * @generated from protobuf field: google.protobuf.Duration timeout = 3;
     */
    timeout?: Duration;
    /**
     * Additional metadata to include in streams initiated to the GrpcService.
     * This can be used for scenarios in which additional ad hoc authorization
     * headers (e.g. ``x-foo-bar: baz-key``) are to be injected.
     *
     * @generated from protobuf field: repeated envoy.api.v2.core.HeaderValue initial_metadata = 5;
     */
    initialMetadata: HeaderValue[];
}
/**
 * @generated from protobuf message envoy.api.v2.core.GrpcService.EnvoyGrpc
 */
export interface GrpcService_EnvoyGrpc {
    /**
     * The name of the upstream gRPC cluster. SSL credentials will be supplied
     * in the :ref:`Cluster <envoy_api_msg_Cluster>` :ref:`transport_socket
     * <envoy_api_field_Cluster.transport_socket>`.
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
}
/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc
 */
export interface GrpcService_GoogleGrpc {
    /**
     * The target URI when using the `Google C++ gRPC client
     * <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in
     * :ref:`channel_credentials <envoy_api_field_core.GrpcService.GoogleGrpc.channel_credentials>`.
     *
     * @generated from protobuf field: string target_uri = 1;
     */
    targetUri: string;
    /**
     * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials channel_credentials = 2;
     */
    channelCredentials?: GrpcService_GoogleGrpc_ChannelCredentials;
    /**
     * A set of call credentials that can be composed with `channel credentials
     * <https://grpc.io/docs/guides/auth.html#credential-types>`_.
     *
     * @generated from protobuf field: repeated envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials call_credentials = 3;
     */
    callCredentials: GrpcService_GoogleGrpc_CallCredentials[];
    /**
     * The human readable prefix to use when emitting statistics for the gRPC
     * service.
     *
     * .. csv-table::
     *    :header: Name, Type, Description
     *    :widths: 1, 1, 2
     *
     *    streams_total, Counter, Total number of streams opened
     *    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>
     *
     * @generated from protobuf field: string stat_prefix = 4;
     */
    statPrefix: string;
    /**
     * The name of the Google gRPC credentials factory to use. This must have been registered with
     * Envoy. If this is empty, a default credentials factory will be used that sets up channel
     * credentials based on other configuration parameters.
     *
     * @generated from protobuf field: string credentials_factory_name = 5;
     */
    credentialsFactoryName: string;
    /**
     * Additional configuration for site-specific customizations of the Google
     * gRPC library.
     *
     * @generated from protobuf field: google.protobuf.Struct config = 6;
     */
    config?: Struct;
}
/**
 * See https://grpc.io/grpc/cpp/structgrpc_1_1_ssl_credentials_options.html.
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials
 */
export interface GrpcService_GoogleGrpc_SslCredentials {
    /**
     * PEM encoded server root certificates.
     *
     * @generated from protobuf field: envoy.api.v2.core.DataSource root_certs = 1;
     */
    rootCerts?: DataSource;
    /**
     * PEM encoded client private key.
     *
     * @generated from protobuf field: envoy.api.v2.core.DataSource private_key = 2;
     */
    privateKey?: DataSource;
    /**
     * PEM encoded client certificate chain.
     *
     * @generated from protobuf field: envoy.api.v2.core.DataSource cert_chain = 3;
     */
    certChain?: DataSource;
}
/**
 * Local channel credentials. Only UDS is supported for now.
 * See https://github.com/grpc/grpc/pull/15909.
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials
 */
export interface GrpcService_GoogleGrpc_GoogleLocalCredentials {
}
/**
 * See https://grpc.io/docs/guides/auth.html#credential-types to understand Channel and Call
 * credential types.
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials
 */
export interface GrpcService_GoogleGrpc_ChannelCredentials {
    /**
     * @generated from protobuf oneof: credential_specifier
     */
    credentialSpecifier: {
        oneofKind: "sslCredentials";
        /**
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials ssl_credentials = 1;
         */
        sslCredentials: GrpcService_GoogleGrpc_SslCredentials;
    } | {
        oneofKind: "googleDefault";
        /**
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61
         *
         * @generated from protobuf field: google.protobuf.Empty google_default = 2;
         */
        googleDefault: Empty;
    } | {
        oneofKind: "localCredentials";
        /**
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials local_credentials = 3;
         */
        localCredentials: GrpcService_GoogleGrpc_GoogleLocalCredentials;
    } | {
        oneofKind: undefined;
    };
}
/**
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials
 */
export interface GrpcService_GoogleGrpc_CallCredentials {
    /**
     * @generated from protobuf oneof: credential_specifier
     */
    credentialSpecifier: {
        oneofKind: "accessToken";
        /**
         * Access token credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d.
         *
         * @generated from protobuf field: string access_token = 1;
         */
        accessToken: string;
    } | {
        oneofKind: "googleComputeEngine";
        /**
         * Google Compute Engine credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61
         *
         * @generated from protobuf field: google.protobuf.Empty google_compute_engine = 2;
         */
        googleComputeEngine: Empty;
    } | {
        oneofKind: "googleRefreshToken";
        /**
         * Google refresh token credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c.
         *
         * @generated from protobuf field: string google_refresh_token = 3;
         */
        googleRefreshToken: string;
    } | {
        oneofKind: "serviceAccountJwtAccess";
        /**
         * Service Account JWT Access credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials service_account_jwt_access = 4;
         */
        serviceAccountJwtAccess: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials;
    } | {
        oneofKind: "googleIam";
        /**
         * Google IAM credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials google_iam = 5;
         */
        googleIam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials;
    } | {
        oneofKind: "fromPlugin";
        /**
         * Custom authenticator credentials.
         * https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07.
         * https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin from_plugin = 6;
         */
        fromPlugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin;
    } | {
        oneofKind: "stsService";
        /**
         * Custom security token service which implements OAuth 2.0 token exchange.
         * https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16
         * See https://github.com/grpc/grpc/pull/19587.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService sts_service = 7;
         */
        stsService: GrpcService_GoogleGrpc_CallCredentials_StsService;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials
 */
export interface GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    /**
     * @generated from protobuf field: string json_key = 1;
     */
    jsonKey: string;
    /**
     * @generated from protobuf field: uint64 token_lifetime_seconds = 2;
     */
    tokenLifetimeSeconds: bigint;
}
/**
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials
 */
export interface GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    /**
     * @generated from protobuf field: string authorization_token = 1;
     */
    authorizationToken: string;
    /**
     * @generated from protobuf field: string authority_selector = 2;
     */
    authoritySelector: string;
}
/**
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin
 */
export interface GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: config_type
     */
    configType: {
        oneofKind: "config";
        /**
         * @deprecated
         * @generated from protobuf field: google.protobuf.Struct config = 2 [deprecated = true];
         */
        config: Struct;
    } | {
        oneofKind: "typedConfig";
        /**
         * @generated from protobuf field: google.protobuf.Any typed_config = 3;
         */
        typedConfig: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Security token service configuration that allows Google gRPC to
 * fetch security token from an OAuth 2.0 authorization server.
 * See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 and
 * https://github.com/grpc/grpc/pull/19587.
 * [#next-free-field: 10]
 *
 * @generated from protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService
 */
export interface GrpcService_GoogleGrpc_CallCredentials_StsService {
    /**
     * URI of the token exchange service that handles token exchange requests.
     * [#comment:TODO(asraa): Add URI validation when implemented. Tracked by
     * https://github.com/bufbuild/protoc-gen-validate/issues/303]
     *
     * @generated from protobuf field: string token_exchange_service_uri = 1;
     */
    tokenExchangeServiceUri: string;
    /**
     * Location of the target service or resource where the client
     * intends to use the requested security token.
     *
     * @generated from protobuf field: string resource = 2;
     */
    resource: string;
    /**
     * Logical name of the target service where the client intends to
     * use the requested security token.
     *
     * @generated from protobuf field: string audience = 3;
     */
    audience: string;
    /**
     * The desired scope of the requested security token in the
     * context of the service or resource where the token will be used.
     *
     * @generated from protobuf field: string scope = 4;
     */
    scope: string;
    /**
     * Type of the requested security token.
     *
     * @generated from protobuf field: string requested_token_type = 5;
     */
    requestedTokenType: string;
    /**
     * The path of subject token, a security token that represents the
     * identity of the party on behalf of whom the request is being made.
     *
     * @generated from protobuf field: string subject_token_path = 6;
     */
    subjectTokenPath: string;
    /**
     * Type of the subject token.
     *
     * @generated from protobuf field: string subject_token_type = 7;
     */
    subjectTokenType: string;
    /**
     * The path of actor token, a security token that represents the identity
     * of the acting party. The acting party is authorized to use the
     * requested security token and act on behalf of the subject.
     *
     * @generated from protobuf field: string actor_token_path = 8;
     */
    actorTokenPath: string;
    /**
     * Type of the actor token.
     *
     * @generated from protobuf field: string actor_token_type = 9;
     */
    actorTokenType: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService$Type extends MessageType<GrpcService> {
    constructor() {
        super("envoy.api.v2.core.GrpcService", [
            { no: 1, name: "envoy_grpc", kind: "message", oneof: "targetSpecifier", T: () => GrpcService_EnvoyGrpc },
            { no: 2, name: "google_grpc", kind: "message", oneof: "targetSpecifier", T: () => GrpcService_GoogleGrpc },
            { no: 3, name: "timeout", kind: "message", T: () => Duration },
            { no: 5, name: "initial_metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValue }
        ]);
    }
    create(value?: PartialMessage<GrpcService>): GrpcService {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetSpecifier = { oneofKind: undefined };
        message.initialMetadata = [];
        if (value !== undefined)
            reflectionMergePartial<GrpcService>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService): GrpcService {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.GrpcService.EnvoyGrpc envoy_grpc */ 1:
                    message.targetSpecifier = {
                        oneofKind: "envoyGrpc",
                        envoyGrpc: GrpcService_EnvoyGrpc.internalBinaryRead(reader, reader.uint32(), options, (message.targetSpecifier as any).envoyGrpc)
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc google_grpc */ 2:
                    message.targetSpecifier = {
                        oneofKind: "googleGrpc",
                        googleGrpc: GrpcService_GoogleGrpc.internalBinaryRead(reader, reader.uint32(), options, (message.targetSpecifier as any).googleGrpc)
                    };
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* repeated envoy.api.v2.core.HeaderValue initial_metadata */ 5:
                    message.initialMetadata.push(HeaderValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.GrpcService.EnvoyGrpc envoy_grpc = 1; */
        if (message.targetSpecifier.oneofKind === "envoyGrpc")
            GrpcService_EnvoyGrpc.internalBinaryWrite(message.targetSpecifier.envoyGrpc, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.GrpcService.GoogleGrpc google_grpc = 2; */
        if (message.targetSpecifier.oneofKind === "googleGrpc")
            GrpcService_GoogleGrpc.internalBinaryWrite(message.targetSpecifier.googleGrpc, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.core.HeaderValue initial_metadata = 5; */
        for (let i = 0; i < message.initialMetadata.length; i++)
            HeaderValue.internalBinaryWrite(message.initialMetadata[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService
 */
export const GrpcService = new GrpcService$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_EnvoyGrpc$Type extends MessageType<GrpcService_EnvoyGrpc> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.EnvoyGrpc", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<GrpcService_EnvoyGrpc>): GrpcService_EnvoyGrpc {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        if (value !== undefined)
            reflectionMergePartial<GrpcService_EnvoyGrpc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_EnvoyGrpc): GrpcService_EnvoyGrpc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_EnvoyGrpc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.EnvoyGrpc
 */
export const GrpcService_EnvoyGrpc = new GrpcService_EnvoyGrpc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc$Type extends MessageType<GrpcService_GoogleGrpc> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc", [
            { no: 1, name: "target_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "channel_credentials", kind: "message", T: () => GrpcService_GoogleGrpc_ChannelCredentials },
            { no: 3, name: "call_credentials", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrpcService_GoogleGrpc_CallCredentials },
            { no: 4, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 5, name: "credentials_factory_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "config", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc>): GrpcService_GoogleGrpc {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetUri = "";
        message.callCredentials = [];
        message.statPrefix = "";
        message.credentialsFactoryName = "";
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc): GrpcService_GoogleGrpc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string target_uri */ 1:
                    message.targetUri = reader.string();
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials channel_credentials */ 2:
                    message.channelCredentials = GrpcService_GoogleGrpc_ChannelCredentials.internalBinaryRead(reader, reader.uint32(), options, message.channelCredentials);
                    break;
                case /* repeated envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials call_credentials */ 3:
                    message.callCredentials.push(GrpcService_GoogleGrpc_CallCredentials.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string stat_prefix */ 4:
                    message.statPrefix = reader.string();
                    break;
                case /* string credentials_factory_name */ 5:
                    message.credentialsFactoryName = reader.string();
                    break;
                case /* google.protobuf.Struct config */ 6:
                    message.config = Struct.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string target_uri = 1; */
        if (message.targetUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.targetUri);
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials channel_credentials = 2; */
        if (message.channelCredentials)
            GrpcService_GoogleGrpc_ChannelCredentials.internalBinaryWrite(message.channelCredentials, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials call_credentials = 3; */
        for (let i = 0; i < message.callCredentials.length; i++)
            GrpcService_GoogleGrpc_CallCredentials.internalBinaryWrite(message.callCredentials[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string stat_prefix = 4; */
        if (message.statPrefix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statPrefix);
        /* string credentials_factory_name = 5; */
        if (message.credentialsFactoryName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.credentialsFactoryName);
        /* google.protobuf.Struct config = 6; */
        if (message.config)
            Struct.internalBinaryWrite(message.config, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc
 */
export const GrpcService_GoogleGrpc = new GrpcService_GoogleGrpc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_SslCredentials$Type extends MessageType<GrpcService_GoogleGrpc_SslCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials", [
            { no: 1, name: "root_certs", kind: "message", T: () => DataSource },
            { no: 2, name: "private_key", kind: "message", T: () => DataSource, options: { "udpa.annotations.sensitive": true } },
            { no: 3, name: "cert_chain", kind: "message", T: () => DataSource }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_SslCredentials>): GrpcService_GoogleGrpc_SslCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_SslCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_SslCredentials): GrpcService_GoogleGrpc_SslCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.DataSource root_certs */ 1:
                    message.rootCerts = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.rootCerts);
                    break;
                case /* envoy.api.v2.core.DataSource private_key */ 2:
                    message.privateKey = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.privateKey);
                    break;
                case /* envoy.api.v2.core.DataSource cert_chain */ 3:
                    message.certChain = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.certChain);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_SslCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.DataSource root_certs = 1; */
        if (message.rootCerts)
            DataSource.internalBinaryWrite(message.rootCerts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.DataSource private_key = 2; */
        if (message.privateKey)
            DataSource.internalBinaryWrite(message.privateKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.DataSource cert_chain = 3; */
        if (message.certChain)
            DataSource.internalBinaryWrite(message.certChain, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials
 */
export const GrpcService_GoogleGrpc_SslCredentials = new GrpcService_GoogleGrpc_SslCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_GoogleLocalCredentials$Type extends MessageType<GrpcService_GoogleGrpc_GoogleLocalCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials", []);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_GoogleLocalCredentials>): GrpcService_GoogleGrpc_GoogleLocalCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_GoogleLocalCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_GoogleLocalCredentials): GrpcService_GoogleGrpc_GoogleLocalCredentials {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_GoogleLocalCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials
 */
export const GrpcService_GoogleGrpc_GoogleLocalCredentials = new GrpcService_GoogleGrpc_GoogleLocalCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_ChannelCredentials$Type extends MessageType<GrpcService_GoogleGrpc_ChannelCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials", [
            { no: 1, name: "ssl_credentials", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_SslCredentials },
            { no: 2, name: "google_default", kind: "message", oneof: "credentialSpecifier", T: () => Empty },
            { no: 3, name: "local_credentials", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_GoogleLocalCredentials }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_ChannelCredentials>): GrpcService_GoogleGrpc_ChannelCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.credentialSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_ChannelCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_ChannelCredentials): GrpcService_GoogleGrpc_ChannelCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials ssl_credentials */ 1:
                    message.credentialSpecifier = {
                        oneofKind: "sslCredentials",
                        sslCredentials: GrpcService_GoogleGrpc_SslCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).sslCredentials)
                    };
                    break;
                case /* google.protobuf.Empty google_default */ 2:
                    message.credentialSpecifier = {
                        oneofKind: "googleDefault",
                        googleDefault: Empty.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).googleDefault)
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials local_credentials */ 3:
                    message.credentialSpecifier = {
                        oneofKind: "localCredentials",
                        localCredentials: GrpcService_GoogleGrpc_GoogleLocalCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).localCredentials)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_ChannelCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials ssl_credentials = 1; */
        if (message.credentialSpecifier.oneofKind === "sslCredentials")
            GrpcService_GoogleGrpc_SslCredentials.internalBinaryWrite(message.credentialSpecifier.sslCredentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Empty google_default = 2; */
        if (message.credentialSpecifier.oneofKind === "googleDefault")
            Empty.internalBinaryWrite(message.credentialSpecifier.googleDefault, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials local_credentials = 3; */
        if (message.credentialSpecifier.oneofKind === "localCredentials")
            GrpcService_GoogleGrpc_GoogleLocalCredentials.internalBinaryWrite(message.credentialSpecifier.localCredentials, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials
 */
export const GrpcService_GoogleGrpc_ChannelCredentials = new GrpcService_GoogleGrpc_ChannelCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_CallCredentials$Type extends MessageType<GrpcService_GoogleGrpc_CallCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials", [
            { no: 1, name: "access_token", kind: "scalar", oneof: "credentialSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "google_compute_engine", kind: "message", oneof: "credentialSpecifier", T: () => Empty },
            { no: 3, name: "google_refresh_token", kind: "scalar", oneof: "credentialSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "service_account_jwt_access", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials },
            { no: 5, name: "google_iam", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials },
            { no: 6, name: "from_plugin", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin },
            { no: 7, name: "sts_service", kind: "message", oneof: "credentialSpecifier", T: () => GrpcService_GoogleGrpc_CallCredentials_StsService }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_CallCredentials>): GrpcService_GoogleGrpc_CallCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.credentialSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_CallCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_CallCredentials): GrpcService_GoogleGrpc_CallCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.credentialSpecifier = {
                        oneofKind: "accessToken",
                        accessToken: reader.string()
                    };
                    break;
                case /* google.protobuf.Empty google_compute_engine */ 2:
                    message.credentialSpecifier = {
                        oneofKind: "googleComputeEngine",
                        googleComputeEngine: Empty.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).googleComputeEngine)
                    };
                    break;
                case /* string google_refresh_token */ 3:
                    message.credentialSpecifier = {
                        oneofKind: "googleRefreshToken",
                        googleRefreshToken: reader.string()
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials service_account_jwt_access */ 4:
                    message.credentialSpecifier = {
                        oneofKind: "serviceAccountJwtAccess",
                        serviceAccountJwtAccess: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).serviceAccountJwtAccess)
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials google_iam */ 5:
                    message.credentialSpecifier = {
                        oneofKind: "googleIam",
                        googleIam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).googleIam)
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin from_plugin */ 6:
                    message.credentialSpecifier = {
                        oneofKind: "fromPlugin",
                        fromPlugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).fromPlugin)
                    };
                    break;
                case /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService sts_service */ 7:
                    message.credentialSpecifier = {
                        oneofKind: "stsService",
                        stsService: GrpcService_GoogleGrpc_CallCredentials_StsService.internalBinaryRead(reader, reader.uint32(), options, (message.credentialSpecifier as any).stsService)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_CallCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.credentialSpecifier.oneofKind === "accessToken")
            writer.tag(1, WireType.LengthDelimited).string(message.credentialSpecifier.accessToken);
        /* google.protobuf.Empty google_compute_engine = 2; */
        if (message.credentialSpecifier.oneofKind === "googleComputeEngine")
            Empty.internalBinaryWrite(message.credentialSpecifier.googleComputeEngine, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string google_refresh_token = 3; */
        if (message.credentialSpecifier.oneofKind === "googleRefreshToken")
            writer.tag(3, WireType.LengthDelimited).string(message.credentialSpecifier.googleRefreshToken);
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials service_account_jwt_access = 4; */
        if (message.credentialSpecifier.oneofKind === "serviceAccountJwtAccess")
            GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.internalBinaryWrite(message.credentialSpecifier.serviceAccountJwtAccess, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials google_iam = 5; */
        if (message.credentialSpecifier.oneofKind === "googleIam")
            GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.internalBinaryWrite(message.credentialSpecifier.googleIam, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin from_plugin = 6; */
        if (message.credentialSpecifier.oneofKind === "fromPlugin")
            GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.internalBinaryWrite(message.credentialSpecifier.fromPlugin, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService sts_service = 7; */
        if (message.credentialSpecifier.oneofKind === "stsService")
            GrpcService_GoogleGrpc_CallCredentials_StsService.internalBinaryWrite(message.credentialSpecifier.stsService, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials
 */
export const GrpcService_GoogleGrpc_CallCredentials = new GrpcService_GoogleGrpc_CallCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials$Type extends MessageType<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials", [
            { no: 1, name: "json_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token_lifetime_seconds", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jsonKey = "";
        message.tokenLifetimeSeconds = 0n;
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string json_key */ 1:
                    message.jsonKey = reader.string();
                    break;
                case /* uint64 token_lifetime_seconds */ 2:
                    message.tokenLifetimeSeconds = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string json_key = 1; */
        if (message.jsonKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jsonKey);
        /* uint64 token_lifetime_seconds = 2; */
        if (message.tokenLifetimeSeconds !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.tokenLifetimeSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials
 */
export const GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials = new GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials$Type extends MessageType<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials", [
            { no: 1, name: "authorization_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "authority_selector", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authorizationToken = "";
        message.authoritySelector = "";
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string authorization_token */ 1:
                    message.authorizationToken = reader.string();
                    break;
                case /* string authority_selector */ 2:
                    message.authoritySelector = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string authorization_token = 1; */
        if (message.authorizationToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authorizationToken);
        /* string authority_selector = 2; */
        if (message.authoritySelector !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authoritySelector);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials
 */
export const GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials = new GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin$Type extends MessageType<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "config", kind: "message", oneof: "configType", T: () => Struct },
            { no: 3, name: "typed_config", kind: "message", oneof: "configType", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.configType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct config = 2 [deprecated = true];*/ 2:
                    message.configType = {
                        oneofKind: "config",
                        config: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).config)
                    };
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.configType = {
                        oneofKind: "typedConfig",
                        typedConfig: Any.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).typedConfig)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct config = 2 [deprecated = true]; */
        if (message.configType.oneofKind === "config")
            Struct.internalBinaryWrite(message.configType.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any typed_config = 3; */
        if (message.configType.oneofKind === "typedConfig")
            Any.internalBinaryWrite(message.configType.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin
 */
export const GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin = new GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcService_GoogleGrpc_CallCredentials_StsService$Type extends MessageType<GrpcService_GoogleGrpc_CallCredentials_StsService> {
    constructor() {
        super("envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService", [
            { no: 1, name: "token_exchange_service_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "audience", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "requested_token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "subject_token_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 7, name: "subject_token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 8, name: "actor_token_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "actor_token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrpcService_GoogleGrpc_CallCredentials_StsService>): GrpcService_GoogleGrpc_CallCredentials_StsService {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokenExchangeServiceUri = "";
        message.resource = "";
        message.audience = "";
        message.scope = "";
        message.requestedTokenType = "";
        message.subjectTokenPath = "";
        message.subjectTokenType = "";
        message.actorTokenPath = "";
        message.actorTokenType = "";
        if (value !== undefined)
            reflectionMergePartial<GrpcService_GoogleGrpc_CallCredentials_StsService>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcService_GoogleGrpc_CallCredentials_StsService): GrpcService_GoogleGrpc_CallCredentials_StsService {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_exchange_service_uri */ 1:
                    message.tokenExchangeServiceUri = reader.string();
                    break;
                case /* string resource */ 2:
                    message.resource = reader.string();
                    break;
                case /* string audience */ 3:
                    message.audience = reader.string();
                    break;
                case /* string scope */ 4:
                    message.scope = reader.string();
                    break;
                case /* string requested_token_type */ 5:
                    message.requestedTokenType = reader.string();
                    break;
                case /* string subject_token_path */ 6:
                    message.subjectTokenPath = reader.string();
                    break;
                case /* string subject_token_type */ 7:
                    message.subjectTokenType = reader.string();
                    break;
                case /* string actor_token_path */ 8:
                    message.actorTokenPath = reader.string();
                    break;
                case /* string actor_token_type */ 9:
                    message.actorTokenType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcService_GoogleGrpc_CallCredentials_StsService, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_exchange_service_uri = 1; */
        if (message.tokenExchangeServiceUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenExchangeServiceUri);
        /* string resource = 2; */
        if (message.resource !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resource);
        /* string audience = 3; */
        if (message.audience !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.audience);
        /* string scope = 4; */
        if (message.scope !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scope);
        /* string requested_token_type = 5; */
        if (message.requestedTokenType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.requestedTokenType);
        /* string subject_token_path = 6; */
        if (message.subjectTokenPath !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subjectTokenPath);
        /* string subject_token_type = 7; */
        if (message.subjectTokenType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.subjectTokenType);
        /* string actor_token_path = 8; */
        if (message.actorTokenPath !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.actorTokenPath);
        /* string actor_token_type = 9; */
        if (message.actorTokenType !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.actorTokenType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService
 */
export const GrpcService_GoogleGrpc_CallCredentials_StsService = new GrpcService_GoogleGrpc_CallCredentials_StsService$Type();
