// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/core/address.proto (package envoy.api.v2.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, proto3, UInt32Value } from "@bufbuild/protobuf";
import { SocketOption } from "./socket_option_pb.js";

/**
 * @generated from message envoy.api.v2.core.Pipe
 */
export const Pipe = proto3.makeMessageType(
  "envoy.api.v2.core.Pipe",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.core.SocketAddress
 */
export const SocketAddress = proto3.makeMessageType(
  "envoy.api.v2.core.SocketAddress",
  () => [
    { no: 1, name: "protocol", kind: "enum", T: proto3.getEnumType(SocketAddress_Protocol) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "port_specifier" },
    { no: 4, name: "named_port", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "port_specifier" },
    { no: 5, name: "resolver_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ipv4_compat", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from enum envoy.api.v2.core.SocketAddress.Protocol
 */
export const SocketAddress_Protocol = proto3.makeEnum(
  "envoy.api.v2.core.SocketAddress.Protocol",
  [
    {no: 0, name: "TCP"},
    {no: 1, name: "UDP"},
  ],
);

/**
 * @generated from message envoy.api.v2.core.TcpKeepalive
 */
export const TcpKeepalive = proto3.makeMessageType(
  "envoy.api.v2.core.TcpKeepalive",
  () => [
    { no: 1, name: "keepalive_probes", kind: "message", T: UInt32Value },
    { no: 2, name: "keepalive_time", kind: "message", T: UInt32Value },
    { no: 3, name: "keepalive_interval", kind: "message", T: UInt32Value },
  ],
);

/**
 * @generated from message envoy.api.v2.core.BindConfig
 */
export const BindConfig = proto3.makeMessageType(
  "envoy.api.v2.core.BindConfig",
  () => [
    { no: 1, name: "source_address", kind: "message", T: SocketAddress },
    { no: 2, name: "freebind", kind: "message", T: BoolValue },
    { no: 3, name: "socket_options", kind: "message", T: SocketOption, repeated: true },
  ],
);

/**
 * Addresses specify either a logical or physical address and port, which are
 * used to tell Envoy where to bind/listen, connect to upstream and find
 * management servers.
 *
 * @generated from message envoy.api.v2.core.Address
 */
export const Address = proto3.makeMessageType(
  "envoy.api.v2.core.Address",
  () => [
    { no: 1, name: "socket_address", kind: "message", T: SocketAddress, oneof: "address" },
    { no: 2, name: "pipe", kind: "message", T: Pipe, oneof: "address" },
  ],
);

/**
 * CidrRange specifies an IP Address and a prefix length to construct
 * the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
 *
 * @generated from message envoy.api.v2.core.CidrRange
 */
export const CidrRange = proto3.makeMessageType(
  "envoy.api.v2.core.CidrRange",
  () => [
    { no: 1, name: "address_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prefix_len", kind: "message", T: UInt32Value },
  ],
);

