// @generated by protoc-gen-connect-es v1.1.4
// @generated from file envoy/api/v2/srds.proto (package envoy.api.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeltaDiscoveryRequest, DeltaDiscoveryResponse, DiscoveryRequest, DiscoveryResponse } from "./discovery_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The Scoped Routes Discovery Service (SRDS) API distributes
 * :ref:`ScopedRouteConfiguration<envoy_api_msg.ScopedRouteConfiguration>`
 * resources. Each ScopedRouteConfiguration resource represents a "routing
 * scope" containing a mapping that allows the HTTP connection manager to
 * dynamically assign a routing table (specified via a
 * :ref:`RouteConfiguration<envoy_api_msg_RouteConfiguration>` message) to each
 * HTTP request.
 *
 * @generated from service envoy.api.v2.ScopedRoutesDiscoveryService
 */
export declare const ScopedRoutesDiscoveryService: {
  readonly typeName: "envoy.api.v2.ScopedRoutesDiscoveryService",
  readonly methods: {
    /**
     * @generated from rpc envoy.api.v2.ScopedRoutesDiscoveryService.StreamScopedRoutes
     */
    readonly streamScopedRoutes: {
      readonly name: "StreamScopedRoutes",
      readonly I: typeof DiscoveryRequest,
      readonly O: typeof DiscoveryResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * @generated from rpc envoy.api.v2.ScopedRoutesDiscoveryService.DeltaScopedRoutes
     */
    readonly deltaScopedRoutes: {
      readonly name: "DeltaScopedRoutes",
      readonly I: typeof DeltaDiscoveryRequest,
      readonly O: typeof DeltaDiscoveryResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * @generated from rpc envoy.api.v2.ScopedRoutesDiscoveryService.FetchScopedRoutes
     */
    readonly fetchScopedRoutes: {
      readonly name: "FetchScopedRoutes",
      readonly I: typeof DiscoveryRequest,
      readonly O: typeof DiscoveryResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

