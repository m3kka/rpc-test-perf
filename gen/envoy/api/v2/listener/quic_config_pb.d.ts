// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/listener/quic_config.proto (package envoy.api.v2.listener, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Configuration specific to the QUIC protocol.
 * Next id: 4
 *
 * @generated from message envoy.api.v2.listener.QuicProtocolOptions
 */
export declare class QuicProtocolOptions extends Message<QuicProtocolOptions> {
  /**
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   *
   * @generated from field: google.protobuf.UInt32Value max_concurrent_streams = 1;
   */
  maxConcurrentStreams?: number;

  /**
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity. 300000ms if not specified.
   *
   * @generated from field: google.protobuf.Duration idle_timeout = 2;
   */
  idleTimeout?: Duration;

  /**
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * 20000ms if not specified.
   *
   * @generated from field: google.protobuf.Duration crypto_handshake_timeout = 3;
   */
  cryptoHandshakeTimeout?: Duration;

  constructor(data?: PartialMessage<QuicProtocolOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.listener.QuicProtocolOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuicProtocolOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuicProtocolOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuicProtocolOptions;

  static equals(a: QuicProtocolOptions | PlainMessage<QuicProtocolOptions> | undefined, b: QuicProtocolOptions | PlainMessage<QuicProtocolOptions> | undefined): boolean;
}

