// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/auth/tls.proto" (package "envoy.api.v2.auth", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CertificateValidationContext } from "./common";
import { TlsCertificate } from "./common";
import { TlsParameters } from "./common";
import { Duration } from "../../../../google/protobuf/duration";
import { SdsSecretConfig } from "./secret";
import { TlsSessionTicketKeys } from "./common";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
// [#protodoc-title: TLS transport socket]
// [#extension: envoy.transport_sockets.tls]
// The TLS contexts below provide the transport socket configuration for upstream/downstream TLS.

/**
 * @generated from protobuf message envoy.api.v2.auth.UpstreamTlsContext
 */
export interface UpstreamTlsContext {
    /**
     * Common TLS context settings.
     *
     * .. attention::
     *
     *   Server certificate verification is not enabled by default. Configure
     *   :ref:`trusted_ca<envoy_api_field_auth.CertificateValidationContext.trusted_ca>` to enable
     *   verification.
     *
     * @generated from protobuf field: envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;
     */
    commonTlsContext?: CommonTlsContext;
    /**
     * SNI string to use when creating TLS backend connections.
     *
     * @generated from protobuf field: string sni = 2;
     */
    sni: string;
    /**
     * If true, server-initiated TLS renegotiation will be allowed.
     *
     * .. attention::
     *
     *   TLS renegotiation is considered insecure and shouldn't be used unless absolutely necessary.
     *
     * @generated from protobuf field: bool allow_renegotiation = 3;
     */
    allowRenegotiation: boolean;
    /**
     * Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
     * for TLSv1.2 and older) to store for the purpose of session resumption.
     *
     * Defaults to 1, setting this to 0 disables session resumption.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_session_keys = 4;
     */
    maxSessionKeys?: UInt32Value;
}
/**
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.api.v2.auth.DownstreamTlsContext
 */
export interface DownstreamTlsContext {
    /**
     * Common TLS context settings.
     *
     * @generated from protobuf field: envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;
     */
    commonTlsContext?: CommonTlsContext;
    /**
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     *
     * @generated from protobuf field: google.protobuf.BoolValue require_client_certificate = 2;
     */
    requireClientCertificate?: BoolValue;
    /**
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: google.protobuf.BoolValue require_sni = 3;
     */
    requireSni?: BoolValue;
    /**
     * @generated from protobuf oneof: session_ticket_keys_type
     */
    sessionTicketKeysType: {
        oneofKind: "sessionTicketKeys";
        /**
         * TLS session ticket key settings.
         *
         * @generated from protobuf field: envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;
         */
        sessionTicketKeys: TlsSessionTicketKeys;
    } | {
        oneofKind: "sessionTicketKeysSdsSecretConfig";
        /**
         * Config for fetching TLS session ticket keys via SDS API.
         *
         * @generated from protobuf field: envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
         */
        sessionTicketKeysSdsSecretConfig: SdsSecretConfig;
    } | {
        oneofKind: "disableStatelessSessionResumption";
        /**
         * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
         * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
         * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
         * the keys specified through either :ref:`session_ticket_keys <envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys>`
         * or :ref:`session_ticket_keys_sds_secret_config <envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config>`.
         * If this config is set to false and no keys are explicitly configured, the TLS server will issue
         * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
         * implication that sessions cannot be resumed across hot restarts or on different hosts.
         *
         * @generated from protobuf field: bool disable_stateless_session_resumption = 7;
         */
        disableStatelessSessionResumption: boolean;
    } | {
        oneofKind: undefined;
    };
    /**
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) <https://tools.ietf.org/html/rfc5077#section-5.6>`_.
     * Only seconds can be specified (fractional seconds are ignored).
     *
     * @generated from protobuf field: google.protobuf.Duration session_timeout = 6;
     */
    sessionTimeout?: Duration;
}
/**
 * TLS context shared by both client and server TLS contexts.
 * [#next-free-field: 9]
 *
 * @generated from protobuf message envoy.api.v2.auth.CommonTlsContext
 */
export interface CommonTlsContext {
    /**
     * TLS protocol versions, cipher suites etc.
     *
     * @generated from protobuf field: envoy.api.v2.auth.TlsParameters tls_params = 1;
     */
    tlsParams?: TlsParameters;
    /**
     * :ref:`Multiple TLS certificates <arch_overview_ssl_cert_select>` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     *
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     *
     * @generated from protobuf field: repeated envoy.api.v2.auth.TlsCertificate tls_certificates = 2;
     */
    tlsCertificates: TlsCertificate[];
    /**
     * Configs for fetching TLS certificates via SDS API.
     *
     * @generated from protobuf field: repeated envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6;
     */
    tlsCertificateSdsSecretConfigs: SdsSecretConfig[];
    /**
     * @generated from protobuf oneof: validation_context_type
     */
    validationContextType: {
        oneofKind: "validationContext";
        /**
         * How to validate peer certificates.
         *
         * @generated from protobuf field: envoy.api.v2.auth.CertificateValidationContext validation_context = 3;
         */
        validationContext: CertificateValidationContext;
    } | {
        oneofKind: "validationContextSdsSecretConfig";
        /**
         * Config for fetching validation context via SDS API.
         *
         * @generated from protobuf field: envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;
         */
        validationContextSdsSecretConfig: SdsSecretConfig;
    } | {
        oneofKind: "combinedValidationContext";
        /**
         * Combined certificate validation context holds a default CertificateValidationContext
         * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
         * and default CertificateValidationContext are merged into a new CertificateValidationContext
         * for validation. This merge is done by Message::MergeFrom(), so dynamic
         * CertificateValidationContext overwrites singular fields in default
         * CertificateValidationContext, and concatenates repeated fields to default
         * CertificateValidationContext, and logical OR is applied to boolean fields.
         *
         * @generated from protobuf field: envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;
         */
        combinedValidationContext: CommonTlsContext_CombinedCertificateValidationContext;
    } | {
        oneofKind: undefined;
    };
    /**
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type>`
     * parameter in the HTTP connection manager for more information):
     *
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     *
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     *
     * @generated from protobuf field: repeated string alpn_protocols = 4;
     */
    alpnProtocols: string[];
}
/**
 * @generated from protobuf message envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext
 */
export interface CommonTlsContext_CombinedCertificateValidationContext {
    /**
     * How to validate peer certificates.
     *
     * @generated from protobuf field: envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1;
     */
    defaultValidationContext?: CertificateValidationContext;
    /**
     * Config for fetching validation context via SDS API.
     *
     * @generated from protobuf field: envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2;
     */
    validationContextSdsSecretConfig?: SdsSecretConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpstreamTlsContext$Type extends MessageType<UpstreamTlsContext> {
    constructor() {
        super("envoy.api.v2.auth.UpstreamTlsContext", [
            { no: 1, name: "common_tls_context", kind: "message", T: () => CommonTlsContext },
            { no: 2, name: "sni", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "255" } } } },
            { no: 3, name: "allow_renegotiation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "max_session_keys", kind: "message", T: () => UInt32Value }
        ]);
    }
    create(value?: PartialMessage<UpstreamTlsContext>): UpstreamTlsContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sni = "";
        message.allowRenegotiation = false;
        if (value !== undefined)
            reflectionMergePartial<UpstreamTlsContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpstreamTlsContext): UpstreamTlsContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.auth.CommonTlsContext common_tls_context */ 1:
                    message.commonTlsContext = CommonTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.commonTlsContext);
                    break;
                case /* string sni */ 2:
                    message.sni = reader.string();
                    break;
                case /* bool allow_renegotiation */ 3:
                    message.allowRenegotiation = reader.bool();
                    break;
                case /* google.protobuf.UInt32Value max_session_keys */ 4:
                    message.maxSessionKeys = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxSessionKeys);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpstreamTlsContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.auth.CommonTlsContext common_tls_context = 1; */
        if (message.commonTlsContext)
            CommonTlsContext.internalBinaryWrite(message.commonTlsContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sni = 2; */
        if (message.sni !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sni);
        /* bool allow_renegotiation = 3; */
        if (message.allowRenegotiation !== false)
            writer.tag(3, WireType.Varint).bool(message.allowRenegotiation);
        /* google.protobuf.UInt32Value max_session_keys = 4; */
        if (message.maxSessionKeys)
            UInt32Value.internalBinaryWrite(message.maxSessionKeys, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.UpstreamTlsContext
 */
export const UpstreamTlsContext = new UpstreamTlsContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownstreamTlsContext$Type extends MessageType<DownstreamTlsContext> {
    constructor() {
        super("envoy.api.v2.auth.DownstreamTlsContext", [
            { no: 1, name: "common_tls_context", kind: "message", T: () => CommonTlsContext },
            { no: 2, name: "require_client_certificate", kind: "message", T: () => BoolValue },
            { no: 3, name: "require_sni", kind: "message", T: () => BoolValue },
            { no: 4, name: "session_ticket_keys", kind: "message", oneof: "sessionTicketKeysType", T: () => TlsSessionTicketKeys },
            { no: 5, name: "session_ticket_keys_sds_secret_config", kind: "message", oneof: "sessionTicketKeysType", T: () => SdsSecretConfig },
            { no: 7, name: "disable_stateless_session_resumption", kind: "scalar", oneof: "sessionTicketKeysType", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "session_timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { lt: { seconds: "4294967296" }, gte: {} } } } }
        ]);
    }
    create(value?: PartialMessage<DownstreamTlsContext>): DownstreamTlsContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionTicketKeysType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DownstreamTlsContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownstreamTlsContext): DownstreamTlsContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.auth.CommonTlsContext common_tls_context */ 1:
                    message.commonTlsContext = CommonTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.commonTlsContext);
                    break;
                case /* google.protobuf.BoolValue require_client_certificate */ 2:
                    message.requireClientCertificate = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.requireClientCertificate);
                    break;
                case /* google.protobuf.BoolValue require_sni */ 3:
                    message.requireSni = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.requireSni);
                    break;
                case /* envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys */ 4:
                    message.sessionTicketKeysType = {
                        oneofKind: "sessionTicketKeys",
                        sessionTicketKeys: TlsSessionTicketKeys.internalBinaryRead(reader, reader.uint32(), options, (message.sessionTicketKeysType as any).sessionTicketKeys)
                    };
                    break;
                case /* envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config */ 5:
                    message.sessionTicketKeysType = {
                        oneofKind: "sessionTicketKeysSdsSecretConfig",
                        sessionTicketKeysSdsSecretConfig: SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, (message.sessionTicketKeysType as any).sessionTicketKeysSdsSecretConfig)
                    };
                    break;
                case /* bool disable_stateless_session_resumption */ 7:
                    message.sessionTicketKeysType = {
                        oneofKind: "disableStatelessSessionResumption",
                        disableStatelessSessionResumption: reader.bool()
                    };
                    break;
                case /* google.protobuf.Duration session_timeout */ 6:
                    message.sessionTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.sessionTimeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownstreamTlsContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.auth.CommonTlsContext common_tls_context = 1; */
        if (message.commonTlsContext)
            CommonTlsContext.internalBinaryWrite(message.commonTlsContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue require_client_certificate = 2; */
        if (message.requireClientCertificate)
            BoolValue.internalBinaryWrite(message.requireClientCertificate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue require_sni = 3; */
        if (message.requireSni)
            BoolValue.internalBinaryWrite(message.requireSni, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4; */
        if (message.sessionTicketKeysType.oneofKind === "sessionTicketKeys")
            TlsSessionTicketKeys.internalBinaryWrite(message.sessionTicketKeysType.sessionTicketKeys, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5; */
        if (message.sessionTicketKeysType.oneofKind === "sessionTicketKeysSdsSecretConfig")
            SdsSecretConfig.internalBinaryWrite(message.sessionTicketKeysType.sessionTicketKeysSdsSecretConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool disable_stateless_session_resumption = 7; */
        if (message.sessionTicketKeysType.oneofKind === "disableStatelessSessionResumption")
            writer.tag(7, WireType.Varint).bool(message.sessionTicketKeysType.disableStatelessSessionResumption);
        /* google.protobuf.Duration session_timeout = 6; */
        if (message.sessionTimeout)
            Duration.internalBinaryWrite(message.sessionTimeout, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.DownstreamTlsContext
 */
export const DownstreamTlsContext = new DownstreamTlsContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonTlsContext$Type extends MessageType<CommonTlsContext> {
    constructor() {
        super("envoy.api.v2.auth.CommonTlsContext", [
            { no: 1, name: "tls_params", kind: "message", T: () => TlsParameters },
            { no: 2, name: "tls_certificates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TlsCertificate },
            { no: 6, name: "tls_certificate_sds_secret_configs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SdsSecretConfig, options: { "validate.rules": { repeated: { maxItems: "1" } } } },
            { no: 3, name: "validation_context", kind: "message", oneof: "validationContextType", T: () => CertificateValidationContext },
            { no: 7, name: "validation_context_sds_secret_config", kind: "message", oneof: "validationContextType", T: () => SdsSecretConfig },
            { no: 8, name: "combined_validation_context", kind: "message", oneof: "validationContextType", T: () => CommonTlsContext_CombinedCertificateValidationContext },
            { no: 4, name: "alpn_protocols", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommonTlsContext>): CommonTlsContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tlsCertificates = [];
        message.tlsCertificateSdsSecretConfigs = [];
        message.validationContextType = { oneofKind: undefined };
        message.alpnProtocols = [];
        if (value !== undefined)
            reflectionMergePartial<CommonTlsContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonTlsContext): CommonTlsContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.auth.TlsParameters tls_params */ 1:
                    message.tlsParams = TlsParameters.internalBinaryRead(reader, reader.uint32(), options, message.tlsParams);
                    break;
                case /* repeated envoy.api.v2.auth.TlsCertificate tls_certificates */ 2:
                    message.tlsCertificates.push(TlsCertificate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs */ 6:
                    message.tlsCertificateSdsSecretConfigs.push(SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.api.v2.auth.CertificateValidationContext validation_context */ 3:
                    message.validationContextType = {
                        oneofKind: "validationContext",
                        validationContext: CertificateValidationContext.internalBinaryRead(reader, reader.uint32(), options, (message.validationContextType as any).validationContext)
                    };
                    break;
                case /* envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config */ 7:
                    message.validationContextType = {
                        oneofKind: "validationContextSdsSecretConfig",
                        validationContextSdsSecretConfig: SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, (message.validationContextType as any).validationContextSdsSecretConfig)
                    };
                    break;
                case /* envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context */ 8:
                    message.validationContextType = {
                        oneofKind: "combinedValidationContext",
                        combinedValidationContext: CommonTlsContext_CombinedCertificateValidationContext.internalBinaryRead(reader, reader.uint32(), options, (message.validationContextType as any).combinedValidationContext)
                    };
                    break;
                case /* repeated string alpn_protocols */ 4:
                    message.alpnProtocols.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonTlsContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.auth.TlsParameters tls_params = 1; */
        if (message.tlsParams)
            TlsParameters.internalBinaryWrite(message.tlsParams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.auth.TlsCertificate tls_certificates = 2; */
        for (let i = 0; i < message.tlsCertificates.length; i++)
            TlsCertificate.internalBinaryWrite(message.tlsCertificates[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6; */
        for (let i = 0; i < message.tlsCertificateSdsSecretConfigs.length; i++)
            SdsSecretConfig.internalBinaryWrite(message.tlsCertificateSdsSecretConfigs[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.CertificateValidationContext validation_context = 3; */
        if (message.validationContextType.oneofKind === "validationContext")
            CertificateValidationContext.internalBinaryWrite(message.validationContextType.validationContext, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7; */
        if (message.validationContextType.oneofKind === "validationContextSdsSecretConfig")
            SdsSecretConfig.internalBinaryWrite(message.validationContextType.validationContextSdsSecretConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8; */
        if (message.validationContextType.oneofKind === "combinedValidationContext")
            CommonTlsContext_CombinedCertificateValidationContext.internalBinaryWrite(message.validationContextType.combinedValidationContext, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated string alpn_protocols = 4; */
        for (let i = 0; i < message.alpnProtocols.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.alpnProtocols[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.CommonTlsContext
 */
export const CommonTlsContext = new CommonTlsContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonTlsContext_CombinedCertificateValidationContext$Type extends MessageType<CommonTlsContext_CombinedCertificateValidationContext> {
    constructor() {
        super("envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext", [
            { no: 1, name: "default_validation_context", kind: "message", T: () => CertificateValidationContext, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "validation_context_sds_secret_config", kind: "message", T: () => SdsSecretConfig, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CommonTlsContext_CombinedCertificateValidationContext>): CommonTlsContext_CombinedCertificateValidationContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CommonTlsContext_CombinedCertificateValidationContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonTlsContext_CombinedCertificateValidationContext): CommonTlsContext_CombinedCertificateValidationContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.auth.CertificateValidationContext default_validation_context */ 1:
                    message.defaultValidationContext = CertificateValidationContext.internalBinaryRead(reader, reader.uint32(), options, message.defaultValidationContext);
                    break;
                case /* envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config */ 2:
                    message.validationContextSdsSecretConfig = SdsSecretConfig.internalBinaryRead(reader, reader.uint32(), options, message.validationContextSdsSecretConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonTlsContext_CombinedCertificateValidationContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1; */
        if (message.defaultValidationContext)
            CertificateValidationContext.internalBinaryWrite(message.defaultValidationContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2; */
        if (message.validationContextSdsSecretConfig)
            SdsSecretConfig.internalBinaryWrite(message.validationContextSdsSecretConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext
 */
export const CommonTlsContext_CombinedCertificateValidationContext = new CommonTlsContext_CombinedCertificateValidationContext$Type();
