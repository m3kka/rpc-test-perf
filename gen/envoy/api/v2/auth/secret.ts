// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/auth/secret.proto" (package "envoy.api.v2.auth", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CertificateValidationContext } from "./common";
import { TlsSessionTicketKeys } from "./common";
import { TlsCertificate } from "./common";
import { ConfigSource } from "../core/config_source";
import { DataSource } from "../core/base";
// [#protodoc-title: Secrets configuration]

/**
 * @generated from protobuf message envoy.api.v2.auth.GenericSecret
 */
export interface GenericSecret {
    /**
     * Secret of generic type and is available to filters.
     *
     * @generated from protobuf field: envoy.api.v2.core.DataSource secret = 1;
     */
    secret?: DataSource;
}
/**
 * @generated from protobuf message envoy.api.v2.auth.SdsSecretConfig
 */
export interface SdsSecretConfig {
    /**
     * Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
     * When both name and config are specified, then secret can be fetched and/or reloaded via
     * SDS. When only name is specified, then secret will be loaded from static resources.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: envoy.api.v2.core.ConfigSource sds_config = 2;
     */
    sdsConfig?: ConfigSource;
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.api.v2.auth.Secret
 */
export interface Secret {
    /**
     * Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "tlsCertificate";
        /**
         * @generated from protobuf field: envoy.api.v2.auth.TlsCertificate tls_certificate = 2;
         */
        tlsCertificate: TlsCertificate;
    } | {
        oneofKind: "sessionTicketKeys";
        /**
         * @generated from protobuf field: envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 3;
         */
        sessionTicketKeys: TlsSessionTicketKeys;
    } | {
        oneofKind: "validationContext";
        /**
         * @generated from protobuf field: envoy.api.v2.auth.CertificateValidationContext validation_context = 4;
         */
        validationContext: CertificateValidationContext;
    } | {
        oneofKind: "genericSecret";
        /**
         * @generated from protobuf field: envoy.api.v2.auth.GenericSecret generic_secret = 5;
         */
        genericSecret: GenericSecret;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GenericSecret$Type extends MessageType<GenericSecret> {
    constructor() {
        super("envoy.api.v2.auth.GenericSecret", [
            { no: 1, name: "secret", kind: "message", T: () => DataSource, options: { "udpa.annotations.sensitive": true } }
        ]);
    }
    create(value?: PartialMessage<GenericSecret>): GenericSecret {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GenericSecret>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericSecret): GenericSecret {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.DataSource secret */ 1:
                    message.secret = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.secret);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericSecret, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.DataSource secret = 1; */
        if (message.secret)
            DataSource.internalBinaryWrite(message.secret, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.GenericSecret
 */
export const GenericSecret = new GenericSecret$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SdsSecretConfig$Type extends MessageType<SdsSecretConfig> {
    constructor() {
        super("envoy.api.v2.auth.SdsSecretConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sds_config", kind: "message", T: () => ConfigSource }
        ]);
    }
    create(value?: PartialMessage<SdsSecretConfig>): SdsSecretConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SdsSecretConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SdsSecretConfig): SdsSecretConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.api.v2.core.ConfigSource sds_config */ 2:
                    message.sdsConfig = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.sdsConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SdsSecretConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.api.v2.core.ConfigSource sds_config = 2; */
        if (message.sdsConfig)
            ConfigSource.internalBinaryWrite(message.sdsConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.SdsSecretConfig
 */
export const SdsSecretConfig = new SdsSecretConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Secret$Type extends MessageType<Secret> {
    constructor() {
        super("envoy.api.v2.auth.Secret", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tls_certificate", kind: "message", oneof: "type", T: () => TlsCertificate },
            { no: 3, name: "session_ticket_keys", kind: "message", oneof: "type", T: () => TlsSessionTicketKeys },
            { no: 4, name: "validation_context", kind: "message", oneof: "type", T: () => CertificateValidationContext },
            { no: 5, name: "generic_secret", kind: "message", oneof: "type", T: () => GenericSecret }
        ]);
    }
    create(value?: PartialMessage<Secret>): Secret {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Secret>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Secret): Secret {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.api.v2.auth.TlsCertificate tls_certificate */ 2:
                    message.type = {
                        oneofKind: "tlsCertificate",
                        tlsCertificate: TlsCertificate.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tlsCertificate)
                    };
                    break;
                case /* envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys */ 3:
                    message.type = {
                        oneofKind: "sessionTicketKeys",
                        sessionTicketKeys: TlsSessionTicketKeys.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).sessionTicketKeys)
                    };
                    break;
                case /* envoy.api.v2.auth.CertificateValidationContext validation_context */ 4:
                    message.type = {
                        oneofKind: "validationContext",
                        validationContext: CertificateValidationContext.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).validationContext)
                    };
                    break;
                case /* envoy.api.v2.auth.GenericSecret generic_secret */ 5:
                    message.type = {
                        oneofKind: "genericSecret",
                        genericSecret: GenericSecret.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).genericSecret)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Secret, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.api.v2.auth.TlsCertificate tls_certificate = 2; */
        if (message.type.oneofKind === "tlsCertificate")
            TlsCertificate.internalBinaryWrite(message.type.tlsCertificate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 3; */
        if (message.type.oneofKind === "sessionTicketKeys")
            TlsSessionTicketKeys.internalBinaryWrite(message.type.sessionTicketKeys, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.CertificateValidationContext validation_context = 4; */
        if (message.type.oneofKind === "validationContext")
            CertificateValidationContext.internalBinaryWrite(message.type.validationContext, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.GenericSecret generic_secret = 5; */
        if (message.type.oneofKind === "genericSecret")
            GenericSecret.internalBinaryWrite(message.type.genericSecret, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.auth.Secret
 */
export const Secret = new Secret$Type();
