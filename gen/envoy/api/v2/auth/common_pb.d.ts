// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/auth/common.proto (package envoy.api.v2.auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DataSource } from "../core/base_pb.js";
import type { StringMatcher } from "../../../type/matcher/string_pb.js";

/**
 * @generated from message envoy.api.v2.auth.TlsParameters
 */
export declare class TlsParameters extends Message<TlsParameters> {
  /**
   * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for both clients and servers.
   *
   * @generated from field: envoy.api.v2.auth.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
   */
  tlsMinimumProtocolVersion: TlsParameters_TlsProtocol;

  /**
   * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
   * servers.
   *
   * @generated from field: envoy.api.v2.auth.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
   */
  tlsMaximumProtocolVersion: TlsParameters_TlsProtocol;

  /**
   * If specified, the TLS listener will only support the specified `cipher list
   * <https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration>`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   *
   * In non-FIPS builds, the default cipher list is:
   *
   * .. code-block:: none
   *
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   *
   * In builds using :ref:`BoringSSL FIPS <arch_overview_ssl_fips>`, the default cipher list is:
   *
   * .. code-block:: none
   *
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   *
   * @generated from field: repeated string cipher_suites = 3;
   */
  cipherSuites: string[];

  /**
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   *
   * In non-FIPS builds, the default curves are:
   *
   * .. code-block:: none
   *
   *   X25519
   *   P-256
   *
   * In builds using :ref:`BoringSSL FIPS <arch_overview_ssl_fips>`, the default curve is:
   *
   * .. code-block:: none
   *
   *   P-256
   *
   * @generated from field: repeated string ecdh_curves = 4;
   */
  ecdhCurves: string[];

  constructor(data?: PartialMessage<TlsParameters>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.auth.TlsParameters";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TlsParameters;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TlsParameters;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TlsParameters;

  static equals(a: TlsParameters | PlainMessage<TlsParameters> | undefined, b: TlsParameters | PlainMessage<TlsParameters> | undefined): boolean;
}

/**
 * @generated from enum envoy.api.v2.auth.TlsParameters.TlsProtocol
 */
export declare enum TlsParameters_TlsProtocol {
  /**
   * Envoy will choose the optimal TLS version.
   *
   * @generated from enum value: TLS_AUTO = 0;
   */
  TLS_AUTO = 0,

  /**
   * TLS 1.0
   *
   * @generated from enum value: TLSv1_0 = 1;
   */
  TLSv1_0 = 1,

  /**
   * TLS 1.1
   *
   * @generated from enum value: TLSv1_1 = 2;
   */
  TLSv1_1 = 2,

  /**
   * TLS 1.2
   *
   * @generated from enum value: TLSv1_2 = 3;
   */
  TLSv1_2 = 3,

  /**
   * TLS 1.3
   *
   * @generated from enum value: TLSv1_3 = 4;
   */
  TLSv1_3 = 4,
}

/**
 * BoringSSL private key method configuration. The private key methods are used for external
 * (potentially asynchronous) signing and decryption operations. Some use cases for private key
 * methods would be TPM support and TLS acceleration.
 *
 * @generated from message envoy.api.v2.auth.PrivateKeyProvider
 */
export declare class PrivateKeyProvider extends Message<PrivateKeyProvider> {
  /**
   * Private key method provider name. The name must match a
   * supported private key method provider type.
   *
   * @generated from field: string provider_name = 1;
   */
  providerName: string;

  /**
   * Private key method provider specific configuration.
   *
   * @generated from oneof envoy.api.v2.auth.PrivateKeyProvider.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Struct config = 2 [deprecated = true];
     * @deprecated
     */
    value: Struct;
    case: "config";
  } | {
    /**
     * @generated from field: google.protobuf.Any typed_config = 3;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PrivateKeyProvider>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.auth.PrivateKeyProvider";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateKeyProvider;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateKeyProvider;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateKeyProvider;

  static equals(a: PrivateKeyProvider | PlainMessage<PrivateKeyProvider> | undefined, b: PrivateKeyProvider | PlainMessage<PrivateKeyProvider> | undefined): boolean;
}

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.auth.TlsCertificate
 */
export declare class TlsCertificate extends Message<TlsCertificate> {
  /**
   * The TLS certificate chain.
   *
   * @generated from field: envoy.api.v2.core.DataSource certificate_chain = 1;
   */
  certificateChain?: DataSource;

  /**
   * The TLS private key.
   *
   * @generated from field: envoy.api.v2.core.DataSource private_key = 2;
   */
  privateKey?: DataSource;

  /**
   * BoringSSL private key method provider. This is an alternative to :ref:`private_key
   * <envoy_api_field_auth.TlsCertificate.private_key>` field. This can't be
   * marked as ``oneof`` due to API compatibility reasons. Setting both :ref:`private_key
   * <envoy_api_field_auth.TlsCertificate.private_key>` and
   * :ref:`private_key_provider
   * <envoy_api_field_auth.TlsCertificate.private_key_provider>` fields will result in an
   * error.
   *
   * @generated from field: envoy.api.v2.auth.PrivateKeyProvider private_key_provider = 6;
   */
  privateKeyProvider?: PrivateKeyProvider;

  /**
   * The password to decrypt the TLS private key. If this field is not set, it is assumed that the
   * TLS private key is not password encrypted.
   *
   * @generated from field: envoy.api.v2.core.DataSource password = 3;
   */
  password?: DataSource;

  /**
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.api.v2.core.DataSource ocsp_staple = 4;
   */
  ocspStaple?: DataSource;

  /**
   * [#not-implemented-hide:]
   *
   * @generated from field: repeated envoy.api.v2.core.DataSource signed_certificate_timestamp = 5;
   */
  signedCertificateTimestamp: DataSource[];

  constructor(data?: PartialMessage<TlsCertificate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.auth.TlsCertificate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TlsCertificate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TlsCertificate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TlsCertificate;

  static equals(a: TlsCertificate | PlainMessage<TlsCertificate> | undefined, b: TlsCertificate | PlainMessage<TlsCertificate> | undefined): boolean;
}

/**
 * @generated from message envoy.api.v2.auth.TlsSessionTicketKeys
 */
export declare class TlsSessionTicketKeys extends Message<TlsSessionTicketKeys> {
  /**
   * Keys for encrypting and decrypting TLS session tickets. The
   * first key in the array contains the key to encrypt all new sessions created by this context.
   * All keys are candidates for decrypting received tickets. This allows for easy rotation of keys
   * by, for example, putting the new key first, and the previous key second.
   *
   * If :ref:`session_ticket_keys <envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys>`
   * is not specified, the TLS library will still support resuming sessions via tickets, but it will
   * use an internally-generated and managed key, so sessions cannot be resumed across hot restarts
   * or on different hosts.
   *
   * Each key must contain exactly 80 bytes of cryptographically-secure random data. For
   * example, the output of ``openssl rand 80``.
   *
   * .. attention::
   *
   *   Using this feature has serious security considerations and risks. Improper handling of keys
   *   may result in loss of secrecy in connections, even if ciphers supporting perfect forward
   *   secrecy are used. See https://www.imperialviolet.org/2013/06/27/botchingpfs.html for some
   *   discussion. To minimize the risk, you must:
   *
   *   * Keep the session ticket keys at least as secure as your TLS certificate private keys
   *   * Rotate session ticket keys at least daily, and preferably hourly
   *   * Always generate keys using a cryptographically-secure random data source
   *
   * @generated from field: repeated envoy.api.v2.core.DataSource keys = 1;
   */
  keys: DataSource[];

  constructor(data?: PartialMessage<TlsSessionTicketKeys>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.auth.TlsSessionTicketKeys";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TlsSessionTicketKeys;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TlsSessionTicketKeys;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TlsSessionTicketKeys;

  static equals(a: TlsSessionTicketKeys | PlainMessage<TlsSessionTicketKeys> | undefined, b: TlsSessionTicketKeys | PlainMessage<TlsSessionTicketKeys> | undefined): boolean;
}

/**
 * [#next-free-field: 11]
 *
 * @generated from message envoy.api.v2.auth.CertificateValidationContext
 */
export declare class CertificateValidationContext extends Message<CertificateValidationContext> {
  /**
   * TLS certificate data containing certificate authority certificates to use in verifying
   * a presented peer certificate (e.g. server certificate for clusters or client certificate
   * for listeners). If not specified and a peer certificate is presented it will not be
   * verified. By default, a client certificate is optional, unless one of the additional
   * options (:ref:`require_client_certificate
   * <envoy_api_field_auth.DownstreamTlsContext.require_client_certificate>`,
   * :ref:`verify_certificate_spki
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>`,
   * :ref:`verify_certificate_hash
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>`, or
   * :ref:`match_subject_alt_names
   * <envoy_api_field_auth.CertificateValidationContext.match_subject_alt_names>`) is also
   * specified.
   *
   * It can optionally contain certificate revocation lists, in which case Envoy will verify
   * that the presented peer certificate has not been revoked by one of the included CRLs.
   *
   * See :ref:`the TLS overview <arch_overview_ssl_enabling_verification>` for a list of common
   * system CA locations.
   *
   * @generated from field: envoy.api.v2.core.DataSource trusted_ca = 1;
   */
  trustedCa?: DataSource;

  /**
   * An optional list of base64-encoded SHA-256 hashes. If specified, Envoy will verify that the
   * SHA-256 of the DER-encoded Subject Public Key Information (SPKI) of the presented certificate
   * matches one of the specified values.
   *
   * A base64-encoded SHA-256 of the Subject Public Key Information (SPKI) of the certificate
   * can be generated with the following command:
   *
   * .. code-block:: bash
   *
   *   $ openssl x509 -in path/to/client.crt -noout -pubkey
   *     | openssl pkey -pubin -outform DER
   *     | openssl dgst -sha256 -binary
   *     | openssl enc -base64
   *   NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=
   *
   * This is the format used in HTTP Public Key Pinning.
   *
   * When both:
   * :ref:`verify_certificate_hash
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>` and
   * :ref:`verify_certificate_spki
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>` are specified,
   * a hash matching value from either of the lists will result in the certificate being accepted.
   *
   * .. attention::
   *
   *   This option is preferred over :ref:`verify_certificate_hash
   *   <envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>`,
   *   because SPKI is tied to a private key, so it doesn't change when the certificate
   *   is renewed using the same private key.
   *
   * @generated from field: repeated string verify_certificate_spki = 3;
   */
  verifyCertificateSpki: string[];

  /**
   * An optional list of hex-encoded SHA-256 hashes. If specified, Envoy will verify that
   * the SHA-256 of the DER-encoded presented certificate matches one of the specified values.
   *
   * A hex-encoded SHA-256 of the certificate can be generated with the following command:
   *
   * .. code-block:: bash
   *
   *   $ openssl x509 -in path/to/client.crt -outform DER | openssl dgst -sha256 | cut -d" " -f2
   *   df6ff72fe9116521268f6f2dd4966f51df479883fe7037b39f75916ac3049d1a
   *
   * A long hex-encoded and colon-separated SHA-256 (a.k.a. "fingerprint") of the certificate
   * can be generated with the following command:
   *
   * .. code-block:: bash
   *
   *   $ openssl x509 -in path/to/client.crt -noout -fingerprint -sha256 | cut -d"=" -f2
   *   DF:6F:F7:2F:E9:11:65:21:26:8F:6F:2D:D4:96:6F:51:DF:47:98:83:FE:70:37:B3:9F:75:91:6A:C3:04:9D:1A
   *
   * Both of those formats are acceptable.
   *
   * When both:
   * :ref:`verify_certificate_hash
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>` and
   * :ref:`verify_certificate_spki
   * <envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>` are specified,
   * a hash matching value from either of the lists will result in the certificate being accepted.
   *
   * @generated from field: repeated string verify_certificate_hash = 2;
   */
  verifyCertificateHash: string[];

  /**
   * An optional list of Subject Alternative Names. If specified, Envoy will verify that the
   * Subject Alternative Name of the presented certificate matches one of the specified values.
   *
   * .. attention::
   *
   *   Subject Alternative Names are easily spoofable and verifying only them is insecure,
   *   therefore this option must be used together with :ref:`trusted_ca
   *   <envoy_api_field_auth.CertificateValidationContext.trusted_ca>`.
   *
   * @generated from field: repeated string verify_subject_alt_name = 4 [deprecated = true];
   * @deprecated
   */
  verifySubjectAltName: string[];

  /**
   * An optional list of Subject Alternative name matchers. Envoy will verify that the
   * Subject Alternative Name of the presented certificate matches one of the specified matches.
   *
   * When a certificate has wildcard DNS SAN entries, to match a specific client, it should be
   * configured with exact match type in the :ref:`string matcher <envoy_api_msg_type.matcher.StringMatcher>`.
   * For example if the certificate has "\*.example.com" as DNS SAN entry, to allow only "api.example.com",
   * it should be configured as shown below.
   *
   * .. code-block:: yaml
   *
   *  match_subject_alt_names:
   *    exact: "api.example.com"
   *
   * .. attention::
   *
   *   Subject Alternative Names are easily spoofable and verifying only them is insecure,
   *   therefore this option must be used together with :ref:`trusted_ca
   *   <envoy_api_field_auth.CertificateValidationContext.trusted_ca>`.
   *
   * @generated from field: repeated envoy.type.matcher.StringMatcher match_subject_alt_names = 9;
   */
  matchSubjectAltNames: StringMatcher[];

  /**
   * [#not-implemented-hide:] Must present a signed time-stamped OCSP response.
   *
   * @generated from field: google.protobuf.BoolValue require_ocsp_staple = 5;
   */
  requireOcspStaple?: boolean;

  /**
   * [#not-implemented-hide:] Must present signed certificate time-stamp.
   *
   * @generated from field: google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
   */
  requireSignedCertificateTimestamp?: boolean;

  /**
   * An optional `certificate revocation list
   * <https://en.wikipedia.org/wiki/Certificate_revocation_list>`_
   * (in PEM format). If specified, Envoy will verify that the presented peer
   * certificate has not been revoked by this CRL. If this DataSource contains
   * multiple CRLs, all of them will be used.
   *
   * @generated from field: envoy.api.v2.core.DataSource crl = 7;
   */
  crl?: DataSource;

  /**
   * If specified, Envoy will not reject expired certificates.
   *
   * @generated from field: bool allow_expired_certificate = 8;
   */
  allowExpiredCertificate: boolean;

  /**
   * Certificate trust chain verification mode.
   *
   * @generated from field: envoy.api.v2.auth.CertificateValidationContext.TrustChainVerification trust_chain_verification = 10;
   */
  trustChainVerification: CertificateValidationContext_TrustChainVerification;

  constructor(data?: PartialMessage<CertificateValidationContext>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.api.v2.auth.CertificateValidationContext";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateValidationContext;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateValidationContext;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateValidationContext;

  static equals(a: CertificateValidationContext | PlainMessage<CertificateValidationContext> | undefined, b: CertificateValidationContext | PlainMessage<CertificateValidationContext> | undefined): boolean;
}

/**
 * Peer certificate verification mode.
 *
 * @generated from enum envoy.api.v2.auth.CertificateValidationContext.TrustChainVerification
 */
export declare enum CertificateValidationContext_TrustChainVerification {
  /**
   * Perform default certificate verification (e.g., against CA / verification lists)
   *
   * @generated from enum value: VERIFY_TRUST_CHAIN = 0;
   */
  VERIFY_TRUST_CHAIN = 0,

  /**
   * Connections where the certificate fails verification will be permitted.
   * For HTTP connections, the result of certificate verification can be used in route matching. (
   * see :ref:`validated <envoy_api_field_route.RouteMatch.TlsContextMatchOptions.validated>` ).
   *
   * @generated from enum value: ACCEPT_UNTRUSTED = 1;
   */
  ACCEPT_UNTRUSTED = 1,
}

