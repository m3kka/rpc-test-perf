// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/rds.proto" (package "envoy.api.v2", syntax proto3)
// tslint:disable
import { VirtualHostDiscoveryService } from "./rds";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RouteDiscoveryService } from "./rds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "./discovery";
import type { DeltaDiscoveryRequest } from "./discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "./discovery";
import type { DiscoveryRequest } from "./discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: RDS]

/**
 * The resource_names field in DiscoveryRequest specifies a route configuration.
 * This allows an Envoy configuration with multiple HTTP listeners (and
 * associated HTTP connection manager filters) to use different route
 * configurations. Each listener will bind its HTTP connection manager filter to
 * a route table via this identifier.
 *
 * @generated from protobuf service envoy.api.v2.RouteDiscoveryService
 */
export interface IRouteDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: StreamRoutes(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamRoutes(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaRoutes(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaRoutes(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchRoutes(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchRoutes(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: RDS]

/**
 * The resource_names field in DiscoveryRequest specifies a route configuration.
 * This allows an Envoy configuration with multiple HTTP listeners (and
 * associated HTTP connection manager filters) to use different route
 * configurations. Each listener will bind its HTTP connection manager filter to
 * a route table via this identifier.
 *
 * @generated from protobuf service envoy.api.v2.RouteDiscoveryService
 */
export class RouteDiscoveryServiceClient implements IRouteDiscoveryServiceClient, ServiceInfo {
    typeName = RouteDiscoveryService.typeName;
    methods = RouteDiscoveryService.methods;
    options = RouteDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamRoutes(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamRoutes(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaRoutes(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaRoutes(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchRoutes(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchRoutes(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
 * a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
 * during the processing of an HTTP request if a route for the request cannot be resolved. The
 * :ref:`resource_names_subscribe <envoy_api_field_DeltaDiscoveryRequest.resource_names_subscribe>`
 * field contains a list of virtual host names or aliases to track. The contents of an alias would
 * be the contents of a *host* or *authority* header used to make an http request. An xDS server
 * will match an alias to a virtual host based on the content of :ref:`domains'
 * <envoy_api_field_route.VirtualHost.domains>` field. The *resource_names_unsubscribe* field
 * contains a list of virtual host names that have been :ref:`unsubscribed
 * <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
 *
 * @generated from protobuf service envoy.api.v2.VirtualHostDiscoveryService
 */
export interface IVirtualHostDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: DeltaVirtualHosts(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaVirtualHosts(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
}
/**
 * Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
 * a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
 * during the processing of an HTTP request if a route for the request cannot be resolved. The
 * :ref:`resource_names_subscribe <envoy_api_field_DeltaDiscoveryRequest.resource_names_subscribe>`
 * field contains a list of virtual host names or aliases to track. The contents of an alias would
 * be the contents of a *host* or *authority* header used to make an http request. An xDS server
 * will match an alias to a virtual host based on the content of :ref:`domains'
 * <envoy_api_field_route.VirtualHost.domains>` field. The *resource_names_unsubscribe* field
 * contains a list of virtual host names that have been :ref:`unsubscribed
 * <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
 *
 * @generated from protobuf service envoy.api.v2.VirtualHostDiscoveryService
 */
export class VirtualHostDiscoveryServiceClient implements IVirtualHostDiscoveryServiceClient, ServiceInfo {
    typeName = VirtualHostDiscoveryService.typeName;
    methods = VirtualHostDiscoveryService.methods;
    options = VirtualHostDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DeltaVirtualHosts(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaVirtualHosts(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
}
