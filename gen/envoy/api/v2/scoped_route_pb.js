// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/scoped_route.proto (package envoy.api.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Specifies a routing scope, which associates a
 * :ref:`Key<envoy_api_msg_ScopedRouteConfiguration.Key>` to a
 * :ref:`envoy_api_msg_RouteConfiguration` (identified by its resource name).
 *
 * The HTTP connection manager builds up a table consisting of these Key to
 * RouteConfiguration mappings, and looks up the RouteConfiguration to use per
 * request according to the algorithm specified in the
 * :ref:`scope_key_builder<envoy_api_field_config.filter.network.http_connection_manager.v2.ScopedRoutes.scope_key_builder>`
 * assigned to the HttpConnectionManager.
 *
 * For example, with the following configurations (in YAML):
 *
 * HttpConnectionManager config:
 *
 * .. code::
 *
 *   ...
 *   scoped_routes:
 *     name: foo-scoped-routes
 *     scope_key_builder:
 *       fragments:
 *         - header_value_extractor:
 *             name: X-Route-Selector
 *             element_separator: ","
 *             element:
 *               separator: =
 *               key: vip
 *
 * ScopedRouteConfiguration resources (specified statically via
 * :ref:`scoped_route_configurations_list<envoy_api_field_config.filter.network.http_connection_manager.v2.ScopedRoutes.scoped_route_configurations_list>`
 * or obtained dynamically via SRDS):
 *
 * .. code::
 *
 *  (1)
 *   name: route-scope1
 *   route_configuration_name: route-config1
 *   key:
 *      fragments:
 *        - string_key: 172.10.10.20
 *
 *  (2)
 *   name: route-scope2
 *   route_configuration_name: route-config2
 *   key:
 *     fragments:
 *       - string_key: 172.20.20.30
 *
 * A request from a client such as:
 *
 * .. code::
 *
 *     GET / HTTP/1.1
 *     Host: foo.com
 *     X-Route-Selector: vip=172.10.10.20
 *
 * would result in the routing table defined by the `route-config1`
 * RouteConfiguration being assigned to the HTTP request/stream.
 *
 *
 * @generated from message envoy.api.v2.ScopedRouteConfiguration
 */
export const ScopedRouteConfiguration = proto3.makeMessageType(
  "envoy.api.v2.ScopedRouteConfiguration",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "route_configuration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "message", T: ScopedRouteConfiguration_Key },
  ],
);

/**
 * Specifies a key which is matched against the output of the
 * :ref:`scope_key_builder<envoy_api_field_config.filter.network.http_connection_manager.v2.ScopedRoutes.scope_key_builder>`
 * specified in the HttpConnectionManager. The matching is done per HTTP
 * request and is dependent on the order of the fragments contained in the
 * Key.
 *
 * @generated from message envoy.api.v2.ScopedRouteConfiguration.Key
 */
export const ScopedRouteConfiguration_Key = proto3.makeMessageType(
  "envoy.api.v2.ScopedRouteConfiguration.Key",
  () => [
    { no: 1, name: "fragments", kind: "message", T: ScopedRouteConfiguration_Key_Fragment, repeated: true },
  ],
  {localName: "ScopedRouteConfiguration_Key"},
);

/**
 * @generated from message envoy.api.v2.ScopedRouteConfiguration.Key.Fragment
 */
export const ScopedRouteConfiguration_Key_Fragment = proto3.makeMessageType(
  "envoy.api.v2.ScopedRouteConfiguration.Key.Fragment",
  () => [
    { no: 1, name: "string_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
  ],
  {localName: "ScopedRouteConfiguration_Key_Fragment"},
);

