// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/lds.proto" (package "envoy.api.v2", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ListenerDiscoveryService } from "./lds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "./discovery";
import type { DiscoveryRequest } from "./discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "./discovery";
import type { DeltaDiscoveryRequest } from "./discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: Listener]
// Listener :ref:`configuration overview <config_listeners>`

/**
 * The Envoy instance initiates an RPC at startup to discover a list of
 * listeners. Updates are delivered via streaming from the LDS server and
 * consist of a complete update of all listeners. Existing connections will be
 * allowed to drain from listeners that are no longer present.
 *
 * @generated from protobuf service envoy.api.v2.ListenerDiscoveryService
 */
export interface IListenerDiscoveryServiceClient {
    /**
     * @generated from protobuf rpc: DeltaListeners(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaListeners(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: StreamListeners(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamListeners(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchListeners(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchListeners(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: Listener]
// Listener :ref:`configuration overview <config_listeners>`

/**
 * The Envoy instance initiates an RPC at startup to discover a list of
 * listeners. Updates are delivered via streaming from the LDS server and
 * consist of a complete update of all listeners. Existing connections will be
 * allowed to drain from listeners that are no longer present.
 *
 * @generated from protobuf service envoy.api.v2.ListenerDiscoveryService
 */
export class ListenerDiscoveryServiceClient implements IListenerDiscoveryServiceClient, ServiceInfo {
    typeName = ListenerDiscoveryService.typeName;
    methods = ListenerDiscoveryService.methods;
    options = ListenerDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DeltaListeners(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaListeners(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: StreamListeners(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamListeners(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchListeners(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchListeners(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
