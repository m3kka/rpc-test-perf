// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/api/v2/discovery.proto (package envoy.api.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { ControlPlane, Node } from "./core/base_pb.js";
import { Status } from "../../../google/rpc/status_pb.js";

/**
 * A DiscoveryRequest requests a set of versioned resources of the same type for
 * a given Envoy node on some API.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.DiscoveryRequest
 */
export const DiscoveryRequest = proto3.makeMessageType(
  "envoy.api.v2.DiscoveryRequest",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node", kind: "message", T: Node },
    { no: 3, name: "resource_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "response_nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "error_detail", kind: "message", T: Status },
  ],
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.DiscoveryResponse
 */
export const DiscoveryResponse = proto3.makeMessageType(
  "envoy.api.v2.DiscoveryResponse",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Any, repeated: true },
    { no: 3, name: "canary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "control_plane", kind: "message", T: ControlPlane },
  ],
);

/**
 * DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC
 * endpoint for Delta xDS.
 *
 * With Delta xDS, the DeltaDiscoveryResponses do not need to include a full
 * snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a
 * diff to the state of a xDS client.
 * In Delta XDS there are per-resource versions, which allow tracking state at
 * the resource granularity.
 * An xDS Delta session is always in the context of a gRPC bidirectional
 * stream. This allows the xDS server to keep track of the state of xDS clients
 * connected to it.
 *
 * In Delta xDS the nonce field is required and used to pair
 * DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.
 * Optionally, a response message level system_version_info is present for
 * debugging purposes only.
 *
 * DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest
 * can be either or both of: [1] informing the server of what resources the
 * client has gained/lost interest in (using resource_names_subscribe and
 * resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from
 * the server (using response_nonce, with presence of error_detail making it a NACK).
 * Additionally, the first message (for a given type_url) of a reconnected gRPC stream
 * has a third role: informing the server of the resources (and their versions)
 * that the client already possesses, using the initial_resource_versions field.
 *
 * As with state-of-the-world, when multiple resource types are multiplexed (ADS),
 * all requests/acknowledgments/updates are logically walled off by type_url:
 * a Cluster ACK exists in a completely separate world from a prior Route NACK.
 * In particular, initial_resource_versions being sent at the "start" of every
 * gRPC stream actually entails a message for each type_url, each with its own
 * initial_resource_versions.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.api.v2.DeltaDiscoveryRequest
 */
export const DeltaDiscoveryRequest = proto3.makeMessageType(
  "envoy.api.v2.DeltaDiscoveryRequest",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource_names_subscribe", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "resource_names_unsubscribe", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "initial_resource_versions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "response_nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error_detail", kind: "message", T: Status },
  ],
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.DeltaDiscoveryResponse
 */
export const DeltaDiscoveryResponse = proto3.makeMessageType(
  "envoy.api.v2.DeltaDiscoveryResponse",
  () => [
    { no: 1, name: "system_version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 4, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "removed_resources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message envoy.api.v2.Resource
 */
export const Resource = proto3.makeMessageType(
  "envoy.api.v2.Resource",
  () => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "aliases", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource", kind: "message", T: Any },
  ],
);

