// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/eds.proto" (package "envoy.api.v2", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EndpointDiscoveryService } from "./eds";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { DeltaDiscoveryResponse } from "./discovery";
import type { DeltaDiscoveryRequest } from "./discovery";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DiscoveryResponse } from "./discovery";
import type { DiscoveryRequest } from "./discovery";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// [#protodoc-title: EDS]
// Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`

/**
 * @generated from protobuf service envoy.api.v2.EndpointDiscoveryService
 */
export interface IEndpointDiscoveryServiceClient {
    /**
     * The resource_names field in DiscoveryRequest specifies a list of clusters
     * to subscribe to updates for.
     *
     * @generated from protobuf rpc: StreamEndpoints(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamEndpoints(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse>;
    /**
     * @generated from protobuf rpc: DeltaEndpoints(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaEndpoints(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse>;
    /**
     * @generated from protobuf rpc: FetchEndpoints(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchEndpoints(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse>;
}
// [#protodoc-title: EDS]
// Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`

/**
 * @generated from protobuf service envoy.api.v2.EndpointDiscoveryService
 */
export class EndpointDiscoveryServiceClient implements IEndpointDiscoveryServiceClient, ServiceInfo {
    typeName = EndpointDiscoveryService.typeName;
    methods = EndpointDiscoveryService.methods;
    options = EndpointDiscoveryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * The resource_names field in DiscoveryRequest specifies a list of clusters
     * to subscribe to updates for.
     *
     * @generated from protobuf rpc: StreamEndpoints(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse);
     */
    streamEndpoints(options?: RpcOptions): DuplexStreamingCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: DeltaEndpoints(stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse);
     */
    deltaEndpoints(options?: RpcOptions): DuplexStreamingCall<DeltaDiscoveryRequest, DeltaDiscoveryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeltaDiscoveryRequest, DeltaDiscoveryResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: FetchEndpoints(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse);
     */
    fetchEndpoints(input: DiscoveryRequest, options?: RpcOptions): UnaryCall<DiscoveryRequest, DiscoveryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoveryRequest, DiscoveryResponse>("unary", this._transport, method, opt, input);
    }
}
