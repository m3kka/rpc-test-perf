// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/api/v2/cluster.proto" (package "envoy.api.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TcpKeepalive } from "./core/address";
import { Percent } from "../../type/percent";
import { UInt64Value } from "../../../google/protobuf/wrappers";
import { ConfigSource } from "./core/config_source";
import { Filter } from "./cluster/filter";
import { Metadata } from "./core/base";
import { TransportSocket } from "./core/base";
import { BindConfig } from "./core/address";
import { OutlierDetection } from "./cluster/outlier_detection";
import { Any } from "../../../google/protobuf/any";
import { Struct } from "../../../google/protobuf/struct";
import { Http2ProtocolOptions } from "./core/protocol";
import { Http1ProtocolOptions } from "./core/protocol";
import { HttpProtocolOptions } from "./core/protocol";
import { UpstreamHttpProtocolOptions } from "./core/protocol";
import { UpstreamTlsContext } from "./auth/tls";
import { CircuitBreakers } from "./cluster/circuit_breaker";
import { HealthCheck } from "./core/health_check";
import { ClusterLoadAssignment } from "./endpoint";
import { Address } from "./core/address";
import { UInt32Value } from "../../../google/protobuf/wrappers";
import { Duration } from "../../../google/protobuf/duration";
// [#protodoc-title: Cluster configuration]

/**
 * Configuration for a single upstream cluster.
 * [#next-free-field: 48]
 *
 * @generated from protobuf message envoy.api.v2.Cluster
 */
export interface Cluster {
    /**
     * Configuration to use different transport sockets for different endpoints.
     * The entry of *envoy.transport_socket_match* in the
     * :ref:`LbEndpoint.Metadata <envoy_api_field_endpoint.LbEndpoint.metadata>`
     * is used to match against the transport sockets as they appear in the list. The first
     * :ref:`match <envoy_api_msg_Cluster.TransportSocketMatch>` is used.
     * For example, with the following match
     *
     * .. code-block:: yaml
     *
     *  transport_socket_matches:
     *  - name: "enableMTLS"
     *    match:
     *      acceptMTLS: true
     *    transport_socket:
     *      name: envoy.transport_sockets.tls
     *      config: { ... } # tls socket configuration
     *  - name: "defaultToPlaintext"
     *    match: {}
     *    transport_socket:
     *      name: envoy.transport_sockets.raw_buffer
     *
     * Connections to the endpoints whose metadata value under *envoy.transport_socket_match*
     * having "acceptMTLS"/"true" key/value pair use the "enableMTLS" socket configuration.
     *
     * If a :ref:`socket match <envoy_api_msg_Cluster.TransportSocketMatch>` with empty match
     * criteria is provided, that always match any endpoint. For example, the "defaultToPlaintext"
     * socket match in case above.
     *
     * If an endpoint metadata's value under *envoy.transport_socket_match* does not match any
     * *TransportSocketMatch*, socket configuration fallbacks to use the *tls_context* or
     * *transport_socket* specified in this cluster.
     *
     * This field allows gradual and flexible transport socket configuration changes.
     *
     * The metadata of endpoints in EDS can indicate transport socket capabilities. For example,
     * an endpoint's metadata can have two key value pairs as "acceptMTLS": "true",
     * "acceptPlaintext": "true". While some other endpoints, only accepting plaintext traffic
     * has "acceptPlaintext": "true" metadata information.
     *
     * Then the xDS server can configure the CDS to a client, Envoy A, to send mutual TLS
     * traffic for endpoints with "acceptMTLS": "true", by adding a corresponding
     * *TransportSocketMatch* in this field. Other client Envoys receive CDS without
     * *transport_socket_match* set, and still send plain text traffic to the same cluster.
     *
     * [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]
     *
     * @generated from protobuf field: repeated envoy.api.v2.Cluster.TransportSocketMatch transport_socket_matches = 43;
     */
    transportSocketMatches: Cluster_TransportSocketMatch[];
    /**
     * Supplies the name of the cluster which must be unique across all clusters.
     * The cluster name is used when emitting
     * :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
     * <envoy_api_field_Cluster.alt_stat_name>` is not provided.
     * Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * An optional alternative to the cluster name to be used while emitting stats.
     * Any ``:`` in the name will be converted to ``_`` when emitting statistics. This should not be
     * confused with :ref:`Router Filter Header
     * <config_http_filters_router_x-envoy-upstream-alt-stat-name>`.
     *
     * @generated from protobuf field: string alt_stat_name = 28;
     */
    altStatName: string;
    /**
     * @generated from protobuf oneof: cluster_discovery_type
     */
    clusterDiscoveryType: {
        oneofKind: "type";
        /**
         * The :ref:`service discovery type <arch_overview_service_discovery_types>`
         * to use for resolving the cluster.
         *
         * @generated from protobuf field: envoy.api.v2.Cluster.DiscoveryType type = 2;
         */
        type: Cluster_DiscoveryType;
    } | {
        oneofKind: "clusterType";
        /**
         * The custom cluster type.
         *
         * @generated from protobuf field: envoy.api.v2.Cluster.CustomClusterType cluster_type = 38;
         */
        clusterType: Cluster_CustomClusterType;
    } | {
        oneofKind: undefined;
    };
    /**
     * Configuration to use for EDS updates for the Cluster.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
     */
    edsClusterConfig?: Cluster_EdsClusterConfig;
    /**
     * The timeout for new network connections to hosts in the cluster.
     *
     * @generated from protobuf field: google.protobuf.Duration connect_timeout = 4;
     */
    connectTimeout?: Duration;
    /**
     * Soft limit on size of the clusterâ€™s connections read and write buffers. If
     * unspecified, an implementation defined default is applied (1MiB).
     *
     * @generated from protobuf field: google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
     */
    perConnectionBufferLimitBytes?: UInt32Value;
    /**
     * The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
     * when picking a host in the cluster.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
     */
    lbPolicy: Cluster_LbPolicy;
    /**
     * If the service discovery type is
     * :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
     * or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
     * then hosts is required.
     *
     * .. attention::
     *
     *   **This field is deprecated**. Set the
     *   :ref:`load_assignment<envoy_api_field_Cluster.load_assignment>` field instead.
     *
     *
     * @deprecated
     * @generated from protobuf field: repeated envoy.api.v2.core.Address hosts = 7 [deprecated = true];
     */
    hosts: Address[];
    /**
     * Setting this is required for specifying members of
     * :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
     * or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` clusters.
     * This field supersedes the *hosts* field in the v2 API.
     *
     * .. attention::
     *
     *   Setting this allows non-EDS cluster types to contain embedded EDS equivalent
     *   :ref:`endpoint assignments<envoy_api_msg_ClusterLoadAssignment>`.
     *
     *
     * @generated from protobuf field: envoy.api.v2.ClusterLoadAssignment load_assignment = 33;
     */
    loadAssignment?: ClusterLoadAssignment;
    /**
     * Optional :ref:`active health checking <arch_overview_health_checking>`
     * configuration for the cluster. If no
     * configuration is specified no health checking will be done and all cluster
     * members will be considered healthy at all times.
     *
     * @generated from protobuf field: repeated envoy.api.v2.core.HealthCheck health_checks = 8;
     */
    healthChecks: HealthCheck[];
    /**
     * Optional maximum requests for a single upstream connection. This parameter
     * is respected by both the HTTP/1.1 and HTTP/2 connection pool
     * implementations. If not specified, there is no limit. Setting this
     * parameter to 1 will effectively disable keep alive.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_requests_per_connection = 9;
     */
    maxRequestsPerConnection?: UInt32Value;
    /**
     * Optional :ref:`circuit breaking <arch_overview_circuit_break>` for the cluster.
     *
     * @generated from protobuf field: envoy.api.v2.cluster.CircuitBreakers circuit_breakers = 10;
     */
    circuitBreakers?: CircuitBreakers;
    /**
     * The TLS configuration for connections to the upstream cluster.
     *
     * .. attention::
     *
     *   **This field is deprecated**. Use `transport_socket` with name `tls` instead. If both are
     *   set, `transport_socket` takes priority.
     *
     * @deprecated
     * @generated from protobuf field: envoy.api.v2.auth.UpstreamTlsContext tls_context = 11 [deprecated = true];
     */
    tlsContext?: UpstreamTlsContext;
    /**
     * HTTP protocol options that are applied only to upstream HTTP connections.
     * These options apply to all HTTP versions.
     *
     * @generated from protobuf field: envoy.api.v2.core.UpstreamHttpProtocolOptions upstream_http_protocol_options = 46;
     */
    upstreamHttpProtocolOptions?: UpstreamHttpProtocolOptions;
    /**
     * Additional options when handling HTTP requests upstream. These options will be applicable to
     * both HTTP1 and HTTP2 requests.
     *
     * @generated from protobuf field: envoy.api.v2.core.HttpProtocolOptions common_http_protocol_options = 29;
     */
    commonHttpProtocolOptions?: HttpProtocolOptions;
    /**
     * Additional options when handling HTTP1 requests.
     *
     * @generated from protobuf field: envoy.api.v2.core.Http1ProtocolOptions http_protocol_options = 13;
     */
    httpProtocolOptions?: Http1ProtocolOptions;
    /**
     * Even if default HTTP2 protocol options are desired, this field must be
     * set so that Envoy will assume that the upstream supports HTTP/2 when
     * making new HTTP connection pool connections. Currently, Envoy only
     * supports prior knowledge for upstream connections. Even if TLS is used
     * with ALPN, `http2_protocol_options` must be specified. As an aside this allows HTTP/2
     * connections to happen over plain text.
     *
     * @generated from protobuf field: envoy.api.v2.core.Http2ProtocolOptions http2_protocol_options = 14;
     */
    http2ProtocolOptions?: Http2ProtocolOptions;
    /**
     * The extension_protocol_options field is used to provide extension-specific protocol options
     * for upstream connections. The key should match the extension filter name, such as
     * "envoy.filters.network.thrift_proxy". See the extension's documentation for details on
     * specific options.
     *
     * @deprecated
     * @generated from protobuf field: map<string, google.protobuf.Struct> extension_protocol_options = 35 [deprecated = true];
     */
    extensionProtocolOptions: {
        [key: string]: Struct;
    };
    /**
     * The extension_protocol_options field is used to provide extension-specific protocol options
     * for upstream connections. The key should match the extension filter name, such as
     * "envoy.filters.network.thrift_proxy". See the extension's documentation for details on
     * specific options.
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> typed_extension_protocol_options = 36;
     */
    typedExtensionProtocolOptions: {
        [key: string]: Any;
    };
    /**
     * If the DNS refresh rate is specified and the cluster type is either
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
     * or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
     * this value is used as the clusterâ€™s DNS refresh
     * rate. The value configured must be at least 1ms. If this setting is not specified, the
     * value defaults to 5000ms. For cluster types other than
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
     * and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
     * this setting is ignored.
     *
     * @generated from protobuf field: google.protobuf.Duration dns_refresh_rate = 16;
     */
    dnsRefreshRate?: Duration;
    /**
     * If the DNS failure refresh rate is specified and the cluster type is either
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
     * or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
     * this is used as the clusterâ€™s DNS refresh rate when requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the DNS refresh rate. For cluster types
     * other than :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>` and
     * :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` this setting is
     * ignored.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.RefreshRate dns_failure_refresh_rate = 44;
     */
    dnsFailureRefreshRate?: Cluster_RefreshRate;
    /**
     * Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,
     * cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS
     * resolution.
     *
     * @generated from protobuf field: bool respect_dns_ttl = 39;
     */
    respectDnsTtl: boolean;
    /**
     * The DNS IP address resolution policy. If this setting is not specified, the
     * value defaults to
     * :ref:`AUTO<envoy_api_enum_value_Cluster.DnsLookupFamily.AUTO>`.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
     */
    dnsLookupFamily: Cluster_DnsLookupFamily;
    /**
     * If DNS resolvers are specified and the cluster type is either
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
     * or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
     * this value is used to specify the clusterâ€™s dns resolvers.
     * If this setting is not specified, the value defaults to the default
     * resolver, which uses /etc/resolv.conf for configuration. For cluster types
     * other than
     * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
     * and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
     * this setting is ignored.
     * Setting this value causes failure if the
     * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
     * server startup. Apple's API only allows overriding DNS resolvers via system settings.
     *
     * @generated from protobuf field: repeated envoy.api.v2.core.Address dns_resolvers = 18;
     */
    dnsResolvers: Address[];
    /**
     * [#next-major-version: Reconcile DNS options in a single message.]
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * Setting this value causes failure if the
     * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
     * server startup. Apple' API only uses UDP for DNS resolution.
     *
     * @generated from protobuf field: bool use_tcp_for_dns_lookups = 45;
     */
    useTcpForDnsLookups: boolean;
    /**
     * If specified, outlier detection will be enabled for this upstream cluster.
     * Each of the configuration values can be overridden via
     * :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`.
     *
     * @generated from protobuf field: envoy.api.v2.cluster.OutlierDetection outlier_detection = 19;
     */
    outlierDetection?: OutlierDetection;
    /**
     * The interval for removing stale hosts from a cluster type
     * :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`.
     * Hosts are considered stale if they have not been used
     * as upstream destinations during this interval. New hosts are added
     * to original destination clusters on demand as new connections are
     * redirected to Envoy, causing the number of hosts in the cluster to
     * grow over time. Hosts that are not stale (they are actively used as
     * destinations) are kept in the cluster, which allows connections to
     * them remain open, saving the latency that would otherwise be spent
     * on opening new connections. If this setting is not specified, the
     * value defaults to 5000ms. For cluster types other than
     * :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`
     * this setting is ignored.
     *
     * @generated from protobuf field: google.protobuf.Duration cleanup_interval = 20;
     */
    cleanupInterval?: Duration;
    /**
     * Optional configuration used to bind newly established upstream connections.
     * This overrides any bind_config specified in the bootstrap proto.
     * If the address and port are empty, no bind will be performed.
     *
     * @generated from protobuf field: envoy.api.v2.core.BindConfig upstream_bind_config = 21;
     */
    upstreamBindConfig?: BindConfig;
    /**
     * Configuration for load balancing subsetting.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.LbSubsetConfig lb_subset_config = 22;
     */
    lbSubsetConfig?: Cluster_LbSubsetConfig;
    /**
     * @generated from protobuf oneof: lb_config
     */
    lbConfig: {
        oneofKind: "ringHashLbConfig";
        /**
         * Optional configuration for the Ring Hash load balancing policy.
         *
         * @generated from protobuf field: envoy.api.v2.Cluster.RingHashLbConfig ring_hash_lb_config = 23;
         */
        ringHashLbConfig: Cluster_RingHashLbConfig;
    } | {
        oneofKind: "originalDstLbConfig";
        /**
         * Optional configuration for the Original Destination load balancing policy.
         *
         * @generated from protobuf field: envoy.api.v2.Cluster.OriginalDstLbConfig original_dst_lb_config = 34;
         */
        originalDstLbConfig: Cluster_OriginalDstLbConfig;
    } | {
        oneofKind: "leastRequestLbConfig";
        /**
         * Optional configuration for the LeastRequest load balancing policy.
         *
         * @generated from protobuf field: envoy.api.v2.Cluster.LeastRequestLbConfig least_request_lb_config = 37;
         */
        leastRequestLbConfig: Cluster_LeastRequestLbConfig;
    } | {
        oneofKind: undefined;
    };
    /**
     * Common configuration for all load balancer implementations.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.CommonLbConfig common_lb_config = 27;
     */
    commonLbConfig?: Cluster_CommonLbConfig;
    /**
     * Optional custom transport socket implementation to use for upstream connections.
     * To setup TLS, set a transport socket with name `tls` and
     * :ref:`UpstreamTlsContexts <envoy_api_msg_auth.UpstreamTlsContext>` in the `typed_config`.
     * If no transport socket configuration is specified, new connections
     * will be set up with plaintext.
     *
     * @generated from protobuf field: envoy.api.v2.core.TransportSocket transport_socket = 24;
     */
    transportSocket?: TransportSocket;
    /**
     * The Metadata field can be used to provide additional information about the
     * cluster. It can be used for stats, logging, and varying filter behavior.
     * Fields should use reverse DNS notation to denote which entity within Envoy
     * will need the information. For instance, if the metadata is intended for
     * the Router filter, the filter name should be specified as *envoy.filters.http.router*.
     *
     * @generated from protobuf field: envoy.api.v2.core.Metadata metadata = 25;
     */
    metadata?: Metadata;
    /**
     * Determines how Envoy selects the protocol used to speak to upstream hosts.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.ClusterProtocolSelection protocol_selection = 26;
     */
    protocolSelection: Cluster_ClusterProtocolSelection;
    /**
     * Optional options for upstream connections.
     *
     * @generated from protobuf field: envoy.api.v2.UpstreamConnectionOptions upstream_connection_options = 30;
     */
    upstreamConnectionOptions?: UpstreamConnectionOptions;
    /**
     * If an upstream host becomes unhealthy (as determined by the configured health checks
     * or outlier detection), immediately close all connections to the failed host.
     *
     * .. note::
     *
     *   This is currently only supported for connections created by tcp_proxy.
     *
     * .. note::
     *
     *   The current implementation of this feature closes all connections immediately when
     *   the unhealthy status is detected. If there are a large number of connections open
     *   to an upstream host that becomes unhealthy, Envoy may spend a substantial amount of
     *   time exclusively closing these connections, and not processing any other traffic.
     *
     * @generated from protobuf field: bool close_connections_on_host_health_failure = 31;
     */
    closeConnectionsOnHostHealthFailure: boolean;
    /**
     * If set to true, Envoy will ignore the health value of a host when processing its removal
     * from service discovery. This means that if active health checking is used, Envoy will *not*
     * wait for the endpoint to go unhealthy before removing it.
     *
     * @generated from protobuf field: bool drain_connections_on_host_removal = 32;
     */
    drainConnectionsOnHostRemoval: boolean;
    /**
     * An (optional) network filter chain, listed in the order the filters should be applied.
     * The chain will be applied to all outgoing connections that Envoy makes to the upstream
     * servers of this cluster.
     *
     * @generated from protobuf field: repeated envoy.api.v2.cluster.Filter filters = 40;
     */
    filters: Filter[];
    /**
     * [#not-implemented-hide:] New mechanism for LB policy configuration. Used only if the
     * :ref:`lb_policy<envoy_api_field_Cluster.lb_policy>` field has the value
     * :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>`.
     *
     * @generated from protobuf field: envoy.api.v2.LoadBalancingPolicy load_balancing_policy = 41;
     */
    loadBalancingPolicy?: LoadBalancingPolicy;
    /**
     * [#not-implemented-hide:]
     * If present, tells the client where to send load reports via LRS. If not present, the
     * client will fall back to a client-side default, which may be either (a) don't send any
     * load reports or (b) send load reports for all clusters to a single default server
     * (which may be configured in the bootstrap file).
     *
     * Note that if multiple clusters point to the same LRS server, the client may choose to
     * create a separate stream for each cluster or it may choose to coalesce the data for
     * multiple clusters onto a single stream. Either way, the client must make sure to send
     * the data for any given cluster on no more than one stream.
     *
     * [#next-major-version: In the v3 API, we should consider restructuring this somehow,
     * maybe by allowing LRS to go on the ADS stream, or maybe by moving some of the negotiation
     * from the LRS stream here.]
     *
     * @generated from protobuf field: envoy.api.v2.core.ConfigSource lrs_server = 42;
     */
    lrsServer?: ConfigSource;
    /**
     * If track_timeout_budgets is true, the :ref:`timeout budget histograms
     * <config_cluster_manager_cluster_stats_timeout_budgets>` will be published for each
     * request. These show what percentage of a request's per try and global timeout was used. A value
     * of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value
     * of 100 would indicate that the request took the entirety of the timeout given to it.
     *
     * @generated from protobuf field: bool track_timeout_budgets = 47;
     */
    trackTimeoutBudgets: boolean;
}
/**
 * TransportSocketMatch specifies what transport socket config will be used
 * when the match conditions are satisfied.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.TransportSocketMatch
 */
export interface Cluster_TransportSocketMatch {
    /**
     * The name of the match, used in stats generation.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Optional endpoint metadata match criteria.
     * The connection to the endpoint with metadata matching what is set in this field
     * will use the transport socket configuration specified here.
     * The endpoint's metadata entry in *envoy.transport_socket_match* is used to match
     * against the values specified in this field.
     *
     * @generated from protobuf field: google.protobuf.Struct match = 2;
     */
    match?: Struct;
    /**
     * The configuration of the transport socket.
     *
     * @generated from protobuf field: envoy.api.v2.core.TransportSocket transport_socket = 3;
     */
    transportSocket?: TransportSocket;
}
/**
 * Extended cluster type.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.CustomClusterType
 */
export interface Cluster_CustomClusterType {
    /**
     * The type of the cluster to instantiate. The name must match a supported cluster type.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Cluster specific configuration which depends on the cluster being instantiated.
     * See the supported cluster for further documentation.
     *
     * @generated from protobuf field: google.protobuf.Any typed_config = 2;
     */
    typedConfig?: Any;
}
/**
 * Only valid when discovery type is EDS.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.EdsClusterConfig
 */
export interface Cluster_EdsClusterConfig {
    /**
     * Configuration for the source of EDS updates for this Cluster.
     *
     * @generated from protobuf field: envoy.api.v2.core.ConfigSource eds_config = 1;
     */
    edsConfig?: ConfigSource;
    /**
     * Optional alternative to cluster name to present to EDS. This does not
     * have the same restrictions as cluster name, i.e. it may be arbitrary
     * length.
     *
     * @generated from protobuf field: string service_name = 2;
     */
    serviceName: string;
}
/**
 * Optionally divide the endpoints in this cluster into subsets defined by
 * endpoint metadata and selected by route and weighted cluster metadata.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.api.v2.Cluster.LbSubsetConfig
 */
export interface Cluster_LbSubsetConfig {
    /**
     * The behavior used when no endpoint subset matches the selected route's
     * metadata. The value defaults to
     * :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy fallback_policy = 1;
     */
    fallbackPolicy: Cluster_LbSubsetConfig_LbSubsetFallbackPolicy;
    /**
     * Specifies the default subset of endpoints used during fallback if
     * fallback_policy is
     * :ref:`DEFAULT_SUBSET<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.
     * Each field in default_subset is
     * compared to the matching LbEndpoint.Metadata under the *envoy.lb*
     * namespace. It is valid for no hosts to match, in which case the behavior
     * is the same as a fallback_policy of
     * :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
     *
     * @generated from protobuf field: google.protobuf.Struct default_subset = 2;
     */
    defaultSubset?: Struct;
    /**
     * For each entry, LbEndpoint.Metadata's
     * *envoy.lb* namespace is traversed and a subset is created for each unique
     * combination of key and value. For example:
     *
     * .. code-block:: json
     *
     *   { "subset_selectors": [
     *       { "keys": [ "version" ] },
     *       { "keys": [ "stage", "hardware_type" ] }
     *   ]}
     *
     * A subset is matched when the metadata from the selected route and
     * weighted cluster contains the same keys and values as the subset's
     * metadata. The same host may appear in multiple subsets.
     *
     * @generated from protobuf field: repeated envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector subset_selectors = 3;
     */
    subsetSelectors: Cluster_LbSubsetConfig_LbSubsetSelector[];
    /**
     * If true, routing to subsets will take into account the localities and locality weights of the
     * endpoints when making the routing decision.
     *
     * There are some potential pitfalls associated with enabling this feature, as the resulting
     * traffic split after applying both a subset match and locality weights might be undesirable.
     *
     * Consider for example a situation in which you have 50/50 split across two localities X/Y
     * which have 100 hosts each without subsetting. If the subset LB results in X having only 1
     * host selected but Y having 100, then a lot more load is being dumped on the single host in X
     * than originally anticipated in the load balancing assignment delivered via EDS.
     *
     * @generated from protobuf field: bool locality_weight_aware = 4;
     */
    localityWeightAware: boolean;
    /**
     * When used with locality_weight_aware, scales the weight of each locality by the ratio
     * of hosts in the subset vs hosts in the original subset. This aims to even out the load
     * going to an individual locality if said locality is disproportionately affected by the
     * subset predicate.
     *
     * @generated from protobuf field: bool scale_locality_weight = 5;
     */
    scaleLocalityWeight: boolean;
    /**
     * If true, when a fallback policy is configured and its corresponding subset fails to find
     * a host this will cause any host to be selected instead.
     *
     * This is useful when using the default subset as the fallback policy, given the default
     * subset might become empty. With this option enabled, if that happens the LB will attempt
     * to select a host from the entire cluster.
     *
     * @generated from protobuf field: bool panic_mode_any = 6;
     */
    panicModeAny: boolean;
    /**
     * If true, metadata specified for a metadata key will be matched against the corresponding
     * endpoint metadata if the endpoint metadata matches the value exactly OR it is a list value
     * and any of the elements in the list matches the criteria.
     *
     * @generated from protobuf field: bool list_as_any = 7;
     */
    listAsAny: boolean;
}
/**
 * Specifications for subsets.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector
 */
export interface Cluster_LbSubsetConfig_LbSubsetSelector {
    /**
     * List of keys to match with the weighted cluster metadata.
     *
     * @generated from protobuf field: repeated string keys = 1;
     */
    keys: string[];
    /**
     * The behavior used when no endpoint subset matches the selected route's
     * metadata.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy fallback_policy = 2;
     */
    fallbackPolicy: Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy;
    /**
     * Subset of
     * :ref:`keys<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.keys>` used by
     * :ref:`KEYS_SUBSET<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy.KEYS_SUBSET>`
     * fallback policy.
     * It has to be a non empty list if KEYS_SUBSET fallback policy is selected.
     * For any other fallback policy the parameter is not used and should not be set.
     * Only values also present in
     * :ref:`keys<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.keys>` are allowed, but
     * `fallback_keys_subset` cannot be equal to `keys`.
     *
     * @generated from protobuf field: repeated string fallback_keys_subset = 3;
     */
    fallbackKeysSubset: string[];
}
/**
 * Allows to override top level fallback policy per selector.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy
 */
export enum Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
    /**
     * If NOT_DEFINED top level config fallback policy is used instead.
     *
     * @generated from protobuf enum value: NOT_DEFINED = 0;
     */
    NOT_DEFINED = 0,
    /**
     * If NO_FALLBACK is selected, a result equivalent to no healthy hosts is reported.
     *
     * @generated from protobuf enum value: NO_FALLBACK = 1;
     */
    NO_FALLBACK = 1,
    /**
     * If ANY_ENDPOINT is selected, any cluster endpoint may be returned
     * (subject to policy, health checks, etc).
     *
     * @generated from protobuf enum value: ANY_ENDPOINT = 2;
     */
    ANY_ENDPOINT = 2,
    /**
     * If DEFAULT_SUBSET is selected, load balancing is performed over the
     * endpoints matching the values from the default_subset field.
     *
     * @generated from protobuf enum value: DEFAULT_SUBSET = 3;
     */
    DEFAULT_SUBSET = 3,
    /**
     * If KEYS_SUBSET is selected, subset selector matching is performed again with metadata
     * keys reduced to
     * :ref:`fallback_keys_subset<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.fallback_keys_subset>`.
     * It allows for a fallback to a different, less specific selector if some of the keys of
     * the selector are considered optional.
     *
     * @generated from protobuf enum value: KEYS_SUBSET = 4;
     */
    KEYS_SUBSET = 4
}
/**
 * If NO_FALLBACK is selected, a result
 * equivalent to no healthy hosts is reported. If ANY_ENDPOINT is selected,
 * any cluster endpoint may be returned (subject to policy, health checks,
 * etc). If DEFAULT_SUBSET is selected, load balancing is performed over the
 * endpoints matching the values from the default_subset field.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy
 */
export enum Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
    /**
     * @generated from protobuf enum value: NO_FALLBACK = 0;
     */
    NO_FALLBACK = 0,
    /**
     * @generated from protobuf enum value: ANY_ENDPOINT = 1;
     */
    ANY_ENDPOINT = 1,
    /**
     * @generated from protobuf enum value: DEFAULT_SUBSET = 2;
     */
    DEFAULT_SUBSET = 2
}
/**
 * Specific configuration for the LeastRequest load balancing policy.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.LeastRequestLbConfig
 */
export interface Cluster_LeastRequestLbConfig {
    /**
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value choice_count = 1;
     */
    choiceCount?: UInt32Value;
}
/**
 * Specific configuration for the :ref:`RingHash<arch_overview_load_balancing_types_ring_hash>`
 * load balancing policy.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.RingHashLbConfig
 */
export interface Cluster_RingHashLbConfig {
    /**
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size<envoy_api_field_Cluster.RingHashLbConfig.maximum_ring_size>`.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value minimum_ring_size = 1;
     */
    minimumRingSize?: UInt64Value;
    /**
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH<envoy_api_enum_value_Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.RingHashLbConfig.HashFunction hash_function = 3;
     */
    hashFunction: Cluster_RingHashLbConfig_HashFunction;
    /**
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size<envoy_api_field_Cluster.RingHashLbConfig.minimum_ring_size>`.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value maximum_ring_size = 4;
     */
    maximumRingSize?: UInt64Value;
}
/**
 * The hash function used to hash hosts onto the ketama ring.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.RingHashLbConfig.HashFunction
 */
export enum Cluster_RingHashLbConfig_HashFunction {
    /**
     * Use `xxHash <https://github.com/Cyan4973/xxHash>`_, this is the default hash function.
     *
     * @generated from protobuf enum value: XX_HASH = 0;
     */
    XX_HASH = 0,
    /**
     * Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
     * std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
     * on Linux and not macOS.
     *
     * @generated from protobuf enum value: MURMUR_HASH_2 = 1;
     */
    MURMUR_HASH_2 = 1
}
/**
 * Specific configuration for the
 * :ref:`Original Destination <arch_overview_load_balancing_types_original_destination>`
 * load balancing policy.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.OriginalDstLbConfig
 */
export interface Cluster_OriginalDstLbConfig {
    /**
     * When true, :ref:`x-envoy-original-dst-host
     * <config_http_conn_man_headers_x-envoy-original-dst-host>` can be used to override destination
     * address.
     *
     * .. attention::
     *
     *   This header isn't sanitized by default, so enabling this feature allows HTTP clients to
     *   route traffic to arbitrary hosts and/or ports, which may have serious security
     *   consequences.
     *
     * .. note::
     *
     *   If the header appears multiple times only the first value is used.
     *
     * @generated from protobuf field: bool use_http_header = 1;
     */
    useHttpHeader: boolean;
}
/**
 * Common configuration for all load balancer implementations.
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.api.v2.Cluster.CommonLbConfig
 */
export interface Cluster_CommonLbConfig {
    /**
     * Configures the :ref:`healthy panic threshold <arch_overview_load_balancing_panic_threshold>`.
     * If not specified, the default is 50%.
     * To disable panic mode, set to 0%.
     *
     * .. note::
     *   The specified percent will be truncated to the nearest 1%.
     *
     * @generated from protobuf field: envoy.type.Percent healthy_panic_threshold = 1;
     */
    healthyPanicThreshold?: Percent;
    /**
     * @generated from protobuf oneof: locality_config_specifier
     */
    localityConfigSpecifier: {
        oneofKind: "zoneAwareLbConfig";
        /**
         * @generated from protobuf field: envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig zone_aware_lb_config = 2;
         */
        zoneAwareLbConfig: Cluster_CommonLbConfig_ZoneAwareLbConfig;
    } | {
        oneofKind: "localityWeightedLbConfig";
        /**
         * @generated from protobuf field: envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 3;
         */
        localityWeightedLbConfig: Cluster_CommonLbConfig_LocalityWeightedLbConfig;
    } | {
        oneofKind: undefined;
    };
    /**
     * If set, all health check/weight/metadata updates that happen within this duration will be
     * merged and delivered in one shot when the duration expires. The start of the duration is when
     * the first update happens. This is useful for big clusters, with potentially noisy deploys
     * that might trigger excessive CPU usage due to a constant stream of healthcheck state changes
     * or metadata updates. The first set of updates to be seen apply immediately (e.g.: a new
     * cluster). Please always keep in mind that the use of sandbox technologies may change this
     * behavior.
     *
     * If this is not set, we default to a merge window of 1000ms. To disable it, set the merge
     * window to 0.
     *
     * Note: merging does not apply to cluster membership changes (e.g.: adds/removes); this is
     * because merging those updates isn't currently safe. See
     * https://github.com/envoyproxy/envoy/pull/3941.
     *
     * @generated from protobuf field: google.protobuf.Duration update_merge_window = 4;
     */
    updateMergeWindow?: Duration;
    /**
     * If set to true, Envoy will not consider new hosts when computing load balancing weights until
     * they have been health checked for the first time. This will have no effect unless
     * active health checking is also configured.
     *
     * Ignoring a host means that for any load balancing calculations that adjust weights based
     * on the ratio of eligible hosts and total hosts (priority spillover, locality weighting and
     * panic mode) Envoy will exclude these hosts in the denominator.
     *
     * For example, with hosts in two priorities P0 and P1, where P0 looks like
     * {healthy, unhealthy (new), unhealthy (new)}
     * and where P1 looks like
     * {healthy, healthy}
     * all traffic will still hit P0, as 1 / (3 - 2) = 1.
     *
     * Enabling this will allow scaling up the number of hosts for a given cluster without entering
     * panic mode or triggering priority spillover, assuming the hosts pass the first health check.
     *
     * If panic mode is triggered, new hosts are still eligible for traffic; they simply do not
     * contribute to the calculation when deciding whether panic mode is enabled or not.
     *
     * @generated from protobuf field: bool ignore_new_hosts_until_first_hc = 5;
     */
    ignoreNewHostsUntilFirstHc: boolean;
    /**
     * If set to `true`, the cluster manager will drain all existing
     * connections to upstream hosts whenever hosts are added or removed from the cluster.
     *
     * @generated from protobuf field: bool close_connections_on_host_set_change = 6;
     */
    closeConnectionsOnHostSetChange: boolean;
    /**
     * Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)
     *
     * @generated from protobuf field: envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig consistent_hashing_lb_config = 7;
     */
    consistentHashingLbConfig?: Cluster_CommonLbConfig_ConsistentHashingLbConfig;
}
/**
 * Configuration for :ref:`zone aware routing
 * <arch_overview_load_balancing_zone_aware_routing>`.
 *
 * @generated from protobuf message envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig
 */
export interface Cluster_CommonLbConfig_ZoneAwareLbConfig {
    /**
     * Configures percentage of requests that will be considered for zone aware routing
     * if zone aware routing is configured. If not specified, the default is 100%.
     * * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
     * * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
     *
     * @generated from protobuf field: envoy.type.Percent routing_enabled = 1;
     */
    routingEnabled?: Percent;
    /**
     * Configures minimum upstream cluster size required for zone aware routing
     * If upstream cluster size is less than specified, zone aware routing is not performed
     * even if zone aware routing is configured. If not specified, the default is 6.
     * * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
     * * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value min_cluster_size = 2;
     */
    minClusterSize?: UInt64Value;
    /**
     * If set to true, Envoy will not consider any hosts when the cluster is in :ref:`panic
     * mode<arch_overview_load_balancing_panic_threshold>`. Instead, the cluster will fail all
     * requests as if all hosts are unhealthy. This can help avoid potentially overwhelming a
     * failing service.
     *
     * @generated from protobuf field: bool fail_traffic_on_panic = 3;
     */
    failTrafficOnPanic: boolean;
}
/**
 * Configuration for :ref:`locality weighted load balancing
 * <arch_overview_load_balancing_locality_weighted_lb>`
 *
 * @generated from protobuf message envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig
 */
export interface Cluster_CommonLbConfig_LocalityWeightedLbConfig {
}
/**
 * Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)
 *
 * @generated from protobuf message envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig
 */
export interface Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    /**
     * If set to `true`, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     *
     * @generated from protobuf field: bool use_hostname_for_hashing = 1;
     */
    useHostnameForHashing: boolean;
}
/**
 * @generated from protobuf message envoy.api.v2.Cluster.RefreshRate
 */
export interface Cluster_RefreshRate {
    /**
     * Specifies the base interval between refreshes. This parameter is required and must be greater
     * than zero and less than
     * :ref:`max_interval <envoy_api_field_Cluster.RefreshRate.max_interval>`.
     *
     * @generated from protobuf field: google.protobuf.Duration base_interval = 1;
     */
    baseInterval?: Duration;
    /**
     * Specifies the maximum interval between refreshes. This parameter is optional, but must be
     * greater than or equal to the
     * :ref:`base_interval <envoy_api_field_Cluster.RefreshRate.base_interval>`  if set. The default
     * is 10 times the :ref:`base_interval <envoy_api_field_Cluster.RefreshRate.base_interval>`.
     *
     * @generated from protobuf field: google.protobuf.Duration max_interval = 2;
     */
    maxInterval?: Duration;
}
/**
 * Refer to :ref:`service discovery type <arch_overview_service_discovery_types>`
 * for an explanation on each type.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.DiscoveryType
 */
export enum Cluster_DiscoveryType {
    /**
     * Refer to the :ref:`static discovery type<arch_overview_service_discovery_types_static>`
     * for an explanation.
     *
     * @generated from protobuf enum value: STATIC = 0;
     */
    STATIC = 0,
    /**
     * Refer to the :ref:`strict DNS discovery
     * type<arch_overview_service_discovery_types_strict_dns>`
     * for an explanation.
     *
     * @generated from protobuf enum value: STRICT_DNS = 1;
     */
    STRICT_DNS = 1,
    /**
     * Refer to the :ref:`logical DNS discovery
     * type<arch_overview_service_discovery_types_logical_dns>`
     * for an explanation.
     *
     * @generated from protobuf enum value: LOGICAL_DNS = 2;
     */
    LOGICAL_DNS = 2,
    /**
     * Refer to the :ref:`service discovery type<arch_overview_service_discovery_types_eds>`
     * for an explanation.
     *
     * @generated from protobuf enum value: EDS = 3;
     */
    EDS = 3,
    /**
     * Refer to the :ref:`original destination discovery
     * type<arch_overview_service_discovery_types_original_destination>`
     * for an explanation.
     *
     * @generated from protobuf enum value: ORIGINAL_DST = 4;
     */
    ORIGINAL_DST = 4
}
/**
 * Refer to :ref:`load balancer type <arch_overview_load_balancing_types>` architecture
 * overview section for information on each type.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.LbPolicy
 */
export enum Cluster_LbPolicy {
    /**
     * Refer to the :ref:`round robin load balancing
     * policy<arch_overview_load_balancing_types_round_robin>`
     * for an explanation.
     *
     * @generated from protobuf enum value: ROUND_ROBIN = 0;
     */
    ROUND_ROBIN = 0,
    /**
     * Refer to the :ref:`least request load balancing
     * policy<arch_overview_load_balancing_types_least_request>`
     * for an explanation.
     *
     * @generated from protobuf enum value: LEAST_REQUEST = 1;
     */
    LEAST_REQUEST = 1,
    /**
     * Refer to the :ref:`ring hash load balancing
     * policy<arch_overview_load_balancing_types_ring_hash>`
     * for an explanation.
     *
     * @generated from protobuf enum value: RING_HASH = 2;
     */
    RING_HASH = 2,
    /**
     * Refer to the :ref:`random load balancing
     * policy<arch_overview_load_balancing_types_random>`
     * for an explanation.
     *
     * @generated from protobuf enum value: RANDOM = 3;
     */
    RANDOM = 3,
    /**
     * Refer to the :ref:`original destination load balancing
     * policy<arch_overview_load_balancing_types_original_destination>`
     * for an explanation.
     *
     * .. attention::
     *
     *   **This load balancing policy is deprecated**. Use CLUSTER_PROVIDED instead.
     *
     *
     * @deprecated
     * @generated from protobuf enum value: ORIGINAL_DST_LB = 4 [deprecated = true];
     */
    ORIGINAL_DST_LB = 4,
    /**
     * Refer to the :ref:`Maglev load balancing policy<arch_overview_load_balancing_types_maglev>`
     * for an explanation.
     *
     * @generated from protobuf enum value: MAGLEV = 5;
     */
    MAGLEV = 5,
    /**
     * This load balancer type must be specified if the configured cluster provides a cluster
     * specific load balancer. Consult the configured cluster's documentation for whether to set
     * this option or not.
     *
     * @generated from protobuf enum value: CLUSTER_PROVIDED = 6;
     */
    CLUSTER_PROVIDED = 6,
    /**
     * [#not-implemented-hide:] Use the new :ref:`load_balancing_policy
     * <envoy_api_field_Cluster.load_balancing_policy>` field to determine the LB policy.
     * [#next-major-version: In the v3 API, we should consider deprecating the lb_policy field
     * and instead using the new load_balancing_policy field as the one and only mechanism for
     * configuring this.]
     *
     * @generated from protobuf enum value: LOAD_BALANCING_POLICY_CONFIG = 7;
     */
    LOAD_BALANCING_POLICY_CONFIG = 7
}
/**
 * When V4_ONLY is selected, the DNS resolver will only perform a lookup for
 * addresses in the IPv4 family. If V6_ONLY is selected, the DNS resolver will
 * only perform a lookup for addresses in the IPv6 family. If AUTO is
 * specified, the DNS resolver will first perform a lookup for addresses in
 * the IPv6 family and fallback to a lookup for addresses in the IPv4 family.
 * For cluster types other than
 * :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>` and
 * :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
 * this setting is
 * ignored.
 *
 * @generated from protobuf enum envoy.api.v2.Cluster.DnsLookupFamily
 */
export enum Cluster_DnsLookupFamily {
    /**
     * @generated from protobuf enum value: AUTO = 0;
     */
    AUTO = 0,
    /**
     * @generated from protobuf enum value: V4_ONLY = 1;
     */
    V4_ONLY = 1,
    /**
     * @generated from protobuf enum value: V6_ONLY = 2;
     */
    V6_ONLY = 2
}
/**
 * @generated from protobuf enum envoy.api.v2.Cluster.ClusterProtocolSelection
 */
export enum Cluster_ClusterProtocolSelection {
    /**
     * Cluster can only operate on one of the possible upstream protocols (HTTP1.1, HTTP2).
     * If :ref:`http2_protocol_options <envoy_api_field_Cluster.http2_protocol_options>` are
     * present, HTTP2 will be used, otherwise HTTP1.1 will be used.
     *
     * @generated from protobuf enum value: USE_CONFIGURED_PROTOCOL = 0;
     */
    USE_CONFIGURED_PROTOCOL = 0,
    /**
     * Use HTTP1.1 or HTTP2, depending on which one is used on the downstream connection.
     *
     * @generated from protobuf enum value: USE_DOWNSTREAM_PROTOCOL = 1;
     */
    USE_DOWNSTREAM_PROTOCOL = 1
}
/**
 * [#not-implemented-hide:] Extensible load balancing policy configuration.
 *
 * Every LB policy defined via this mechanism will be identified via a unique name using reverse
 * DNS notation. If the policy needs configuration parameters, it must define a message for its
 * own configuration, which will be stored in the config field. The name of the policy will tell
 * clients which type of message they should expect to see in the config field.
 *
 * Note that there are cases where it is useful to be able to independently select LB policies
 * for choosing a locality and for choosing an endpoint within that locality. For example, a
 * given deployment may always use the same policy to choose the locality, but for choosing the
 * endpoint within the locality, some clusters may use weighted-round-robin, while others may
 * use some sort of session-based balancing.
 *
 * This can be accomplished via hierarchical LB policies, where the parent LB policy creates a
 * child LB policy for each locality. For each request, the parent chooses the locality and then
 * delegates to the child policy for that locality to choose the endpoint within the locality.
 *
 * To facilitate this, the config message for the top-level LB policy may include a field of
 * type LoadBalancingPolicy that specifies the child policy.
 *
 * @generated from protobuf message envoy.api.v2.LoadBalancingPolicy
 */
export interface LoadBalancingPolicy {
    /**
     * Each client will iterate over the list in order and stop at the first policy that it
     * supports. This provides a mechanism for starting to use new LB policies that are not yet
     * supported by all clients.
     *
     * @generated from protobuf field: repeated envoy.api.v2.LoadBalancingPolicy.Policy policies = 1;
     */
    policies: LoadBalancingPolicy_Policy[];
}
/**
 * @generated from protobuf message envoy.api.v2.LoadBalancingPolicy.Policy
 */
export interface LoadBalancingPolicy_Policy {
    /**
     * Required. The name of the LB policy.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Optional config for the LB policy.
     * No more than one of these two fields may be populated.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.Struct config = 2 [deprecated = true];
     */
    config?: Struct;
    /**
     * @generated from protobuf field: google.protobuf.Any typed_config = 3;
     */
    typedConfig?: Any;
}
/**
 * An extensible structure containing the address Envoy should bind to when
 * establishing upstream connections.
 *
 * @generated from protobuf message envoy.api.v2.UpstreamBindConfig
 */
export interface UpstreamBindConfig {
    /**
     * The address Envoy should bind to when establishing upstream connections.
     *
     * @generated from protobuf field: envoy.api.v2.core.Address source_address = 1;
     */
    sourceAddress?: Address;
}
/**
 * @generated from protobuf message envoy.api.v2.UpstreamConnectionOptions
 */
export interface UpstreamConnectionOptions {
    /**
     * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
     *
     * @generated from protobuf field: envoy.api.v2.core.TcpKeepalive tcp_keepalive = 1;
     */
    tcpKeepalive?: TcpKeepalive;
}
// @generated message type with reflection information, may provide speed optimized methods
class Cluster$Type extends MessageType<Cluster> {
    constructor() {
        super("envoy.api.v2.Cluster", [
            { no: 43, name: "transport_socket_matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Cluster_TransportSocketMatch },
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 28, name: "alt_stat_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", oneof: "clusterDiscoveryType", T: () => ["envoy.api.v2.Cluster.DiscoveryType", Cluster_DiscoveryType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 38, name: "cluster_type", kind: "message", oneof: "clusterDiscoveryType", T: () => Cluster_CustomClusterType },
            { no: 3, name: "eds_cluster_config", kind: "message", T: () => Cluster_EdsClusterConfig },
            { no: 4, name: "connect_timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 5, name: "per_connection_buffer_limit_bytes", kind: "message", T: () => UInt32Value },
            { no: 6, name: "lb_policy", kind: "enum", T: () => ["envoy.api.v2.Cluster.LbPolicy", Cluster_LbPolicy], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 7, name: "hosts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Address },
            { no: 33, name: "load_assignment", kind: "message", T: () => ClusterLoadAssignment },
            { no: 8, name: "health_checks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HealthCheck },
            { no: 9, name: "max_requests_per_connection", kind: "message", T: () => UInt32Value },
            { no: 10, name: "circuit_breakers", kind: "message", T: () => CircuitBreakers },
            { no: 11, name: "tls_context", kind: "message", T: () => UpstreamTlsContext, options: { "envoy.annotations.disallowed_by_default": true } },
            { no: 46, name: "upstream_http_protocol_options", kind: "message", T: () => UpstreamHttpProtocolOptions },
            { no: 29, name: "common_http_protocol_options", kind: "message", T: () => HttpProtocolOptions },
            { no: 13, name: "http_protocol_options", kind: "message", T: () => Http1ProtocolOptions },
            { no: 14, name: "http2_protocol_options", kind: "message", T: () => Http2ProtocolOptions },
            { no: 35, name: "extension_protocol_options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Struct }, options: { "envoy.annotations.disallowed_by_default": true } },
            { no: 36, name: "typed_extension_protocol_options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } },
            { no: 16, name: "dns_refresh_rate", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: { nanos: 1000000 } } } } },
            { no: 44, name: "dns_failure_refresh_rate", kind: "message", T: () => Cluster_RefreshRate },
            { no: 39, name: "respect_dns_ttl", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "dns_lookup_family", kind: "enum", T: () => ["envoy.api.v2.Cluster.DnsLookupFamily", Cluster_DnsLookupFamily], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 18, name: "dns_resolvers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Address },
            { no: 45, name: "use_tcp_for_dns_lookups", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "outlier_detection", kind: "message", T: () => OutlierDetection },
            { no: 20, name: "cleanup_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 21, name: "upstream_bind_config", kind: "message", T: () => BindConfig },
            { no: 22, name: "lb_subset_config", kind: "message", T: () => Cluster_LbSubsetConfig },
            { no: 23, name: "ring_hash_lb_config", kind: "message", oneof: "lbConfig", T: () => Cluster_RingHashLbConfig },
            { no: 34, name: "original_dst_lb_config", kind: "message", oneof: "lbConfig", T: () => Cluster_OriginalDstLbConfig },
            { no: 37, name: "least_request_lb_config", kind: "message", oneof: "lbConfig", T: () => Cluster_LeastRequestLbConfig },
            { no: 27, name: "common_lb_config", kind: "message", T: () => Cluster_CommonLbConfig },
            { no: 24, name: "transport_socket", kind: "message", T: () => TransportSocket },
            { no: 25, name: "metadata", kind: "message", T: () => Metadata },
            { no: 26, name: "protocol_selection", kind: "enum", T: () => ["envoy.api.v2.Cluster.ClusterProtocolSelection", Cluster_ClusterProtocolSelection] },
            { no: 30, name: "upstream_connection_options", kind: "message", T: () => UpstreamConnectionOptions },
            { no: 31, name: "close_connections_on_host_health_failure", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "drain_connections_on_host_removal", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "udpa.annotations.field_migrate": { rename: "ignore_health_on_host_removal" } } },
            { no: 40, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter },
            { no: 41, name: "load_balancing_policy", kind: "message", T: () => LoadBalancingPolicy },
            { no: 42, name: "lrs_server", kind: "message", T: () => ConfigSource },
            { no: 47, name: "track_timeout_budgets", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster>): Cluster {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transportSocketMatches = [];
        message.name = "";
        message.altStatName = "";
        message.clusterDiscoveryType = { oneofKind: undefined };
        message.lbPolicy = 0;
        message.hosts = [];
        message.healthChecks = [];
        message.extensionProtocolOptions = {};
        message.typedExtensionProtocolOptions = {};
        message.respectDnsTtl = false;
        message.dnsLookupFamily = 0;
        message.dnsResolvers = [];
        message.useTcpForDnsLookups = false;
        message.lbConfig = { oneofKind: undefined };
        message.protocolSelection = 0;
        message.closeConnectionsOnHostHealthFailure = false;
        message.drainConnectionsOnHostRemoval = false;
        message.filters = [];
        message.trackTimeoutBudgets = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster): Cluster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.api.v2.Cluster.TransportSocketMatch transport_socket_matches */ 43:
                    message.transportSocketMatches.push(Cluster_TransportSocketMatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string alt_stat_name */ 28:
                    message.altStatName = reader.string();
                    break;
                case /* envoy.api.v2.Cluster.DiscoveryType type */ 2:
                    message.clusterDiscoveryType = {
                        oneofKind: "type",
                        type: reader.int32()
                    };
                    break;
                case /* envoy.api.v2.Cluster.CustomClusterType cluster_type */ 38:
                    message.clusterDiscoveryType = {
                        oneofKind: "clusterType",
                        clusterType: Cluster_CustomClusterType.internalBinaryRead(reader, reader.uint32(), options, (message.clusterDiscoveryType as any).clusterType)
                    };
                    break;
                case /* envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config */ 3:
                    message.edsClusterConfig = Cluster_EdsClusterConfig.internalBinaryRead(reader, reader.uint32(), options, message.edsClusterConfig);
                    break;
                case /* google.protobuf.Duration connect_timeout */ 4:
                    message.connectTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.connectTimeout);
                    break;
                case /* google.protobuf.UInt32Value per_connection_buffer_limit_bytes */ 5:
                    message.perConnectionBufferLimitBytes = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.perConnectionBufferLimitBytes);
                    break;
                case /* envoy.api.v2.Cluster.LbPolicy lb_policy */ 6:
                    message.lbPolicy = reader.int32();
                    break;
                case /* repeated envoy.api.v2.core.Address hosts = 7 [deprecated = true];*/ 7:
                    message.hosts.push(Address.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.api.v2.ClusterLoadAssignment load_assignment */ 33:
                    message.loadAssignment = ClusterLoadAssignment.internalBinaryRead(reader, reader.uint32(), options, message.loadAssignment);
                    break;
                case /* repeated envoy.api.v2.core.HealthCheck health_checks */ 8:
                    message.healthChecks.push(HealthCheck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.UInt32Value max_requests_per_connection */ 9:
                    message.maxRequestsPerConnection = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxRequestsPerConnection);
                    break;
                case /* envoy.api.v2.cluster.CircuitBreakers circuit_breakers */ 10:
                    message.circuitBreakers = CircuitBreakers.internalBinaryRead(reader, reader.uint32(), options, message.circuitBreakers);
                    break;
                case /* envoy.api.v2.auth.UpstreamTlsContext tls_context = 11 [deprecated = true];*/ 11:
                    message.tlsContext = UpstreamTlsContext.internalBinaryRead(reader, reader.uint32(), options, message.tlsContext);
                    break;
                case /* envoy.api.v2.core.UpstreamHttpProtocolOptions upstream_http_protocol_options */ 46:
                    message.upstreamHttpProtocolOptions = UpstreamHttpProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.upstreamHttpProtocolOptions);
                    break;
                case /* envoy.api.v2.core.HttpProtocolOptions common_http_protocol_options */ 29:
                    message.commonHttpProtocolOptions = HttpProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.commonHttpProtocolOptions);
                    break;
                case /* envoy.api.v2.core.Http1ProtocolOptions http_protocol_options */ 13:
                    message.httpProtocolOptions = Http1ProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.httpProtocolOptions);
                    break;
                case /* envoy.api.v2.core.Http2ProtocolOptions http2_protocol_options */ 14:
                    message.http2ProtocolOptions = Http2ProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.http2ProtocolOptions);
                    break;
                case /* map<string, google.protobuf.Struct> extension_protocol_options = 35 [deprecated = true];*/ 35:
                    this.binaryReadMap35(message.extensionProtocolOptions, reader, options);
                    break;
                case /* map<string, google.protobuf.Any> typed_extension_protocol_options */ 36:
                    this.binaryReadMap36(message.typedExtensionProtocolOptions, reader, options);
                    break;
                case /* google.protobuf.Duration dns_refresh_rate */ 16:
                    message.dnsRefreshRate = Duration.internalBinaryRead(reader, reader.uint32(), options, message.dnsRefreshRate);
                    break;
                case /* envoy.api.v2.Cluster.RefreshRate dns_failure_refresh_rate */ 44:
                    message.dnsFailureRefreshRate = Cluster_RefreshRate.internalBinaryRead(reader, reader.uint32(), options, message.dnsFailureRefreshRate);
                    break;
                case /* bool respect_dns_ttl */ 39:
                    message.respectDnsTtl = reader.bool();
                    break;
                case /* envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family */ 17:
                    message.dnsLookupFamily = reader.int32();
                    break;
                case /* repeated envoy.api.v2.core.Address dns_resolvers */ 18:
                    message.dnsResolvers.push(Address.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool use_tcp_for_dns_lookups */ 45:
                    message.useTcpForDnsLookups = reader.bool();
                    break;
                case /* envoy.api.v2.cluster.OutlierDetection outlier_detection */ 19:
                    message.outlierDetection = OutlierDetection.internalBinaryRead(reader, reader.uint32(), options, message.outlierDetection);
                    break;
                case /* google.protobuf.Duration cleanup_interval */ 20:
                    message.cleanupInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.cleanupInterval);
                    break;
                case /* envoy.api.v2.core.BindConfig upstream_bind_config */ 21:
                    message.upstreamBindConfig = BindConfig.internalBinaryRead(reader, reader.uint32(), options, message.upstreamBindConfig);
                    break;
                case /* envoy.api.v2.Cluster.LbSubsetConfig lb_subset_config */ 22:
                    message.lbSubsetConfig = Cluster_LbSubsetConfig.internalBinaryRead(reader, reader.uint32(), options, message.lbSubsetConfig);
                    break;
                case /* envoy.api.v2.Cluster.RingHashLbConfig ring_hash_lb_config */ 23:
                    message.lbConfig = {
                        oneofKind: "ringHashLbConfig",
                        ringHashLbConfig: Cluster_RingHashLbConfig.internalBinaryRead(reader, reader.uint32(), options, (message.lbConfig as any).ringHashLbConfig)
                    };
                    break;
                case /* envoy.api.v2.Cluster.OriginalDstLbConfig original_dst_lb_config */ 34:
                    message.lbConfig = {
                        oneofKind: "originalDstLbConfig",
                        originalDstLbConfig: Cluster_OriginalDstLbConfig.internalBinaryRead(reader, reader.uint32(), options, (message.lbConfig as any).originalDstLbConfig)
                    };
                    break;
                case /* envoy.api.v2.Cluster.LeastRequestLbConfig least_request_lb_config */ 37:
                    message.lbConfig = {
                        oneofKind: "leastRequestLbConfig",
                        leastRequestLbConfig: Cluster_LeastRequestLbConfig.internalBinaryRead(reader, reader.uint32(), options, (message.lbConfig as any).leastRequestLbConfig)
                    };
                    break;
                case /* envoy.api.v2.Cluster.CommonLbConfig common_lb_config */ 27:
                    message.commonLbConfig = Cluster_CommonLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.commonLbConfig);
                    break;
                case /* envoy.api.v2.core.TransportSocket transport_socket */ 24:
                    message.transportSocket = TransportSocket.internalBinaryRead(reader, reader.uint32(), options, message.transportSocket);
                    break;
                case /* envoy.api.v2.core.Metadata metadata */ 25:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* envoy.api.v2.Cluster.ClusterProtocolSelection protocol_selection */ 26:
                    message.protocolSelection = reader.int32();
                    break;
                case /* envoy.api.v2.UpstreamConnectionOptions upstream_connection_options */ 30:
                    message.upstreamConnectionOptions = UpstreamConnectionOptions.internalBinaryRead(reader, reader.uint32(), options, message.upstreamConnectionOptions);
                    break;
                case /* bool close_connections_on_host_health_failure */ 31:
                    message.closeConnectionsOnHostHealthFailure = reader.bool();
                    break;
                case /* bool drain_connections_on_host_removal */ 32:
                    message.drainConnectionsOnHostRemoval = reader.bool();
                    break;
                case /* repeated envoy.api.v2.cluster.Filter filters */ 40:
                    message.filters.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.api.v2.LoadBalancingPolicy load_balancing_policy */ 41:
                    message.loadBalancingPolicy = LoadBalancingPolicy.internalBinaryRead(reader, reader.uint32(), options, message.loadBalancingPolicy);
                    break;
                case /* envoy.api.v2.core.ConfigSource lrs_server */ 42:
                    message.lrsServer = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.lrsServer);
                    break;
                case /* bool track_timeout_budgets */ 47:
                    message.trackTimeoutBudgets = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap35(map: Cluster["extensionProtocolOptions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Cluster["extensionProtocolOptions"] | undefined, val: Cluster["extensionProtocolOptions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Struct.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.api.v2.Cluster.extension_protocol_options");
            }
        }
        map[key ?? ""] = val ?? Struct.create();
    }
    private binaryReadMap36(map: Cluster["typedExtensionProtocolOptions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Cluster["typedExtensionProtocolOptions"] | undefined, val: Cluster["typedExtensionProtocolOptions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Any.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.api.v2.Cluster.typed_extension_protocol_options");
            }
        }
        map[key ?? ""] = val ?? Any.create();
    }
    internalBinaryWrite(message: Cluster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.api.v2.Cluster.TransportSocketMatch transport_socket_matches = 43; */
        for (let i = 0; i < message.transportSocketMatches.length; i++)
            Cluster_TransportSocketMatch.internalBinaryWrite(message.transportSocketMatches[i], writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string alt_stat_name = 28; */
        if (message.altStatName !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.altStatName);
        /* envoy.api.v2.Cluster.DiscoveryType type = 2; */
        if (message.clusterDiscoveryType.oneofKind === "type")
            writer.tag(2, WireType.Varint).int32(message.clusterDiscoveryType.type);
        /* envoy.api.v2.Cluster.CustomClusterType cluster_type = 38; */
        if (message.clusterDiscoveryType.oneofKind === "clusterType")
            Cluster_CustomClusterType.internalBinaryWrite(message.clusterDiscoveryType.clusterType, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3; */
        if (message.edsClusterConfig)
            Cluster_EdsClusterConfig.internalBinaryWrite(message.edsClusterConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration connect_timeout = 4; */
        if (message.connectTimeout)
            Duration.internalBinaryWrite(message.connectTimeout, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5; */
        if (message.perConnectionBufferLimitBytes)
            UInt32Value.internalBinaryWrite(message.perConnectionBufferLimitBytes, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.LbPolicy lb_policy = 6; */
        if (message.lbPolicy !== 0)
            writer.tag(6, WireType.Varint).int32(message.lbPolicy);
        /* repeated envoy.api.v2.core.Address hosts = 7 [deprecated = true]; */
        for (let i = 0; i < message.hosts.length; i++)
            Address.internalBinaryWrite(message.hosts[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.ClusterLoadAssignment load_assignment = 33; */
        if (message.loadAssignment)
            ClusterLoadAssignment.internalBinaryWrite(message.loadAssignment, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.core.HealthCheck health_checks = 8; */
        for (let i = 0; i < message.healthChecks.length; i++)
            HealthCheck.internalBinaryWrite(message.healthChecks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_requests_per_connection = 9; */
        if (message.maxRequestsPerConnection)
            UInt32Value.internalBinaryWrite(message.maxRequestsPerConnection, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.cluster.CircuitBreakers circuit_breakers = 10; */
        if (message.circuitBreakers)
            CircuitBreakers.internalBinaryWrite(message.circuitBreakers, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.auth.UpstreamTlsContext tls_context = 11 [deprecated = true]; */
        if (message.tlsContext)
            UpstreamTlsContext.internalBinaryWrite(message.tlsContext, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.UpstreamHttpProtocolOptions upstream_http_protocol_options = 46; */
        if (message.upstreamHttpProtocolOptions)
            UpstreamHttpProtocolOptions.internalBinaryWrite(message.upstreamHttpProtocolOptions, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.HttpProtocolOptions common_http_protocol_options = 29; */
        if (message.commonHttpProtocolOptions)
            HttpProtocolOptions.internalBinaryWrite(message.commonHttpProtocolOptions, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.Http1ProtocolOptions http_protocol_options = 13; */
        if (message.httpProtocolOptions)
            Http1ProtocolOptions.internalBinaryWrite(message.httpProtocolOptions, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.Http2ProtocolOptions http2_protocol_options = 14; */
        if (message.http2ProtocolOptions)
            Http2ProtocolOptions.internalBinaryWrite(message.http2ProtocolOptions, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Struct> extension_protocol_options = 35 [deprecated = true]; */
        for (let k of globalThis.Object.keys(message.extensionProtocolOptions)) {
            writer.tag(35, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Struct.internalBinaryWrite(message.extensionProtocolOptions[k], writer, options);
            writer.join().join();
        }
        /* map<string, google.protobuf.Any> typed_extension_protocol_options = 36; */
        for (let k of globalThis.Object.keys(message.typedExtensionProtocolOptions)) {
            writer.tag(36, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Any.internalBinaryWrite(message.typedExtensionProtocolOptions[k], writer, options);
            writer.join().join();
        }
        /* google.protobuf.Duration dns_refresh_rate = 16; */
        if (message.dnsRefreshRate)
            Duration.internalBinaryWrite(message.dnsRefreshRate, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.RefreshRate dns_failure_refresh_rate = 44; */
        if (message.dnsFailureRefreshRate)
            Cluster_RefreshRate.internalBinaryWrite(message.dnsFailureRefreshRate, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* bool respect_dns_ttl = 39; */
        if (message.respectDnsTtl !== false)
            writer.tag(39, WireType.Varint).bool(message.respectDnsTtl);
        /* envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17; */
        if (message.dnsLookupFamily !== 0)
            writer.tag(17, WireType.Varint).int32(message.dnsLookupFamily);
        /* repeated envoy.api.v2.core.Address dns_resolvers = 18; */
        for (let i = 0; i < message.dnsResolvers.length; i++)
            Address.internalBinaryWrite(message.dnsResolvers[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bool use_tcp_for_dns_lookups = 45; */
        if (message.useTcpForDnsLookups !== false)
            writer.tag(45, WireType.Varint).bool(message.useTcpForDnsLookups);
        /* envoy.api.v2.cluster.OutlierDetection outlier_detection = 19; */
        if (message.outlierDetection)
            OutlierDetection.internalBinaryWrite(message.outlierDetection, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration cleanup_interval = 20; */
        if (message.cleanupInterval)
            Duration.internalBinaryWrite(message.cleanupInterval, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.BindConfig upstream_bind_config = 21; */
        if (message.upstreamBindConfig)
            BindConfig.internalBinaryWrite(message.upstreamBindConfig, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.LbSubsetConfig lb_subset_config = 22; */
        if (message.lbSubsetConfig)
            Cluster_LbSubsetConfig.internalBinaryWrite(message.lbSubsetConfig, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.RingHashLbConfig ring_hash_lb_config = 23; */
        if (message.lbConfig.oneofKind === "ringHashLbConfig")
            Cluster_RingHashLbConfig.internalBinaryWrite(message.lbConfig.ringHashLbConfig, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.OriginalDstLbConfig original_dst_lb_config = 34; */
        if (message.lbConfig.oneofKind === "originalDstLbConfig")
            Cluster_OriginalDstLbConfig.internalBinaryWrite(message.lbConfig.originalDstLbConfig, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.LeastRequestLbConfig least_request_lb_config = 37; */
        if (message.lbConfig.oneofKind === "leastRequestLbConfig")
            Cluster_LeastRequestLbConfig.internalBinaryWrite(message.lbConfig.leastRequestLbConfig, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.CommonLbConfig common_lb_config = 27; */
        if (message.commonLbConfig)
            Cluster_CommonLbConfig.internalBinaryWrite(message.commonLbConfig, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.TransportSocket transport_socket = 24; */
        if (message.transportSocket)
            TransportSocket.internalBinaryWrite(message.transportSocket, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.Metadata metadata = 25; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.ClusterProtocolSelection protocol_selection = 26; */
        if (message.protocolSelection !== 0)
            writer.tag(26, WireType.Varint).int32(message.protocolSelection);
        /* envoy.api.v2.UpstreamConnectionOptions upstream_connection_options = 30; */
        if (message.upstreamConnectionOptions)
            UpstreamConnectionOptions.internalBinaryWrite(message.upstreamConnectionOptions, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* bool close_connections_on_host_health_failure = 31; */
        if (message.closeConnectionsOnHostHealthFailure !== false)
            writer.tag(31, WireType.Varint).bool(message.closeConnectionsOnHostHealthFailure);
        /* bool drain_connections_on_host_removal = 32; */
        if (message.drainConnectionsOnHostRemoval !== false)
            writer.tag(32, WireType.Varint).bool(message.drainConnectionsOnHostRemoval);
        /* repeated envoy.api.v2.cluster.Filter filters = 40; */
        for (let i = 0; i < message.filters.length; i++)
            Filter.internalBinaryWrite(message.filters[i], writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.LoadBalancingPolicy load_balancing_policy = 41; */
        if (message.loadBalancingPolicy)
            LoadBalancingPolicy.internalBinaryWrite(message.loadBalancingPolicy, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.ConfigSource lrs_server = 42; */
        if (message.lrsServer)
            ConfigSource.internalBinaryWrite(message.lrsServer, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* bool track_timeout_budgets = 47; */
        if (message.trackTimeoutBudgets !== false)
            writer.tag(47, WireType.Varint).bool(message.trackTimeoutBudgets);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster
 */
export const Cluster = new Cluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_TransportSocketMatch$Type extends MessageType<Cluster_TransportSocketMatch> {
    constructor() {
        super("envoy.api.v2.Cluster.TransportSocketMatch", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "match", kind: "message", T: () => Struct },
            { no: 3, name: "transport_socket", kind: "message", T: () => TransportSocket }
        ]);
    }
    create(value?: PartialMessage<Cluster_TransportSocketMatch>): Cluster_TransportSocketMatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Cluster_TransportSocketMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_TransportSocketMatch): Cluster_TransportSocketMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct match */ 2:
                    message.match = Struct.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* envoy.api.v2.core.TransportSocket transport_socket */ 3:
                    message.transportSocket = TransportSocket.internalBinaryRead(reader, reader.uint32(), options, message.transportSocket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_TransportSocketMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct match = 2; */
        if (message.match)
            Struct.internalBinaryWrite(message.match, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.TransportSocket transport_socket = 3; */
        if (message.transportSocket)
            TransportSocket.internalBinaryWrite(message.transportSocket, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.TransportSocketMatch
 */
export const Cluster_TransportSocketMatch = new Cluster_TransportSocketMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_CustomClusterType$Type extends MessageType<Cluster_CustomClusterType> {
    constructor() {
        super("envoy.api.v2.Cluster.CustomClusterType", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "typed_config", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Cluster_CustomClusterType>): Cluster_CustomClusterType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Cluster_CustomClusterType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_CustomClusterType): Cluster_CustomClusterType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Any typed_config */ 2:
                    message.typedConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.typedConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_CustomClusterType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Any typed_config = 2; */
        if (message.typedConfig)
            Any.internalBinaryWrite(message.typedConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.CustomClusterType
 */
export const Cluster_CustomClusterType = new Cluster_CustomClusterType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_EdsClusterConfig$Type extends MessageType<Cluster_EdsClusterConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.EdsClusterConfig", [
            { no: 1, name: "eds_config", kind: "message", T: () => ConfigSource },
            { no: 2, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_EdsClusterConfig>): Cluster_EdsClusterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceName = "";
        if (value !== undefined)
            reflectionMergePartial<Cluster_EdsClusterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_EdsClusterConfig): Cluster_EdsClusterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.ConfigSource eds_config */ 1:
                    message.edsConfig = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.edsConfig);
                    break;
                case /* string service_name */ 2:
                    message.serviceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_EdsClusterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.ConfigSource eds_config = 1; */
        if (message.edsConfig)
            ConfigSource.internalBinaryWrite(message.edsConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string service_name = 2; */
        if (message.serviceName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.EdsClusterConfig
 */
export const Cluster_EdsClusterConfig = new Cluster_EdsClusterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_LbSubsetConfig$Type extends MessageType<Cluster_LbSubsetConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.LbSubsetConfig", [
            { no: 1, name: "fallback_policy", kind: "enum", T: () => ["envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetFallbackPolicy], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "default_subset", kind: "message", T: () => Struct },
            { no: 3, name: "subset_selectors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Cluster_LbSubsetConfig_LbSubsetSelector },
            { no: 4, name: "locality_weight_aware", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scale_locality_weight", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "panic_mode_any", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "list_as_any", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_LbSubsetConfig>): Cluster_LbSubsetConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fallbackPolicy = 0;
        message.subsetSelectors = [];
        message.localityWeightAware = false;
        message.scaleLocalityWeight = false;
        message.panicModeAny = false;
        message.listAsAny = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster_LbSubsetConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_LbSubsetConfig): Cluster_LbSubsetConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy fallback_policy */ 1:
                    message.fallbackPolicy = reader.int32();
                    break;
                case /* google.protobuf.Struct default_subset */ 2:
                    message.defaultSubset = Struct.internalBinaryRead(reader, reader.uint32(), options, message.defaultSubset);
                    break;
                case /* repeated envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector subset_selectors */ 3:
                    message.subsetSelectors.push(Cluster_LbSubsetConfig_LbSubsetSelector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool locality_weight_aware */ 4:
                    message.localityWeightAware = reader.bool();
                    break;
                case /* bool scale_locality_weight */ 5:
                    message.scaleLocalityWeight = reader.bool();
                    break;
                case /* bool panic_mode_any */ 6:
                    message.panicModeAny = reader.bool();
                    break;
                case /* bool list_as_any */ 7:
                    message.listAsAny = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_LbSubsetConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy fallback_policy = 1; */
        if (message.fallbackPolicy !== 0)
            writer.tag(1, WireType.Varint).int32(message.fallbackPolicy);
        /* google.protobuf.Struct default_subset = 2; */
        if (message.defaultSubset)
            Struct.internalBinaryWrite(message.defaultSubset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector subset_selectors = 3; */
        for (let i = 0; i < message.subsetSelectors.length; i++)
            Cluster_LbSubsetConfig_LbSubsetSelector.internalBinaryWrite(message.subsetSelectors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool locality_weight_aware = 4; */
        if (message.localityWeightAware !== false)
            writer.tag(4, WireType.Varint).bool(message.localityWeightAware);
        /* bool scale_locality_weight = 5; */
        if (message.scaleLocalityWeight !== false)
            writer.tag(5, WireType.Varint).bool(message.scaleLocalityWeight);
        /* bool panic_mode_any = 6; */
        if (message.panicModeAny !== false)
            writer.tag(6, WireType.Varint).bool(message.panicModeAny);
        /* bool list_as_any = 7; */
        if (message.listAsAny !== false)
            writer.tag(7, WireType.Varint).bool(message.listAsAny);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.LbSubsetConfig
 */
export const Cluster_LbSubsetConfig = new Cluster_LbSubsetConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_LbSubsetConfig_LbSubsetSelector$Type extends MessageType<Cluster_LbSubsetConfig_LbSubsetSelector> {
    constructor() {
        super("envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector", [
            { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fallback_policy", kind: "enum", T: () => ["envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "fallback_keys_subset", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_LbSubsetConfig_LbSubsetSelector>): Cluster_LbSubsetConfig_LbSubsetSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keys = [];
        message.fallbackPolicy = 0;
        message.fallbackKeysSubset = [];
        if (value !== undefined)
            reflectionMergePartial<Cluster_LbSubsetConfig_LbSubsetSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_LbSubsetConfig_LbSubsetSelector): Cluster_LbSubsetConfig_LbSubsetSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string keys */ 1:
                    message.keys.push(reader.string());
                    break;
                case /* envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy fallback_policy */ 2:
                    message.fallbackPolicy = reader.int32();
                    break;
                case /* repeated string fallback_keys_subset */ 3:
                    message.fallbackKeysSubset.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_LbSubsetConfig_LbSubsetSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string keys = 1; */
        for (let i = 0; i < message.keys.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
        /* envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy fallback_policy = 2; */
        if (message.fallbackPolicy !== 0)
            writer.tag(2, WireType.Varint).int32(message.fallbackPolicy);
        /* repeated string fallback_keys_subset = 3; */
        for (let i = 0; i < message.fallbackKeysSubset.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.fallbackKeysSubset[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector
 */
export const Cluster_LbSubsetConfig_LbSubsetSelector = new Cluster_LbSubsetConfig_LbSubsetSelector$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_LeastRequestLbConfig$Type extends MessageType<Cluster_LeastRequestLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.LeastRequestLbConfig", [
            { no: 1, name: "choice_count", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 2 } } } }
        ]);
    }
    create(value?: PartialMessage<Cluster_LeastRequestLbConfig>): Cluster_LeastRequestLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Cluster_LeastRequestLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_LeastRequestLbConfig): Cluster_LeastRequestLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value choice_count */ 1:
                    message.choiceCount = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.choiceCount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_LeastRequestLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value choice_count = 1; */
        if (message.choiceCount)
            UInt32Value.internalBinaryWrite(message.choiceCount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.LeastRequestLbConfig
 */
export const Cluster_LeastRequestLbConfig = new Cluster_LeastRequestLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_RingHashLbConfig$Type extends MessageType<Cluster_RingHashLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.RingHashLbConfig", [
            { no: 1, name: "minimum_ring_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lte: "8388608" } } } },
            { no: 3, name: "hash_function", kind: "enum", T: () => ["envoy.api.v2.Cluster.RingHashLbConfig.HashFunction", Cluster_RingHashLbConfig_HashFunction], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "maximum_ring_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lte: "8388608" } } } }
        ]);
    }
    create(value?: PartialMessage<Cluster_RingHashLbConfig>): Cluster_RingHashLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hashFunction = 0;
        if (value !== undefined)
            reflectionMergePartial<Cluster_RingHashLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_RingHashLbConfig): Cluster_RingHashLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt64Value minimum_ring_size */ 1:
                    message.minimumRingSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.minimumRingSize);
                    break;
                case /* envoy.api.v2.Cluster.RingHashLbConfig.HashFunction hash_function */ 3:
                    message.hashFunction = reader.int32();
                    break;
                case /* google.protobuf.UInt64Value maximum_ring_size */ 4:
                    message.maximumRingSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maximumRingSize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_RingHashLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt64Value minimum_ring_size = 1; */
        if (message.minimumRingSize)
            UInt64Value.internalBinaryWrite(message.minimumRingSize, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.RingHashLbConfig.HashFunction hash_function = 3; */
        if (message.hashFunction !== 0)
            writer.tag(3, WireType.Varint).int32(message.hashFunction);
        /* google.protobuf.UInt64Value maximum_ring_size = 4; */
        if (message.maximumRingSize)
            UInt64Value.internalBinaryWrite(message.maximumRingSize, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.RingHashLbConfig
 */
export const Cluster_RingHashLbConfig = new Cluster_RingHashLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_OriginalDstLbConfig$Type extends MessageType<Cluster_OriginalDstLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.OriginalDstLbConfig", [
            { no: 1, name: "use_http_header", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_OriginalDstLbConfig>): Cluster_OriginalDstLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.useHttpHeader = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster_OriginalDstLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_OriginalDstLbConfig): Cluster_OriginalDstLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_http_header */ 1:
                    message.useHttpHeader = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_OriginalDstLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_http_header = 1; */
        if (message.useHttpHeader !== false)
            writer.tag(1, WireType.Varint).bool(message.useHttpHeader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.OriginalDstLbConfig
 */
export const Cluster_OriginalDstLbConfig = new Cluster_OriginalDstLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_CommonLbConfig$Type extends MessageType<Cluster_CommonLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.CommonLbConfig", [
            { no: 1, name: "healthy_panic_threshold", kind: "message", T: () => Percent },
            { no: 2, name: "zone_aware_lb_config", kind: "message", oneof: "localityConfigSpecifier", T: () => Cluster_CommonLbConfig_ZoneAwareLbConfig },
            { no: 3, name: "locality_weighted_lb_config", kind: "message", oneof: "localityConfigSpecifier", T: () => Cluster_CommonLbConfig_LocalityWeightedLbConfig },
            { no: 4, name: "update_merge_window", kind: "message", T: () => Duration },
            { no: 5, name: "ignore_new_hosts_until_first_hc", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "close_connections_on_host_set_change", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "consistent_hashing_lb_config", kind: "message", T: () => Cluster_CommonLbConfig_ConsistentHashingLbConfig }
        ]);
    }
    create(value?: PartialMessage<Cluster_CommonLbConfig>): Cluster_CommonLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.localityConfigSpecifier = { oneofKind: undefined };
        message.ignoreNewHostsUntilFirstHc = false;
        message.closeConnectionsOnHostSetChange = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster_CommonLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_CommonLbConfig): Cluster_CommonLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.Percent healthy_panic_threshold */ 1:
                    message.healthyPanicThreshold = Percent.internalBinaryRead(reader, reader.uint32(), options, message.healthyPanicThreshold);
                    break;
                case /* envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig zone_aware_lb_config */ 2:
                    message.localityConfigSpecifier = {
                        oneofKind: "zoneAwareLbConfig",
                        zoneAwareLbConfig: Cluster_CommonLbConfig_ZoneAwareLbConfig.internalBinaryRead(reader, reader.uint32(), options, (message.localityConfigSpecifier as any).zoneAwareLbConfig)
                    };
                    break;
                case /* envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config */ 3:
                    message.localityConfigSpecifier = {
                        oneofKind: "localityWeightedLbConfig",
                        localityWeightedLbConfig: Cluster_CommonLbConfig_LocalityWeightedLbConfig.internalBinaryRead(reader, reader.uint32(), options, (message.localityConfigSpecifier as any).localityWeightedLbConfig)
                    };
                    break;
                case /* google.protobuf.Duration update_merge_window */ 4:
                    message.updateMergeWindow = Duration.internalBinaryRead(reader, reader.uint32(), options, message.updateMergeWindow);
                    break;
                case /* bool ignore_new_hosts_until_first_hc */ 5:
                    message.ignoreNewHostsUntilFirstHc = reader.bool();
                    break;
                case /* bool close_connections_on_host_set_change */ 6:
                    message.closeConnectionsOnHostSetChange = reader.bool();
                    break;
                case /* envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig consistent_hashing_lb_config */ 7:
                    message.consistentHashingLbConfig = Cluster_CommonLbConfig_ConsistentHashingLbConfig.internalBinaryRead(reader, reader.uint32(), options, message.consistentHashingLbConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_CommonLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.Percent healthy_panic_threshold = 1; */
        if (message.healthyPanicThreshold)
            Percent.internalBinaryWrite(message.healthyPanicThreshold, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig zone_aware_lb_config = 2; */
        if (message.localityConfigSpecifier.oneofKind === "zoneAwareLbConfig")
            Cluster_CommonLbConfig_ZoneAwareLbConfig.internalBinaryWrite(message.localityConfigSpecifier.zoneAwareLbConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 3; */
        if (message.localityConfigSpecifier.oneofKind === "localityWeightedLbConfig")
            Cluster_CommonLbConfig_LocalityWeightedLbConfig.internalBinaryWrite(message.localityConfigSpecifier.localityWeightedLbConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration update_merge_window = 4; */
        if (message.updateMergeWindow)
            Duration.internalBinaryWrite(message.updateMergeWindow, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool ignore_new_hosts_until_first_hc = 5; */
        if (message.ignoreNewHostsUntilFirstHc !== false)
            writer.tag(5, WireType.Varint).bool(message.ignoreNewHostsUntilFirstHc);
        /* bool close_connections_on_host_set_change = 6; */
        if (message.closeConnectionsOnHostSetChange !== false)
            writer.tag(6, WireType.Varint).bool(message.closeConnectionsOnHostSetChange);
        /* envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig consistent_hashing_lb_config = 7; */
        if (message.consistentHashingLbConfig)
            Cluster_CommonLbConfig_ConsistentHashingLbConfig.internalBinaryWrite(message.consistentHashingLbConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.CommonLbConfig
 */
export const Cluster_CommonLbConfig = new Cluster_CommonLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_CommonLbConfig_ZoneAwareLbConfig$Type extends MessageType<Cluster_CommonLbConfig_ZoneAwareLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig", [
            { no: 1, name: "routing_enabled", kind: "message", T: () => Percent },
            { no: 2, name: "min_cluster_size", kind: "message", T: () => UInt64Value },
            { no: 3, name: "fail_traffic_on_panic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_CommonLbConfig_ZoneAwareLbConfig>): Cluster_CommonLbConfig_ZoneAwareLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.failTrafficOnPanic = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster_CommonLbConfig_ZoneAwareLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_CommonLbConfig_ZoneAwareLbConfig): Cluster_CommonLbConfig_ZoneAwareLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.Percent routing_enabled */ 1:
                    message.routingEnabled = Percent.internalBinaryRead(reader, reader.uint32(), options, message.routingEnabled);
                    break;
                case /* google.protobuf.UInt64Value min_cluster_size */ 2:
                    message.minClusterSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.minClusterSize);
                    break;
                case /* bool fail_traffic_on_panic */ 3:
                    message.failTrafficOnPanic = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_CommonLbConfig_ZoneAwareLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.Percent routing_enabled = 1; */
        if (message.routingEnabled)
            Percent.internalBinaryWrite(message.routingEnabled, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value min_cluster_size = 2; */
        if (message.minClusterSize)
            UInt64Value.internalBinaryWrite(message.minClusterSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool fail_traffic_on_panic = 3; */
        if (message.failTrafficOnPanic !== false)
            writer.tag(3, WireType.Varint).bool(message.failTrafficOnPanic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig
 */
export const Cluster_CommonLbConfig_ZoneAwareLbConfig = new Cluster_CommonLbConfig_ZoneAwareLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_CommonLbConfig_LocalityWeightedLbConfig$Type extends MessageType<Cluster_CommonLbConfig_LocalityWeightedLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig", []);
    }
    create(value?: PartialMessage<Cluster_CommonLbConfig_LocalityWeightedLbConfig>): Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Cluster_CommonLbConfig_LocalityWeightedLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_CommonLbConfig_LocalityWeightedLbConfig): Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Cluster_CommonLbConfig_LocalityWeightedLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig
 */
export const Cluster_CommonLbConfig_LocalityWeightedLbConfig = new Cluster_CommonLbConfig_LocalityWeightedLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_CommonLbConfig_ConsistentHashingLbConfig$Type extends MessageType<Cluster_CommonLbConfig_ConsistentHashingLbConfig> {
    constructor() {
        super("envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig", [
            { no: 1, name: "use_hostname_for_hashing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Cluster_CommonLbConfig_ConsistentHashingLbConfig>): Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.useHostnameForHashing = false;
        if (value !== undefined)
            reflectionMergePartial<Cluster_CommonLbConfig_ConsistentHashingLbConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_CommonLbConfig_ConsistentHashingLbConfig): Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_hostname_for_hashing */ 1:
                    message.useHostnameForHashing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_CommonLbConfig_ConsistentHashingLbConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_hostname_for_hashing = 1; */
        if (message.useHostnameForHashing !== false)
            writer.tag(1, WireType.Varint).bool(message.useHostnameForHashing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfig
 */
export const Cluster_CommonLbConfig_ConsistentHashingLbConfig = new Cluster_CommonLbConfig_ConsistentHashingLbConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cluster_RefreshRate$Type extends MessageType<Cluster_RefreshRate> {
    constructor() {
        super("envoy.api.v2.Cluster.RefreshRate", [
            { no: 1, name: "base_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, gt: { nanos: 1000000 } } } } },
            { no: 2, name: "max_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: { nanos: 1000000 } } } } }
        ]);
    }
    create(value?: PartialMessage<Cluster_RefreshRate>): Cluster_RefreshRate {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Cluster_RefreshRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cluster_RefreshRate): Cluster_RefreshRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration base_interval */ 1:
                    message.baseInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.baseInterval);
                    break;
                case /* google.protobuf.Duration max_interval */ 2:
                    message.maxInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxInterval);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cluster_RefreshRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration base_interval = 1; */
        if (message.baseInterval)
            Duration.internalBinaryWrite(message.baseInterval, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration max_interval = 2; */
        if (message.maxInterval)
            Duration.internalBinaryWrite(message.maxInterval, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.Cluster.RefreshRate
 */
export const Cluster_RefreshRate = new Cluster_RefreshRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadBalancingPolicy$Type extends MessageType<LoadBalancingPolicy> {
    constructor() {
        super("envoy.api.v2.LoadBalancingPolicy", [
            { no: 1, name: "policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadBalancingPolicy_Policy }
        ]);
    }
    create(value?: PartialMessage<LoadBalancingPolicy>): LoadBalancingPolicy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policies = [];
        if (value !== undefined)
            reflectionMergePartial<LoadBalancingPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadBalancingPolicy): LoadBalancingPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.api.v2.LoadBalancingPolicy.Policy policies */ 1:
                    message.policies.push(LoadBalancingPolicy_Policy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadBalancingPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.api.v2.LoadBalancingPolicy.Policy policies = 1; */
        for (let i = 0; i < message.policies.length; i++)
            LoadBalancingPolicy_Policy.internalBinaryWrite(message.policies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.LoadBalancingPolicy
 */
export const LoadBalancingPolicy = new LoadBalancingPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadBalancingPolicy_Policy$Type extends MessageType<LoadBalancingPolicy_Policy> {
    constructor() {
        super("envoy.api.v2.LoadBalancingPolicy.Policy", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "config", kind: "message", T: () => Struct },
            { no: 3, name: "typed_config", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<LoadBalancingPolicy_Policy>): LoadBalancingPolicy_Policy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LoadBalancingPolicy_Policy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadBalancingPolicy_Policy): LoadBalancingPolicy_Policy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct config = 2 [deprecated = true];*/ 2:
                    message.config = Struct.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.typedConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.typedConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadBalancingPolicy_Policy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct config = 2 [deprecated = true]; */
        if (message.config)
            Struct.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any typed_config = 3; */
        if (message.typedConfig)
            Any.internalBinaryWrite(message.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.LoadBalancingPolicy.Policy
 */
export const LoadBalancingPolicy_Policy = new LoadBalancingPolicy_Policy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpstreamBindConfig$Type extends MessageType<UpstreamBindConfig> {
    constructor() {
        super("envoy.api.v2.UpstreamBindConfig", [
            { no: 1, name: "source_address", kind: "message", T: () => Address }
        ]);
    }
    create(value?: PartialMessage<UpstreamBindConfig>): UpstreamBindConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpstreamBindConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpstreamBindConfig): UpstreamBindConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.Address source_address */ 1:
                    message.sourceAddress = Address.internalBinaryRead(reader, reader.uint32(), options, message.sourceAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpstreamBindConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.Address source_address = 1; */
        if (message.sourceAddress)
            Address.internalBinaryWrite(message.sourceAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.UpstreamBindConfig
 */
export const UpstreamBindConfig = new UpstreamBindConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpstreamConnectionOptions$Type extends MessageType<UpstreamConnectionOptions> {
    constructor() {
        super("envoy.api.v2.UpstreamConnectionOptions", [
            { no: 1, name: "tcp_keepalive", kind: "message", T: () => TcpKeepalive }
        ]);
    }
    create(value?: PartialMessage<UpstreamConnectionOptions>): UpstreamConnectionOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpstreamConnectionOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpstreamConnectionOptions): UpstreamConnectionOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.TcpKeepalive tcp_keepalive */ 1:
                    message.tcpKeepalive = TcpKeepalive.internalBinaryRead(reader, reader.uint32(), options, message.tcpKeepalive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpstreamConnectionOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.TcpKeepalive tcp_keepalive = 1; */
        if (message.tcpKeepalive)
            TcpKeepalive.internalBinaryWrite(message.tcpKeepalive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.api.v2.UpstreamConnectionOptions
 */
export const UpstreamConnectionOptions = new UpstreamConnectionOptions$Type();
