// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v2alpha/config_dump.proto (package envoy.admin.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3, Timestamp } from "@bufbuild/protobuf";
import { Bootstrap } from "../../config/bootstrap/v2/bootstrap_pb.js";

/**
 * The :ref:`/config_dump <operations_admin_interface_config_dump>` admin endpoint uses this wrapper
 * message to maintain and serve arbitrary configuration information from any component in Envoy.
 *
 * @generated from message envoy.admin.v2alpha.ConfigDump
 */
export const ConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.ConfigDump",
  () => [
    { no: 1, name: "configs", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v2alpha.UpdateFailureState
 */
export const UpdateFailureState = proto3.makeMessageType(
  "envoy.admin.v2alpha.UpdateFailureState",
  () => [
    { no: 1, name: "failed_configuration", kind: "message", T: Any },
    { no: 2, name: "last_update_attempt", kind: "message", T: Timestamp },
    { no: 3, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * This message describes the bootstrap configuration that Envoy was started with. This includes
 * any CLI overrides that were merged. Bootstrap configuration information can be used to recreate
 * the static portions of an Envoy configuration by reusing the output as the bootstrap
 * configuration for another Envoy.
 *
 * @generated from message envoy.admin.v2alpha.BootstrapConfigDump
 */
export const BootstrapConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.BootstrapConfigDump",
  () => [
    { no: 1, name: "bootstrap", kind: "message", T: Bootstrap },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
);

/**
 * Envoy's listener manager fills this message with all currently known listeners. Listener
 * configuration information can be used to recreate an Envoy configuration by populating all
 * listeners as static listeners or by returning them in a LDS response.
 *
 * @generated from message envoy.admin.v2alpha.ListenersConfigDump
 */
export const ListenersConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.ListenersConfigDump",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_listeners", kind: "message", T: ListenersConfigDump_StaticListener, repeated: true },
    { no: 3, name: "dynamic_listeners", kind: "message", T: ListenersConfigDump_DynamicListener, repeated: true },
  ],
);

/**
 * Describes a statically loaded listener.
 *
 * @generated from message envoy.admin.v2alpha.ListenersConfigDump.StaticListener
 */
export const ListenersConfigDump_StaticListener = proto3.makeMessageType(
  "envoy.admin.v2alpha.ListenersConfigDump.StaticListener",
  () => [
    { no: 1, name: "listener", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ListenersConfigDump_StaticListener"},
);

/**
 * @generated from message envoy.admin.v2alpha.ListenersConfigDump.DynamicListenerState
 */
export const ListenersConfigDump_DynamicListenerState = proto3.makeMessageType(
  "envoy.admin.v2alpha.ListenersConfigDump.DynamicListenerState",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "listener", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ListenersConfigDump_DynamicListenerState"},
);

/**
 * Describes a dynamically loaded listener via the LDS API.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.admin.v2alpha.ListenersConfigDump.DynamicListener
 */
export const ListenersConfigDump_DynamicListener = proto3.makeMessageType(
  "envoy.admin.v2alpha.ListenersConfigDump.DynamicListener",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 3, name: "warming_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 4, name: "draining_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 5, name: "error_state", kind: "message", T: UpdateFailureState },
  ],
  {localName: "ListenersConfigDump_DynamicListener"},
);

/**
 * Envoy's cluster manager fills this message with all currently known clusters. Cluster
 * configuration information can be used to recreate an Envoy configuration by populating all
 * clusters as static clusters or by returning them in a CDS response.
 *
 * @generated from message envoy.admin.v2alpha.ClustersConfigDump
 */
export const ClustersConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.ClustersConfigDump",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_clusters", kind: "message", T: ClustersConfigDump_StaticCluster, repeated: true },
    { no: 3, name: "dynamic_active_clusters", kind: "message", T: ClustersConfigDump_DynamicCluster, repeated: true },
    { no: 4, name: "dynamic_warming_clusters", kind: "message", T: ClustersConfigDump_DynamicCluster, repeated: true },
  ],
);

/**
 * Describes a statically loaded cluster.
 *
 * @generated from message envoy.admin.v2alpha.ClustersConfigDump.StaticCluster
 */
export const ClustersConfigDump_StaticCluster = proto3.makeMessageType(
  "envoy.admin.v2alpha.ClustersConfigDump.StaticCluster",
  () => [
    { no: 1, name: "cluster", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ClustersConfigDump_StaticCluster"},
);

/**
 * Describes a dynamically loaded cluster via the CDS API.
 *
 * @generated from message envoy.admin.v2alpha.ClustersConfigDump.DynamicCluster
 */
export const ClustersConfigDump_DynamicCluster = proto3.makeMessageType(
  "envoy.admin.v2alpha.ClustersConfigDump.DynamicCluster",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ClustersConfigDump_DynamicCluster"},
);

/**
 * Envoy's RDS implementation fills this message with all currently loaded routes, as described by
 * their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration
 * or defined inline while configuring listeners are separated from those configured dynamically via RDS.
 * Route configuration information can be used to recreate an Envoy configuration by populating all routes
 * as static routes or by returning them in RDS responses.
 *
 * @generated from message envoy.admin.v2alpha.RoutesConfigDump
 */
export const RoutesConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.RoutesConfigDump",
  () => [
    { no: 2, name: "static_route_configs", kind: "message", T: RoutesConfigDump_StaticRouteConfig, repeated: true },
    { no: 3, name: "dynamic_route_configs", kind: "message", T: RoutesConfigDump_DynamicRouteConfig, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v2alpha.RoutesConfigDump.StaticRouteConfig
 */
export const RoutesConfigDump_StaticRouteConfig = proto3.makeMessageType(
  "envoy.admin.v2alpha.RoutesConfigDump.StaticRouteConfig",
  () => [
    { no: 1, name: "route_config", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "RoutesConfigDump_StaticRouteConfig"},
);

/**
 * @generated from message envoy.admin.v2alpha.RoutesConfigDump.DynamicRouteConfig
 */
export const RoutesConfigDump_DynamicRouteConfig = proto3.makeMessageType(
  "envoy.admin.v2alpha.RoutesConfigDump.DynamicRouteConfig",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "route_config", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "RoutesConfigDump_DynamicRouteConfig"},
);

/**
 * Envoy's scoped RDS implementation fills this message with all currently loaded route
 * configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both
 * the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the
 * dynamically obtained scopes via the SRDS API.
 *
 * @generated from message envoy.admin.v2alpha.ScopedRoutesConfigDump
 */
export const ScopedRoutesConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.ScopedRoutesConfigDump",
  () => [
    { no: 1, name: "inline_scoped_route_configs", kind: "message", T: ScopedRoutesConfigDump_InlineScopedRouteConfigs, repeated: true },
    { no: 2, name: "dynamic_scoped_route_configs", kind: "message", T: ScopedRoutesConfigDump_DynamicScopedRouteConfigs, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v2alpha.ScopedRoutesConfigDump.InlineScopedRouteConfigs
 */
export const ScopedRoutesConfigDump_InlineScopedRouteConfigs = proto3.makeMessageType(
  "envoy.admin.v2alpha.ScopedRoutesConfigDump.InlineScopedRouteConfigs",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scoped_route_configs", kind: "message", T: Any, repeated: true },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ScopedRoutesConfigDump_InlineScopedRouteConfigs"},
);

/**
 * @generated from message envoy.admin.v2alpha.ScopedRoutesConfigDump.DynamicScopedRouteConfigs
 */
export const ScopedRoutesConfigDump_DynamicScopedRouteConfigs = proto3.makeMessageType(
  "envoy.admin.v2alpha.ScopedRoutesConfigDump.DynamicScopedRouteConfigs",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scoped_route_configs", kind: "message", T: Any, repeated: true },
    { no: 4, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ScopedRoutesConfigDump_DynamicScopedRouteConfigs"},
);

/**
 * Envoys SDS implementation fills this message with all secrets fetched dynamically via SDS.
 *
 * @generated from message envoy.admin.v2alpha.SecretsConfigDump
 */
export const SecretsConfigDump = proto3.makeMessageType(
  "envoy.admin.v2alpha.SecretsConfigDump",
  () => [
    { no: 1, name: "static_secrets", kind: "message", T: SecretsConfigDump_StaticSecret, repeated: true },
    { no: 2, name: "dynamic_active_secrets", kind: "message", T: SecretsConfigDump_DynamicSecret, repeated: true },
    { no: 3, name: "dynamic_warming_secrets", kind: "message", T: SecretsConfigDump_DynamicSecret, repeated: true },
  ],
);

/**
 * DynamicSecret contains secret information fetched via SDS.
 *
 * @generated from message envoy.admin.v2alpha.SecretsConfigDump.DynamicSecret
 */
export const SecretsConfigDump_DynamicSecret = proto3.makeMessageType(
  "envoy.admin.v2alpha.SecretsConfigDump.DynamicSecret",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
    { no: 4, name: "secret", kind: "message", T: Any },
  ],
  {localName: "SecretsConfigDump_DynamicSecret"},
);

/**
 * StaticSecret specifies statically loaded secret in bootstrap.
 *
 * @generated from message envoy.admin.v2alpha.SecretsConfigDump.StaticSecret
 */
export const SecretsConfigDump_StaticSecret = proto3.makeMessageType(
  "envoy.admin.v2alpha.SecretsConfigDump.StaticSecret",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
    { no: 3, name: "secret", kind: "message", T: Any },
  ],
  {localName: "SecretsConfigDump_StaticSecret"},
);

