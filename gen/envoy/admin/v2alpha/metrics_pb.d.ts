// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v2alpha/metrics.proto (package envoy.admin.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Proto representation of an Envoy Counter or Gauge value.
 *
 * @generated from message envoy.admin.v2alpha.SimpleMetric
 */
export declare class SimpleMetric extends Message<SimpleMetric> {
  /**
   * Type of the metric represented.
   *
   * @generated from field: envoy.admin.v2alpha.SimpleMetric.Type type = 1;
   */
  type: SimpleMetric_Type;

  /**
   * Current metric value.
   *
   * @generated from field: uint64 value = 2;
   */
  value: bigint;

  /**
   * Name of the metric.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  constructor(data?: PartialMessage<SimpleMetric>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v2alpha.SimpleMetric";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleMetric;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleMetric;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleMetric;

  static equals(a: SimpleMetric | PlainMessage<SimpleMetric> | undefined, b: SimpleMetric | PlainMessage<SimpleMetric> | undefined): boolean;
}

/**
 * @generated from enum envoy.admin.v2alpha.SimpleMetric.Type
 */
export declare enum SimpleMetric_Type {
  /**
   * @generated from enum value: COUNTER = 0;
   */
  COUNTER = 0,

  /**
   * @generated from enum value: GAUGE = 1;
   */
  GAUGE = 1,
}

