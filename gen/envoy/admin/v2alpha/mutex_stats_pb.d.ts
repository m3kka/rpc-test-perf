// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v2alpha/mutex_stats.proto (package envoy.admin.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
 * under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
 * [docs](https://abseil.io/about/design/mutex#extra-features).
 *
 * *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
 * correspond to core clock frequency. For more information, see the `CycleClock`
 * [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
 *
 * @generated from message envoy.admin.v2alpha.MutexStats
 */
export declare class MutexStats extends Message<MutexStats> {
  /**
   * The number of individual mutex contentions which have occurred since startup.
   *
   * @generated from field: uint64 num_contentions = 1;
   */
  numContentions: bigint;

  /**
   * The length of the current contention wait cycle.
   *
   * @generated from field: uint64 current_wait_cycles = 2;
   */
  currentWaitCycles: bigint;

  /**
   * The lifetime total of all contention wait cycles.
   *
   * @generated from field: uint64 lifetime_wait_cycles = 3;
   */
  lifetimeWaitCycles: bigint;

  constructor(data?: PartialMessage<MutexStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v2alpha.MutexStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutexStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutexStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutexStats;

  static equals(a: MutexStats | PlainMessage<MutexStats> | undefined, b: MutexStats | PlainMessage<MutexStats> | undefined): boolean;
}

