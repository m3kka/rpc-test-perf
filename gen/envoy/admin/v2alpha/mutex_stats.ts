// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v2alpha/mutex_stats.proto" (package "envoy.admin.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: MutexStats]

/**
 * Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
 * under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
 * [docs](https://abseil.io/about/design/mutex#extra-features).
 *
 * *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
 * correspond to core clock frequency. For more information, see the `CycleClock`
 * [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
 *
 * @generated from protobuf message envoy.admin.v2alpha.MutexStats
 */
export interface MutexStats {
    /**
     * The number of individual mutex contentions which have occurred since startup.
     *
     * @generated from protobuf field: uint64 num_contentions = 1;
     */
    numContentions: bigint;
    /**
     * The length of the current contention wait cycle.
     *
     * @generated from protobuf field: uint64 current_wait_cycles = 2;
     */
    currentWaitCycles: bigint;
    /**
     * The lifetime total of all contention wait cycles.
     *
     * @generated from protobuf field: uint64 lifetime_wait_cycles = 3;
     */
    lifetimeWaitCycles: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class MutexStats$Type extends MessageType<MutexStats> {
    constructor() {
        super("envoy.admin.v2alpha.MutexStats", [
            { no: 1, name: "num_contentions", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "current_wait_cycles", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "lifetime_wait_cycles", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MutexStats>): MutexStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numContentions = 0n;
        message.currentWaitCycles = 0n;
        message.lifetimeWaitCycles = 0n;
        if (value !== undefined)
            reflectionMergePartial<MutexStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutexStats): MutexStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 num_contentions */ 1:
                    message.numContentions = reader.uint64().toBigInt();
                    break;
                case /* uint64 current_wait_cycles */ 2:
                    message.currentWaitCycles = reader.uint64().toBigInt();
                    break;
                case /* uint64 lifetime_wait_cycles */ 3:
                    message.lifetimeWaitCycles = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MutexStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 num_contentions = 1; */
        if (message.numContentions !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.numContentions);
        /* uint64 current_wait_cycles = 2; */
        if (message.currentWaitCycles !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.currentWaitCycles);
        /* uint64 lifetime_wait_cycles = 3; */
        if (message.lifetimeWaitCycles !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.lifetimeWaitCycles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.MutexStats
 */
export const MutexStats = new MutexStats$Type();
