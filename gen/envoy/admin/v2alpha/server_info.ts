// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v2alpha/server_info.proto" (package "envoy.admin.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
// [#protodoc-title: Server State]

/**
 * Proto representation of the value returned by /server_info, containing
 * server version/server status information.
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.admin.v2alpha.ServerInfo
 */
export interface ServerInfo {
    /**
     * Server version.
     *
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * State of the server.
     *
     * @generated from protobuf field: envoy.admin.v2alpha.ServerInfo.State state = 2;
     */
    state: ServerInfo_State;
    /**
     * Uptime since current epoch was started.
     *
     * @generated from protobuf field: google.protobuf.Duration uptime_current_epoch = 3;
     */
    uptimeCurrentEpoch?: Duration;
    /**
     * Uptime since the start of the first epoch.
     *
     * @generated from protobuf field: google.protobuf.Duration uptime_all_epochs = 4;
     */
    uptimeAllEpochs?: Duration;
    /**
     * Hot restart version.
     *
     * @generated from protobuf field: string hot_restart_version = 5;
     */
    hotRestartVersion: string;
    /**
     * Command line options the server is currently running with.
     *
     * @generated from protobuf field: envoy.admin.v2alpha.CommandLineOptions command_line_options = 6;
     */
    commandLineOptions?: CommandLineOptions;
}
/**
 * @generated from protobuf enum envoy.admin.v2alpha.ServerInfo.State
 */
export enum ServerInfo_State {
    /**
     * Server is live and serving traffic.
     *
     * @generated from protobuf enum value: LIVE = 0;
     */
    LIVE = 0,
    /**
     * Server is draining listeners in response to external health checks failing.
     *
     * @generated from protobuf enum value: DRAINING = 1;
     */
    DRAINING = 1,
    /**
     * Server has not yet completed cluster manager initialization.
     *
     * @generated from protobuf enum value: PRE_INITIALIZING = 2;
     */
    PRE_INITIALIZING = 2,
    /**
     * Server is running the cluster manager initialization callbacks (e.g., RDS).
     *
     * @generated from protobuf enum value: INITIALIZING = 3;
     */
    INITIALIZING = 3
}
/**
 * [#next-free-field: 29]
 *
 * @generated from protobuf message envoy.admin.v2alpha.CommandLineOptions
 */
export interface CommandLineOptions {
    /**
     * See :option:`--base-id` for details.
     *
     * @generated from protobuf field: uint64 base_id = 1;
     */
    baseId: bigint;
    /**
     * See :option:`--concurrency` for details.
     *
     * @generated from protobuf field: uint32 concurrency = 2;
     */
    concurrency: number;
    /**
     * See :option:`--config-path` for details.
     *
     * @generated from protobuf field: string config_path = 3;
     */
    configPath: string;
    /**
     * See :option:`--config-yaml` for details.
     *
     * @generated from protobuf field: string config_yaml = 4;
     */
    configYaml: string;
    /**
     * See :option:`--allow-unknown-static-fields` for details.
     *
     * @generated from protobuf field: bool allow_unknown_static_fields = 5;
     */
    allowUnknownStaticFields: boolean;
    /**
     * See :option:`--reject-unknown-dynamic-fields` for details.
     *
     * @generated from protobuf field: bool reject_unknown_dynamic_fields = 26;
     */
    rejectUnknownDynamicFields: boolean;
    /**
     * See :option:`--admin-address-path` for details.
     *
     * @generated from protobuf field: string admin_address_path = 6;
     */
    adminAddressPath: string;
    /**
     * See :option:`--local-address-ip-version` for details.
     *
     * @generated from protobuf field: envoy.admin.v2alpha.CommandLineOptions.IpVersion local_address_ip_version = 7;
     */
    localAddressIpVersion: CommandLineOptions_IpVersion;
    /**
     * See :option:`--log-level` for details.
     *
     * @generated from protobuf field: string log_level = 8;
     */
    logLevel: string;
    /**
     * See :option:`--component-log-level` for details.
     *
     * @generated from protobuf field: string component_log_level = 9;
     */
    componentLogLevel: string;
    /**
     * See :option:`--log-format` for details.
     *
     * @generated from protobuf field: string log_format = 10;
     */
    logFormat: string;
    /**
     * See :option:`--log-format-escaped` for details.
     *
     * @generated from protobuf field: bool log_format_escaped = 27;
     */
    logFormatEscaped: boolean;
    /**
     * See :option:`--log-path` for details.
     *
     * @generated from protobuf field: string log_path = 11;
     */
    logPath: string;
    /**
     * See :option:`--service-cluster` for details.
     *
     * @generated from protobuf field: string service_cluster = 13;
     */
    serviceCluster: string;
    /**
     * See :option:`--service-node` for details.
     *
     * @generated from protobuf field: string service_node = 14;
     */
    serviceNode: string;
    /**
     * See :option:`--service-zone` for details.
     *
     * @generated from protobuf field: string service_zone = 15;
     */
    serviceZone: string;
    /**
     * See :option:`--file-flush-interval-msec` for details.
     *
     * @generated from protobuf field: google.protobuf.Duration file_flush_interval = 16;
     */
    fileFlushInterval?: Duration;
    /**
     * See :option:`--drain-time-s` for details.
     *
     * @generated from protobuf field: google.protobuf.Duration drain_time = 17;
     */
    drainTime?: Duration;
    /**
     * See :option:`--parent-shutdown-time-s` for details.
     *
     * @generated from protobuf field: google.protobuf.Duration parent_shutdown_time = 18;
     */
    parentShutdownTime?: Duration;
    /**
     * See :option:`--mode` for details.
     *
     * @generated from protobuf field: envoy.admin.v2alpha.CommandLineOptions.Mode mode = 19;
     */
    mode: CommandLineOptions_Mode;
    /**
     * max_stats and max_obj_name_len are now unused and have no effect.
     *
     * @deprecated
     * @generated from protobuf field: uint64 max_stats = 20 [deprecated = true];
     */
    maxStats: bigint;
    /**
     * @deprecated
     * @generated from protobuf field: uint64 max_obj_name_len = 21 [deprecated = true];
     */
    maxObjNameLen: bigint;
    /**
     * See :option:`--disable-hot-restart` for details.
     *
     * @generated from protobuf field: bool disable_hot_restart = 22;
     */
    disableHotRestart: boolean;
    /**
     * See :option:`--enable-mutex-tracing` for details.
     *
     * @generated from protobuf field: bool enable_mutex_tracing = 23;
     */
    enableMutexTracing: boolean;
    /**
     * See :option:`--restart-epoch` for details.
     *
     * @generated from protobuf field: uint32 restart_epoch = 24;
     */
    restartEpoch: number;
    /**
     * See :option:`--cpuset-threads` for details.
     *
     * @generated from protobuf field: bool cpuset_threads = 25;
     */
    cpusetThreads: boolean;
    /**
     * See :option:`--disable-extensions` for details.
     *
     * @generated from protobuf field: repeated string disabled_extensions = 28;
     */
    disabledExtensions: string[];
}
/**
 * @generated from protobuf enum envoy.admin.v2alpha.CommandLineOptions.IpVersion
 */
export enum CommandLineOptions_IpVersion {
    /**
     * @generated from protobuf enum value: v4 = 0;
     */
    v4 = 0,
    /**
     * @generated from protobuf enum value: v6 = 1;
     */
    v6 = 1
}
/**
 * @generated from protobuf enum envoy.admin.v2alpha.CommandLineOptions.Mode
 */
export enum CommandLineOptions_Mode {
    /**
     * Validate configs and then serve traffic normally.
     *
     * @generated from protobuf enum value: Serve = 0;
     */
    Serve = 0,
    /**
     * Validate configs and exit.
     *
     * @generated from protobuf enum value: Validate = 1;
     */
    Validate = 1,
    /**
     * Completely load and initialize the config, and then exit without running the listener loop.
     *
     * @generated from protobuf enum value: InitOnly = 2;
     */
    InitOnly = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ServerInfo$Type extends MessageType<ServerInfo> {
    constructor() {
        super("envoy.admin.v2alpha.ServerInfo", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "enum", T: () => ["envoy.admin.v2alpha.ServerInfo.State", ServerInfo_State] },
            { no: 3, name: "uptime_current_epoch", kind: "message", T: () => Duration },
            { no: 4, name: "uptime_all_epochs", kind: "message", T: () => Duration },
            { no: 5, name: "hot_restart_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "command_line_options", kind: "message", T: () => CommandLineOptions }
        ]);
    }
    create(value?: PartialMessage<ServerInfo>): ServerInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.state = 0;
        message.hotRestartVersion = "";
        if (value !== undefined)
            reflectionMergePartial<ServerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerInfo): ServerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* envoy.admin.v2alpha.ServerInfo.State state */ 2:
                    message.state = reader.int32();
                    break;
                case /* google.protobuf.Duration uptime_current_epoch */ 3:
                    message.uptimeCurrentEpoch = Duration.internalBinaryRead(reader, reader.uint32(), options, message.uptimeCurrentEpoch);
                    break;
                case /* google.protobuf.Duration uptime_all_epochs */ 4:
                    message.uptimeAllEpochs = Duration.internalBinaryRead(reader, reader.uint32(), options, message.uptimeAllEpochs);
                    break;
                case /* string hot_restart_version */ 5:
                    message.hotRestartVersion = reader.string();
                    break;
                case /* envoy.admin.v2alpha.CommandLineOptions command_line_options */ 6:
                    message.commandLineOptions = CommandLineOptions.internalBinaryRead(reader, reader.uint32(), options, message.commandLineOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* envoy.admin.v2alpha.ServerInfo.State state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* google.protobuf.Duration uptime_current_epoch = 3; */
        if (message.uptimeCurrentEpoch)
            Duration.internalBinaryWrite(message.uptimeCurrentEpoch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration uptime_all_epochs = 4; */
        if (message.uptimeAllEpochs)
            Duration.internalBinaryWrite(message.uptimeAllEpochs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string hot_restart_version = 5; */
        if (message.hotRestartVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.hotRestartVersion);
        /* envoy.admin.v2alpha.CommandLineOptions command_line_options = 6; */
        if (message.commandLineOptions)
            CommandLineOptions.internalBinaryWrite(message.commandLineOptions, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.ServerInfo
 */
export const ServerInfo = new ServerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandLineOptions$Type extends MessageType<CommandLineOptions> {
    constructor() {
        super("envoy.admin.v2alpha.CommandLineOptions", [
            { no: 1, name: "base_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "concurrency", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "config_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "config_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "allow_unknown_static_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "reject_unknown_dynamic_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "admin_address_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "local_address_ip_version", kind: "enum", T: () => ["envoy.admin.v2alpha.CommandLineOptions.IpVersion", CommandLineOptions_IpVersion] },
            { no: 8, name: "log_level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "component_log_level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "log_format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "log_format_escaped", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "log_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "service_cluster", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "service_node", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "service_zone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "file_flush_interval", kind: "message", T: () => Duration },
            { no: 17, name: "drain_time", kind: "message", T: () => Duration },
            { no: 18, name: "parent_shutdown_time", kind: "message", T: () => Duration },
            { no: 19, name: "mode", kind: "enum", T: () => ["envoy.admin.v2alpha.CommandLineOptions.Mode", CommandLineOptions_Mode] },
            { no: 20, name: "max_stats", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "envoy.annotations.disallowed_by_default": true } },
            { no: 21, name: "max_obj_name_len", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "envoy.annotations.disallowed_by_default": true } },
            { no: 22, name: "disable_hot_restart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "enable_mutex_tracing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "restart_epoch", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 25, name: "cpuset_threads", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "disabled_extensions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandLineOptions>): CommandLineOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.baseId = 0n;
        message.concurrency = 0;
        message.configPath = "";
        message.configYaml = "";
        message.allowUnknownStaticFields = false;
        message.rejectUnknownDynamicFields = false;
        message.adminAddressPath = "";
        message.localAddressIpVersion = 0;
        message.logLevel = "";
        message.componentLogLevel = "";
        message.logFormat = "";
        message.logFormatEscaped = false;
        message.logPath = "";
        message.serviceCluster = "";
        message.serviceNode = "";
        message.serviceZone = "";
        message.mode = 0;
        message.maxStats = 0n;
        message.maxObjNameLen = 0n;
        message.disableHotRestart = false;
        message.enableMutexTracing = false;
        message.restartEpoch = 0;
        message.cpusetThreads = false;
        message.disabledExtensions = [];
        if (value !== undefined)
            reflectionMergePartial<CommandLineOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandLineOptions): CommandLineOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 base_id */ 1:
                    message.baseId = reader.uint64().toBigInt();
                    break;
                case /* uint32 concurrency */ 2:
                    message.concurrency = reader.uint32();
                    break;
                case /* string config_path */ 3:
                    message.configPath = reader.string();
                    break;
                case /* string config_yaml */ 4:
                    message.configYaml = reader.string();
                    break;
                case /* bool allow_unknown_static_fields */ 5:
                    message.allowUnknownStaticFields = reader.bool();
                    break;
                case /* bool reject_unknown_dynamic_fields */ 26:
                    message.rejectUnknownDynamicFields = reader.bool();
                    break;
                case /* string admin_address_path */ 6:
                    message.adminAddressPath = reader.string();
                    break;
                case /* envoy.admin.v2alpha.CommandLineOptions.IpVersion local_address_ip_version */ 7:
                    message.localAddressIpVersion = reader.int32();
                    break;
                case /* string log_level */ 8:
                    message.logLevel = reader.string();
                    break;
                case /* string component_log_level */ 9:
                    message.componentLogLevel = reader.string();
                    break;
                case /* string log_format */ 10:
                    message.logFormat = reader.string();
                    break;
                case /* bool log_format_escaped */ 27:
                    message.logFormatEscaped = reader.bool();
                    break;
                case /* string log_path */ 11:
                    message.logPath = reader.string();
                    break;
                case /* string service_cluster */ 13:
                    message.serviceCluster = reader.string();
                    break;
                case /* string service_node */ 14:
                    message.serviceNode = reader.string();
                    break;
                case /* string service_zone */ 15:
                    message.serviceZone = reader.string();
                    break;
                case /* google.protobuf.Duration file_flush_interval */ 16:
                    message.fileFlushInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.fileFlushInterval);
                    break;
                case /* google.protobuf.Duration drain_time */ 17:
                    message.drainTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.drainTime);
                    break;
                case /* google.protobuf.Duration parent_shutdown_time */ 18:
                    message.parentShutdownTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.parentShutdownTime);
                    break;
                case /* envoy.admin.v2alpha.CommandLineOptions.Mode mode */ 19:
                    message.mode = reader.int32();
                    break;
                case /* uint64 max_stats = 20 [deprecated = true];*/ 20:
                    message.maxStats = reader.uint64().toBigInt();
                    break;
                case /* uint64 max_obj_name_len = 21 [deprecated = true];*/ 21:
                    message.maxObjNameLen = reader.uint64().toBigInt();
                    break;
                case /* bool disable_hot_restart */ 22:
                    message.disableHotRestart = reader.bool();
                    break;
                case /* bool enable_mutex_tracing */ 23:
                    message.enableMutexTracing = reader.bool();
                    break;
                case /* uint32 restart_epoch */ 24:
                    message.restartEpoch = reader.uint32();
                    break;
                case /* bool cpuset_threads */ 25:
                    message.cpusetThreads = reader.bool();
                    break;
                case /* repeated string disabled_extensions */ 28:
                    message.disabledExtensions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandLineOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 base_id = 1; */
        if (message.baseId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.baseId);
        /* uint32 concurrency = 2; */
        if (message.concurrency !== 0)
            writer.tag(2, WireType.Varint).uint32(message.concurrency);
        /* string config_path = 3; */
        if (message.configPath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.configPath);
        /* string config_yaml = 4; */
        if (message.configYaml !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.configYaml);
        /* bool allow_unknown_static_fields = 5; */
        if (message.allowUnknownStaticFields !== false)
            writer.tag(5, WireType.Varint).bool(message.allowUnknownStaticFields);
        /* bool reject_unknown_dynamic_fields = 26; */
        if (message.rejectUnknownDynamicFields !== false)
            writer.tag(26, WireType.Varint).bool(message.rejectUnknownDynamicFields);
        /* string admin_address_path = 6; */
        if (message.adminAddressPath !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.adminAddressPath);
        /* envoy.admin.v2alpha.CommandLineOptions.IpVersion local_address_ip_version = 7; */
        if (message.localAddressIpVersion !== 0)
            writer.tag(7, WireType.Varint).int32(message.localAddressIpVersion);
        /* string log_level = 8; */
        if (message.logLevel !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.logLevel);
        /* string component_log_level = 9; */
        if (message.componentLogLevel !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.componentLogLevel);
        /* string log_format = 10; */
        if (message.logFormat !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.logFormat);
        /* bool log_format_escaped = 27; */
        if (message.logFormatEscaped !== false)
            writer.tag(27, WireType.Varint).bool(message.logFormatEscaped);
        /* string log_path = 11; */
        if (message.logPath !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.logPath);
        /* string service_cluster = 13; */
        if (message.serviceCluster !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.serviceCluster);
        /* string service_node = 14; */
        if (message.serviceNode !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.serviceNode);
        /* string service_zone = 15; */
        if (message.serviceZone !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.serviceZone);
        /* google.protobuf.Duration file_flush_interval = 16; */
        if (message.fileFlushInterval)
            Duration.internalBinaryWrite(message.fileFlushInterval, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration drain_time = 17; */
        if (message.drainTime)
            Duration.internalBinaryWrite(message.drainTime, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration parent_shutdown_time = 18; */
        if (message.parentShutdownTime)
            Duration.internalBinaryWrite(message.parentShutdownTime, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* envoy.admin.v2alpha.CommandLineOptions.Mode mode = 19; */
        if (message.mode !== 0)
            writer.tag(19, WireType.Varint).int32(message.mode);
        /* uint64 max_stats = 20 [deprecated = true]; */
        if (message.maxStats !== 0n)
            writer.tag(20, WireType.Varint).uint64(message.maxStats);
        /* uint64 max_obj_name_len = 21 [deprecated = true]; */
        if (message.maxObjNameLen !== 0n)
            writer.tag(21, WireType.Varint).uint64(message.maxObjNameLen);
        /* bool disable_hot_restart = 22; */
        if (message.disableHotRestart !== false)
            writer.tag(22, WireType.Varint).bool(message.disableHotRestart);
        /* bool enable_mutex_tracing = 23; */
        if (message.enableMutexTracing !== false)
            writer.tag(23, WireType.Varint).bool(message.enableMutexTracing);
        /* uint32 restart_epoch = 24; */
        if (message.restartEpoch !== 0)
            writer.tag(24, WireType.Varint).uint32(message.restartEpoch);
        /* bool cpuset_threads = 25; */
        if (message.cpusetThreads !== false)
            writer.tag(25, WireType.Varint).bool(message.cpusetThreads);
        /* repeated string disabled_extensions = 28; */
        for (let i = 0; i < message.disabledExtensions.length; i++)
            writer.tag(28, WireType.LengthDelimited).string(message.disabledExtensions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.CommandLineOptions
 */
export const CommandLineOptions = new CommandLineOptions$Type();
