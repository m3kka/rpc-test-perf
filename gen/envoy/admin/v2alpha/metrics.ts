// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v2alpha/metrics.proto" (package "envoy.admin.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Metrics]

/**
 * Proto representation of an Envoy Counter or Gauge value.
 *
 * @generated from protobuf message envoy.admin.v2alpha.SimpleMetric
 */
export interface SimpleMetric {
    /**
     * Type of the metric represented.
     *
     * @generated from protobuf field: envoy.admin.v2alpha.SimpleMetric.Type type = 1;
     */
    type: SimpleMetric_Type;
    /**
     * Current metric value.
     *
     * @generated from protobuf field: uint64 value = 2;
     */
    value: bigint;
    /**
     * Name of the metric.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf enum envoy.admin.v2alpha.SimpleMetric.Type
 */
export enum SimpleMetric_Type {
    /**
     * @generated from protobuf enum value: COUNTER = 0;
     */
    COUNTER = 0,
    /**
     * @generated from protobuf enum value: GAUGE = 1;
     */
    GAUGE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SimpleMetric$Type extends MessageType<SimpleMetric> {
    constructor() {
        super("envoy.admin.v2alpha.SimpleMetric", [
            { no: 1, name: "type", kind: "enum", T: () => ["envoy.admin.v2alpha.SimpleMetric.Type", SimpleMetric_Type] },
            { no: 2, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SimpleMetric>): SimpleMetric {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.value = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SimpleMetric>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleMetric): SimpleMetric {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.admin.v2alpha.SimpleMetric.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* uint64 value */ 2:
                    message.value = reader.uint64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleMetric, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.admin.v2alpha.SimpleMetric.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* uint64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.value);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.SimpleMetric
 */
export const SimpleMetric = new SimpleMetric$Type();
