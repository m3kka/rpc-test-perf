// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v2alpha/listeners.proto" (package "envoy.admin.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Address } from "../../api/v2/core/address";
// [#protodoc-title: Listeners]

/**
 * Admin endpoint uses this wrapper for `/listeners` to display listener status information.
 * See :ref:`/listeners <operations_admin_interface_listeners>` for more information.
 *
 * @generated from protobuf message envoy.admin.v2alpha.Listeners
 */
export interface Listeners {
    /**
     * List of listener statuses.
     *
     * @generated from protobuf field: repeated envoy.admin.v2alpha.ListenerStatus listener_statuses = 1;
     */
    listenerStatuses: ListenerStatus[];
}
/**
 * Details an individual listener's current status.
 *
 * @generated from protobuf message envoy.admin.v2alpha.ListenerStatus
 */
export interface ListenerStatus {
    /**
     * Name of the listener
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The actual local address that the listener is listening on. If a listener was configured
     * to listen on port 0, then this address has the port that was allocated by the OS.
     *
     * @generated from protobuf field: envoy.api.v2.core.Address local_address = 2;
     */
    localAddress?: Address;
}
// @generated message type with reflection information, may provide speed optimized methods
class Listeners$Type extends MessageType<Listeners> {
    constructor() {
        super("envoy.admin.v2alpha.Listeners", [
            { no: 1, name: "listener_statuses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListenerStatus }
        ]);
    }
    create(value?: PartialMessage<Listeners>): Listeners {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.listenerStatuses = [];
        if (value !== undefined)
            reflectionMergePartial<Listeners>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Listeners): Listeners {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.admin.v2alpha.ListenerStatus listener_statuses */ 1:
                    message.listenerStatuses.push(ListenerStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Listeners, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.admin.v2alpha.ListenerStatus listener_statuses = 1; */
        for (let i = 0; i < message.listenerStatuses.length; i++)
            ListenerStatus.internalBinaryWrite(message.listenerStatuses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.Listeners
 */
export const Listeners = new Listeners$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenerStatus$Type extends MessageType<ListenerStatus> {
    constructor() {
        super("envoy.admin.v2alpha.ListenerStatus", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "local_address", kind: "message", T: () => Address }
        ]);
    }
    create(value?: PartialMessage<ListenerStatus>): ListenerStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ListenerStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenerStatus): ListenerStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.api.v2.core.Address local_address */ 2:
                    message.localAddress = Address.internalBinaryRead(reader, reader.uint32(), options, message.localAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenerStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.api.v2.core.Address local_address = 2; */
        if (message.localAddress)
            Address.internalBinaryWrite(message.localAddress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v2alpha.ListenerStatus
 */
export const ListenerStatus = new ListenerStatus$Type();
