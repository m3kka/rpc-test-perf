// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v3/config_dump_shared.proto (package envoy.admin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Resource status from the view of a xDS client, which tells the synchronization
 * status between the xDS client and the xDS server.
 *
 * @generated from enum envoy.admin.v3.ClientResourceStatus
 */
export const ClientResourceStatus = proto3.makeEnum(
  "envoy.admin.v3.ClientResourceStatus",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "REQUESTED"},
    {no: 2, name: "DOES_NOT_EXIST"},
    {no: 3, name: "ACKED"},
    {no: 4, name: "NACKED"},
  ],
);

/**
 * @generated from message envoy.admin.v3.UpdateFailureState
 */
export const UpdateFailureState = proto3.makeMessageType(
  "envoy.admin.v3.UpdateFailureState",
  () => [
    { no: 1, name: "failed_configuration", kind: "message", T: Any },
    { no: 2, name: "last_update_attempt", kind: "message", T: Timestamp },
    { no: 3, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Envoy's listener manager fills this message with all currently known listeners. Listener
 * configuration information can be used to recreate an Envoy configuration by populating all
 * listeners as static listeners or by returning them in a LDS response.
 *
 * @generated from message envoy.admin.v3.ListenersConfigDump
 */
export const ListenersConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.ListenersConfigDump",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_listeners", kind: "message", T: ListenersConfigDump_StaticListener, repeated: true },
    { no: 3, name: "dynamic_listeners", kind: "message", T: ListenersConfigDump_DynamicListener, repeated: true },
  ],
);

/**
 * Describes a statically loaded listener.
 *
 * @generated from message envoy.admin.v3.ListenersConfigDump.StaticListener
 */
export const ListenersConfigDump_StaticListener = proto3.makeMessageType(
  "envoy.admin.v3.ListenersConfigDump.StaticListener",
  () => [
    { no: 1, name: "listener", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ListenersConfigDump_StaticListener"},
);

/**
 * @generated from message envoy.admin.v3.ListenersConfigDump.DynamicListenerState
 */
export const ListenersConfigDump_DynamicListenerState = proto3.makeMessageType(
  "envoy.admin.v3.ListenersConfigDump.DynamicListenerState",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "listener", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ListenersConfigDump_DynamicListenerState"},
);

/**
 * Describes a dynamically loaded listener via the LDS API.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.admin.v3.ListenersConfigDump.DynamicListener
 */
export const ListenersConfigDump_DynamicListener = proto3.makeMessageType(
  "envoy.admin.v3.ListenersConfigDump.DynamicListener",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 3, name: "warming_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 4, name: "draining_state", kind: "message", T: ListenersConfigDump_DynamicListenerState },
    { no: 5, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 6, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "ListenersConfigDump_DynamicListener"},
);

/**
 * Envoy's cluster manager fills this message with all currently known clusters. Cluster
 * configuration information can be used to recreate an Envoy configuration by populating all
 * clusters as static clusters or by returning them in a CDS response.
 *
 * @generated from message envoy.admin.v3.ClustersConfigDump
 */
export const ClustersConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.ClustersConfigDump",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_clusters", kind: "message", T: ClustersConfigDump_StaticCluster, repeated: true },
    { no: 3, name: "dynamic_active_clusters", kind: "message", T: ClustersConfigDump_DynamicCluster, repeated: true },
    { no: 4, name: "dynamic_warming_clusters", kind: "message", T: ClustersConfigDump_DynamicCluster, repeated: true },
  ],
);

/**
 * Describes a statically loaded cluster.
 *
 * @generated from message envoy.admin.v3.ClustersConfigDump.StaticCluster
 */
export const ClustersConfigDump_StaticCluster = proto3.makeMessageType(
  "envoy.admin.v3.ClustersConfigDump.StaticCluster",
  () => [
    { no: 1, name: "cluster", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ClustersConfigDump_StaticCluster"},
);

/**
 * Describes a dynamically loaded cluster via the CDS API.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.admin.v3.ClustersConfigDump.DynamicCluster
 */
export const ClustersConfigDump_DynamicCluster = proto3.makeMessageType(
  "envoy.admin.v3.ClustersConfigDump.DynamicCluster",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
    { no: 4, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 5, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "ClustersConfigDump_DynamicCluster"},
);

/**
 * Envoy's RDS implementation fills this message with all currently loaded routes, as described by
 * their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration
 * or defined inline while configuring listeners are separated from those configured dynamically via RDS.
 * Route configuration information can be used to recreate an Envoy configuration by populating all routes
 * as static routes or by returning them in RDS responses.
 *
 * @generated from message envoy.admin.v3.RoutesConfigDump
 */
export const RoutesConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.RoutesConfigDump",
  () => [
    { no: 2, name: "static_route_configs", kind: "message", T: RoutesConfigDump_StaticRouteConfig, repeated: true },
    { no: 3, name: "dynamic_route_configs", kind: "message", T: RoutesConfigDump_DynamicRouteConfig, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v3.RoutesConfigDump.StaticRouteConfig
 */
export const RoutesConfigDump_StaticRouteConfig = proto3.makeMessageType(
  "envoy.admin.v3.RoutesConfigDump.StaticRouteConfig",
  () => [
    { no: 1, name: "route_config", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "RoutesConfigDump_StaticRouteConfig"},
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.admin.v3.RoutesConfigDump.DynamicRouteConfig
 */
export const RoutesConfigDump_DynamicRouteConfig = proto3.makeMessageType(
  "envoy.admin.v3.RoutesConfigDump.DynamicRouteConfig",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "route_config", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
    { no: 4, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 5, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "RoutesConfigDump_DynamicRouteConfig"},
);

/**
 * Envoy's scoped RDS implementation fills this message with all currently loaded route
 * configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both
 * the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the
 * dynamically obtained scopes via the SRDS API.
 *
 * @generated from message envoy.admin.v3.ScopedRoutesConfigDump
 */
export const ScopedRoutesConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.ScopedRoutesConfigDump",
  () => [
    { no: 1, name: "inline_scoped_route_configs", kind: "message", T: ScopedRoutesConfigDump_InlineScopedRouteConfigs, repeated: true },
    { no: 2, name: "dynamic_scoped_route_configs", kind: "message", T: ScopedRoutesConfigDump_DynamicScopedRouteConfigs, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v3.ScopedRoutesConfigDump.InlineScopedRouteConfigs
 */
export const ScopedRoutesConfigDump_InlineScopedRouteConfigs = proto3.makeMessageType(
  "envoy.admin.v3.ScopedRoutesConfigDump.InlineScopedRouteConfigs",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scoped_route_configs", kind: "message", T: Any, repeated: true },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "ScopedRoutesConfigDump_InlineScopedRouteConfigs"},
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.admin.v3.ScopedRoutesConfigDump.DynamicScopedRouteConfigs
 */
export const ScopedRoutesConfigDump_DynamicScopedRouteConfigs = proto3.makeMessageType(
  "envoy.admin.v3.ScopedRoutesConfigDump.DynamicScopedRouteConfigs",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scoped_route_configs", kind: "message", T: Any, repeated: true },
    { no: 4, name: "last_updated", kind: "message", T: Timestamp },
    { no: 5, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 6, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "ScopedRoutesConfigDump_DynamicScopedRouteConfigs"},
);

/**
 * Envoy's admin fill this message with all currently known endpoints. Endpoint
 * configuration information can be used to recreate an Envoy configuration by populating all
 * endpoints as static endpoints or by returning them in an EDS response.
 *
 * @generated from message envoy.admin.v3.EndpointsConfigDump
 */
export const EndpointsConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.EndpointsConfigDump",
  () => [
    { no: 2, name: "static_endpoint_configs", kind: "message", T: EndpointsConfigDump_StaticEndpointConfig, repeated: true },
    { no: 3, name: "dynamic_endpoint_configs", kind: "message", T: EndpointsConfigDump_DynamicEndpointConfig, repeated: true },
  ],
);

/**
 * @generated from message envoy.admin.v3.EndpointsConfigDump.StaticEndpointConfig
 */
export const EndpointsConfigDump_StaticEndpointConfig = proto3.makeMessageType(
  "envoy.admin.v3.EndpointsConfigDump.StaticEndpointConfig",
  () => [
    { no: 1, name: "endpoint_config", kind: "message", T: Any },
    { no: 2, name: "last_updated", kind: "message", T: Timestamp },
  ],
  {localName: "EndpointsConfigDump_StaticEndpointConfig"},
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.admin.v3.EndpointsConfigDump.DynamicEndpointConfig
 */
export const EndpointsConfigDump_DynamicEndpointConfig = proto3.makeMessageType(
  "envoy.admin.v3.EndpointsConfigDump.DynamicEndpointConfig",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint_config", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
    { no: 4, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 5, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "EndpointsConfigDump_DynamicEndpointConfig"},
);

/**
 * Envoy's ECDS service fills this message with all currently extension
 * configuration. Extension configuration information can be used to recreate
 * an Envoy ECDS listener and HTTP filters as static filters or by returning
 * them in ECDS response.
 *
 * @generated from message envoy.admin.v3.EcdsConfigDump
 */
export const EcdsConfigDump = proto3.makeMessageType(
  "envoy.admin.v3.EcdsConfigDump",
  () => [
    { no: 1, name: "ecds_filters", kind: "message", T: EcdsConfigDump_EcdsFilterConfig, repeated: true },
  ],
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.admin.v3.EcdsConfigDump.EcdsFilterConfig
 */
export const EcdsConfigDump_EcdsFilterConfig = proto3.makeMessageType(
  "envoy.admin.v3.EcdsConfigDump.EcdsFilterConfig",
  () => [
    { no: 1, name: "version_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ecds_filter", kind: "message", T: Any },
    { no: 3, name: "last_updated", kind: "message", T: Timestamp },
    { no: 4, name: "error_state", kind: "message", T: UpdateFailureState },
    { no: 5, name: "client_status", kind: "enum", T: proto3.getEnumType(ClientResourceStatus) },
  ],
  {localName: "EcdsConfigDump_EcdsFilterConfig"},
);

