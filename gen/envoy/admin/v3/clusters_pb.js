// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v3/clusters.proto (package envoy.admin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Percent } from "../../type/v3/percent_pb.js";
import { CircuitBreakers } from "../../config/cluster/v3/circuit_breaker_pb.js";
import { Address } from "../../config/core/v3/address_pb.js";
import { SimpleMetric } from "./metrics_pb.js";
import { Locality } from "../../config/core/v3/base_pb.js";
import { HealthStatus } from "../../config/core/v3/health_check_pb.js";

/**
 * Admin endpoint uses this wrapper for ``/clusters`` to display cluster status information.
 * See :ref:`/clusters <operations_admin_interface_clusters>` for more information.
 *
 * @generated from message envoy.admin.v3.Clusters
 */
export const Clusters = proto3.makeMessageType(
  "envoy.admin.v3.Clusters",
  () => [
    { no: 1, name: "cluster_statuses", kind: "message", T: ClusterStatus, repeated: true },
  ],
);

/**
 * Details an individual cluster's current status.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.admin.v3.ClusterStatus
 */
export const ClusterStatus = proto3.makeMessageType(
  "envoy.admin.v3.ClusterStatus",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "added_via_api", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "success_rate_ejection_threshold", kind: "message", T: Percent },
    { no: 4, name: "host_statuses", kind: "message", T: HostStatus, repeated: true },
    { no: 5, name: "local_origin_success_rate_ejection_threshold", kind: "message", T: Percent },
    { no: 6, name: "circuit_breakers", kind: "message", T: CircuitBreakers },
    { no: 7, name: "observability_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "eds_service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Current state of a particular host.
 * [#next-free-field: 10]
 *
 * @generated from message envoy.admin.v3.HostStatus
 */
export const HostStatus = proto3.makeMessageType(
  "envoy.admin.v3.HostStatus",
  () => [
    { no: 1, name: "address", kind: "message", T: Address },
    { no: 2, name: "stats", kind: "message", T: SimpleMetric, repeated: true },
    { no: 3, name: "health_status", kind: "message", T: HostHealthStatus },
    { no: 4, name: "success_rate", kind: "message", T: Percent },
    { no: 5, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "priority", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "local_origin_success_rate", kind: "message", T: Percent },
    { no: 9, name: "locality", kind: "message", T: Locality },
  ],
);

/**
 * Health status for a host.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.admin.v3.HostHealthStatus
 */
export const HostHealthStatus = proto3.makeMessageType(
  "envoy.admin.v3.HostHealthStatus",
  () => [
    { no: 1, name: "failed_active_health_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "failed_outlier_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "failed_active_degraded_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "pending_dynamic_removal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "pending_active_hc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "excluded_via_immediate_hc_fail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "active_hc_timeout", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "eds_health_status", kind: "enum", T: proto3.getEnumType(HealthStatus) },
  ],
);

