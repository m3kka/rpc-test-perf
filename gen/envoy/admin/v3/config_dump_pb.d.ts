// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v3/config_dump.proto (package envoy.admin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Bootstrap } from "../../config/bootstrap/v3/bootstrap_pb.js";
import type { ClientResourceStatus, UpdateFailureState } from "./config_dump_shared_pb.js";

/**
 * The :ref:`/config_dump <operations_admin_interface_config_dump>` admin endpoint uses this wrapper
 * message to maintain and serve arbitrary configuration information from any component in Envoy.
 *
 * @generated from message envoy.admin.v3.ConfigDump
 */
export declare class ConfigDump extends Message<ConfigDump> {
  /**
   * This list is serialized and dumped in its entirety at the
   * :ref:`/config_dump <operations_admin_interface_config_dump>` endpoint.
   *
   * The following configurations are currently supported and will be dumped in the order given
   * below:
   *
   * * ``bootstrap``: :ref:`BootstrapConfigDump <envoy_v3_api_msg_admin.v3.BootstrapConfigDump>`
   * * ``clusters``: :ref:`ClustersConfigDump <envoy_v3_api_msg_admin.v3.ClustersConfigDump>`
   * * ``ecds_filter_http``: :ref:`EcdsConfigDump <envoy_v3_api_msg_admin.v3.EcdsConfigDump>`
   * * ``ecds_filter_tcp_listener``: :ref:`EcdsConfigDump <envoy_v3_api_msg_admin.v3.EcdsConfigDump>`
   * * ``endpoints``:  :ref:`EndpointsConfigDump <envoy_v3_api_msg_admin.v3.EndpointsConfigDump>`
   * * ``listeners``: :ref:`ListenersConfigDump <envoy_v3_api_msg_admin.v3.ListenersConfigDump>`
   * * ``scoped_routes``: :ref:`ScopedRoutesConfigDump <envoy_v3_api_msg_admin.v3.ScopedRoutesConfigDump>`
   * * ``routes``:  :ref:`RoutesConfigDump <envoy_v3_api_msg_admin.v3.RoutesConfigDump>`
   * * ``secrets``:  :ref:`SecretsConfigDump <envoy_v3_api_msg_admin.v3.SecretsConfigDump>`
   *
   * EDS Configuration will only be dumped by using parameter ``?include_eds``
   *
   * Currently ECDS is supported in HTTP and listener filters. Note, ECDS configuration for
   * either HTTP or listener filter will only be dumped if it is actually configured.
   *
   * You can filter output with the resource and mask query parameters.
   * See :ref:`/config_dump?resource={} <operations_admin_interface_config_dump_by_resource>`,
   * :ref:`/config_dump?mask={} <operations_admin_interface_config_dump_by_mask>`,
   * or :ref:`/config_dump?resource={},mask={}
   * <operations_admin_interface_config_dump_by_resource_and_mask>` for more information.
   *
   * @generated from field: repeated google.protobuf.Any configs = 1;
   */
  configs: Any[];

  constructor(data?: PartialMessage<ConfigDump>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.ConfigDump";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigDump;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigDump;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigDump;

  static equals(a: ConfigDump | PlainMessage<ConfigDump> | undefined, b: ConfigDump | PlainMessage<ConfigDump> | undefined): boolean;
}

/**
 * This message describes the bootstrap configuration that Envoy was started with. This includes
 * any CLI overrides that were merged. Bootstrap configuration information can be used to recreate
 * the static portions of an Envoy configuration by reusing the output as the bootstrap
 * configuration for another Envoy.
 *
 * @generated from message envoy.admin.v3.BootstrapConfigDump
 */
export declare class BootstrapConfigDump extends Message<BootstrapConfigDump> {
  /**
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap bootstrap = 1;
   */
  bootstrap?: Bootstrap;

  /**
   * The timestamp when the BootstrapConfig was last updated.
   *
   * @generated from field: google.protobuf.Timestamp last_updated = 2;
   */
  lastUpdated?: Timestamp;

  constructor(data?: PartialMessage<BootstrapConfigDump>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.BootstrapConfigDump";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapConfigDump;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapConfigDump;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapConfigDump;

  static equals(a: BootstrapConfigDump | PlainMessage<BootstrapConfigDump> | undefined, b: BootstrapConfigDump | PlainMessage<BootstrapConfigDump> | undefined): boolean;
}

/**
 * Envoys SDS implementation fills this message with all secrets fetched dynamically via SDS.
 *
 * @generated from message envoy.admin.v3.SecretsConfigDump
 */
export declare class SecretsConfigDump extends Message<SecretsConfigDump> {
  /**
   * The statically loaded secrets.
   *
   * @generated from field: repeated envoy.admin.v3.SecretsConfigDump.StaticSecret static_secrets = 1;
   */
  staticSecrets: SecretsConfigDump_StaticSecret[];

  /**
   * The dynamically loaded active secrets. These are secrets that are available to service
   * clusters or listeners.
   *
   * @generated from field: repeated envoy.admin.v3.SecretsConfigDump.DynamicSecret dynamic_active_secrets = 2;
   */
  dynamicActiveSecrets: SecretsConfigDump_DynamicSecret[];

  /**
   * The dynamically loaded warming secrets. These are secrets that are currently undergoing
   * warming in preparation to service clusters or listeners.
   *
   * @generated from field: repeated envoy.admin.v3.SecretsConfigDump.DynamicSecret dynamic_warming_secrets = 3;
   */
  dynamicWarmingSecrets: SecretsConfigDump_DynamicSecret[];

  constructor(data?: PartialMessage<SecretsConfigDump>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.SecretsConfigDump";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsConfigDump;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsConfigDump;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsConfigDump;

  static equals(a: SecretsConfigDump | PlainMessage<SecretsConfigDump> | undefined, b: SecretsConfigDump | PlainMessage<SecretsConfigDump> | undefined): boolean;
}

/**
 * DynamicSecret contains secret information fetched via SDS.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.admin.v3.SecretsConfigDump.DynamicSecret
 */
export declare class SecretsConfigDump_DynamicSecret extends Message<SecretsConfigDump_DynamicSecret> {
  /**
   * The name assigned to the secret.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This is the per-resource version information.
   *
   * @generated from field: string version_info = 2;
   */
  versionInfo: string;

  /**
   * The timestamp when the secret was last updated.
   *
   * @generated from field: google.protobuf.Timestamp last_updated = 3;
   */
  lastUpdated?: Timestamp;

  /**
   * The actual secret information.
   * Security sensitive information is redacted (replaced with "[redacted]") for
   * private keys and passwords in TLS certificates.
   *
   * @generated from field: google.protobuf.Any secret = 4;
   */
  secret?: Any;

  /**
   * Set if the last update failed, cleared after the next successful update.
   * The *error_state* field contains the rejected version of this particular
   * resource along with the reason and timestamp. For successfully updated or
   * acknowledged resource, this field should be empty.
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.admin.v3.UpdateFailureState error_state = 5;
   */
  errorState?: UpdateFailureState;

  /**
   * The client status of this resource.
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.admin.v3.ClientResourceStatus client_status = 6;
   */
  clientStatus: ClientResourceStatus;

  constructor(data?: PartialMessage<SecretsConfigDump_DynamicSecret>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.SecretsConfigDump.DynamicSecret";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsConfigDump_DynamicSecret;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsConfigDump_DynamicSecret;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsConfigDump_DynamicSecret;

  static equals(a: SecretsConfigDump_DynamicSecret | PlainMessage<SecretsConfigDump_DynamicSecret> | undefined, b: SecretsConfigDump_DynamicSecret | PlainMessage<SecretsConfigDump_DynamicSecret> | undefined): boolean;
}

/**
 * StaticSecret specifies statically loaded secret in bootstrap.
 *
 * @generated from message envoy.admin.v3.SecretsConfigDump.StaticSecret
 */
export declare class SecretsConfigDump_StaticSecret extends Message<SecretsConfigDump_StaticSecret> {
  /**
   * The name assigned to the secret.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The timestamp when the secret was last updated.
   *
   * @generated from field: google.protobuf.Timestamp last_updated = 2;
   */
  lastUpdated?: Timestamp;

  /**
   * The actual secret information.
   * Security sensitive information is redacted (replaced with "[redacted]") for
   * private keys and passwords in TLS certificates.
   *
   * @generated from field: google.protobuf.Any secret = 3;
   */
  secret?: Any;

  constructor(data?: PartialMessage<SecretsConfigDump_StaticSecret>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.SecretsConfigDump.StaticSecret";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsConfigDump_StaticSecret;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsConfigDump_StaticSecret;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsConfigDump_StaticSecret;

  static equals(a: SecretsConfigDump_StaticSecret | PlainMessage<SecretsConfigDump_StaticSecret> | undefined, b: SecretsConfigDump_StaticSecret | PlainMessage<SecretsConfigDump_StaticSecret> | undefined): boolean;
}

