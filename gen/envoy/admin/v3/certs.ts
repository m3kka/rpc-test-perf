// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v3/certs.proto" (package "envoy.admin.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
// [#protodoc-title: Certificates]

/**
 * Proto representation of certificate details. Admin endpoint uses this wrapper for ``/certs`` to
 * display certificate information. See :ref:`/certs <operations_admin_interface_certs>` for more
 * information.
 *
 * @generated from protobuf message envoy.admin.v3.Certificates
 */
export interface Certificates {
    /**
     * List of certificates known to an Envoy.
     *
     * @generated from protobuf field: repeated envoy.admin.v3.Certificate certificates = 1;
     */
    certificates: Certificate[];
}
/**
 * @generated from protobuf message envoy.admin.v3.Certificate
 */
export interface Certificate {
    /**
     * Details of CA certificate.
     *
     * @generated from protobuf field: repeated envoy.admin.v3.CertificateDetails ca_cert = 1;
     */
    caCert: CertificateDetails[];
    /**
     * Details of Certificate Chain
     *
     * @generated from protobuf field: repeated envoy.admin.v3.CertificateDetails cert_chain = 2;
     */
    certChain: CertificateDetails[];
}
/**
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.admin.v3.CertificateDetails
 */
export interface CertificateDetails {
    /**
     * Path of the certificate.
     *
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * Certificate Serial Number.
     *
     * @generated from protobuf field: string serial_number = 2;
     */
    serialNumber: string;
    /**
     * List of Subject Alternate names.
     *
     * @generated from protobuf field: repeated envoy.admin.v3.SubjectAlternateName subject_alt_names = 3;
     */
    subjectAltNames: SubjectAlternateName[];
    /**
     * Minimum of days until expiration of certificate and it's chain.
     *
     * @generated from protobuf field: uint64 days_until_expiration = 4;
     */
    daysUntilExpiration: bigint;
    /**
     * Indicates the time from which the certificate is valid.
     *
     * @generated from protobuf field: google.protobuf.Timestamp valid_from = 5;
     */
    validFrom?: Timestamp;
    /**
     * Indicates the time at which the certificate expires.
     *
     * @generated from protobuf field: google.protobuf.Timestamp expiration_time = 6;
     */
    expirationTime?: Timestamp;
    /**
     * Details related to the OCSP response associated with this certificate, if any.
     *
     * @generated from protobuf field: envoy.admin.v3.CertificateDetails.OcspDetails ocsp_details = 7;
     */
    ocspDetails?: CertificateDetails_OcspDetails;
}
/**
 * @generated from protobuf message envoy.admin.v3.CertificateDetails.OcspDetails
 */
export interface CertificateDetails_OcspDetails {
    /**
     * Indicates the time from which the OCSP response is valid.
     *
     * @generated from protobuf field: google.protobuf.Timestamp valid_from = 1;
     */
    validFrom?: Timestamp;
    /**
     * Indicates the time at which the OCSP response expires.
     *
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 2;
     */
    expiration?: Timestamp;
}
/**
 * @generated from protobuf message envoy.admin.v3.SubjectAlternateName
 */
export interface SubjectAlternateName {
    /**
     * @generated from protobuf oneof: name
     */
    name: {
        oneofKind: "dns";
        /**
         * @generated from protobuf field: string dns = 1;
         */
        dns: string;
    } | {
        oneofKind: "uri";
        /**
         * @generated from protobuf field: string uri = 2;
         */
        uri: string;
    } | {
        oneofKind: "ipAddress";
        /**
         * @generated from protobuf field: string ip_address = 3;
         */
        ipAddress: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Certificates$Type extends MessageType<Certificates> {
    constructor() {
        super("envoy.admin.v3.Certificates", [
            { no: 1, name: "certificates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Certificate }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.admin.v2alpha.Certificates" } });
    }
    create(value?: PartialMessage<Certificates>): Certificates {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.certificates = [];
        if (value !== undefined)
            reflectionMergePartial<Certificates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Certificates): Certificates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.admin.v3.Certificate certificates */ 1:
                    message.certificates.push(Certificate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Certificates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.admin.v3.Certificate certificates = 1; */
        for (let i = 0; i < message.certificates.length; i++)
            Certificate.internalBinaryWrite(message.certificates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.Certificates
 */
export const Certificates = new Certificates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Certificate$Type extends MessageType<Certificate> {
    constructor() {
        super("envoy.admin.v3.Certificate", [
            { no: 1, name: "ca_cert", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CertificateDetails },
            { no: 2, name: "cert_chain", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CertificateDetails }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.admin.v2alpha.Certificate" } });
    }
    create(value?: PartialMessage<Certificate>): Certificate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.caCert = [];
        message.certChain = [];
        if (value !== undefined)
            reflectionMergePartial<Certificate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Certificate): Certificate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.admin.v3.CertificateDetails ca_cert */ 1:
                    message.caCert.push(CertificateDetails.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.admin.v3.CertificateDetails cert_chain */ 2:
                    message.certChain.push(CertificateDetails.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Certificate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.admin.v3.CertificateDetails ca_cert = 1; */
        for (let i = 0; i < message.caCert.length; i++)
            CertificateDetails.internalBinaryWrite(message.caCert[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.admin.v3.CertificateDetails cert_chain = 2; */
        for (let i = 0; i < message.certChain.length; i++)
            CertificateDetails.internalBinaryWrite(message.certChain[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.Certificate
 */
export const Certificate = new Certificate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CertificateDetails$Type extends MessageType<CertificateDetails> {
    constructor() {
        super("envoy.admin.v3.CertificateDetails", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subject_alt_names", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SubjectAlternateName },
            { no: 4, name: "days_until_expiration", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "valid_from", kind: "message", T: () => Timestamp },
            { no: 6, name: "expiration_time", kind: "message", T: () => Timestamp },
            { no: 7, name: "ocsp_details", kind: "message", T: () => CertificateDetails_OcspDetails }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.admin.v2alpha.CertificateDetails" } });
    }
    create(value?: PartialMessage<CertificateDetails>): CertificateDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.serialNumber = "";
        message.subjectAltNames = [];
        message.daysUntilExpiration = 0n;
        if (value !== undefined)
            reflectionMergePartial<CertificateDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CertificateDetails): CertificateDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string serial_number */ 2:
                    message.serialNumber = reader.string();
                    break;
                case /* repeated envoy.admin.v3.SubjectAlternateName subject_alt_names */ 3:
                    message.subjectAltNames.push(SubjectAlternateName.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 days_until_expiration */ 4:
                    message.daysUntilExpiration = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp valid_from */ 5:
                    message.validFrom = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.validFrom);
                    break;
                case /* google.protobuf.Timestamp expiration_time */ 6:
                    message.expirationTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expirationTime);
                    break;
                case /* envoy.admin.v3.CertificateDetails.OcspDetails ocsp_details */ 7:
                    message.ocspDetails = CertificateDetails_OcspDetails.internalBinaryRead(reader, reader.uint32(), options, message.ocspDetails);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CertificateDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string serial_number = 2; */
        if (message.serialNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serialNumber);
        /* repeated envoy.admin.v3.SubjectAlternateName subject_alt_names = 3; */
        for (let i = 0; i < message.subjectAltNames.length; i++)
            SubjectAlternateName.internalBinaryWrite(message.subjectAltNames[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 days_until_expiration = 4; */
        if (message.daysUntilExpiration !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.daysUntilExpiration);
        /* google.protobuf.Timestamp valid_from = 5; */
        if (message.validFrom)
            Timestamp.internalBinaryWrite(message.validFrom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expiration_time = 6; */
        if (message.expirationTime)
            Timestamp.internalBinaryWrite(message.expirationTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.admin.v3.CertificateDetails.OcspDetails ocsp_details = 7; */
        if (message.ocspDetails)
            CertificateDetails_OcspDetails.internalBinaryWrite(message.ocspDetails, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.CertificateDetails
 */
export const CertificateDetails = new CertificateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CertificateDetails_OcspDetails$Type extends MessageType<CertificateDetails_OcspDetails> {
    constructor() {
        super("envoy.admin.v3.CertificateDetails.OcspDetails", [
            { no: 1, name: "valid_from", kind: "message", T: () => Timestamp },
            { no: 2, name: "expiration", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CertificateDetails_OcspDetails>): CertificateDetails_OcspDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CertificateDetails_OcspDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CertificateDetails_OcspDetails): CertificateDetails_OcspDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp valid_from */ 1:
                    message.validFrom = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.validFrom);
                    break;
                case /* google.protobuf.Timestamp expiration */ 2:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CertificateDetails_OcspDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp valid_from = 1; */
        if (message.validFrom)
            Timestamp.internalBinaryWrite(message.validFrom, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expiration = 2; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.CertificateDetails.OcspDetails
 */
export const CertificateDetails_OcspDetails = new CertificateDetails_OcspDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubjectAlternateName$Type extends MessageType<SubjectAlternateName> {
    constructor() {
        super("envoy.admin.v3.SubjectAlternateName", [
            { no: 1, name: "dns", kind: "scalar", oneof: "name", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", oneof: "name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ip_address", kind: "scalar", oneof: "name", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.admin.v2alpha.SubjectAlternateName" } });
    }
    create(value?: PartialMessage<SubjectAlternateName>): SubjectAlternateName {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SubjectAlternateName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubjectAlternateName): SubjectAlternateName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dns */ 1:
                    message.name = {
                        oneofKind: "dns",
                        dns: reader.string()
                    };
                    break;
                case /* string uri */ 2:
                    message.name = {
                        oneofKind: "uri",
                        uri: reader.string()
                    };
                    break;
                case /* string ip_address */ 3:
                    message.name = {
                        oneofKind: "ipAddress",
                        ipAddress: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubjectAlternateName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dns = 1; */
        if (message.name.oneofKind === "dns")
            writer.tag(1, WireType.LengthDelimited).string(message.name.dns);
        /* string uri = 2; */
        if (message.name.oneofKind === "uri")
            writer.tag(2, WireType.LengthDelimited).string(message.name.uri);
        /* string ip_address = 3; */
        if (message.name.oneofKind === "ipAddress")
            writer.tag(3, WireType.LengthDelimited).string(message.name.ipAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.SubjectAlternateName
 */
export const SubjectAlternateName = new SubjectAlternateName$Type();
