// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/admin/v3/clusters.proto (package envoy.admin.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Percent } from "../../type/v3/percent_pb.js";
import type { CircuitBreakers } from "../../config/cluster/v3/circuit_breaker_pb.js";
import type { Address } from "../../config/core/v3/address_pb.js";
import type { SimpleMetric } from "./metrics_pb.js";
import type { Locality } from "../../config/core/v3/base_pb.js";
import type { HealthStatus } from "../../config/core/v3/health_check_pb.js";

/**
 * Admin endpoint uses this wrapper for ``/clusters`` to display cluster status information.
 * See :ref:`/clusters <operations_admin_interface_clusters>` for more information.
 *
 * @generated from message envoy.admin.v3.Clusters
 */
export declare class Clusters extends Message<Clusters> {
  /**
   * Mapping from cluster name to each cluster's status.
   *
   * @generated from field: repeated envoy.admin.v3.ClusterStatus cluster_statuses = 1;
   */
  clusterStatuses: ClusterStatus[];

  constructor(data?: PartialMessage<Clusters>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.Clusters";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Clusters;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Clusters;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Clusters;

  static equals(a: Clusters | PlainMessage<Clusters> | undefined, b: Clusters | PlainMessage<Clusters> | undefined): boolean;
}

/**
 * Details an individual cluster's current status.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.admin.v3.ClusterStatus
 */
export declare class ClusterStatus extends Message<ClusterStatus> {
  /**
   * Name of the cluster.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Denotes whether this cluster was added via API or configured statically.
   *
   * @generated from field: bool added_via_api = 2;
   */
  addedViaApi: boolean;

  /**
   * The success rate threshold used in the last interval.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``false``, all errors: externally and locally generated were used to calculate the threshold.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``true``, only externally generated errors were used to calculate the threshold.
   * The threshold is used to eject hosts based on their success rate. See
   * :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for details.
   *
   * Note: this field may be omitted in any of the three following cases:
   *
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be < 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   *
   * @generated from field: envoy.type.v3.Percent success_rate_ejection_threshold = 3;
   */
  successRateEjectionThreshold?: Percent;

  /**
   * Mapping from host address to the host's current status.
   *
   * @generated from field: repeated envoy.admin.v3.HostStatus host_statuses = 4;
   */
  hostStatuses: HostStatus[];

  /**
   * The success rate threshold used in the last interval when only locally originated failures were
   * taken into account and externally originated errors were treated as success.
   * This field should be interpreted only when
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``true``. The threshold is used to eject hosts based on their success rate.
   * See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
   * details.
   *
   * Note: this field may be omitted in any of the three following cases:
   *
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be < 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   *
   * @generated from field: envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;
   */
  localOriginSuccessRateEjectionThreshold?: Percent;

  /**
   * :ref:`Circuit breaking <arch_overview_circuit_break>` settings of the cluster.
   *
   * @generated from field: envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;
   */
  circuitBreakers?: CircuitBreakers;

  /**
   * Observability name of the cluster.
   *
   * @generated from field: string observability_name = 7;
   */
  observabilityName: string;

  /**
   * The :ref:`EDS service name <envoy_v3_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name>` if the cluster is an EDS cluster.
   *
   * @generated from field: string eds_service_name = 8;
   */
  edsServiceName: string;

  constructor(data?: PartialMessage<ClusterStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.ClusterStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatus;

  static equals(a: ClusterStatus | PlainMessage<ClusterStatus> | undefined, b: ClusterStatus | PlainMessage<ClusterStatus> | undefined): boolean;
}

/**
 * Current state of a particular host.
 * [#next-free-field: 10]
 *
 * @generated from message envoy.admin.v3.HostStatus
 */
export declare class HostStatus extends Message<HostStatus> {
  /**
   * Address of this host.
   *
   * @generated from field: envoy.config.core.v3.Address address = 1;
   */
  address?: Address;

  /**
   * List of stats specific to this host.
   *
   * @generated from field: repeated envoy.admin.v3.SimpleMetric stats = 2;
   */
  stats: SimpleMetric[];

  /**
   * The host's current health status.
   *
   * @generated from field: envoy.admin.v3.HostHealthStatus health_status = 3;
   */
  healthStatus?: HostHealthStatus;

  /**
   * Request success rate for this host over the last calculated interval.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``false``, all errors: externally and locally generated were used in success rate
   * calculation. If
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``true``, only externally generated errors were used in success rate calculation.
   * See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
   * details.
   *
   * Note: the message will not be present if host did not have enough request volume to calculate
   * success rate or the cluster did not have enough hosts to run through success rate outlier
   * ejection.
   *
   * @generated from field: envoy.type.v3.Percent success_rate = 4;
   */
  successRate?: Percent;

  /**
   * The host's weight. If not configured, the value defaults to 1.
   *
   * @generated from field: uint32 weight = 5;
   */
  weight: number;

  /**
   * The hostname of the host, if applicable.
   *
   * @generated from field: string hostname = 6;
   */
  hostname: string;

  /**
   * The host's priority. If not configured, the value defaults to 0 (highest priority).
   *
   * @generated from field: uint32 priority = 7;
   */
  priority: number;

  /**
   * Request success rate for this host over the last calculated
   * interval when only locally originated errors are taken into account and externally originated
   * errors were treated as success.
   * This field should be interpreted only when
   * :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is ``true``.
   * See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
   * details.
   *
   * Note: the message will not be present if host did not have enough request volume to calculate
   * success rate or the cluster did not have enough hosts to run through success rate outlier
   * ejection.
   *
   * @generated from field: envoy.type.v3.Percent local_origin_success_rate = 8;
   */
  localOriginSuccessRate?: Percent;

  /**
   * locality of the host.
   *
   * @generated from field: envoy.config.core.v3.Locality locality = 9;
   */
  locality?: Locality;

  constructor(data?: PartialMessage<HostStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.HostStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostStatus;

  static equals(a: HostStatus | PlainMessage<HostStatus> | undefined, b: HostStatus | PlainMessage<HostStatus> | undefined): boolean;
}

/**
 * Health status for a host.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.admin.v3.HostHealthStatus
 */
export declare class HostHealthStatus extends Message<HostHealthStatus> {
  /**
   * The host is currently failing active health checks.
   *
   * @generated from field: bool failed_active_health_check = 1;
   */
  failedActiveHealthCheck: boolean;

  /**
   * The host is currently considered an outlier and has been ejected.
   *
   * @generated from field: bool failed_outlier_check = 2;
   */
  failedOutlierCheck: boolean;

  /**
   * The host is currently being marked as degraded through active health checking.
   *
   * @generated from field: bool failed_active_degraded_check = 4;
   */
  failedActiveDegradedCheck: boolean;

  /**
   * The host has been removed from service discovery, but is being stabilized due to active
   * health checking.
   *
   * @generated from field: bool pending_dynamic_removal = 5;
   */
  pendingDynamicRemoval: boolean;

  /**
   * The host has not yet been health checked.
   *
   * @generated from field: bool pending_active_hc = 6;
   */
  pendingActiveHc: boolean;

  /**
   * The host should be excluded from panic, spillover, etc. calculations because it was explicitly
   * taken out of rotation via protocol signal and is not meant to be routed to.
   *
   * @generated from field: bool excluded_via_immediate_hc_fail = 7;
   */
  excludedViaImmediateHcFail: boolean;

  /**
   * The host failed active HC due to timeout.
   *
   * @generated from field: bool active_hc_timeout = 8;
   */
  activeHcTimeout: boolean;

  /**
   * Health status as reported by EDS. Note: only HEALTHY and UNHEALTHY are currently supported
   * here.
   * [#comment:TODO(mrice32): pipe through remaining EDS health status possibilities.]
   *
   * @generated from field: envoy.config.core.v3.HealthStatus eds_health_status = 3;
   */
  edsHealthStatus: HealthStatus;

  constructor(data?: PartialMessage<HostHealthStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.admin.v3.HostHealthStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostHealthStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostHealthStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostHealthStatus;

  static equals(a: HostHealthStatus | PlainMessage<HostHealthStatus> | undefined, b: HostHealthStatus | PlainMessage<HostHealthStatus> | undefined): boolean;
}

