// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/admin/v3/init_dump.proto" (package "envoy.admin.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: InitDump]

/**
 * Dumps of unready targets of envoy init managers. Envoy's admin fills this message with init managers,
 * which provides the information of their unready targets.
 * The :ref:`/init_dump <operations_admin_interface_init_dump>` will dump all unready targets information.
 *
 * @generated from protobuf message envoy.admin.v3.UnreadyTargetsDumps
 */
export interface UnreadyTargetsDumps {
    /**
     * You can choose specific component to dump unready targets with mask query parameter.
     * See :ref:`/init_dump?mask={} <operations_admin_interface_init_dump_by_mask>` for more information.
     * The dumps of unready targets of all init managers.
     *
     * @generated from protobuf field: repeated envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump unready_targets_dumps = 1;
     */
    unreadyTargetsDumps: UnreadyTargetsDumps_UnreadyTargetsDump[];
}
/**
 * Message of unready targets information of an init manager.
 *
 * @generated from protobuf message envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump
 */
export interface UnreadyTargetsDumps_UnreadyTargetsDump {
    /**
     * Name of the init manager. Example: "init_manager_xxx".
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Names of unready targets of the init manager. Example: "target_xxx".
     *
     * @generated from protobuf field: repeated string target_names = 2;
     */
    targetNames: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class UnreadyTargetsDumps$Type extends MessageType<UnreadyTargetsDumps> {
    constructor() {
        super("envoy.admin.v3.UnreadyTargetsDumps", [
            { no: 1, name: "unready_targets_dumps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnreadyTargetsDumps_UnreadyTargetsDump }
        ]);
    }
    create(value?: PartialMessage<UnreadyTargetsDumps>): UnreadyTargetsDumps {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unreadyTargetsDumps = [];
        if (value !== undefined)
            reflectionMergePartial<UnreadyTargetsDumps>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnreadyTargetsDumps): UnreadyTargetsDumps {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump unready_targets_dumps */ 1:
                    message.unreadyTargetsDumps.push(UnreadyTargetsDumps_UnreadyTargetsDump.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnreadyTargetsDumps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump unready_targets_dumps = 1; */
        for (let i = 0; i < message.unreadyTargetsDumps.length; i++)
            UnreadyTargetsDumps_UnreadyTargetsDump.internalBinaryWrite(message.unreadyTargetsDumps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.UnreadyTargetsDumps
 */
export const UnreadyTargetsDumps = new UnreadyTargetsDumps$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnreadyTargetsDumps_UnreadyTargetsDump$Type extends MessageType<UnreadyTargetsDumps_UnreadyTargetsDump> {
    constructor() {
        super("envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "target_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnreadyTargetsDumps_UnreadyTargetsDump>): UnreadyTargetsDumps_UnreadyTargetsDump {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.targetNames = [];
        if (value !== undefined)
            reflectionMergePartial<UnreadyTargetsDumps_UnreadyTargetsDump>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnreadyTargetsDumps_UnreadyTargetsDump): UnreadyTargetsDumps_UnreadyTargetsDump {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string target_names */ 2:
                    message.targetNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnreadyTargetsDumps_UnreadyTargetsDump, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string target_names = 2; */
        for (let i = 0; i < message.targetNames.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.targetNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump
 */
export const UnreadyTargetsDumps_UnreadyTargetsDump = new UnreadyTargetsDumps_UnreadyTargetsDump$Type();
