// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/rbac/v2/rbac.proto" (package "envoy.config.rbac.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringMatcher } from "../../../type/matcher/string";
import { MetadataMatcher } from "../../../type/matcher/metadata";
import { CidrRange } from "../../../api/v2/core/address";
import { PathMatcher } from "../../../type/matcher/path";
import { HeaderMatcher } from "../../../api/v2/route/route_components";
import { Expr } from "../../../../google/api/expr/v1alpha1/syntax";
// [#protodoc-title: Role Based Access Control (RBAC)]

/**
 * Role Based Access Control (RBAC) provides service-level and method-level access control for a
 * service. RBAC policies are additive. The policies are examined in order. A request is allowed
 * once a matching policy is found (suppose the `action` is ALLOW).
 *
 * Here is an example of RBAC configuration. It has two policies:
 *
 * * Service account "cluster.local/ns/default/sa/admin" has full access to the service, and so
 *   does "cluster.local/ns/default/sa/superuser".
 *
 * * Any user can read ("GET") the service at paths with prefix "/products", so long as the
 *   destination port is either 80 or 443.
 *
 *  .. code-block:: yaml
 *
 *   action: ALLOW
 *   policies:
 *     "service-admin":
 *       permissions:
 *         - any: true
 *       principals:
 *         - authenticated:
 *             principal_name:
 *               exact: "cluster.local/ns/default/sa/admin"
 *         - authenticated:
 *             principal_name:
 *               exact: "cluster.local/ns/default/sa/superuser"
 *     "product-viewer":
 *       permissions:
 *           - and_rules:
 *               rules:
 *                 - header: { name: ":method", exact_match: "GET" }
 *                 - url_path:
 *                     path: { prefix: "/products" }
 *                 - or_rules:
 *                     rules:
 *                       - destination_port: 80
 *                       - destination_port: 443
 *       principals:
 *         - any: true
 *
 *
 * @generated from protobuf message envoy.config.rbac.v2.RBAC
 */
export interface RBAC {
    /**
     * The action to take if a policy matches. The request is allowed if and only if:
     *
     *   * `action` is "ALLOWED" and at least one policy matches
     *   * `action` is "DENY" and none of the policies match
     *
     * @generated from protobuf field: envoy.config.rbac.v2.RBAC.Action action = 1;
     */
    action: RBAC_Action;
    /**
     * Maps from policy name to policy. A match occurs when at least one policy matches the request.
     *
     * @generated from protobuf field: map<string, envoy.config.rbac.v2.Policy> policies = 2;
     */
    policies: {
        [key: string]: Policy;
    };
}
/**
 * Should we do safe-list or block-list style access control?
 *
 * @generated from protobuf enum envoy.config.rbac.v2.RBAC.Action
 */
export enum RBAC_Action {
    /**
     * The policies grant access to principals. The rest is denied. This is safe-list style
     * access control. This is the default type.
     *
     * @generated from protobuf enum value: ALLOW = 0;
     */
    ALLOW = 0,
    /**
     * The policies deny access to principals. The rest is allowed. This is block-list style
     * access control.
     *
     * @generated from protobuf enum value: DENY = 1;
     */
    DENY = 1
}
/**
 * Policy specifies a role and the principals that are assigned/denied the role. A policy matches if
 * and only if at least one of its permissions match the action taking place AND at least one of its
 * principals match the downstream AND the condition is true if specified.
 *
 * @generated from protobuf message envoy.config.rbac.v2.Policy
 */
export interface Policy {
    /**
     * Required. The set of permissions that define a role. Each permission is matched with OR
     * semantics. To match all actions for this policy, a single Permission with the `any` field set
     * to true should be used.
     *
     * @generated from protobuf field: repeated envoy.config.rbac.v2.Permission permissions = 1;
     */
    permissions: Permission[];
    /**
     * Required. The set of principals that are assigned/denied the role based on “action”. Each
     * principal is matched with OR semantics. To match all downstreams for this policy, a single
     * Principal with the `any` field set to true should be used.
     *
     * @generated from protobuf field: repeated envoy.config.rbac.v2.Principal principals = 2;
     */
    principals: Principal[];
    /**
     * An optional symbolic expression specifying an access control
     * :ref:`condition <arch_overview_condition>`. The condition is combined
     * with the permissions and the principals as a clause with AND semantics.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.Expr condition = 3;
     */
    condition?: Expr;
}
/**
 * Permission defines an action (or actions) that a principal can take.
 * [#next-free-field: 11]
 *
 * @generated from protobuf message envoy.config.rbac.v2.Permission
 */
export interface Permission {
    /**
     * @generated from protobuf oneof: rule
     */
    rule: {
        oneofKind: "andRules";
        /**
         * A set of rules that all must match in order to define the action.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Permission.Set and_rules = 1;
         */
        andRules: Permission_Set;
    } | {
        oneofKind: "orRules";
        /**
         * A set of rules where at least one must match in order to define the action.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Permission.Set or_rules = 2;
         */
        orRules: Permission_Set;
    } | {
        oneofKind: "any";
        /**
         * When any is set, it matches any action.
         *
         * @generated from protobuf field: bool any = 3;
         */
        any: boolean;
    } | {
        oneofKind: "header";
        /**
         * A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only
         * available for HTTP request.
         * Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`
         * field if you want to match the URL path without the query and fragment string.
         *
         * @generated from protobuf field: envoy.api.v2.route.HeaderMatcher header = 4;
         */
        header: HeaderMatcher;
    } | {
        oneofKind: "urlPath";
        /**
         * A URL path on the incoming HTTP request. Only available for HTTP.
         *
         * @generated from protobuf field: envoy.type.matcher.PathMatcher url_path = 10;
         */
        urlPath: PathMatcher;
    } | {
        oneofKind: "destinationIp";
        /**
         * A CIDR block that describes the destination IP.
         *
         * @generated from protobuf field: envoy.api.v2.core.CidrRange destination_ip = 5;
         */
        destinationIp: CidrRange;
    } | {
        oneofKind: "destinationPort";
        /**
         * A port number that describes the destination port connecting to.
         *
         * @generated from protobuf field: uint32 destination_port = 6;
         */
        destinationPort: number;
    } | {
        oneofKind: "metadata";
        /**
         * Metadata that describes additional information about the action.
         *
         * @generated from protobuf field: envoy.type.matcher.MetadataMatcher metadata = 7;
         */
        metadata: MetadataMatcher;
    } | {
        oneofKind: "notRule";
        /**
         * Negates matching the provided permission. For instance, if the value of `not_rule` would
         * match, this permission would not match. Conversely, if the value of `not_rule` would not
         * match, this permission would match.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Permission not_rule = 8;
         */
        notRule: Permission;
    } | {
        oneofKind: "requestedServerName";
        /**
         * The request server from the client's connection request. This is
         * typically TLS SNI.
         *
         * .. attention::
         *
         *   The behavior of this field may be affected by how Envoy is configured
         *   as explained below.
         *
         *   * If the :ref:`TLS Inspector <config_listener_filters_tls_inspector>`
         *     filter is not added, and if a `FilterChainMatch` is not defined for
         *     the :ref:`server name <envoy_api_field_listener.FilterChainMatch.server_names>`,
         *     a TLS connection's requested SNI server name will be treated as if it
         *     wasn't present.
         *
         *   * A :ref:`listener filter <arch_overview_listener_filters>` may
         *     overwrite a connection's requested server name within Envoy.
         *
         * Please refer to :ref:`this FAQ entry <faq_how_to_setup_sni>` to learn to
         * setup SNI.
         *
         * @generated from protobuf field: envoy.type.matcher.StringMatcher requested_server_name = 9;
         */
        requestedServerName: StringMatcher;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,
 * each are applied with the associated behavior.
 *
 * @generated from protobuf message envoy.config.rbac.v2.Permission.Set
 */
export interface Permission_Set {
    /**
     * @generated from protobuf field: repeated envoy.config.rbac.v2.Permission rules = 1;
     */
    rules: Permission[];
}
/**
 * Principal defines an identity or a group of identities for a downstream subject.
 * [#next-free-field: 12]
 *
 * @generated from protobuf message envoy.config.rbac.v2.Principal
 */
export interface Principal {
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "andIds";
        /**
         * A set of identifiers that all must match in order to define the downstream.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Principal.Set and_ids = 1;
         */
        andIds: Principal_Set;
    } | {
        oneofKind: "orIds";
        /**
         * A set of identifiers at least one must match in order to define the downstream.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Principal.Set or_ids = 2;
         */
        orIds: Principal_Set;
    } | {
        oneofKind: "any";
        /**
         * When any is set, it matches any downstream.
         *
         * @generated from protobuf field: bool any = 3;
         */
        any: boolean;
    } | {
        oneofKind: "authenticated";
        /**
         * Authenticated attributes that identify the downstream.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Principal.Authenticated authenticated = 4;
         */
        authenticated: Principal_Authenticated;
    } | {
        oneofKind: "sourceIp";
        /**
         * A CIDR block that describes the downstream IP.
         * This address will honor proxy protocol, but will not honor XFF.
         *
         * @deprecated
         * @generated from protobuf field: envoy.api.v2.core.CidrRange source_ip = 5 [deprecated = true];
         */
        sourceIp: CidrRange;
    } | {
        oneofKind: "directRemoteIp";
        /**
         * A CIDR block that describes the downstream remote/origin address.
         * Note: This is always the physical peer even if the
         * :ref:`remote_ip <envoy_api_field_config.rbac.v2.Principal.remote_ip>` is inferred
         * from for example the x-forwarder-for header, proxy protocol, etc.
         *
         * @generated from protobuf field: envoy.api.v2.core.CidrRange direct_remote_ip = 10;
         */
        directRemoteIp: CidrRange;
    } | {
        oneofKind: "remoteIp";
        /**
         * A CIDR block that describes the downstream remote/origin address.
         * Note: This may not be the physical peer and could be different from the
         * :ref:`direct_remote_ip <envoy_api_field_config.rbac.v2.Principal.direct_remote_ip>`.
         * E.g, if the remote ip is inferred from for example the x-forwarder-for header,
         * proxy protocol, etc.
         *
         * @generated from protobuf field: envoy.api.v2.core.CidrRange remote_ip = 11;
         */
        remoteIp: CidrRange;
    } | {
        oneofKind: "header";
        /**
         * A header (or pseudo-header such as :path or :method) on the incoming HTTP request. Only
         * available for HTTP request.
         * Note: the pseudo-header :path includes the query and fragment string. Use the `url_path`
         * field if you want to match the URL path without the query and fragment string.
         *
         * @generated from protobuf field: envoy.api.v2.route.HeaderMatcher header = 6;
         */
        header: HeaderMatcher;
    } | {
        oneofKind: "urlPath";
        /**
         * A URL path on the incoming HTTP request. Only available for HTTP.
         *
         * @generated from protobuf field: envoy.type.matcher.PathMatcher url_path = 9;
         */
        urlPath: PathMatcher;
    } | {
        oneofKind: "metadata";
        /**
         * Metadata that describes additional information about the principal.
         *
         * @generated from protobuf field: envoy.type.matcher.MetadataMatcher metadata = 7;
         */
        metadata: MetadataMatcher;
    } | {
        oneofKind: "notId";
        /**
         * Negates matching the provided principal. For instance, if the value of `not_id` would match,
         * this principal would not match. Conversely, if the value of `not_id` would not match, this
         * principal would match.
         *
         * @generated from protobuf field: envoy.config.rbac.v2.Principal not_id = 8;
         */
        notId: Principal;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Used in the `and_ids` and `or_ids` fields in the `identifier` oneof. Depending on the context,
 * each are applied with the associated behavior.
 *
 * @generated from protobuf message envoy.config.rbac.v2.Principal.Set
 */
export interface Principal_Set {
    /**
     * @generated from protobuf field: repeated envoy.config.rbac.v2.Principal ids = 1;
     */
    ids: Principal[];
}
/**
 * Authentication attributes for a downstream.
 *
 * @generated from protobuf message envoy.config.rbac.v2.Principal.Authenticated
 */
export interface Principal_Authenticated {
    /**
     * The name of the principal. If set, The URI SAN or DNS SAN in that order is used from the
     * certificate, otherwise the subject field is used. If unset, it applies to any user that is
     * authenticated.
     *
     * @generated from protobuf field: envoy.type.matcher.StringMatcher principal_name = 2;
     */
    principalName?: StringMatcher;
}
// @generated message type with reflection information, may provide speed optimized methods
class RBAC$Type extends MessageType<RBAC> {
    constructor() {
        super("envoy.config.rbac.v2.RBAC", [
            { no: 1, name: "action", kind: "enum", T: () => ["envoy.config.rbac.v2.RBAC.Action", RBAC_Action] },
            { no: 2, name: "policies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Policy } }
        ]);
    }
    create(value?: PartialMessage<RBAC>): RBAC {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = 0;
        message.policies = {};
        if (value !== undefined)
            reflectionMergePartial<RBAC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RBAC): RBAC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.rbac.v2.RBAC.Action action */ 1:
                    message.action = reader.int32();
                    break;
                case /* map<string, envoy.config.rbac.v2.Policy> policies */ 2:
                    this.binaryReadMap2(message.policies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: RBAC["policies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RBAC["policies"] | undefined, val: RBAC["policies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Policy.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.config.rbac.v2.RBAC.policies");
            }
        }
        map[key ?? ""] = val ?? Policy.create();
    }
    internalBinaryWrite(message: RBAC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.rbac.v2.RBAC.Action action = 1; */
        if (message.action !== 0)
            writer.tag(1, WireType.Varint).int32(message.action);
        /* map<string, envoy.config.rbac.v2.Policy> policies = 2; */
        for (let k of globalThis.Object.keys(message.policies)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Policy.internalBinaryWrite(message.policies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.RBAC
 */
export const RBAC = new RBAC$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Policy$Type extends MessageType<Policy> {
    constructor() {
        super("envoy.config.rbac.v2.Policy", [
            { no: 1, name: "permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "principals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Principal, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "condition", kind: "message", T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Policy>): Policy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        message.principals = [];
        if (value !== undefined)
            reflectionMergePartial<Policy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Policy): Policy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.rbac.v2.Permission permissions */ 1:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.rbac.v2.Principal principals */ 2:
                    message.principals.push(Principal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.api.expr.v1alpha1.Expr condition */ 3:
                    message.condition = Expr.internalBinaryRead(reader, reader.uint32(), options, message.condition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Policy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.rbac.v2.Permission permissions = 1; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.rbac.v2.Principal principals = 2; */
        for (let i = 0; i < message.principals.length; i++)
            Principal.internalBinaryWrite(message.principals[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1alpha1.Expr condition = 3; */
        if (message.condition)
            Expr.internalBinaryWrite(message.condition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Policy
 */
export const Policy = new Policy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Permission$Type extends MessageType<Permission> {
    constructor() {
        super("envoy.config.rbac.v2.Permission", [
            { no: 1, name: "and_rules", kind: "message", oneof: "rule", T: () => Permission_Set },
            { no: 2, name: "or_rules", kind: "message", oneof: "rule", T: () => Permission_Set },
            { no: 3, name: "any", kind: "scalar", oneof: "rule", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 4, name: "header", kind: "message", oneof: "rule", T: () => HeaderMatcher },
            { no: 10, name: "url_path", kind: "message", oneof: "rule", T: () => PathMatcher },
            { no: 5, name: "destination_ip", kind: "message", oneof: "rule", T: () => CidrRange },
            { no: 6, name: "destination_port", kind: "scalar", oneof: "rule", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 65535 } } } },
            { no: 7, name: "metadata", kind: "message", oneof: "rule", T: () => MetadataMatcher },
            { no: 8, name: "not_rule", kind: "message", oneof: "rule", T: () => Permission },
            { no: 9, name: "requested_server_name", kind: "message", oneof: "rule", T: () => StringMatcher }
        ]);
    }
    create(value?: PartialMessage<Permission>): Permission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rule = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Permission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Permission): Permission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.rbac.v2.Permission.Set and_rules */ 1:
                    message.rule = {
                        oneofKind: "andRules",
                        andRules: Permission_Set.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).andRules)
                    };
                    break;
                case /* envoy.config.rbac.v2.Permission.Set or_rules */ 2:
                    message.rule = {
                        oneofKind: "orRules",
                        orRules: Permission_Set.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).orRules)
                    };
                    break;
                case /* bool any */ 3:
                    message.rule = {
                        oneofKind: "any",
                        any: reader.bool()
                    };
                    break;
                case /* envoy.api.v2.route.HeaderMatcher header */ 4:
                    message.rule = {
                        oneofKind: "header",
                        header: HeaderMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).header)
                    };
                    break;
                case /* envoy.type.matcher.PathMatcher url_path */ 10:
                    message.rule = {
                        oneofKind: "urlPath",
                        urlPath: PathMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).urlPath)
                    };
                    break;
                case /* envoy.api.v2.core.CidrRange destination_ip */ 5:
                    message.rule = {
                        oneofKind: "destinationIp",
                        destinationIp: CidrRange.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).destinationIp)
                    };
                    break;
                case /* uint32 destination_port */ 6:
                    message.rule = {
                        oneofKind: "destinationPort",
                        destinationPort: reader.uint32()
                    };
                    break;
                case /* envoy.type.matcher.MetadataMatcher metadata */ 7:
                    message.rule = {
                        oneofKind: "metadata",
                        metadata: MetadataMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).metadata)
                    };
                    break;
                case /* envoy.config.rbac.v2.Permission not_rule */ 8:
                    message.rule = {
                        oneofKind: "notRule",
                        notRule: Permission.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).notRule)
                    };
                    break;
                case /* envoy.type.matcher.StringMatcher requested_server_name */ 9:
                    message.rule = {
                        oneofKind: "requestedServerName",
                        requestedServerName: StringMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.rule as any).requestedServerName)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Permission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.rbac.v2.Permission.Set and_rules = 1; */
        if (message.rule.oneofKind === "andRules")
            Permission_Set.internalBinaryWrite(message.rule.andRules, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.rbac.v2.Permission.Set or_rules = 2; */
        if (message.rule.oneofKind === "orRules")
            Permission_Set.internalBinaryWrite(message.rule.orRules, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool any = 3; */
        if (message.rule.oneofKind === "any")
            writer.tag(3, WireType.Varint).bool(message.rule.any);
        /* envoy.api.v2.route.HeaderMatcher header = 4; */
        if (message.rule.oneofKind === "header")
            HeaderMatcher.internalBinaryWrite(message.rule.header, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.PathMatcher url_path = 10; */
        if (message.rule.oneofKind === "urlPath")
            PathMatcher.internalBinaryWrite(message.rule.urlPath, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.CidrRange destination_ip = 5; */
        if (message.rule.oneofKind === "destinationIp")
            CidrRange.internalBinaryWrite(message.rule.destinationIp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint32 destination_port = 6; */
        if (message.rule.oneofKind === "destinationPort")
            writer.tag(6, WireType.Varint).uint32(message.rule.destinationPort);
        /* envoy.type.matcher.MetadataMatcher metadata = 7; */
        if (message.rule.oneofKind === "metadata")
            MetadataMatcher.internalBinaryWrite(message.rule.metadata, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.rbac.v2.Permission not_rule = 8; */
        if (message.rule.oneofKind === "notRule")
            Permission.internalBinaryWrite(message.rule.notRule, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.StringMatcher requested_server_name = 9; */
        if (message.rule.oneofKind === "requestedServerName")
            StringMatcher.internalBinaryWrite(message.rule.requestedServerName, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Permission
 */
export const Permission = new Permission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Permission_Set$Type extends MessageType<Permission_Set> {
    constructor() {
        super("envoy.config.rbac.v2.Permission.Set", [
            { no: 1, name: "rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<Permission_Set>): Permission_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rules = [];
        if (value !== undefined)
            reflectionMergePartial<Permission_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Permission_Set): Permission_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.rbac.v2.Permission rules */ 1:
                    message.rules.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Permission_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.rbac.v2.Permission rules = 1; */
        for (let i = 0; i < message.rules.length; i++)
            Permission.internalBinaryWrite(message.rules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Permission.Set
 */
export const Permission_Set = new Permission_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Principal$Type extends MessageType<Principal> {
    constructor() {
        super("envoy.config.rbac.v2.Principal", [
            { no: 1, name: "and_ids", kind: "message", oneof: "identifier", T: () => Principal_Set },
            { no: 2, name: "or_ids", kind: "message", oneof: "identifier", T: () => Principal_Set },
            { no: 3, name: "any", kind: "scalar", oneof: "identifier", T: 8 /*ScalarType.BOOL*/, options: { "validate.rules": { bool: { const: true } } } },
            { no: 4, name: "authenticated", kind: "message", oneof: "identifier", T: () => Principal_Authenticated },
            { no: 5, name: "source_ip", kind: "message", oneof: "identifier", T: () => CidrRange },
            { no: 10, name: "direct_remote_ip", kind: "message", oneof: "identifier", T: () => CidrRange },
            { no: 11, name: "remote_ip", kind: "message", oneof: "identifier", T: () => CidrRange },
            { no: 6, name: "header", kind: "message", oneof: "identifier", T: () => HeaderMatcher },
            { no: 9, name: "url_path", kind: "message", oneof: "identifier", T: () => PathMatcher },
            { no: 7, name: "metadata", kind: "message", oneof: "identifier", T: () => MetadataMatcher },
            { no: 8, name: "not_id", kind: "message", oneof: "identifier", T: () => Principal }
        ]);
    }
    create(value?: PartialMessage<Principal>): Principal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Principal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Principal): Principal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.rbac.v2.Principal.Set and_ids */ 1:
                    message.identifier = {
                        oneofKind: "andIds",
                        andIds: Principal_Set.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).andIds)
                    };
                    break;
                case /* envoy.config.rbac.v2.Principal.Set or_ids */ 2:
                    message.identifier = {
                        oneofKind: "orIds",
                        orIds: Principal_Set.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).orIds)
                    };
                    break;
                case /* bool any */ 3:
                    message.identifier = {
                        oneofKind: "any",
                        any: reader.bool()
                    };
                    break;
                case /* envoy.config.rbac.v2.Principal.Authenticated authenticated */ 4:
                    message.identifier = {
                        oneofKind: "authenticated",
                        authenticated: Principal_Authenticated.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).authenticated)
                    };
                    break;
                case /* envoy.api.v2.core.CidrRange source_ip = 5 [deprecated = true];*/ 5:
                    message.identifier = {
                        oneofKind: "sourceIp",
                        sourceIp: CidrRange.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).sourceIp)
                    };
                    break;
                case /* envoy.api.v2.core.CidrRange direct_remote_ip */ 10:
                    message.identifier = {
                        oneofKind: "directRemoteIp",
                        directRemoteIp: CidrRange.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).directRemoteIp)
                    };
                    break;
                case /* envoy.api.v2.core.CidrRange remote_ip */ 11:
                    message.identifier = {
                        oneofKind: "remoteIp",
                        remoteIp: CidrRange.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).remoteIp)
                    };
                    break;
                case /* envoy.api.v2.route.HeaderMatcher header */ 6:
                    message.identifier = {
                        oneofKind: "header",
                        header: HeaderMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).header)
                    };
                    break;
                case /* envoy.type.matcher.PathMatcher url_path */ 9:
                    message.identifier = {
                        oneofKind: "urlPath",
                        urlPath: PathMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).urlPath)
                    };
                    break;
                case /* envoy.type.matcher.MetadataMatcher metadata */ 7:
                    message.identifier = {
                        oneofKind: "metadata",
                        metadata: MetadataMatcher.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).metadata)
                    };
                    break;
                case /* envoy.config.rbac.v2.Principal not_id */ 8:
                    message.identifier = {
                        oneofKind: "notId",
                        notId: Principal.internalBinaryRead(reader, reader.uint32(), options, (message.identifier as any).notId)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Principal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.rbac.v2.Principal.Set and_ids = 1; */
        if (message.identifier.oneofKind === "andIds")
            Principal_Set.internalBinaryWrite(message.identifier.andIds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.rbac.v2.Principal.Set or_ids = 2; */
        if (message.identifier.oneofKind === "orIds")
            Principal_Set.internalBinaryWrite(message.identifier.orIds, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool any = 3; */
        if (message.identifier.oneofKind === "any")
            writer.tag(3, WireType.Varint).bool(message.identifier.any);
        /* envoy.config.rbac.v2.Principal.Authenticated authenticated = 4; */
        if (message.identifier.oneofKind === "authenticated")
            Principal_Authenticated.internalBinaryWrite(message.identifier.authenticated, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.CidrRange source_ip = 5 [deprecated = true]; */
        if (message.identifier.oneofKind === "sourceIp")
            CidrRange.internalBinaryWrite(message.identifier.sourceIp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.CidrRange direct_remote_ip = 10; */
        if (message.identifier.oneofKind === "directRemoteIp")
            CidrRange.internalBinaryWrite(message.identifier.directRemoteIp, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.CidrRange remote_ip = 11; */
        if (message.identifier.oneofKind === "remoteIp")
            CidrRange.internalBinaryWrite(message.identifier.remoteIp, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.route.HeaderMatcher header = 6; */
        if (message.identifier.oneofKind === "header")
            HeaderMatcher.internalBinaryWrite(message.identifier.header, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.PathMatcher url_path = 9; */
        if (message.identifier.oneofKind === "urlPath")
            PathMatcher.internalBinaryWrite(message.identifier.urlPath, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.matcher.MetadataMatcher metadata = 7; */
        if (message.identifier.oneofKind === "metadata")
            MetadataMatcher.internalBinaryWrite(message.identifier.metadata, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.rbac.v2.Principal not_id = 8; */
        if (message.identifier.oneofKind === "notId")
            Principal.internalBinaryWrite(message.identifier.notId, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Principal
 */
export const Principal = new Principal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Principal_Set$Type extends MessageType<Principal_Set> {
    constructor() {
        super("envoy.config.rbac.v2.Principal.Set", [
            { no: 1, name: "ids", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Principal, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<Principal_Set>): Principal_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<Principal_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Principal_Set): Principal_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.rbac.v2.Principal ids */ 1:
                    message.ids.push(Principal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Principal_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.rbac.v2.Principal ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            Principal.internalBinaryWrite(message.ids[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Principal.Set
 */
export const Principal_Set = new Principal_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Principal_Authenticated$Type extends MessageType<Principal_Authenticated> {
    constructor() {
        super("envoy.config.rbac.v2.Principal.Authenticated", [
            { no: 2, name: "principal_name", kind: "message", T: () => StringMatcher }
        ]);
    }
    create(value?: PartialMessage<Principal_Authenticated>): Principal_Authenticated {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Principal_Authenticated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Principal_Authenticated): Principal_Authenticated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.type.matcher.StringMatcher principal_name */ 2:
                    message.principalName = StringMatcher.internalBinaryRead(reader, reader.uint32(), options, message.principalName);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Principal_Authenticated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.type.matcher.StringMatcher principal_name = 2; */
        if (message.principalName)
            StringMatcher.internalBinaryWrite(message.principalName, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.rbac.v2.Principal.Authenticated
 */
export const Principal_Authenticated = new Principal_Authenticated$Type();
