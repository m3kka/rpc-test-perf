// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/retry/omit_host_metadata/v2/omit_host_metadata_config.proto" (package "envoy.config.retry.omit_host_metadata.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Metadata } from "../../../../api/v2/core/base";
// [#protodoc-title: Omit host metadata retry predicate]

/**
 * A retry host predicate that can be used to reject a host based on
 * predefined metadata match criteria.
 * [#extension: envoy.retry_host_predicates.omit_host_metadata]
 *
 * @generated from protobuf message envoy.config.retry.omit_host_metadata.v2.OmitHostMetadataConfig
 */
export interface OmitHostMetadataConfig {
    /**
     * Retry host predicate metadata match criteria. The hosts in
     * the upstream cluster with matching metadata will be omitted while
     * attempting a retry of a failed request. The metadata should be specified
     * under the *envoy.lb* key.
     *
     * @generated from protobuf field: envoy.api.v2.core.Metadata metadata_match = 1;
     */
    metadataMatch?: Metadata;
}
// @generated message type with reflection information, may provide speed optimized methods
class OmitHostMetadataConfig$Type extends MessageType<OmitHostMetadataConfig> {
    constructor() {
        super("envoy.config.retry.omit_host_metadata.v2.OmitHostMetadataConfig", [
            { no: 1, name: "metadata_match", kind: "message", T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<OmitHostMetadataConfig>): OmitHostMetadataConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OmitHostMetadataConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OmitHostMetadataConfig): OmitHostMetadataConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.Metadata metadata_match */ 1:
                    message.metadataMatch = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadataMatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OmitHostMetadataConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.Metadata metadata_match = 1; */
        if (message.metadataMatch)
            Metadata.internalBinaryWrite(message.metadataMatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.retry.omit_host_metadata.v2.OmitHostMetadataConfig
 */
export const OmitHostMetadataConfig = new OmitHostMetadataConfig$Type();
