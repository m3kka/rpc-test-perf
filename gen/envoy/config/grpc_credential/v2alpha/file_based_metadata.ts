// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/grpc_credential/v2alpha/file_based_metadata.proto" (package "envoy.config.grpc_credential.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DataSource } from "../../../api/v2/core/base";
// [#protodoc-title: Grpc Credentials File Based Metadata]
// Configuration for File Based Metadata Grpc Credentials Plugin
// [#extension: envoy.grpc_credentials.file_based_metadata]

/**
 * @generated from protobuf message envoy.config.grpc_credential.v2alpha.FileBasedMetadataConfig
 */
export interface FileBasedMetadataConfig {
    /**
     * Location or inline data of secret to use for authentication of the Google gRPC connection
     * this secret will be attached to a header of the gRPC connection
     *
     * @generated from protobuf field: envoy.api.v2.core.DataSource secret_data = 1;
     */
    secretData?: DataSource;
    /**
     * Metadata header key to use for sending the secret data
     * if no header key is set, "authorization" header will be used
     *
     * @generated from protobuf field: string header_key = 2;
     */
    headerKey: string;
    /**
     * Prefix to prepend to the secret in the metadata header
     * if no prefix is set, the default is to use no prefix
     *
     * @generated from protobuf field: string header_prefix = 3;
     */
    headerPrefix: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileBasedMetadataConfig$Type extends MessageType<FileBasedMetadataConfig> {
    constructor() {
        super("envoy.config.grpc_credential.v2alpha.FileBasedMetadataConfig", [
            { no: 1, name: "secret_data", kind: "message", T: () => DataSource, options: { "udpa.annotations.sensitive": true } },
            { no: 2, name: "header_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "header_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FileBasedMetadataConfig>): FileBasedMetadataConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerKey = "";
        message.headerPrefix = "";
        if (value !== undefined)
            reflectionMergePartial<FileBasedMetadataConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileBasedMetadataConfig): FileBasedMetadataConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.DataSource secret_data */ 1:
                    message.secretData = DataSource.internalBinaryRead(reader, reader.uint32(), options, message.secretData);
                    break;
                case /* string header_key */ 2:
                    message.headerKey = reader.string();
                    break;
                case /* string header_prefix */ 3:
                    message.headerPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileBasedMetadataConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.DataSource secret_data = 1; */
        if (message.secretData)
            DataSource.internalBinaryWrite(message.secretData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string header_key = 2; */
        if (message.headerKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.headerKey);
        /* string header_prefix = 3; */
        if (message.headerPrefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.headerPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.grpc_credential.v2alpha.FileBasedMetadataConfig
 */
export const FileBasedMetadataConfig = new FileBasedMetadataConfig$Type();
