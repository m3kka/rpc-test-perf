// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/listener/v2/api_listener.proto (package envoy.config.listener.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Describes a type of API listener, which is used in non-proxy clients. The type of API
 * exposed to the non-proxy application depends on the type of API listener.
 *
 * @generated from message envoy.config.listener.v2.ApiListener
 */
export declare class ApiListener extends Message<ApiListener> {
  /**
   * The type in this field determines the type of API listener. At present, the following
   * types are supported:
   * envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager (HTTP)
   * [#next-major-version: In the v3 API, replace this Any field with a oneof containing the
   * specific config message for each type of API listener. We could not do this in v2 because
   * it would have caused circular dependencies for go protos: lds.proto depends on this file,
   * and http_connection_manager.proto depends on rds.proto, which is in the same directory as
   * lds.proto, so lds.proto cannot depend on this file.]
   *
   * @generated from field: google.protobuf.Any api_listener = 1;
   */
  apiListener?: Any;

  constructor(data?: PartialMessage<ApiListener>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.listener.v2.ApiListener";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiListener;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiListener;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiListener;

  static equals(a: ApiListener | PlainMessage<ApiListener> | undefined, b: ApiListener | PlainMessage<ApiListener> | undefined): boolean;
}

