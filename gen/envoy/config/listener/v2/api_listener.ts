// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/listener/v2/api_listener.proto" (package "envoy.config.listener.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
// [#protodoc-title: API listener]

/**
 * Describes a type of API listener, which is used in non-proxy clients. The type of API
 * exposed to the non-proxy application depends on the type of API listener.
 *
 * @generated from protobuf message envoy.config.listener.v2.ApiListener
 */
export interface ApiListener {
    /**
     * The type in this field determines the type of API listener. At present, the following
     * types are supported:
     * envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager (HTTP)
     * [#next-major-version: In the v3 API, replace this Any field with a oneof containing the
     * specific config message for each type of API listener. We could not do this in v2 because
     * it would have caused circular dependencies for go protos: lds.proto depends on this file,
     * and http_connection_manager.proto depends on rds.proto, which is in the same directory as
     * lds.proto, so lds.proto cannot depend on this file.]
     *
     * @generated from protobuf field: google.protobuf.Any api_listener = 1;
     */
    apiListener?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class ApiListener$Type extends MessageType<ApiListener> {
    constructor() {
        super("envoy.config.listener.v2.ApiListener", [
            { no: 1, name: "api_listener", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<ApiListener>): ApiListener {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ApiListener>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApiListener): ApiListener {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any api_listener */ 1:
                    message.apiListener = Any.internalBinaryRead(reader, reader.uint32(), options, message.apiListener);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApiListener, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any api_listener = 1; */
        if (message.apiListener)
            Any.internalBinaryWrite(message.apiListener, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.listener.v2.ApiListener
 */
export const ApiListener = new ApiListener$Type();
