// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/listener/v3/listener.proto (package envoy.config.listener.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { Address } from "../../core/v3/address_pb.js";
import { SocketOption, SocketOptionsOverride } from "../../core/v3/socket_option_pb.js";
import { CollectionEntry } from "../../../../xds/core/v3/collection_entry_pb.js";
import { FilterChain, ListenerFilter } from "./listener_components_pb.js";
import { Matcher } from "../../../../xds/type/matcher/v3/matcher_pb.js";
import { Metadata, TrafficDirection } from "../../core/v3/base_pb.js";
import { UdpListenerConfig } from "./udp_listener_config_pb.js";
import { ApiListener } from "./api_listener_pb.js";
import { AccessLog } from "../../accesslog/v3/accesslog_pb.js";
import { TypedExtensionConfig } from "../../core/v3/extension_pb.js";

/**
 * The additional address the listener is listening on.
 *
 * @generated from message envoy.config.listener.v3.AdditionalAddress
 */
export const AdditionalAddress = proto3.makeMessageType(
  "envoy.config.listener.v3.AdditionalAddress",
  () => [
    { no: 1, name: "address", kind: "message", T: Address },
    { no: 2, name: "socket_options", kind: "message", T: SocketOptionsOverride },
  ],
);

/**
 * Listener list collections. Entries are ``Listener`` resources or references.
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.listener.v3.ListenerCollection
 */
export const ListenerCollection = proto3.makeMessageType(
  "envoy.config.listener.v3.ListenerCollection",
  () => [
    { no: 1, name: "entries", kind: "message", T: CollectionEntry, repeated: true },
  ],
);

/**
 * [#next-free-field: 35]
 *
 * @generated from message envoy.config.listener.v3.Listener
 */
export const Listener = proto3.makeMessageType(
  "envoy.config.listener.v3.Listener",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "message", T: Address },
    { no: 33, name: "additional_addresses", kind: "message", T: AdditionalAddress, repeated: true },
    { no: 28, name: "stat_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filter_chains", kind: "message", T: FilterChain, repeated: true },
    { no: 32, name: "filter_chain_matcher", kind: "message", T: Matcher },
    { no: 4, name: "use_original_dst", kind: "message", T: BoolValue },
    { no: 25, name: "default_filter_chain", kind: "message", T: FilterChain },
    { no: 5, name: "per_connection_buffer_limit_bytes", kind: "message", T: UInt32Value },
    { no: 6, name: "metadata", kind: "message", T: Metadata },
    { no: 7, name: "deprecated_v1", kind: "message", T: Listener_DeprecatedV1 },
    { no: 8, name: "drain_type", kind: "enum", T: proto3.getEnumType(Listener_DrainType) },
    { no: 9, name: "listener_filters", kind: "message", T: ListenerFilter, repeated: true },
    { no: 15, name: "listener_filters_timeout", kind: "message", T: Duration },
    { no: 17, name: "continue_on_listener_filters_timeout", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "transparent", kind: "message", T: BoolValue },
    { no: 11, name: "freebind", kind: "message", T: BoolValue },
    { no: 13, name: "socket_options", kind: "message", T: SocketOption, repeated: true },
    { no: 12, name: "tcp_fast_open_queue_length", kind: "message", T: UInt32Value },
    { no: 16, name: "traffic_direction", kind: "enum", T: proto3.getEnumType(TrafficDirection) },
    { no: 18, name: "udp_listener_config", kind: "message", T: UdpListenerConfig },
    { no: 19, name: "api_listener", kind: "message", T: ApiListener },
    { no: 20, name: "connection_balance_config", kind: "message", T: Listener_ConnectionBalanceConfig },
    { no: 21, name: "reuse_port", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 29, name: "enable_reuse_port", kind: "message", T: BoolValue },
    { no: 22, name: "access_log", kind: "message", T: AccessLog, repeated: true },
    { no: 24, name: "tcp_backlog_size", kind: "message", T: UInt32Value },
    { no: 34, name: "max_connections_to_accept_per_socket_event", kind: "message", T: UInt32Value },
    { no: 26, name: "bind_to_port", kind: "message", T: BoolValue },
    { no: 27, name: "internal_listener", kind: "message", T: Listener_InternalListenerConfig, oneof: "listener_specifier" },
    { no: 30, name: "enable_mptcp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 31, name: "ignore_global_conn_limit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from enum envoy.config.listener.v3.Listener.DrainType
 */
export const Listener_DrainType = proto3.makeEnum(
  "envoy.config.listener.v3.Listener.DrainType",
  [
    {no: 0, name: "DEFAULT"},
    {no: 1, name: "MODIFY_ONLY"},
  ],
);

/**
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.listener.v3.Listener.DeprecatedV1
 */
export const Listener_DeprecatedV1 = proto3.makeMessageType(
  "envoy.config.listener.v3.Listener.DeprecatedV1",
  () => [
    { no: 1, name: "bind_to_port", kind: "message", T: BoolValue },
  ],
  {localName: "Listener_DeprecatedV1"},
);

/**
 * Configuration for listener connection balancing.
 *
 * @generated from message envoy.config.listener.v3.Listener.ConnectionBalanceConfig
 */
export const Listener_ConnectionBalanceConfig = proto3.makeMessageType(
  "envoy.config.listener.v3.Listener.ConnectionBalanceConfig",
  () => [
    { no: 1, name: "exact_balance", kind: "message", T: Listener_ConnectionBalanceConfig_ExactBalance, oneof: "balance_type" },
    { no: 2, name: "extend_balance", kind: "message", T: TypedExtensionConfig, oneof: "balance_type" },
  ],
  {localName: "Listener_ConnectionBalanceConfig"},
);

/**
 * A connection balancer implementation that does exact balancing. This means that a lock is
 * held during balancing so that connection counts are nearly exactly balanced between worker
 * threads. This is "nearly" exact in the sense that a connection might close in parallel thus
 * making the counts incorrect, but this should be rectified on the next accept. This balancer
 * sacrifices accept throughput for accuracy and should be used when there are a small number of
 * connections that rarely cycle (e.g., service mesh gRPC egress).
 *
 * @generated from message envoy.config.listener.v3.Listener.ConnectionBalanceConfig.ExactBalance
 */
export const Listener_ConnectionBalanceConfig_ExactBalance = proto3.makeMessageType(
  "envoy.config.listener.v3.Listener.ConnectionBalanceConfig.ExactBalance",
  [],
  {localName: "Listener_ConnectionBalanceConfig_ExactBalance"},
);

/**
 * Configuration for envoy internal listener. All the future internal listener features should be added here.
 *
 * @generated from message envoy.config.listener.v3.Listener.InternalListenerConfig
 */
export const Listener_InternalListenerConfig = proto3.makeMessageType(
  "envoy.config.listener.v3.Listener.InternalListenerConfig",
  [],
  {localName: "Listener_InternalListenerConfig"},
);

/**
 * A placeholder proto so that users can explicitly configure the standard
 * Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.listener.v3.ListenerManager
 */
export const ListenerManager = proto3.makeMessageType(
  "envoy.config.listener.v3.ListenerManager",
  [],
);

/**
 * A placeholder proto so that users can explicitly configure the standard
 * Validation Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.listener.v3.ValidationListenerManager
 */
export const ValidationListenerManager = proto3.makeMessageType(
  "envoy.config.listener.v3.ValidationListenerManager",
  [],
);

/**
 * A placeholder proto so that users can explicitly configure the API
 * Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.listener.v3.ApiListenerManager
 */
export const ApiListenerManager = proto3.makeMessageType(
  "envoy.config.listener.v3.ApiListenerManager",
  [],
);

