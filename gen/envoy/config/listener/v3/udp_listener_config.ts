// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/listener/v3/udp_listener_config.proto" (package "envoy.config.listener.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "../../core/v3/extension";
import { QuicProtocolOptions } from "./quic_config";
import { UdpSocketConfig } from "../../core/v3/udp_socket_config";
// [#protodoc-title: UDP listener config]
// Listener :ref:`configuration overview <config_listeners>`

/**
 * [#next-free-field: 9]
 *
 * @generated from protobuf message envoy.config.listener.v3.UdpListenerConfig
 */
export interface UdpListenerConfig {
    /**
     * UDP socket configuration for the listener. The default for
     * :ref:`prefer_gro <envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro>` is false for
     * listener sockets. If receiving a large amount of datagrams from a small number of sources, it
     * may be worthwhile to enable this option after performance testing.
     *
     * @generated from protobuf field: envoy.config.core.v3.UdpSocketConfig downstream_socket_config = 5;
     */
    downstreamSocketConfig?: UdpSocketConfig;
    /**
     * Configuration for QUIC protocol. If empty, QUIC will not be enabled on this listener. Set
     * to the default object to enable QUIC without modifying any additional options.
     *
     * @generated from protobuf field: envoy.config.listener.v3.QuicProtocolOptions quic_options = 7;
     */
    quicOptions?: QuicProtocolOptions;
    /**
     * Configuration for the UDP packet writer. If empty, HTTP/3 will use GSO if available
     * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpGsoBatchWriterFactory>`)
     * or the default kernel sendmsg if not,
     * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpDefaultWriterFactory>`)
     * and raw UDP will use kernel sendmsg.
     * [#extension-category: envoy.udp_packet_writer]
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig udp_packet_packet_writer_config = 8;
     */
    udpPacketPacketWriterConfig?: TypedExtensionConfig;
}
/**
 * @generated from protobuf message envoy.config.listener.v3.ActiveRawUdpListenerConfig
 */
export interface ActiveRawUdpListenerConfig {
}
// @generated message type with reflection information, may provide speed optimized methods
class UdpListenerConfig$Type extends MessageType<UdpListenerConfig> {
    constructor() {
        super("envoy.config.listener.v3.UdpListenerConfig", [
            { no: 5, name: "downstream_socket_config", kind: "message", T: () => UdpSocketConfig },
            { no: 7, name: "quic_options", kind: "message", T: () => QuicProtocolOptions },
            { no: 8, name: "udp_packet_packet_writer_config", kind: "message", T: () => TypedExtensionConfig }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.listener.UdpListenerConfig" } });
    }
    create(value?: PartialMessage<UdpListenerConfig>): UdpListenerConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UdpListenerConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UdpListenerConfig): UdpListenerConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.UdpSocketConfig downstream_socket_config */ 5:
                    message.downstreamSocketConfig = UdpSocketConfig.internalBinaryRead(reader, reader.uint32(), options, message.downstreamSocketConfig);
                    break;
                case /* envoy.config.listener.v3.QuicProtocolOptions quic_options */ 7:
                    message.quicOptions = QuicProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.quicOptions);
                    break;
                case /* envoy.config.core.v3.TypedExtensionConfig udp_packet_packet_writer_config */ 8:
                    message.udpPacketPacketWriterConfig = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.udpPacketPacketWriterConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UdpListenerConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.UdpSocketConfig downstream_socket_config = 5; */
        if (message.downstreamSocketConfig)
            UdpSocketConfig.internalBinaryWrite(message.downstreamSocketConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.listener.v3.QuicProtocolOptions quic_options = 7; */
        if (message.quicOptions)
            QuicProtocolOptions.internalBinaryWrite(message.quicOptions, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.TypedExtensionConfig udp_packet_packet_writer_config = 8; */
        if (message.udpPacketPacketWriterConfig)
            TypedExtensionConfig.internalBinaryWrite(message.udpPacketPacketWriterConfig, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.listener.v3.UdpListenerConfig
 */
export const UdpListenerConfig = new UdpListenerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActiveRawUdpListenerConfig$Type extends MessageType<ActiveRawUdpListenerConfig> {
    constructor() {
        super("envoy.config.listener.v3.ActiveRawUdpListenerConfig", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.listener.ActiveRawUdpListenerConfig" } });
    }
    create(value?: PartialMessage<ActiveRawUdpListenerConfig>): ActiveRawUdpListenerConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ActiveRawUdpListenerConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActiveRawUdpListenerConfig): ActiveRawUdpListenerConfig {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ActiveRawUdpListenerConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.listener.v3.ActiveRawUdpListenerConfig
 */
export const ActiveRawUdpListenerConfig = new ActiveRawUdpListenerConfig$Type();
