// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/listener/v3/udp_listener_config.proto (package envoy.config.listener.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { UdpSocketConfig } from "../../core/v3/udp_socket_config_pb.js";
import type { QuicProtocolOptions } from "./quic_config_pb.js";
import type { TypedExtensionConfig } from "../../core/v3/extension_pb.js";

/**
 * [#next-free-field: 9]
 *
 * @generated from message envoy.config.listener.v3.UdpListenerConfig
 */
export declare class UdpListenerConfig extends Message<UdpListenerConfig> {
  /**
   * UDP socket configuration for the listener. The default for
   * :ref:`prefer_gro <envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro>` is false for
   * listener sockets. If receiving a large amount of datagrams from a small number of sources, it
   * may be worthwhile to enable this option after performance testing.
   *
   * @generated from field: envoy.config.core.v3.UdpSocketConfig downstream_socket_config = 5;
   */
  downstreamSocketConfig?: UdpSocketConfig;

  /**
   * Configuration for QUIC protocol. If empty, QUIC will not be enabled on this listener. Set
   * to the default object to enable QUIC without modifying any additional options.
   *
   * @generated from field: envoy.config.listener.v3.QuicProtocolOptions quic_options = 7;
   */
  quicOptions?: QuicProtocolOptions;

  /**
   * Configuration for the UDP packet writer. If empty, HTTP/3 will use GSO if available
   * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpGsoBatchWriterFactory>`)
   * or the default kernel sendmsg if not,
   * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpDefaultWriterFactory>`)
   * and raw UDP will use kernel sendmsg.
   * [#extension-category: envoy.udp_packet_writer]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig udp_packet_packet_writer_config = 8;
   */
  udpPacketPacketWriterConfig?: TypedExtensionConfig;

  constructor(data?: PartialMessage<UdpListenerConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.listener.v3.UdpListenerConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UdpListenerConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UdpListenerConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UdpListenerConfig;

  static equals(a: UdpListenerConfig | PlainMessage<UdpListenerConfig> | undefined, b: UdpListenerConfig | PlainMessage<UdpListenerConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.config.listener.v3.ActiveRawUdpListenerConfig
 */
export declare class ActiveRawUdpListenerConfig extends Message<ActiveRawUdpListenerConfig> {
  constructor(data?: PartialMessage<ActiveRawUdpListenerConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.listener.v3.ActiveRawUdpListenerConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveRawUdpListenerConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveRawUdpListenerConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveRawUdpListenerConfig;

  static equals(a: ActiveRawUdpListenerConfig | PlainMessage<ActiveRawUdpListenerConfig> | undefined, b: ActiveRawUdpListenerConfig | PlainMessage<ActiveRawUdpListenerConfig> | undefined): boolean;
}

