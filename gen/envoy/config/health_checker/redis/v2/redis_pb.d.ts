// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/health_checker/redis/v2/redis.proto (package envoy.config.health_checker.redis.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message envoy.config.health_checker.redis.v2.Redis
 */
export declare class Redis extends Message<Redis> {
  /**
   * If set, optionally perform ``EXISTS <key>`` instead of ``PING``. A return value
   * from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
   * than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
   * by setting the specified key to any value and waiting for traffic to drain.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  constructor(data?: PartialMessage<Redis>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.health_checker.redis.v2.Redis";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Redis;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Redis;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Redis;

  static equals(a: Redis | PlainMessage<Redis> | undefined, b: Redis | PlainMessage<Redis> | undefined): boolean;
}

