// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/cluster/redis/redis_cluster.proto" (package "envoy.config.cluster.redis", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { Duration } from "../../../../google/protobuf/duration";
// [#protodoc-title: Redis Cluster Configuration]
// This cluster adds support for `Redis Cluster <https://redis.io/topics/cluster-spec>`_, as part
// of :ref:`Envoy's support for Redis Cluster <arch_overview_redis>`.
// 
// Redis Cluster is an extension of Redis which supports sharding and high availability (where a
// shard that loses its primary fails over to a replica, and designates it as the new primary).
// However, as there is no unified frontend or proxy service in front of Redis Cluster, the client
// (in this case Envoy) must locally maintain the state of the Redis Cluster, specifically the
// topology. A random node in the cluster is queried for the topology using the `CLUSTER SLOTS
// command <https://redis.io/commands/cluster-slots>`_. This result is then stored locally, and
// updated at user-configured intervals.
// 
// Additionally, if
// :ref:`enable_redirection<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.enable_redirection>`
// is true, then moved and ask redirection errors from upstream servers will trigger a topology
// refresh when they exceed a user-configured error threshold.
// 
// Example:
// 
// .. code-block:: yaml
// 
//     name: name
//     connect_timeout: 0.25s
//     dns_lookup_family: V4_ONLY
//     hosts:
//     - socket_address:
//       address: foo.bar.com
//       port_value: 22120
//     cluster_type:
//     name: envoy.clusters.redis
//     typed_config:
//       "@type": type.googleapis.com/google.protobuf.Struct
//       value:
//         cluster_refresh_rate: 30s
//         cluster_refresh_timeout: 0.5s
//         redirect_refresh_interval: 10s
//         redirect_refresh_threshold: 10
// [#extension: envoy.clusters.redis]

/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.cluster.redis.RedisClusterConfig
 */
export interface RedisClusterConfig {
    /**
     * Interval between successive topology refresh requests. If not set, this defaults to 5s.
     *
     * @generated from protobuf field: google.protobuf.Duration cluster_refresh_rate = 1;
     */
    clusterRefreshRate?: Duration;
    /**
     * Timeout for topology refresh request. If not set, this defaults to 3s.
     *
     * @generated from protobuf field: google.protobuf.Duration cluster_refresh_timeout = 2;
     */
    clusterRefreshTimeout?: Duration;
    /**
     * The minimum interval that must pass after triggering a topology refresh request before a new
     * request can possibly be triggered again. Any errors received during one of these
     * time intervals are ignored. If not set, this defaults to 5s.
     *
     * @generated from protobuf field: google.protobuf.Duration redirect_refresh_interval = 3;
     */
    redirectRefreshInterval?: Duration;
    /**
     * The number of redirection errors that must be received before
     * triggering a topology refresh request. If not set, this defaults to 5.
     * If this is set to 0, topology refresh after redirect is disabled.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value redirect_refresh_threshold = 4;
     */
    redirectRefreshThreshold?: UInt32Value;
    /**
     * The number of failures that must be received before triggering a topology refresh request.
     * If not set, this defaults to 0, which disables the topology refresh due to failure.
     *
     * @generated from protobuf field: uint32 failure_refresh_threshold = 5;
     */
    failureRefreshThreshold: number;
    /**
     * The number of hosts became degraded or unhealthy before triggering a topology refresh request.
     * If not set, this defaults to 0, which disables the topology refresh due to degraded or
     * unhealthy host.
     *
     * @generated from protobuf field: uint32 host_degraded_refresh_threshold = 6;
     */
    hostDegradedRefreshThreshold: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class RedisClusterConfig$Type extends MessageType<RedisClusterConfig> {
    constructor() {
        super("envoy.config.cluster.redis.RedisClusterConfig", [
            { no: 1, name: "cluster_refresh_rate", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 2, name: "cluster_refresh_timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 3, name: "redirect_refresh_interval", kind: "message", T: () => Duration },
            { no: 4, name: "redirect_refresh_threshold", kind: "message", T: () => UInt32Value },
            { no: 5, name: "failure_refresh_threshold", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "host_degraded_refresh_threshold", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RedisClusterConfig>): RedisClusterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.failureRefreshThreshold = 0;
        message.hostDegradedRefreshThreshold = 0;
        if (value !== undefined)
            reflectionMergePartial<RedisClusterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedisClusterConfig): RedisClusterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration cluster_refresh_rate */ 1:
                    message.clusterRefreshRate = Duration.internalBinaryRead(reader, reader.uint32(), options, message.clusterRefreshRate);
                    break;
                case /* google.protobuf.Duration cluster_refresh_timeout */ 2:
                    message.clusterRefreshTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.clusterRefreshTimeout);
                    break;
                case /* google.protobuf.Duration redirect_refresh_interval */ 3:
                    message.redirectRefreshInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.redirectRefreshInterval);
                    break;
                case /* google.protobuf.UInt32Value redirect_refresh_threshold */ 4:
                    message.redirectRefreshThreshold = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.redirectRefreshThreshold);
                    break;
                case /* uint32 failure_refresh_threshold */ 5:
                    message.failureRefreshThreshold = reader.uint32();
                    break;
                case /* uint32 host_degraded_refresh_threshold */ 6:
                    message.hostDegradedRefreshThreshold = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedisClusterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration cluster_refresh_rate = 1; */
        if (message.clusterRefreshRate)
            Duration.internalBinaryWrite(message.clusterRefreshRate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration cluster_refresh_timeout = 2; */
        if (message.clusterRefreshTimeout)
            Duration.internalBinaryWrite(message.clusterRefreshTimeout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration redirect_refresh_interval = 3; */
        if (message.redirectRefreshInterval)
            Duration.internalBinaryWrite(message.redirectRefreshInterval, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value redirect_refresh_threshold = 4; */
        if (message.redirectRefreshThreshold)
            UInt32Value.internalBinaryWrite(message.redirectRefreshThreshold, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 failure_refresh_threshold = 5; */
        if (message.failureRefreshThreshold !== 0)
            writer.tag(5, WireType.Varint).uint32(message.failureRefreshThreshold);
        /* uint32 host_degraded_refresh_threshold = 6; */
        if (message.hostDegradedRefreshThreshold !== 0)
            writer.tag(6, WireType.Varint).uint32(message.hostDegradedRefreshThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.cluster.redis.RedisClusterConfig
 */
export const RedisClusterConfig = new RedisClusterConfig$Type();
