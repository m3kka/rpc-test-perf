// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/cluster/dynamic_forward_proxy/v2alpha/cluster.proto" (package "envoy.config.cluster.dynamic_forward_proxy.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DnsCacheConfig } from "../../../common/dynamic_forward_proxy/v2alpha/dns_cache";
// [#protodoc-title: Dynamic forward proxy cluster configuration]

/**
 * Configuration for the dynamic forward proxy cluster. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.clusters.dynamic_forward_proxy]
 *
 * @generated from protobuf message envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig
 */
export interface ClusterConfig {
    /**
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * <envoy_api_field_config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig.dns_cache_config>`.
     *
     * @generated from protobuf field: envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config = 1;
     */
    dnsCacheConfig?: DnsCacheConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClusterConfig$Type extends MessageType<ClusterConfig> {
    constructor() {
        super("envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig", [
            { no: 1, name: "dns_cache_config", kind: "message", T: () => DnsCacheConfig, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<ClusterConfig>): ClusterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClusterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterConfig): ClusterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config */ 1:
                    message.dnsCacheConfig = DnsCacheConfig.internalBinaryRead(reader, reader.uint32(), options, message.dnsCacheConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config = 1; */
        if (message.dnsCacheConfig)
            DnsCacheConfig.internalBinaryWrite(message.dnsCacheConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig
 */
export const ClusterConfig = new ClusterConfig$Type();
