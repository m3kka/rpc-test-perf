// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/dynamic_forward_proxy/v2alpha/dynamic_forward_proxy.proto" (package "envoy.config.filter.http.dynamic_forward_proxy.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v2alpha/dns_cache";
// [#protodoc-title: Dynamic forward proxy]

/**
 * Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.filters.http.dynamic_forward_proxy]
 *
 * @generated from protobuf message envoy.config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig
 */
export interface FilterConfig {
    /**
     * The DNS cache configuration that the filter will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy cluster configuration
     * <envoy_api_field_config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig.dns_cache_config>`.
     *
     * @generated from protobuf field: envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config = 1;
     */
    dnsCacheConfig?: DnsCacheConfig;
}
/**
 * Per route Configuration for the dynamic forward proxy HTTP filter.
 *
 * @generated from protobuf message envoy.config.filter.http.dynamic_forward_proxy.v2alpha.PerRouteConfig
 */
export interface PerRouteConfig {
    /**
     * @generated from protobuf oneof: host_rewrite_specifier
     */
    hostRewriteSpecifier: {
        oneofKind: "hostRewrite";
        /**
         * Indicates that before DNS lookup, the host header will be swapped with
         * this value. If not set or empty, the original host header value
         * will be used and no rewrite will happen.
         *
         * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
         * option shouldn't be used with
         * :ref:`HCM host rewrite <envoy_api_field_route.RouteAction.host_rewrite>` given that the
         * value set here would be used for DNS lookups whereas the value set in the HCM would be used
         * for host header forwarding which is not the desired outcome.
         *
         * @generated from protobuf field: string host_rewrite = 1;
         */
        hostRewrite: string;
    } | {
        oneofKind: "autoHostRewriteHeader";
        /**
         * Indicates that before DNS lookup, the host header will be swapped with
         * the value of this header. If not set or empty, the original host header
         * value will be used and no rewrite will happen.
         *
         * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
         * option shouldn't be used with
         * :ref:`HCM host rewrite header <envoy_api_field_route.RouteAction.auto_host_rewrite_header>`
         * given that the value set here would be used for DNS lookups whereas the value set in the HCM
         * would be used for host header forwarding which is not the desired outcome.
         *
         * .. note::
         *
         *   If the header appears multiple times only the first value is used.
         *
         * @generated from protobuf field: string auto_host_rewrite_header = 2;
         */
        autoHostRewriteHeader: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterConfig$Type extends MessageType<FilterConfig> {
    constructor() {
        super("envoy.config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig", [
            { no: 1, name: "dns_cache_config", kind: "message", T: () => DnsCacheConfig, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<FilterConfig>): FilterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FilterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterConfig): FilterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config */ 1:
                    message.dnsCacheConfig = DnsCacheConfig.internalBinaryRead(reader, reader.uint32(), options, message.dnsCacheConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig dns_cache_config = 1; */
        if (message.dnsCacheConfig)
            DnsCacheConfig.internalBinaryWrite(message.dnsCacheConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig
 */
export const FilterConfig = new FilterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerRouteConfig$Type extends MessageType<PerRouteConfig> {
    constructor() {
        super("envoy.config.filter.http.dynamic_forward_proxy.v2alpha.PerRouteConfig", [
            { no: 1, name: "host_rewrite", kind: "scalar", oneof: "hostRewriteSpecifier", T: 9 /*ScalarType.STRING*/, options: { "udpa.annotations.field_migrate": { rename: "host_rewrite_literal" } } },
            { no: 2, name: "auto_host_rewrite_header", kind: "scalar", oneof: "hostRewriteSpecifier", T: 9 /*ScalarType.STRING*/, options: { "udpa.annotations.field_migrate": { rename: "host_rewrite_header" } } }
        ]);
    }
    create(value?: PartialMessage<PerRouteConfig>): PerRouteConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hostRewriteSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PerRouteConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerRouteConfig): PerRouteConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host_rewrite */ 1:
                    message.hostRewriteSpecifier = {
                        oneofKind: "hostRewrite",
                        hostRewrite: reader.string()
                    };
                    break;
                case /* string auto_host_rewrite_header */ 2:
                    message.hostRewriteSpecifier = {
                        oneofKind: "autoHostRewriteHeader",
                        autoHostRewriteHeader: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerRouteConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host_rewrite = 1; */
        if (message.hostRewriteSpecifier.oneofKind === "hostRewrite")
            writer.tag(1, WireType.LengthDelimited).string(message.hostRewriteSpecifier.hostRewrite);
        /* string auto_host_rewrite_header = 2; */
        if (message.hostRewriteSpecifier.oneofKind === "autoHostRewriteHeader")
            writer.tag(2, WireType.LengthDelimited).string(message.hostRewriteSpecifier.autoHostRewriteHeader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.dynamic_forward_proxy.v2alpha.PerRouteConfig
 */
export const PerRouteConfig = new PerRouteConfig$Type();
