// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/lua/v2/lua.proto" (package "envoy.config.filter.http.lua.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Lua]
// Lua :ref:`configuration overview <config_http_filters_lua>`.
// [#extension: envoy.filters.http.lua]

/**
 * @generated from protobuf message envoy.config.filter.http.lua.v2.Lua
 */
export interface Lua {
    /**
     * The Lua code that Envoy will execute. This can be a very small script that
     * further loads code from disk if desired. Note that if JSON configuration is used, the code must
     * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
     * strings so complex scripts can be easily expressed inline in the configuration.
     *
     * @generated from protobuf field: string inline_code = 1;
     */
    inlineCode: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Lua$Type extends MessageType<Lua> {
    constructor() {
        super("envoy.config.filter.http.lua.v2.Lua", [
            { no: 1, name: "inline_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<Lua>): Lua {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inlineCode = "";
        if (value !== undefined)
            reflectionMergePartial<Lua>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Lua): Lua {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string inline_code */ 1:
                    message.inlineCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Lua, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string inline_code = 1; */
        if (message.inlineCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.inlineCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.lua.v2.Lua
 */
export const Lua = new Lua$Type();
