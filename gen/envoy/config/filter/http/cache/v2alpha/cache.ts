// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/cache/v2alpha/cache.proto" (package "envoy.config.filter.http.cache.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QueryParameterMatcher } from "../../../../../api/v2/route/route_components";
import { StringMatcher } from "../../../../../type/matcher/string";
import { Any } from "../../../../../../google/protobuf/any";
// [#protodoc-title: HTTP Cache Filter]
// [#extension: envoy.filters.http.cache]

/**
 * @generated from protobuf message envoy.config.filter.http.cache.v2alpha.CacheConfig
 */
export interface CacheConfig {
    /**
     * Config specific to the cache storage implementation.
     *
     * @generated from protobuf field: google.protobuf.Any typed_config = 1;
     */
    typedConfig?: Any;
    /**
     * List of matching rules that defines allowed *Vary* headers.
     *
     * The *vary* response header holds a list of header names that affect the
     * contents of a response, as described by
     * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
     *
     * During insertion, *allowed_vary_headers* acts as a allowlist: if a
     * response's *vary* header mentions any header names that aren't matched by any rules in
     * *allowed_vary_headers*, that response will not be cached.
     *
     * During lookup, *allowed_vary_headers* controls what request headers will be
     * sent to the cache storage implementation.
     *
     * @generated from protobuf field: repeated envoy.type.matcher.StringMatcher allowed_vary_headers = 2;
     */
    allowedVaryHeaders: StringMatcher[];
    /**
     * [#not-implemented-hide:]
     * <TODO(toddmgreer) implement key customization>
     *
     * Modifies cache key creation by restricting which parts of the URL are included.
     *
     * @generated from protobuf field: envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams key_creator_params = 3;
     */
    keyCreatorParams?: CacheConfig_KeyCreatorParams;
    /**
     * [#not-implemented-hide:]
     * <TODO(toddmgreer) implement size limit>
     *
     * Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
     * storage implementation may have its own limit beyond which it will reject insertions).
     *
     * @generated from protobuf field: uint32 max_body_bytes = 4;
     */
    maxBodyBytes: number;
}
/**
 * [#not-implemented-hide:]
 * Modifies cache key creation by restricting which parts of the URL are included.
 *
 * @generated from protobuf message envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams
 */
export interface CacheConfig_KeyCreatorParams {
    /**
     * If true, exclude the URL scheme from the cache key. Set to true if your origins always
     * produce the same response for http and https requests.
     *
     * @generated from protobuf field: bool exclude_scheme = 1;
     */
    excludeScheme: boolean;
    /**
     * If true, exclude the host from the cache key. Set to true if your origins' responses don't
     * ever depend on host.
     *
     * @generated from protobuf field: bool exclude_host = 2;
     */
    excludeHost: boolean;
    /**
     * If *query_parameters_included* is nonempty, only query parameters matched
     * by one or more of its matchers are included in the cache key. Any other
     * query params will not affect cache lookup.
     *
     * @generated from protobuf field: repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_included = 3;
     */
    queryParametersIncluded: QueryParameterMatcher[];
    /**
     * If *query_parameters_excluded* is nonempty, query parameters matched by one
     * or more of its matchers are excluded from the cache key (even if also
     * matched by *query_parameters_included*), and will not affect cache lookup.
     *
     * @generated from protobuf field: repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_excluded = 4;
     */
    queryParametersExcluded: QueryParameterMatcher[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CacheConfig$Type extends MessageType<CacheConfig> {
    constructor() {
        super("envoy.config.filter.http.cache.v2alpha.CacheConfig", [
            { no: 1, name: "typed_config", kind: "message", T: () => Any, options: { "validate.rules": { any: { required: true } } } },
            { no: 2, name: "allowed_vary_headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher },
            { no: 3, name: "key_creator_params", kind: "message", T: () => CacheConfig_KeyCreatorParams },
            { no: 4, name: "max_body_bytes", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CacheConfig>): CacheConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allowedVaryHeaders = [];
        message.maxBodyBytes = 0;
        if (value !== undefined)
            reflectionMergePartial<CacheConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheConfig): CacheConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any typed_config */ 1:
                    message.typedConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.typedConfig);
                    break;
                case /* repeated envoy.type.matcher.StringMatcher allowed_vary_headers */ 2:
                    message.allowedVaryHeaders.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams key_creator_params */ 3:
                    message.keyCreatorParams = CacheConfig_KeyCreatorParams.internalBinaryRead(reader, reader.uint32(), options, message.keyCreatorParams);
                    break;
                case /* uint32 max_body_bytes */ 4:
                    message.maxBodyBytes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any typed_config = 1; */
        if (message.typedConfig)
            Any.internalBinaryWrite(message.typedConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.type.matcher.StringMatcher allowed_vary_headers = 2; */
        for (let i = 0; i < message.allowedVaryHeaders.length; i++)
            StringMatcher.internalBinaryWrite(message.allowedVaryHeaders[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams key_creator_params = 3; */
        if (message.keyCreatorParams)
            CacheConfig_KeyCreatorParams.internalBinaryWrite(message.keyCreatorParams, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 max_body_bytes = 4; */
        if (message.maxBodyBytes !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxBodyBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.cache.v2alpha.CacheConfig
 */
export const CacheConfig = new CacheConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheConfig_KeyCreatorParams$Type extends MessageType<CacheConfig_KeyCreatorParams> {
    constructor() {
        super("envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams", [
            { no: 1, name: "exclude_scheme", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "exclude_host", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "query_parameters_included", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryParameterMatcher },
            { no: 4, name: "query_parameters_excluded", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryParameterMatcher }
        ]);
    }
    create(value?: PartialMessage<CacheConfig_KeyCreatorParams>): CacheConfig_KeyCreatorParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.excludeScheme = false;
        message.excludeHost = false;
        message.queryParametersIncluded = [];
        message.queryParametersExcluded = [];
        if (value !== undefined)
            reflectionMergePartial<CacheConfig_KeyCreatorParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheConfig_KeyCreatorParams): CacheConfig_KeyCreatorParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exclude_scheme */ 1:
                    message.excludeScheme = reader.bool();
                    break;
                case /* bool exclude_host */ 2:
                    message.excludeHost = reader.bool();
                    break;
                case /* repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_included */ 3:
                    message.queryParametersIncluded.push(QueryParameterMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_excluded */ 4:
                    message.queryParametersExcluded.push(QueryParameterMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheConfig_KeyCreatorParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exclude_scheme = 1; */
        if (message.excludeScheme !== false)
            writer.tag(1, WireType.Varint).bool(message.excludeScheme);
        /* bool exclude_host = 2; */
        if (message.excludeHost !== false)
            writer.tag(2, WireType.Varint).bool(message.excludeHost);
        /* repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_included = 3; */
        for (let i = 0; i < message.queryParametersIncluded.length; i++)
            QueryParameterMatcher.internalBinaryWrite(message.queryParametersIncluded[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.route.QueryParameterMatcher query_parameters_excluded = 4; */
        for (let i = 0; i < message.queryParametersExcluded.length; i++)
            QueryParameterMatcher.internalBinaryWrite(message.queryParametersExcluded[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams
 */
export const CacheConfig_KeyCreatorParams = new CacheConfig_KeyCreatorParams$Type();
