// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto" (package "envoy.config.filter.http.ip_tagging.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CidrRange } from "../../../../../api/v2/core/address";
// [#protodoc-title: IP tagging]
// IP tagging :ref:`configuration overview <config_http_filters_ip_tagging>`.
// [#extension: envoy.filters.http.ip_tagging]

/**
 * @generated from protobuf message envoy.config.filter.http.ip_tagging.v2.IPTagging
 */
export interface IPTagging {
    /**
     * The type of request the filter should apply to.
     *
     * @generated from protobuf field: envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType request_type = 1;
     */
    requestType: IPTagging_RequestType;
    /**
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     *
     * @generated from protobuf field: repeated envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag ip_tags = 4;
     */
    ipTags: IPTagging_IPTag[];
}
/**
 * Supplies the IP tag name and the IP address subnets.
 *
 * @generated from protobuf message envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag
 */
export interface IPTagging_IPTag {
    /**
     * Specifies the IP tag name to apply.
     *
     * @generated from protobuf field: string ip_tag_name = 1;
     */
    ipTagName: string;
    /**
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     *
     * @generated from protobuf field: repeated envoy.api.v2.core.CidrRange ip_list = 2;
     */
    ipList: CidrRange[];
}
/**
 * The type of requests the filter should apply to. The supported types
 * are internal, external or both. The
 * :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
 * used to determine if a request is internal and will result in
 * :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
 * being set. The filter defaults to both, and it will apply to all request types.
 *
 * @generated from protobuf enum envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType
 */
export enum IPTagging_RequestType {
    /**
     * Both external and internal requests will be tagged. This is the default value.
     *
     * @generated from protobuf enum value: BOTH = 0;
     */
    BOTH = 0,
    /**
     * Only internal requests will be tagged.
     *
     * @generated from protobuf enum value: INTERNAL = 1;
     */
    INTERNAL = 1,
    /**
     * Only external requests will be tagged.
     *
     * @generated from protobuf enum value: EXTERNAL = 2;
     */
    EXTERNAL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class IPTagging$Type extends MessageType<IPTagging> {
    constructor() {
        super("envoy.config.filter.http.ip_tagging.v2.IPTagging", [
            { no: 1, name: "request_type", kind: "enum", T: () => ["envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType", IPTagging_RequestType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "ip_tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IPTagging_IPTag, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<IPTagging>): IPTagging {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestType = 0;
        message.ipTags = [];
        if (value !== undefined)
            reflectionMergePartial<IPTagging>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IPTagging): IPTagging {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType request_type */ 1:
                    message.requestType = reader.int32();
                    break;
                case /* repeated envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag ip_tags */ 4:
                    message.ipTags.push(IPTagging_IPTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IPTagging, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType request_type = 1; */
        if (message.requestType !== 0)
            writer.tag(1, WireType.Varint).int32(message.requestType);
        /* repeated envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag ip_tags = 4; */
        for (let i = 0; i < message.ipTags.length; i++)
            IPTagging_IPTag.internalBinaryWrite(message.ipTags[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.ip_tagging.v2.IPTagging
 */
export const IPTagging = new IPTagging$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IPTagging_IPTag$Type extends MessageType<IPTagging_IPTag> {
    constructor() {
        super("envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag", [
            { no: 1, name: "ip_tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ip_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CidrRange }
        ]);
    }
    create(value?: PartialMessage<IPTagging_IPTag>): IPTagging_IPTag {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ipTagName = "";
        message.ipList = [];
        if (value !== undefined)
            reflectionMergePartial<IPTagging_IPTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IPTagging_IPTag): IPTagging_IPTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ip_tag_name */ 1:
                    message.ipTagName = reader.string();
                    break;
                case /* repeated envoy.api.v2.core.CidrRange ip_list */ 2:
                    message.ipList.push(CidrRange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IPTagging_IPTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ip_tag_name = 1; */
        if (message.ipTagName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ipTagName);
        /* repeated envoy.api.v2.core.CidrRange ip_list = 2; */
        for (let i = 0; i < message.ipList.length; i++)
            CidrRange.internalBinaryWrite(message.ipList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag
 */
export const IPTagging_IPTag = new IPTagging_IPTag$Type();
