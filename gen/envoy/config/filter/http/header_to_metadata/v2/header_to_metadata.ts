// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto" (package "envoy.config.filter.http.header_to_metadata.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Header-To-Metadata Filter]
// 
// The configuration for transforming headers into metadata. This is useful
// for matching load balancer subsets, logging, etc.
// 
// Header to Metadata :ref:`configuration overview <config_http_filters_header_to_metadata>`.
// [#extension: envoy.filters.http.header_to_metadata]

/**
 * @generated from protobuf message envoy.config.filter.http.header_to_metadata.v2.Config
 */
export interface Config {
    /**
     * The list of rules to apply to requests.
     *
     * @generated from protobuf field: repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule request_rules = 1;
     */
    requestRules: Config_Rule[];
    /**
     * The list of rules to apply to responses.
     *
     * @generated from protobuf field: repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule response_rules = 2;
     */
    responseRules: Config_Rule[];
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair
 */
export interface Config_KeyValuePair {
    /**
     * The namespace — if this is empty, the filter's namespace will be used.
     *
     * @generated from protobuf field: string metadata_namespace = 1;
     */
    metadataNamespace: string;
    /**
     * The key to use within the namespace.
     *
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * The value to pair with the given key.
     *
     * When used for a `on_header_present` case, if value is non-empty it'll be used
     * instead of the header value. If both are empty, no metadata is added.
     *
     * When used for a `on_header_missing` case, a non-empty value must be provided
     * otherwise no metadata is added.
     *
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * The value's type — defaults to string.
     *
     * @generated from protobuf field: envoy.config.filter.http.header_to_metadata.v2.Config.ValueType type = 4;
     */
    type: Config_ValueType;
    /**
     * How is the value encoded, default is NONE (not encoded).
     * The value will be decoded accordingly before storing to metadata.
     *
     * @generated from protobuf field: envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode encode = 5;
     */
    encode: Config_ValueEncode;
}
/**
 * A Rule defines what metadata to apply when a header is present or missing.
 *
 * @generated from protobuf message envoy.config.filter.http.header_to_metadata.v2.Config.Rule
 */
export interface Config_Rule {
    /**
     * The header that triggers this rule — required.
     *
     * @generated from protobuf field: string header = 1;
     */
    header: string;
    /**
     * If the header is present, apply this metadata KeyValuePair.
     *
     * If the value in the KeyValuePair is non-empty, it'll be used instead
     * of the header value.
     *
     * @generated from protobuf field: envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_present = 2;
     */
    onHeaderPresent?: Config_KeyValuePair;
    /**
     * If the header is not present, apply this metadata KeyValuePair.
     *
     * The value in the KeyValuePair must be set, since it'll be used in lieu
     * of the missing header value.
     *
     * @generated from protobuf field: envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_missing = 3;
     */
    onHeaderMissing?: Config_KeyValuePair;
    /**
     * Whether or not to remove the header after a rule is applied.
     *
     * This prevents headers from leaking.
     *
     * @generated from protobuf field: bool remove = 4;
     */
    remove: boolean;
}
/**
 * @generated from protobuf enum envoy.config.filter.http.header_to_metadata.v2.Config.ValueType
 */
export enum Config_ValueType {
    /**
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * @generated from protobuf enum value: NUMBER = 1;
     */
    NUMBER = 1,
    /**
     * The value is a serialized `protobuf.Value
     * <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
     *
     * @generated from protobuf enum value: PROTOBUF_VALUE = 2;
     */
    PROTOBUF_VALUE = 2
}
/**
 * ValueEncode defines the encoding algorithm.
 *
 * @generated from protobuf enum envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode
 */
export enum Config_ValueEncode {
    /**
     * The value is not encoded.
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
     * Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
     * non-ASCII characters in the header.
     *
     * @generated from protobuf enum value: BASE64 = 1;
     */
    BASE64 = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("envoy.config.filter.http.header_to_metadata.v2.Config", [
            { no: 1, name: "request_rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Config_Rule },
            { no: 2, name: "response_rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Config_Rule }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestRules = [];
        message.responseRules = [];
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule request_rules */ 1:
                    message.requestRules.push(Config_Rule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule response_rules */ 2:
                    message.responseRules.push(Config_Rule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule request_rules = 1; */
        for (let i = 0; i < message.requestRules.length; i++)
            Config_Rule.internalBinaryWrite(message.requestRules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.filter.http.header_to_metadata.v2.Config.Rule response_rules = 2; */
        for (let i = 0; i < message.responseRules.length; i++)
            Config_Rule.internalBinaryWrite(message.responseRules[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.header_to_metadata.v2.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config_KeyValuePair$Type extends MessageType<Config_KeyValuePair> {
    constructor() {
        super("envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair", [
            { no: 1, name: "metadata_namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["envoy.config.filter.http.header_to_metadata.v2.Config.ValueType", Config_ValueType] },
            { no: 5, name: "encode", kind: "enum", T: () => ["envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode", Config_ValueEncode] }
        ]);
    }
    create(value?: PartialMessage<Config_KeyValuePair>): Config_KeyValuePair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.metadataNamespace = "";
        message.key = "";
        message.value = "";
        message.type = 0;
        message.encode = 0;
        if (value !== undefined)
            reflectionMergePartial<Config_KeyValuePair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config_KeyValuePair): Config_KeyValuePair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string metadata_namespace */ 1:
                    message.metadataNamespace = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* envoy.config.filter.http.header_to_metadata.v2.Config.ValueType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode encode */ 5:
                    message.encode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config_KeyValuePair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string metadata_namespace = 1; */
        if (message.metadataNamespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.metadataNamespace);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* envoy.config.filter.http.header_to_metadata.v2.Config.ValueType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode encode = 5; */
        if (message.encode !== 0)
            writer.tag(5, WireType.Varint).int32(message.encode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair
 */
export const Config_KeyValuePair = new Config_KeyValuePair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config_Rule$Type extends MessageType<Config_Rule> {
    constructor() {
        super("envoy.config.filter.http.header_to_metadata.v2.Config.Rule", [
            { no: 1, name: "header", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1", wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } },
            { no: 2, name: "on_header_present", kind: "message", T: () => Config_KeyValuePair },
            { no: 3, name: "on_header_missing", kind: "message", T: () => Config_KeyValuePair },
            { no: 4, name: "remove", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Config_Rule>): Config_Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.header = "";
        message.remove = false;
        if (value !== undefined)
            reflectionMergePartial<Config_Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config_Rule): Config_Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header */ 1:
                    message.header = reader.string();
                    break;
                case /* envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_present */ 2:
                    message.onHeaderPresent = Config_KeyValuePair.internalBinaryRead(reader, reader.uint32(), options, message.onHeaderPresent);
                    break;
                case /* envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_missing */ 3:
                    message.onHeaderMissing = Config_KeyValuePair.internalBinaryRead(reader, reader.uint32(), options, message.onHeaderMissing);
                    break;
                case /* bool remove */ 4:
                    message.remove = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config_Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header = 1; */
        if (message.header !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.header);
        /* envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_present = 2; */
        if (message.onHeaderPresent)
            Config_KeyValuePair.internalBinaryWrite(message.onHeaderPresent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair on_header_missing = 3; */
        if (message.onHeaderMissing)
            Config_KeyValuePair.internalBinaryWrite(message.onHeaderMissing, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool remove = 4; */
        if (message.remove !== false)
            writer.tag(4, WireType.Varint).bool(message.remove);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.header_to_metadata.v2.Config.Rule
 */
export const Config_Rule = new Config_Rule$Type();
