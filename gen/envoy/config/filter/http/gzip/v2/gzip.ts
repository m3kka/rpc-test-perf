// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/gzip/v2/gzip.proto" (package "envoy.config.filter.http.gzip.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Compressor } from "../../compressor/v2/compressor";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Gzip]

/**
 * [#next-free-field: 11]
 *
 * @generated from protobuf message envoy.config.filter.http.gzip.v2.Gzip
 */
export interface Gzip {
    /**
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value memory_level = 1;
     */
    memoryLevel?: UInt32Value;
    /**
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * .. attention:
     *
     *    **This field is deprecated**. Set the `compressor` field instead.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.UInt32Value content_length = 2 [deprecated = true];
     */
    contentLength?: UInt32Value;
    /**
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST" provides higher compression at the cost of
     * higher latency, "SPEED" provides lower compression with minimum impact on response time.
     * "DEFAULT" provides an optimal result between speed and compression. This field will be set to
     * "DEFAULT" if not specified.
     *
     * @generated from protobuf field: envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum compression_level = 3;
     */
    compressionLevel: Gzip_CompressionLevel_Enum;
    /**
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
     * there are situations which changing this parameter might produce better results. For example,
     * run-length encoding (RLE) is typically used when the content is known for having sequences
     * which same data occurs many consecutive times. For more information about each strategy, please
     * refer to zlib manual.
     *
     * @generated from protobuf field: envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy compression_strategy = 4;
     */
    compressionStrategy: Gzip_CompressionStrategy;
    /**
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
     * .. attention:
     *
     *    **This field is deprecated**. Set the `compressor` field instead.
     *
     * @deprecated
     * @generated from protobuf field: repeated string content_type = 6 [deprecated = true];
     */
    contentType: string[];
    /**
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * .. attention:
     *
     *    **This field is deprecated**. Set the `compressor` field instead.
     *
     * @deprecated
     * @generated from protobuf field: bool disable_on_etag_header = 7 [deprecated = true];
     */
    disableOnEtagHeader: boolean;
    /**
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention:
     *
     *    **This field is deprecated**. Set the `compressor` field instead.
     *
     * @deprecated
     * @generated from protobuf field: bool remove_accept_encoding_header = 8 [deprecated = true];
     */
    removeAcceptEncodingHeader: boolean;
    /**
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual > deflateInit2.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value window_bits = 9;
     */
    windowBits?: UInt32Value;
    /**
     * Set of configuration parameters common for all compression filters. If this field is set then
     * the fields `content_length`, `content_type`, `disable_on_etag_header` and
     * `remove_accept_encoding_header` are ignored.
     *
     * @generated from protobuf field: envoy.config.filter.http.compressor.v2.Compressor compressor = 10;
     */
    compressor?: Compressor;
}
/**
 * @generated from protobuf message envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel
 */
export interface Gzip_CompressionLevel {
}
/**
 * @generated from protobuf enum envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum
 */
export enum Gzip_CompressionLevel_Enum {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: BEST = 1;
     */
    BEST = 1,
    /**
     * @generated from protobuf enum value: SPEED = 2;
     */
    SPEED = 2
}
/**
 * @generated from protobuf enum envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy
 */
export enum Gzip_CompressionStrategy {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: FILTERED = 1;
     */
    FILTERED = 1,
    /**
     * @generated from protobuf enum value: HUFFMAN = 2;
     */
    HUFFMAN = 2,
    /**
     * @generated from protobuf enum value: RLE = 3;
     */
    RLE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Gzip$Type extends MessageType<Gzip> {
    constructor() {
        super("envoy.config.filter.http.gzip.v2.Gzip", [
            { no: 1, name: "memory_level", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 9, gte: 1 } } } },
            { no: 2, name: "content_length", kind: "message", T: () => UInt32Value },
            { no: 3, name: "compression_level", kind: "enum", T: () => ["envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum", Gzip_CompressionLevel_Enum], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "compression_strategy", kind: "enum", T: () => ["envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy", Gzip_CompressionStrategy], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 6, name: "content_type", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "disable_on_etag_header", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "remove_accept_encoding_header", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "window_bits", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 15, gte: 9 } } } },
            { no: 10, name: "compressor", kind: "message", T: () => Compressor }
        ]);
    }
    create(value?: PartialMessage<Gzip>): Gzip {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.compressionLevel = 0;
        message.compressionStrategy = 0;
        message.contentType = [];
        message.disableOnEtagHeader = false;
        message.removeAcceptEncodingHeader = false;
        if (value !== undefined)
            reflectionMergePartial<Gzip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Gzip): Gzip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value memory_level */ 1:
                    message.memoryLevel = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.memoryLevel);
                    break;
                case /* google.protobuf.UInt32Value content_length = 2 [deprecated = true];*/ 2:
                    message.contentLength = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.contentLength);
                    break;
                case /* envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum compression_level */ 3:
                    message.compressionLevel = reader.int32();
                    break;
                case /* envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy compression_strategy */ 4:
                    message.compressionStrategy = reader.int32();
                    break;
                case /* repeated string content_type = 6 [deprecated = true];*/ 6:
                    message.contentType.push(reader.string());
                    break;
                case /* bool disable_on_etag_header = 7 [deprecated = true];*/ 7:
                    message.disableOnEtagHeader = reader.bool();
                    break;
                case /* bool remove_accept_encoding_header = 8 [deprecated = true];*/ 8:
                    message.removeAcceptEncodingHeader = reader.bool();
                    break;
                case /* google.protobuf.UInt32Value window_bits */ 9:
                    message.windowBits = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.windowBits);
                    break;
                case /* envoy.config.filter.http.compressor.v2.Compressor compressor */ 10:
                    message.compressor = Compressor.internalBinaryRead(reader, reader.uint32(), options, message.compressor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Gzip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value memory_level = 1; */
        if (message.memoryLevel)
            UInt32Value.internalBinaryWrite(message.memoryLevel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value content_length = 2 [deprecated = true]; */
        if (message.contentLength)
            UInt32Value.internalBinaryWrite(message.contentLength, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum compression_level = 3; */
        if (message.compressionLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.compressionLevel);
        /* envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy compression_strategy = 4; */
        if (message.compressionStrategy !== 0)
            writer.tag(4, WireType.Varint).int32(message.compressionStrategy);
        /* repeated string content_type = 6 [deprecated = true]; */
        for (let i = 0; i < message.contentType.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.contentType[i]);
        /* bool disable_on_etag_header = 7 [deprecated = true]; */
        if (message.disableOnEtagHeader !== false)
            writer.tag(7, WireType.Varint).bool(message.disableOnEtagHeader);
        /* bool remove_accept_encoding_header = 8 [deprecated = true]; */
        if (message.removeAcceptEncodingHeader !== false)
            writer.tag(8, WireType.Varint).bool(message.removeAcceptEncodingHeader);
        /* google.protobuf.UInt32Value window_bits = 9; */
        if (message.windowBits)
            UInt32Value.internalBinaryWrite(message.windowBits, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.http.compressor.v2.Compressor compressor = 10; */
        if (message.compressor)
            Compressor.internalBinaryWrite(message.compressor, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.gzip.v2.Gzip
 */
export const Gzip = new Gzip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Gzip_CompressionLevel$Type extends MessageType<Gzip_CompressionLevel> {
    constructor() {
        super("envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel", []);
    }
    create(value?: PartialMessage<Gzip_CompressionLevel>): Gzip_CompressionLevel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Gzip_CompressionLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Gzip_CompressionLevel): Gzip_CompressionLevel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Gzip_CompressionLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel
 */
export const Gzip_CompressionLevel = new Gzip_CompressionLevel$Type();
