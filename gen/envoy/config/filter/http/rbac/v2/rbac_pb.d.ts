// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/rbac/v2/rbac.proto (package envoy.config.filter.http.rbac.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RBAC as RBAC$1 } from "../../../../rbac/v2/rbac_pb.js";

/**
 * RBAC filter config.
 *
 * @generated from message envoy.config.filter.http.rbac.v2.RBAC
 */
export declare class RBAC extends Message<RBAC> {
  /**
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   *
   * @generated from field: envoy.config.rbac.v2.RBAC rules = 1;
   */
  rules?: RBAC$1;

  /**
   * Shadow rules are not enforced by the filter (i.e., returning a 403)
   * but will emit stats and logs and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   *
   * @generated from field: envoy.config.rbac.v2.RBAC shadow_rules = 2;
   */
  shadowRules?: RBAC$1;

  constructor(data?: PartialMessage<RBAC>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.rbac.v2.RBAC";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RBAC;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RBAC;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RBAC;

  static equals(a: RBAC | PlainMessage<RBAC> | undefined, b: RBAC | PlainMessage<RBAC> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.http.rbac.v2.RBACPerRoute
 */
export declare class RBACPerRoute extends Message<RBACPerRoute> {
  /**
   * Override the global configuration of the filter with this new config.
   * If absent, the global RBAC policy will be disabled for this route.
   *
   * @generated from field: envoy.config.filter.http.rbac.v2.RBAC rbac = 2;
   */
  rbac?: RBAC;

  constructor(data?: PartialMessage<RBACPerRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.rbac.v2.RBACPerRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RBACPerRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RBACPerRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RBACPerRoute;

  static equals(a: RBACPerRoute | PlainMessage<RBACPerRoute> | undefined, b: RBACPerRoute | PlainMessage<RBACPerRoute> | undefined): boolean;
}

