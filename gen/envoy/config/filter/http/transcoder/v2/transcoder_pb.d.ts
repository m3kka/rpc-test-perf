// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/transcoder/v2/transcoder.proto (package envoy.config.filter.http.transcoder.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder
 */
export declare class GrpcJsonTranscoder extends Message<GrpcJsonTranscoder> {
  /**
   * @generated from oneof envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder.descriptor_set
   */
  descriptorSet: {
    /**
     * Supplies the filename of
     * :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
     * services.
     *
     * @generated from field: string proto_descriptor = 1;
     */
    value: string;
    case: "protoDescriptor";
  } | {
    /**
     * Supplies the binary content of
     * :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
     * services.
     *
     * @generated from field: bytes proto_descriptor_bin = 4;
     */
    value: Uint8Array;
    case: "protoDescriptorBin";
  } | { case: undefined; value?: undefined };

  /**
   * A list of strings that
   * supplies the fully qualified service names (i.e. "package_name.service_name") that
   * the transcoder will translate. If the service name doesn't exist in ``proto_descriptor``,
   * Envoy will fail at startup. The ``proto_descriptor`` may contain more services than
   * the service names specified here, but they won't be translated.
   *
   * @generated from field: repeated string services = 2;
   */
  services: string[];

  /**
   * Control options for response JSON. These options are passed directly to
   * `JsonPrintOptions <https://developers.google.com/protocol-buffers/docs/reference/cpp/
   * google.protobuf.util.json_util#JsonPrintOptions>`_.
   *
   * @generated from field: envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder.PrintOptions print_options = 3;
   */
  printOptions?: GrpcJsonTranscoder_PrintOptions;

  /**
   * Whether to keep the incoming request route after the outgoing headers have been transformed to
   * the match the upstream gRPC service. Note: This means that routes for gRPC services that are
   * not transcoded cannot be used in combination with *match_incoming_request_route*.
   *
   * @generated from field: bool match_incoming_request_route = 5;
   */
  matchIncomingRequestRoute: boolean;

  /**
   * A list of query parameters to be ignored for transcoding method mapping.
   * By default, the transcoder filter will not transcode a request if there are any
   * unknown/invalid query parameters.
   *
   * Example :
   *
   * .. code-block:: proto
   *
   *     service Bookstore {
   *       rpc GetShelf(GetShelfRequest) returns (Shelf) {
   *         option (google.api.http) = {
   *           get: "/shelves/{shelf}"
   *         };
   *       }
   *     }
   *
   *     message GetShelfRequest {
   *       int64 shelf = 1;
   *     }
   *
   *     message Shelf {}
   *
   * The request ``/shelves/100?foo=bar`` will not be mapped to ``GetShelf``` because variable
   * binding for ``foo`` is not defined. Adding ``foo`` to ``ignored_query_parameters`` will allow
   * the same request to be mapped to ``GetShelf``.
   *
   * @generated from field: repeated string ignored_query_parameters = 6;
   */
  ignoredQueryParameters: string[];

  /**
   * Whether to route methods without the ``google.api.http`` option.
   *
   * Example :
   *
   * .. code-block:: proto
   *
   *     package bookstore;
   *
   *     service Bookstore {
   *       rpc GetShelf(GetShelfRequest) returns (Shelf) {}
   *     }
   *
   *     message GetShelfRequest {
   *       int64 shelf = 1;
   *     }
   *
   *     message Shelf {}
   *
   * The client could ``post`` a json body ``{"shelf": 1234}`` with the path of
   * ``/bookstore.Bookstore/GetShelfRequest`` to call ``GetShelfRequest``.
   *
   * @generated from field: bool auto_mapping = 7;
   */
  autoMapping: boolean;

  /**
   * Whether to ignore query parameters that cannot be mapped to a corresponding
   * protobuf field. Use this if you cannot control the query parameters and do
   * not know them beforehand. Otherwise use ``ignored_query_parameters``.
   * Defaults to false.
   *
   * @generated from field: bool ignore_unknown_query_parameters = 8;
   */
  ignoreUnknownQueryParameters: boolean;

  /**
   * Whether to convert gRPC status headers to JSON.
   * When trailer indicates a gRPC error and there was no HTTP body, take ``google.rpc.Status``
   * from the ``grpc-status-details-bin`` header and use it as JSON body.
   * If there was no such header, make ``google.rpc.Status`` out of the ``grpc-status`` and
   * ``grpc-message`` headers.
   * The error details types must be present in the ``proto_descriptor``.
   *
   * For example, if an upstream server replies with headers:
   *
   * .. code-block:: none
   *
   *     grpc-status: 5
   *     grpc-status-details-bin:
   *         CAUaMwoqdHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUucnBjLlJlcXVlc3RJbmZvEgUKA3ItMQ
   *
   * The ``grpc-status-details-bin`` header contains a base64-encoded protobuf message
   * ``google.rpc.Status``. It will be transcoded into:
   *
   * .. code-block:: none
   *
   *     HTTP/1.1 404 Not Found
   *     content-type: application/json
   *
   *     {"code":5,"details":[{"@type":"type.googleapis.com/google.rpc.RequestInfo","requestId":"r-1"}]}
   *
   * In order to transcode the message, the ``google.rpc.RequestInfo`` type from
   * the ``google/rpc/error_details.proto`` should be included in the configured
   * :ref:`proto descriptor set <config_grpc_json_generate_proto_descriptor_set>`.
   *
   * @generated from field: bool convert_grpc_status = 9;
   */
  convertGrpcStatus: boolean;

  constructor(data?: PartialMessage<GrpcJsonTranscoder>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcJsonTranscoder;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcJsonTranscoder;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcJsonTranscoder;

  static equals(a: GrpcJsonTranscoder | PlainMessage<GrpcJsonTranscoder> | undefined, b: GrpcJsonTranscoder | PlainMessage<GrpcJsonTranscoder> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder.PrintOptions
 */
export declare class GrpcJsonTranscoder_PrintOptions extends Message<GrpcJsonTranscoder_PrintOptions> {
  /**
   * Whether to add spaces, line breaks and indentation to make the JSON
   * output easy to read. Defaults to false.
   *
   * @generated from field: bool add_whitespace = 1;
   */
  addWhitespace: boolean;

  /**
   * Whether to always print primitive fields. By default primitive
   * fields with default values will be omitted in JSON output. For
   * example, an int32 field set to 0 will be omitted. Setting this flag to
   * true will override the default behavior and print primitive fields
   * regardless of their values. Defaults to false.
   *
   * @generated from field: bool always_print_primitive_fields = 2;
   */
  alwaysPrintPrimitiveFields: boolean;

  /**
   * Whether to always print enums as ints. By default they are rendered
   * as strings. Defaults to false.
   *
   * @generated from field: bool always_print_enums_as_ints = 3;
   */
  alwaysPrintEnumsAsInts: boolean;

  /**
   * Whether to preserve proto field names. By default protobuf will
   * generate JSON field names using the ``json_name`` option, or lower camel case,
   * in that order. Setting this flag will preserve the original field names. Defaults to false.
   *
   * @generated from field: bool preserve_proto_field_names = 4;
   */
  preserveProtoFieldNames: boolean;

  constructor(data?: PartialMessage<GrpcJsonTranscoder_PrintOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.transcoder.v2.GrpcJsonTranscoder.PrintOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcJsonTranscoder_PrintOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcJsonTranscoder_PrintOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcJsonTranscoder_PrintOptions;

  static equals(a: GrpcJsonTranscoder_PrintOptions | PlainMessage<GrpcJsonTranscoder_PrintOptions> | undefined, b: GrpcJsonTranscoder_PrintOptions | PlainMessage<GrpcJsonTranscoder_PrintOptions> | undefined): boolean;
}

