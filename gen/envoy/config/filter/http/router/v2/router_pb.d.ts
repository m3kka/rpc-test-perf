// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/router/v2/router.proto (package envoy.config.filter.http.router.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AccessLog } from "../../../accesslog/v2/accesslog_pb.js";

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.filter.http.router.v2.Router
 */
export declare class Router extends Message<Router> {
  /**
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   *
   * @generated from field: google.protobuf.BoolValue dynamic_stats = 1;
   */
  dynamicStats?: boolean;

  /**
   * Whether to start a child span for egress routed calls. This can be
   * useful in scenarios where other filters (auth, ratelimit, etc.) make
   * outbound calls and have child spans rooted at the same ingress
   * parent. Defaults to false.
   *
   * @generated from field: bool start_child_span = 2;
   */
  startChildSpan: boolean;

  /**
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   *
   * @generated from field: repeated envoy.config.filter.accesslog.v2.AccessLog upstream_log = 3;
   */
  upstreamLog: AccessLog[];

  /**
   * Do not add any additional *x-envoy-* headers to requests or responses. This
   * only affects the :ref:`router filter generated *x-envoy-* headers
   * <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
   * connection manager may continue to set *x-envoy-* headers.
   *
   * @generated from field: bool suppress_envoy_headers = 4;
   */
  suppressEnvoyHeaders: boolean;

  /**
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   *
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   *
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   *
   * Value must be an integer:
   *
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   *
   * @generated from field: repeated string strict_check_headers = 5;
   */
  strictCheckHeaders: string[];

  /**
   * If not set, ingress Envoy will ignore
   * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
   * Envoy, when deriving timeout for upstream cluster.
   *
   * @generated from field: bool respect_expected_rq_timeout = 6;
   */
  respectExpectedRqTimeout: boolean;

  constructor(data?: PartialMessage<Router>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.router.v2.Router";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Router;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Router;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Router;

  static equals(a: Router | PlainMessage<Router> | undefined, b: Router | PlainMessage<Router> | undefined): boolean;
}

