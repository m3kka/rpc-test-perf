// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/aws_lambda/v2alpha/aws_lambda.proto (package envoy.config.filter.http.aws_lambda.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AWS Lambda filter config
 *
 * @generated from message envoy.config.filter.http.aws_lambda.v2alpha.Config
 */
export declare class Config extends Message<Config> {
  /**
   * The ARN of the AWS Lambda to invoke when the filter is engaged
   * Must be in the following format:
   * arn:<partition>:lambda:<region>:<account-number>:function:<function-name>
   *
   * @generated from field: string arn = 1;
   */
  arn: string;

  /**
   * Whether to transform the request (headers and body) to a JSON payload or pass it as is.
   *
   * @generated from field: bool payload_passthrough = 2;
   */
  payloadPassthrough: boolean;

  /**
   * Determines the way to invoke the Lambda function.
   *
   * @generated from field: envoy.config.filter.http.aws_lambda.v2alpha.Config.InvocationMode invocation_mode = 3;
   */
  invocationMode: Config_InvocationMode;

  constructor(data?: PartialMessage<Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.aws_lambda.v2alpha.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config;

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.filter.http.aws_lambda.v2alpha.Config.InvocationMode
 */
export declare enum Config_InvocationMode {
  /**
   * This is the more common mode of invocation, in which Lambda responds after it has completed the function. In
   * this mode the output of the Lambda function becomes the response of the HTTP request.
   *
   * @generated from enum value: SYNCHRONOUS = 0;
   */
  SYNCHRONOUS = 0,

  /**
   * In this mode Lambda responds immediately but continues to process the function asynchronously. This mode can be
   * used to signal events for example. In this mode, Lambda responds with an acknowledgment that it received the
   * call which is translated to an HTTP 200 OK by the filter.
   *
   * @generated from enum value: ASYNCHRONOUS = 1;
   */
  ASYNCHRONOUS = 1,
}

/**
 * Per-route configuration for AWS Lambda. This can be useful when invoking a different Lambda function or a different
 * version of the same Lambda depending on the route.
 *
 * @generated from message envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig
 */
export declare class PerRouteConfig extends Message<PerRouteConfig> {
  /**
   * @generated from field: envoy.config.filter.http.aws_lambda.v2alpha.Config invoke_config = 1;
   */
  invokeConfig?: Config;

  constructor(data?: PartialMessage<PerRouteConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerRouteConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerRouteConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerRouteConfig;

  static equals(a: PerRouteConfig | PlainMessage<PerRouteConfig> | undefined, b: PerRouteConfig | PlainMessage<PerRouteConfig> | undefined): boolean;
}

