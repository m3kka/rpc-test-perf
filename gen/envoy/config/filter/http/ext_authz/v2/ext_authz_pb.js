// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/ext_authz/v2/ext_authz.proto (package envoy.config.filter.http.ext_authz.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { GrpcService } from "../../../../../api/v2/core/grpc_service_pb.js";
import { HttpStatus } from "../../../../../type/http_status_pb.js";
import { HeaderValue, RuntimeFeatureFlag, RuntimeFractionalPercent } from "../../../../../api/v2/core/base_pb.js";
import { HttpUri } from "../../../../../api/v2/core/http_uri_pb.js";
import { ListStringMatcher } from "../../../../../type/matcher/string_pb.js";

/**
 * [#next-free-field: 12]
 *
 * @generated from message envoy.config.filter.http.ext_authz.v2.ExtAuthz
 */
export const ExtAuthz = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.ExtAuthz",
  () => [
    { no: 1, name: "grpc_service", kind: "message", T: GrpcService, oneof: "services" },
    { no: 3, name: "http_service", kind: "message", T: HttpService, oneof: "services" },
    { no: 2, name: "failure_mode_allow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "use_alpha", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "with_request_body", kind: "message", T: BufferSettings },
    { no: 6, name: "clear_route_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "status_on_error", kind: "message", T: HttpStatus },
    { no: 8, name: "metadata_context_namespaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "filter_enabled", kind: "message", T: RuntimeFractionalPercent },
    { no: 11, name: "deny_at_disable", kind: "message", T: RuntimeFeatureFlag },
    { no: 10, name: "include_peer_certificate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Configuration for buffering the request data.
 *
 * @generated from message envoy.config.filter.http.ext_authz.v2.BufferSettings
 */
export const BufferSettings = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.BufferSettings",
  () => [
    { no: 1, name: "max_request_bytes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "allow_partial_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * HttpService is used for raw HTTP communication between the filter and the authorization service.
 * When configured, the filter will parse the client request and use these attributes to call the
 * authorization server. Depending on the response, the filter may reject or accept the client
 * request. Note that in any of these events, metadata can be added, removed or overridden by the
 * filter:
 *
 * *On authorization request*, a list of allowed request headers may be supplied. See
 * :ref:`allowed_headers
 * <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationRequest.allowed_headers>`
 * for details. Additional headers metadata may be added to the authorization request. See
 * :ref:`headers_to_add
 * <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationRequest.headers_to_add>` for
 * details.
 *
 * On authorization response status HTTP 200 OK, the filter will allow traffic to the upstream and
 * additional headers metadata may be added to the original client request. See
 * :ref:`allowed_upstream_headers
 * <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationResponse.allowed_upstream_headers>`
 * for details.
 *
 * On other authorization response statuses, the filter will not allow traffic. Additional headers
 * metadata as well as body may be added to the client's response. See :ref:`allowed_client_headers
 * <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationResponse.allowed_client_headers>`
 * for details.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.config.filter.http.ext_authz.v2.HttpService
 */
export const HttpService = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.HttpService",
  () => [
    { no: 1, name: "server_uri", kind: "message", T: HttpUri },
    { no: 2, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "authorization_request", kind: "message", T: AuthorizationRequest },
    { no: 8, name: "authorization_response", kind: "message", T: AuthorizationResponse },
  ],
);

/**
 * @generated from message envoy.config.filter.http.ext_authz.v2.AuthorizationRequest
 */
export const AuthorizationRequest = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.AuthorizationRequest",
  () => [
    { no: 1, name: "allowed_headers", kind: "message", T: ListStringMatcher },
    { no: 2, name: "headers_to_add", kind: "message", T: HeaderValue, repeated: true },
  ],
);

/**
 * @generated from message envoy.config.filter.http.ext_authz.v2.AuthorizationResponse
 */
export const AuthorizationResponse = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.AuthorizationResponse",
  () => [
    { no: 1, name: "allowed_upstream_headers", kind: "message", T: ListStringMatcher },
    { no: 2, name: "allowed_client_headers", kind: "message", T: ListStringMatcher },
  ],
);

/**
 * Extra settings on a per virtualhost/route/weighted-cluster level.
 *
 * @generated from message envoy.config.filter.http.ext_authz.v2.ExtAuthzPerRoute
 */
export const ExtAuthzPerRoute = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.ExtAuthzPerRoute",
  () => [
    { no: 1, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "override" },
    { no: 2, name: "check_settings", kind: "message", T: CheckSettings, oneof: "override" },
  ],
);

/**
 * Extra settings for the check request. You can use this to provide extra context for the
 * external authorization server on specific virtual hosts \ routes. For example, adding a context
 * extension on the virtual host level can give the ext-authz server information on what virtual
 * host is used without needing to parse the host header. If CheckSettings is specified in multiple
 * per-filter-configs, they will be merged in order, and the result will be used.
 *
 * @generated from message envoy.config.filter.http.ext_authz.v2.CheckSettings
 */
export const CheckSettings = proto3.makeMessageType(
  "envoy.config.filter.http.ext_authz.v2.CheckSettings",
  () => [
    { no: 1, name: "context_extensions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

