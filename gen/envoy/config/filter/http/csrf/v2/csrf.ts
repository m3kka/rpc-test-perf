// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/csrf/v2/csrf.proto" (package "envoy.config.filter.http.csrf.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringMatcher } from "../../../../../type/matcher/string";
import { RuntimeFractionalPercent } from "../../../../../api/v2/core/base";
// [#protodoc-title: CSRF]
// Cross-Site Request Forgery :ref:`configuration overview <config_http_filters_csrf>`.
// [#extension: envoy.filters.http.csrf]

/**
 * CSRF filter config.
 *
 * @generated from protobuf message envoy.config.filter.http.csrf.v2.CsrfPolicy
 */
export interface CsrfPolicy {
    /**
     * Specifies the % of requests for which the CSRF filter is enabled.
     *
     * If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     *
     * .. note::
     *
     *   This field defaults to 100/:ref:`HUNDRED
     *   <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
     *
     * @generated from protobuf field: envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1;
     */
    filterEnabled?: RuntimeFractionalPercent;
    /**
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     *
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     *
     * If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     *
     * @generated from protobuf field: envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2;
     */
    shadowEnabled?: RuntimeFractionalPercent;
    /**
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     *
     * More information on how this can be configured via runtime can be found
     * :ref:`here <csrf-configuration>`.
     *
     * @generated from protobuf field: repeated envoy.type.matcher.StringMatcher additional_origins = 3;
     */
    additionalOrigins: StringMatcher[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CsrfPolicy$Type extends MessageType<CsrfPolicy> {
    constructor() {
        super("envoy.config.filter.http.csrf.v2.CsrfPolicy", [
            { no: 1, name: "filter_enabled", kind: "message", T: () => RuntimeFractionalPercent, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "shadow_enabled", kind: "message", T: () => RuntimeFractionalPercent },
            { no: 3, name: "additional_origins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringMatcher }
        ]);
    }
    create(value?: PartialMessage<CsrfPolicy>): CsrfPolicy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.additionalOrigins = [];
        if (value !== undefined)
            reflectionMergePartial<CsrfPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CsrfPolicy): CsrfPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.RuntimeFractionalPercent filter_enabled */ 1:
                    message.filterEnabled = RuntimeFractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.filterEnabled);
                    break;
                case /* envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled */ 2:
                    message.shadowEnabled = RuntimeFractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.shadowEnabled);
                    break;
                case /* repeated envoy.type.matcher.StringMatcher additional_origins */ 3:
                    message.additionalOrigins.push(StringMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CsrfPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1; */
        if (message.filterEnabled)
            RuntimeFractionalPercent.internalBinaryWrite(message.filterEnabled, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2; */
        if (message.shadowEnabled)
            RuntimeFractionalPercent.internalBinaryWrite(message.shadowEnabled, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.type.matcher.StringMatcher additional_origins = 3; */
        for (let i = 0; i < message.additionalOrigins.length; i++)
            StringMatcher.internalBinaryWrite(message.additionalOrigins[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.csrf.v2.CsrfPolicy
 */
export const CsrfPolicy = new CsrfPolicy$Type();
