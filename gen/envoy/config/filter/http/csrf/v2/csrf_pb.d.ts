// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/http/csrf/v2/csrf.proto (package envoy.config.filter.http.csrf.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RuntimeFractionalPercent } from "../../../../../api/v2/core/base_pb.js";
import type { StringMatcher } from "../../../../../type/matcher/string_pb.js";

/**
 * CSRF filter config.
 *
 * @generated from message envoy.config.filter.http.csrf.v2.CsrfPolicy
 */
export declare class CsrfPolicy extends Message<CsrfPolicy> {
  /**
   * Specifies the % of requests for which the CSRF filter is enabled.
   *
   * If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   *
   * .. note::
   *
   *   This field defaults to 100/:ref:`HUNDRED
   *   <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
   *
   * @generated from field: envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1;
   */
  filterEnabled?: RuntimeFractionalPercent;

  /**
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   *
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   *
   * If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   *
   * @generated from field: envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2;
   */
  shadowEnabled?: RuntimeFractionalPercent;

  /**
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   *
   * More information on how this can be configured via runtime can be found
   * :ref:`here <csrf-configuration>`.
   *
   * @generated from field: repeated envoy.type.matcher.StringMatcher additional_origins = 3;
   */
  additionalOrigins: StringMatcher[];

  constructor(data?: PartialMessage<CsrfPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.http.csrf.v2.CsrfPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CsrfPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CsrfPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CsrfPolicy;

  static equals(a: CsrfPolicy | PlainMessage<CsrfPolicy> | undefined, b: CsrfPolicy | PlainMessage<CsrfPolicy> | undefined): boolean;
}

