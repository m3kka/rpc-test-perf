// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/grpc_stats/v2alpha/config.proto" (package "envoy.config.filter.http.grpc_stats.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
import { GrpcMethodList } from "../../../../../api/v2/core/grpc_method_list";
// [#protodoc-title: gRPC statistics] gRPC statistics filter
// :ref:`configuration overview <config_http_filters_grpc_stats>`.
// [#extension: envoy.filters.http.grpc_stats]

/**
 * gRPC statistics filter configuration
 *
 * @generated from protobuf message envoy.config.filter.http.grpc_stats.v2alpha.FilterConfig
 */
export interface FilterConfig {
    /**
     * If true, the filter maintains a filter state object with the request and response message
     * counts.
     *
     * @generated from protobuf field: bool emit_filter_state = 1;
     */
    emitFilterState: boolean;
    /**
     * @generated from protobuf oneof: per_method_stat_specifier
     */
    perMethodStatSpecifier: {
        oneofKind: "individualMethodStatsAllowlist";
        /**
         * If set, specifies an allowlist of service/methods that will have individual stats
         * emitted for them. Any call that does not match the allowlist will be counted
         * in a stat with no method specifier: `cluster.<name>.grpc.*`.
         *
         * @generated from protobuf field: envoy.api.v2.core.GrpcMethodList individual_method_stats_allowlist = 2;
         */
        individualMethodStatsAllowlist: GrpcMethodList;
    } | {
        oneofKind: "statsForAllMethods";
        /**
         * If set to true, emit stats for all service/method names.
         *
         * If set to false, emit stats for all service/message types to the same stats without including
         * the service/method in the name, with prefix `cluster.<name>.grpc`. This can be useful if
         * service/method granularity is not needed, or if each cluster only receives a single method.
         *
         * .. attention::
         *   This option is only safe if all clients are trusted. If this option is enabled
         *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
         *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
         *
         * .. attention::
         *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
         *   behavior will default to `stats_for_all_methods=false`.
         *
         * @generated from protobuf field: google.protobuf.BoolValue stats_for_all_methods = 3;
         */
        statsForAllMethods: BoolValue;
    } | {
        oneofKind: undefined;
    };
}
/**
 * gRPC statistics filter state object in protobuf form.
 *
 * @generated from protobuf message envoy.config.filter.http.grpc_stats.v2alpha.FilterObject
 */
export interface FilterObject {
    /**
     * Count of request messages in the request stream.
     *
     * @generated from protobuf field: uint64 request_message_count = 1;
     */
    requestMessageCount: bigint;
    /**
     * Count of response messages in the response stream.
     *
     * @generated from protobuf field: uint64 response_message_count = 2;
     */
    responseMessageCount: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterConfig$Type extends MessageType<FilterConfig> {
    constructor() {
        super("envoy.config.filter.http.grpc_stats.v2alpha.FilterConfig", [
            { no: 1, name: "emit_filter_state", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "individual_method_stats_allowlist", kind: "message", oneof: "perMethodStatSpecifier", T: () => GrpcMethodList },
            { no: 3, name: "stats_for_all_methods", kind: "message", oneof: "perMethodStatSpecifier", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<FilterConfig>): FilterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emitFilterState = false;
        message.perMethodStatSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FilterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterConfig): FilterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool emit_filter_state */ 1:
                    message.emitFilterState = reader.bool();
                    break;
                case /* envoy.api.v2.core.GrpcMethodList individual_method_stats_allowlist */ 2:
                    message.perMethodStatSpecifier = {
                        oneofKind: "individualMethodStatsAllowlist",
                        individualMethodStatsAllowlist: GrpcMethodList.internalBinaryRead(reader, reader.uint32(), options, (message.perMethodStatSpecifier as any).individualMethodStatsAllowlist)
                    };
                    break;
                case /* google.protobuf.BoolValue stats_for_all_methods */ 3:
                    message.perMethodStatSpecifier = {
                        oneofKind: "statsForAllMethods",
                        statsForAllMethods: BoolValue.internalBinaryRead(reader, reader.uint32(), options, (message.perMethodStatSpecifier as any).statsForAllMethods)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool emit_filter_state = 1; */
        if (message.emitFilterState !== false)
            writer.tag(1, WireType.Varint).bool(message.emitFilterState);
        /* envoy.api.v2.core.GrpcMethodList individual_method_stats_allowlist = 2; */
        if (message.perMethodStatSpecifier.oneofKind === "individualMethodStatsAllowlist")
            GrpcMethodList.internalBinaryWrite(message.perMethodStatSpecifier.individualMethodStatsAllowlist, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue stats_for_all_methods = 3; */
        if (message.perMethodStatSpecifier.oneofKind === "statsForAllMethods")
            BoolValue.internalBinaryWrite(message.perMethodStatSpecifier.statsForAllMethods, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.grpc_stats.v2alpha.FilterConfig
 */
export const FilterConfig = new FilterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterObject$Type extends MessageType<FilterObject> {
    constructor() {
        super("envoy.config.filter.http.grpc_stats.v2alpha.FilterObject", [
            { no: 1, name: "request_message_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "response_message_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FilterObject>): FilterObject {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestMessageCount = 0n;
        message.responseMessageCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<FilterObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterObject): FilterObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 request_message_count */ 1:
                    message.requestMessageCount = reader.uint64().toBigInt();
                    break;
                case /* uint64 response_message_count */ 2:
                    message.responseMessageCount = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 request_message_count = 1; */
        if (message.requestMessageCount !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.requestMessageCount);
        /* uint64 response_message_count = 2; */
        if (message.responseMessageCount !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.responseMessageCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.grpc_stats.v2alpha.FilterObject
 */
export const FilterObject = new FilterObject$Type();
