// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/http/compressor/v2/compressor.proto" (package "envoy.config.filter.http.compressor.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RuntimeFeatureFlag } from "../../../../../api/v2/core/base";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
// [#protodoc-title: Compressor]

/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.filter.http.compressor.v2.Compressor
 */
export interface Compressor {
    /**
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value content_length = 1;
     */
    contentLength?: UInt32Value;
    /**
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     *
     * @generated from protobuf field: repeated string content_type = 2;
     */
    contentType: string[];
    /**
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     *
     * @generated from protobuf field: bool disable_on_etag_header = 3;
     */
    disableOnEtagHeader: boolean;
    /**
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention:
     *
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     *
     * @generated from protobuf field: bool remove_accept_encoding_header = 4;
     */
    removeAcceptEncodingHeader: boolean;
    /**
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     *
     * @generated from protobuf field: envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5;
     */
    runtimeEnabled?: RuntimeFeatureFlag;
}
// @generated message type with reflection information, may provide speed optimized methods
class Compressor$Type extends MessageType<Compressor> {
    constructor() {
        super("envoy.config.filter.http.compressor.v2.Compressor", [
            { no: 1, name: "content_length", kind: "message", T: () => UInt32Value },
            { no: 2, name: "content_type", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "disable_on_etag_header", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "remove_accept_encoding_header", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "runtime_enabled", kind: "message", T: () => RuntimeFeatureFlag }
        ]);
    }
    create(value?: PartialMessage<Compressor>): Compressor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.contentType = [];
        message.disableOnEtagHeader = false;
        message.removeAcceptEncodingHeader = false;
        if (value !== undefined)
            reflectionMergePartial<Compressor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Compressor): Compressor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value content_length */ 1:
                    message.contentLength = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.contentLength);
                    break;
                case /* repeated string content_type */ 2:
                    message.contentType.push(reader.string());
                    break;
                case /* bool disable_on_etag_header */ 3:
                    message.disableOnEtagHeader = reader.bool();
                    break;
                case /* bool remove_accept_encoding_header */ 4:
                    message.removeAcceptEncodingHeader = reader.bool();
                    break;
                case /* envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled */ 5:
                    message.runtimeEnabled = RuntimeFeatureFlag.internalBinaryRead(reader, reader.uint32(), options, message.runtimeEnabled);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Compressor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value content_length = 1; */
        if (message.contentLength)
            UInt32Value.internalBinaryWrite(message.contentLength, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string content_type = 2; */
        for (let i = 0; i < message.contentType.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.contentType[i]);
        /* bool disable_on_etag_header = 3; */
        if (message.disableOnEtagHeader !== false)
            writer.tag(3, WireType.Varint).bool(message.disableOnEtagHeader);
        /* bool remove_accept_encoding_header = 4; */
        if (message.removeAcceptEncodingHeader !== false)
            writer.tag(4, WireType.Varint).bool(message.removeAcceptEncodingHeader);
        /* envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5; */
        if (message.runtimeEnabled)
            RuntimeFeatureFlag.internalBinaryWrite(message.runtimeEnabled, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.http.compressor.v2.Compressor
 */
export const Compressor = new Compressor$Type();
