// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/udp/udp_proxy/v2alpha/udp_proxy.proto" (package "envoy.config.filter.udp.udp_proxy.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../google/protobuf/duration";
// [#protodoc-title: UDP proxy]
// UDP proxy :ref:`configuration overview <config_udp_listener_filters_udp_proxy>`.
// [#extension: envoy.filters.udp_listener.udp_proxy]

/**
 * Configuration for the UDP proxy filter.
 *
 * @generated from protobuf message envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig
 */
export interface UdpProxyConfig {
    /**
     * The stat prefix used when emitting UDP proxy filter stats.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * @generated from protobuf oneof: route_specifier
     */
    routeSpecifier: {
        oneofKind: "cluster";
        /**
         * The upstream cluster to connect to.
         *
         * @generated from protobuf field: string cluster = 2;
         */
        cluster: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     *
     * @generated from protobuf field: google.protobuf.Duration idle_timeout = 3;
     */
    idleTimeout?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class UdpProxyConfig$Type extends MessageType<UdpProxyConfig> {
    constructor() {
        super("envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "cluster", kind: "scalar", oneof: "routeSpecifier", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 3, name: "idle_timeout", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<UdpProxyConfig>): UdpProxyConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.routeSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UdpProxyConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UdpProxyConfig): UdpProxyConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* string cluster */ 2:
                    message.routeSpecifier = {
                        oneofKind: "cluster",
                        cluster: reader.string()
                    };
                    break;
                case /* google.protobuf.Duration idle_timeout */ 3:
                    message.idleTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.idleTimeout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UdpProxyConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* string cluster = 2; */
        if (message.routeSpecifier.oneofKind === "cluster")
            writer.tag(2, WireType.LengthDelimited).string(message.routeSpecifier.cluster);
        /* google.protobuf.Duration idle_timeout = 3; */
        if (message.idleTimeout)
            Duration.internalBinaryWrite(message.idleTimeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig
 */
export const UdpProxyConfig = new UdpProxyConfig$Type();
