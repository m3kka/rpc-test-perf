// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/accesslog/v2/accesslog.proto (package envoy.config.filter.accesslog.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3, Struct } from "@bufbuild/protobuf";
import { RuntimeUInt32 } from "../../../../api/v2/core/base_pb.js";
import { FractionalPercent } from "../../../../type/percent_pb.js";
import { HeaderMatcher } from "../../../../api/v2/route/route_components_pb.js";

/**
 * @generated from message envoy.config.filter.accesslog.v2.AccessLog
 */
export const AccessLog = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.AccessLog",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: AccessLogFilter },
    { no: 3, name: "config", kind: "message", T: Struct, oneof: "config_type" },
    { no: 4, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
  ],
);

/**
 * [#next-free-field: 12]
 *
 * @generated from message envoy.config.filter.accesslog.v2.AccessLogFilter
 */
export const AccessLogFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.AccessLogFilter",
  () => [
    { no: 1, name: "status_code_filter", kind: "message", T: StatusCodeFilter, oneof: "filter_specifier" },
    { no: 2, name: "duration_filter", kind: "message", T: DurationFilter, oneof: "filter_specifier" },
    { no: 3, name: "not_health_check_filter", kind: "message", T: NotHealthCheckFilter, oneof: "filter_specifier" },
    { no: 4, name: "traceable_filter", kind: "message", T: TraceableFilter, oneof: "filter_specifier" },
    { no: 5, name: "runtime_filter", kind: "message", T: RuntimeFilter, oneof: "filter_specifier" },
    { no: 6, name: "and_filter", kind: "message", T: AndFilter, oneof: "filter_specifier" },
    { no: 7, name: "or_filter", kind: "message", T: OrFilter, oneof: "filter_specifier" },
    { no: 8, name: "header_filter", kind: "message", T: HeaderFilter, oneof: "filter_specifier" },
    { no: 9, name: "response_flag_filter", kind: "message", T: ResponseFlagFilter, oneof: "filter_specifier" },
    { no: 10, name: "grpc_status_filter", kind: "message", T: GrpcStatusFilter, oneof: "filter_specifier" },
    { no: 11, name: "extension_filter", kind: "message", T: ExtensionFilter, oneof: "filter_specifier" },
  ],
);

/**
 * Filter on an integer comparison.
 *
 * @generated from message envoy.config.filter.accesslog.v2.ComparisonFilter
 */
export const ComparisonFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.ComparisonFilter",
  () => [
    { no: 1, name: "op", kind: "enum", T: proto3.getEnumType(ComparisonFilter_Op) },
    { no: 2, name: "value", kind: "message", T: RuntimeUInt32 },
  ],
);

/**
 * @generated from enum envoy.config.filter.accesslog.v2.ComparisonFilter.Op
 */
export const ComparisonFilter_Op = proto3.makeEnum(
  "envoy.config.filter.accesslog.v2.ComparisonFilter.Op",
  [
    {no: 0, name: "EQ"},
    {no: 1, name: "GE"},
    {no: 2, name: "LE"},
  ],
);

/**
 * Filters on HTTP response/status code.
 *
 * @generated from message envoy.config.filter.accesslog.v2.StatusCodeFilter
 */
export const StatusCodeFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.StatusCodeFilter",
  () => [
    { no: 1, name: "comparison", kind: "message", T: ComparisonFilter },
  ],
);

/**
 * Filters on total request duration in milliseconds.
 *
 * @generated from message envoy.config.filter.accesslog.v2.DurationFilter
 */
export const DurationFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.DurationFilter",
  () => [
    { no: 1, name: "comparison", kind: "message", T: ComparisonFilter },
  ],
);

/**
 * Filters for requests that are not health check requests. A health check
 * request is marked by the health check filter.
 *
 * @generated from message envoy.config.filter.accesslog.v2.NotHealthCheckFilter
 */
export const NotHealthCheckFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.NotHealthCheckFilter",
  [],
);

/**
 * Filters for requests that are traceable. See the tracing overview for more
 * information on how a request becomes traceable.
 *
 * @generated from message envoy.config.filter.accesslog.v2.TraceableFilter
 */
export const TraceableFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.TraceableFilter",
  [],
);

/**
 * Filters for random sampling of requests.
 *
 * @generated from message envoy.config.filter.accesslog.v2.RuntimeFilter
 */
export const RuntimeFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.RuntimeFilter",
  () => [
    { no: 1, name: "runtime_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "percent_sampled", kind: "message", T: FractionalPercent },
    { no: 3, name: "use_independent_randomness", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Performs a logical “and” operation on the result of each filter in filters.
 * Filters are evaluated sequentially and if one of them returns false, the
 * filter returns false immediately.
 *
 * @generated from message envoy.config.filter.accesslog.v2.AndFilter
 */
export const AndFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.AndFilter",
  () => [
    { no: 1, name: "filters", kind: "message", T: AccessLogFilter, repeated: true },
  ],
);

/**
 * Performs a logical “or” operation on the result of each individual filter.
 * Filters are evaluated sequentially and if one of them returns true, the
 * filter returns true immediately.
 *
 * @generated from message envoy.config.filter.accesslog.v2.OrFilter
 */
export const OrFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.OrFilter",
  () => [
    { no: 2, name: "filters", kind: "message", T: AccessLogFilter, repeated: true },
  ],
);

/**
 * Filters requests based on the presence or value of a request header.
 *
 * @generated from message envoy.config.filter.accesslog.v2.HeaderFilter
 */
export const HeaderFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.HeaderFilter",
  () => [
    { no: 1, name: "header", kind: "message", T: HeaderMatcher },
  ],
);

/**
 * Filters requests that received responses with an Envoy response flag set.
 * A list of the response flags can be found
 * in the access log formatter :ref:`documentation<config_access_log_format_response_flags>`.
 *
 * @generated from message envoy.config.filter.accesslog.v2.ResponseFlagFilter
 */
export const ResponseFlagFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.ResponseFlagFilter",
  () => [
    { no: 1, name: "flags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Filters gRPC requests based on their response status. If a gRPC status is not provided, the
 * filter will infer the status from the HTTP status code.
 *
 * @generated from message envoy.config.filter.accesslog.v2.GrpcStatusFilter
 */
export const GrpcStatusFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.GrpcStatusFilter",
  () => [
    { no: 1, name: "statuses", kind: "enum", T: proto3.getEnumType(GrpcStatusFilter_Status), repeated: true },
    { no: 2, name: "exclude", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from enum envoy.config.filter.accesslog.v2.GrpcStatusFilter.Status
 */
export const GrpcStatusFilter_Status = proto3.makeEnum(
  "envoy.config.filter.accesslog.v2.GrpcStatusFilter.Status",
  [
    {no: 0, name: "OK"},
    {no: 1, name: "CANCELED"},
    {no: 2, name: "UNKNOWN"},
    {no: 3, name: "INVALID_ARGUMENT"},
    {no: 4, name: "DEADLINE_EXCEEDED"},
    {no: 5, name: "NOT_FOUND"},
    {no: 6, name: "ALREADY_EXISTS"},
    {no: 7, name: "PERMISSION_DENIED"},
    {no: 8, name: "RESOURCE_EXHAUSTED"},
    {no: 9, name: "FAILED_PRECONDITION"},
    {no: 10, name: "ABORTED"},
    {no: 11, name: "OUT_OF_RANGE"},
    {no: 12, name: "UNIMPLEMENTED"},
    {no: 13, name: "INTERNAL"},
    {no: 14, name: "UNAVAILABLE"},
    {no: 15, name: "DATA_LOSS"},
    {no: 16, name: "UNAUTHENTICATED"},
  ],
);

/**
 * Extension filter is statically registered at runtime.
 *
 * @generated from message envoy.config.filter.accesslog.v2.ExtensionFilter
 */
export const ExtensionFilter = proto3.makeMessageType(
  "envoy.config.filter.accesslog.v2.ExtensionFilter",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Struct, oneof: "config_type" },
    { no: 3, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
  ],
);

