// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/fault/v2/fault.proto" (package "envoy.config.filter.fault.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FractionalPercent } from "../../../../type/percent";
import { Duration } from "../../../../../google/protobuf/duration";
// [#protodoc-title: Common fault injection types]

/**
 * Delay specification is used to inject latency into the
 * HTTP/gRPC/Mongo/Redis operation or delay proxying of TCP connections.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.filter.fault.v2.FaultDelay
 */
export interface FaultDelay {
    /**
     * Unused and deprecated. Will be removed in the next release.
     *
     * @deprecated
     * @generated from protobuf field: envoy.config.filter.fault.v2.FaultDelay.FaultDelayType type = 1 [deprecated = true];
     */
    type: FaultDelay_FaultDelayType;
    /**
     * @generated from protobuf oneof: fault_delay_secifier
     */
    faultDelaySecifier: {
        oneofKind: "fixedDelay";
        /**
         * Add a fixed delay before forwarding the operation upstream. See
         * https://developers.google.com/protocol-buffers/docs/proto3#json for
         * the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
         * delay will be injected before a new request/operation. For TCP
         * connections, the proxying of the connection upstream will be delayed
         * for the specified period. This is required if type is FIXED.
         *
         * @generated from protobuf field: google.protobuf.Duration fixed_delay = 3;
         */
        fixedDelay: Duration;
    } | {
        oneofKind: "headerDelay";
        /**
         * Fault delays are controlled via an HTTP header (if applicable).
         *
         * @generated from protobuf field: envoy.config.filter.fault.v2.FaultDelay.HeaderDelay header_delay = 5;
         */
        headerDelay: FaultDelay_HeaderDelay;
    } | {
        oneofKind: undefined;
    };
    /**
     * The percentage of operations/connections/requests on which the delay will be injected.
     *
     * @generated from protobuf field: envoy.type.FractionalPercent percentage = 4;
     */
    percentage?: FractionalPercent;
}
/**
 * Fault delays are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 *
 * @generated from protobuf message envoy.config.filter.fault.v2.FaultDelay.HeaderDelay
 */
export interface FaultDelay_HeaderDelay {
}
/**
 * @generated from protobuf enum envoy.config.filter.fault.v2.FaultDelay.FaultDelayType
 */
export enum FaultDelay_FaultDelayType {
    /**
     * Unused and deprecated.
     *
     * @generated from protobuf enum value: FIXED = 0;
     */
    FIXED = 0
}
/**
 * Describes a rate limit to be applied.
 *
 * @generated from protobuf message envoy.config.filter.fault.v2.FaultRateLimit
 */
export interface FaultRateLimit {
    /**
     * @generated from protobuf oneof: limit_type
     */
    limitType: {
        oneofKind: "fixedLimit";
        /**
         * A fixed rate limit.
         *
         * @generated from protobuf field: envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit fixed_limit = 1;
         */
        fixedLimit: FaultRateLimit_FixedLimit;
    } | {
        oneofKind: "headerLimit";
        /**
         * Rate limits are controlled via an HTTP header (if applicable).
         *
         * @generated from protobuf field: envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit header_limit = 3;
         */
        headerLimit: FaultRateLimit_HeaderLimit;
    } | {
        oneofKind: undefined;
    };
    /**
     * The percentage of operations/connections/requests on which the rate limit will be injected.
     *
     * @generated from protobuf field: envoy.type.FractionalPercent percentage = 2;
     */
    percentage?: FractionalPercent;
}
/**
 * Describes a fixed/constant rate limit.
 *
 * @generated from protobuf message envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit
 */
export interface FaultRateLimit_FixedLimit {
    /**
     * The limit supplied in KiB/s.
     *
     * @generated from protobuf field: uint64 limit_kbps = 1;
     */
    limitKbps: bigint;
}
/**
 * Rate limits are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 *
 * @generated from protobuf message envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit
 */
export interface FaultRateLimit_HeaderLimit {
}
// @generated message type with reflection information, may provide speed optimized methods
class FaultDelay$Type extends MessageType<FaultDelay> {
    constructor() {
        super("envoy.config.filter.fault.v2.FaultDelay", [
            { no: 1, name: "type", kind: "enum", T: () => ["envoy.config.filter.fault.v2.FaultDelay.FaultDelayType", FaultDelay_FaultDelayType], options: { "envoy.annotations.disallowed_by_default": true } },
            { no: 3, name: "fixed_delay", kind: "message", oneof: "faultDelaySecifier", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 5, name: "header_delay", kind: "message", oneof: "faultDelaySecifier", T: () => FaultDelay_HeaderDelay },
            { no: 4, name: "percentage", kind: "message", T: () => FractionalPercent }
        ]);
    }
    create(value?: PartialMessage<FaultDelay>): FaultDelay {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.faultDelaySecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FaultDelay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FaultDelay): FaultDelay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.fault.v2.FaultDelay.FaultDelayType type = 1 [deprecated = true];*/ 1:
                    message.type = reader.int32();
                    break;
                case /* google.protobuf.Duration fixed_delay */ 3:
                    message.faultDelaySecifier = {
                        oneofKind: "fixedDelay",
                        fixedDelay: Duration.internalBinaryRead(reader, reader.uint32(), options, (message.faultDelaySecifier as any).fixedDelay)
                    };
                    break;
                case /* envoy.config.filter.fault.v2.FaultDelay.HeaderDelay header_delay */ 5:
                    message.faultDelaySecifier = {
                        oneofKind: "headerDelay",
                        headerDelay: FaultDelay_HeaderDelay.internalBinaryRead(reader, reader.uint32(), options, (message.faultDelaySecifier as any).headerDelay)
                    };
                    break;
                case /* envoy.type.FractionalPercent percentage */ 4:
                    message.percentage = FractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.percentage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FaultDelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.fault.v2.FaultDelay.FaultDelayType type = 1 [deprecated = true]; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* google.protobuf.Duration fixed_delay = 3; */
        if (message.faultDelaySecifier.oneofKind === "fixedDelay")
            Duration.internalBinaryWrite(message.faultDelaySecifier.fixedDelay, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.fault.v2.FaultDelay.HeaderDelay header_delay = 5; */
        if (message.faultDelaySecifier.oneofKind === "headerDelay")
            FaultDelay_HeaderDelay.internalBinaryWrite(message.faultDelaySecifier.headerDelay, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.FractionalPercent percentage = 4; */
        if (message.percentage)
            FractionalPercent.internalBinaryWrite(message.percentage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.fault.v2.FaultDelay
 */
export const FaultDelay = new FaultDelay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaultDelay_HeaderDelay$Type extends MessageType<FaultDelay_HeaderDelay> {
    constructor() {
        super("envoy.config.filter.fault.v2.FaultDelay.HeaderDelay", []);
    }
    create(value?: PartialMessage<FaultDelay_HeaderDelay>): FaultDelay_HeaderDelay {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FaultDelay_HeaderDelay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FaultDelay_HeaderDelay): FaultDelay_HeaderDelay {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FaultDelay_HeaderDelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.fault.v2.FaultDelay.HeaderDelay
 */
export const FaultDelay_HeaderDelay = new FaultDelay_HeaderDelay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaultRateLimit$Type extends MessageType<FaultRateLimit> {
    constructor() {
        super("envoy.config.filter.fault.v2.FaultRateLimit", [
            { no: 1, name: "fixed_limit", kind: "message", oneof: "limitType", T: () => FaultRateLimit_FixedLimit },
            { no: 3, name: "header_limit", kind: "message", oneof: "limitType", T: () => FaultRateLimit_HeaderLimit },
            { no: 2, name: "percentage", kind: "message", T: () => FractionalPercent }
        ]);
    }
    create(value?: PartialMessage<FaultRateLimit>): FaultRateLimit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limitType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FaultRateLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FaultRateLimit): FaultRateLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit fixed_limit */ 1:
                    message.limitType = {
                        oneofKind: "fixedLimit",
                        fixedLimit: FaultRateLimit_FixedLimit.internalBinaryRead(reader, reader.uint32(), options, (message.limitType as any).fixedLimit)
                    };
                    break;
                case /* envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit header_limit */ 3:
                    message.limitType = {
                        oneofKind: "headerLimit",
                        headerLimit: FaultRateLimit_HeaderLimit.internalBinaryRead(reader, reader.uint32(), options, (message.limitType as any).headerLimit)
                    };
                    break;
                case /* envoy.type.FractionalPercent percentage */ 2:
                    message.percentage = FractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.percentage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FaultRateLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit fixed_limit = 1; */
        if (message.limitType.oneofKind === "fixedLimit")
            FaultRateLimit_FixedLimit.internalBinaryWrite(message.limitType.fixedLimit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit header_limit = 3; */
        if (message.limitType.oneofKind === "headerLimit")
            FaultRateLimit_HeaderLimit.internalBinaryWrite(message.limitType.headerLimit, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.FractionalPercent percentage = 2; */
        if (message.percentage)
            FractionalPercent.internalBinaryWrite(message.percentage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.fault.v2.FaultRateLimit
 */
export const FaultRateLimit = new FaultRateLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaultRateLimit_FixedLimit$Type extends MessageType<FaultRateLimit_FixedLimit> {
    constructor() {
        super("envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit", [
            { no: 1, name: "limit_kbps", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "validate.rules": { uint64: { gte: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<FaultRateLimit_FixedLimit>): FaultRateLimit_FixedLimit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limitKbps = 0n;
        if (value !== undefined)
            reflectionMergePartial<FaultRateLimit_FixedLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FaultRateLimit_FixedLimit): FaultRateLimit_FixedLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 limit_kbps */ 1:
                    message.limitKbps = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FaultRateLimit_FixedLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 limit_kbps = 1; */
        if (message.limitKbps !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.limitKbps);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit
 */
export const FaultRateLimit_FixedLimit = new FaultRateLimit_FixedLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FaultRateLimit_HeaderLimit$Type extends MessageType<FaultRateLimit_HeaderLimit> {
    constructor() {
        super("envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit", []);
    }
    create(value?: PartialMessage<FaultRateLimit_HeaderLimit>): FaultRateLimit_HeaderLimit {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FaultRateLimit_HeaderLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FaultRateLimit_HeaderLimit): FaultRateLimit_HeaderLimit {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FaultRateLimit_HeaderLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit
 */
export const FaultRateLimit_HeaderLimit = new FaultRateLimit_HeaderLimit$Type();
