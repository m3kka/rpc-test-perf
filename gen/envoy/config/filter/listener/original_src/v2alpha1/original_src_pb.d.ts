// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/listener/original_src/v2alpha1/original_src.proto (package envoy.config.filter.listener.original_src.v2alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The Original Src filter binds upstream connections to the original source address determined
 * for the connection. This address could come from something like the Proxy Protocol filter, or it
 * could come from trusted http headers.
 *
 * @generated from message envoy.config.filter.listener.original_src.v2alpha1.OriginalSrc
 */
export declare class OriginalSrc extends Message<OriginalSrc> {
  /**
   * Whether to bind the port to the one used in the original downstream connection.
   * [#not-implemented-hide:]
   *
   * @generated from field: bool bind_port = 1;
   */
  bindPort: boolean;

  /**
   * Sets the SO_MARK option on the upstream connection's socket to the provided value. Used to
   * ensure that non-local addresses may be routed back through envoy when binding to the original
   * source address. The option will not be applied if the mark is 0.
   *
   * @generated from field: uint32 mark = 2;
   */
  mark: number;

  constructor(data?: PartialMessage<OriginalSrc>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.listener.original_src.v2alpha1.OriginalSrc";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OriginalSrc;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OriginalSrc;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OriginalSrc;

  static equals(a: OriginalSrc | PlainMessage<OriginalSrc> | undefined, b: OriginalSrc | PlainMessage<OriginalSrc> | undefined): boolean;
}

