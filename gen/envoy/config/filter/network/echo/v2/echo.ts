// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/network/echo/v2/echo.proto" (package "envoy.config.filter.network.echo.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Echo]
// Echo :ref:`configuration overview <config_network_filters_echo>`.
// [#extension: envoy.filters.network.echo]

/**
 * @generated from protobuf message envoy.config.filter.network.echo.v2.Echo
 */
export interface Echo {
}
// @generated message type with reflection information, may provide speed optimized methods
class Echo$Type extends MessageType<Echo> {
    constructor() {
        super("envoy.config.filter.network.echo.v2.Echo", []);
    }
    create(value?: PartialMessage<Echo>): Echo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Echo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Echo): Echo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Echo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.echo.v2.Echo
 */
export const Echo = new Echo$Type();
