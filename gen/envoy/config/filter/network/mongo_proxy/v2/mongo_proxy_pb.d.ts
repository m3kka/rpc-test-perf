// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/network/mongo_proxy/v2/mongo_proxy.proto (package envoy.config.filter.network.mongo_proxy.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { FaultDelay } from "../../../fault/v2/fault_pb.js";

/**
 * @generated from message envoy.config.filter.network.mongo_proxy.v2.MongoProxy
 */
export declare class MongoProxy extends Message<MongoProxy> {
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_mongo_proxy_stats>`.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * The optional path to use for writing Mongo access logs. If not access log
   * path is specified no access logs will be written. Note that access log is
   * also gated :ref:`runtime <config_network_filters_mongo_proxy_runtime>`.
   *
   * @generated from field: string access_log = 2;
   */
  accessLog: string;

  /**
   * Inject a fixed delay before proxying a Mongo operation. Delays are
   * applied to the following MongoDB operations: Query, Insert, GetMore,
   * and KillCursors. Once an active delay is in progress, all incoming
   * data up until the timer event fires will be a part of the delay.
   *
   * @generated from field: envoy.config.filter.fault.v2.FaultDelay delay = 3;
   */
  delay?: FaultDelay;

  /**
   * Flag to specify whether :ref:`dynamic metadata
   * <config_network_filters_mongo_proxy_dynamic_metadata>` should be emitted. Defaults to false.
   *
   * @generated from field: bool emit_dynamic_metadata = 4;
   */
  emitDynamicMetadata: boolean;

  constructor(data?: PartialMessage<MongoProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.mongo_proxy.v2.MongoProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MongoProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MongoProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MongoProxy;

  static equals(a: MongoProxy | PlainMessage<MongoProxy> | undefined, b: MongoProxy | PlainMessage<MongoProxy> | undefined): boolean;
}

