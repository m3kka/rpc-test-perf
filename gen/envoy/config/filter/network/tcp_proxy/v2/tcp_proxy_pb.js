// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto (package envoy.config.filter.network.tcp_proxy.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { Metadata } from "../../../../../api/v2/core/base_pb.js";
import { AccessLog } from "../../../accesslog/v2/accesslog_pb.js";
import { HashPolicy } from "../../../../../type/hash_policy_pb.js";
import { CidrRange } from "../../../../../api/v2/core/address_pb.js";

/**
 * [#next-free-field: 13]
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy
 */
export const TcpProxy = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy",
  () => [
    { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "cluster_specifier" },
    { no: 10, name: "weighted_clusters", kind: "message", T: TcpProxy_WeightedCluster, oneof: "cluster_specifier" },
    { no: 9, name: "metadata_match", kind: "message", T: Metadata },
    { no: 8, name: "idle_timeout", kind: "message", T: Duration },
    { no: 3, name: "downstream_idle_timeout", kind: "message", T: Duration },
    { no: 4, name: "upstream_idle_timeout", kind: "message", T: Duration },
    { no: 5, name: "access_log", kind: "message", T: AccessLog, repeated: true },
    { no: 6, name: "deprecated_v1", kind: "message", T: TcpProxy_DeprecatedV1 },
    { no: 7, name: "max_connect_attempts", kind: "message", T: UInt32Value },
    { no: 11, name: "hash_policy", kind: "message", T: HashPolicy, repeated: true },
    { no: 12, name: "tunneling_config", kind: "message", T: TcpProxy_TunnelingConfig },
  ],
);

/**
 * [#not-implemented-hide:] Deprecated.
 * TCP Proxy filter configuration using V1 format.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1
 * @deprecated
 */
export const TcpProxy_DeprecatedV1 = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1",
  () => [
    { no: 1, name: "routes", kind: "message", T: TcpProxy_DeprecatedV1_TCPRoute, repeated: true },
  ],
  {localName: "TcpProxy_DeprecatedV1"},
);

/**
 * A TCP proxy route consists of a set of optional L4 criteria and the
 * name of a cluster. If a downstream connection matches all the
 * specified criteria, the cluster in the route is used for the
 * corresponding upstream connection. Routes are tried in the order
 * specified until a match is found. If no match is found, the connection
 * is closed. A route with no criteria is valid and always produces a
 * match.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute
 */
export const TcpProxy_DeprecatedV1_TCPRoute = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute",
  () => [
    { no: 1, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_ip_list", kind: "message", T: CidrRange, repeated: true },
    { no: 3, name: "destination_ports", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_ip_list", kind: "message", T: CidrRange, repeated: true },
    { no: 5, name: "source_ports", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "TcpProxy_DeprecatedV1_TCPRoute"},
);

/**
 * Allows for specification of multiple upstream clusters along with weights
 * that indicate the percentage of traffic to be forwarded to each cluster.
 * The router selects an upstream cluster based on these weights.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster
 */
export const TcpProxy_WeightedCluster = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster",
  () => [
    { no: 1, name: "clusters", kind: "message", T: TcpProxy_WeightedCluster_ClusterWeight, repeated: true },
  ],
  {localName: "TcpProxy_WeightedCluster"},
);

/**
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight
 */
export const TcpProxy_WeightedCluster_ClusterWeight = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "metadata_match", kind: "message", T: Metadata },
  ],
  {localName: "TcpProxy_WeightedCluster_ClusterWeight"},
);

/**
 * Configuration for tunneling TCP over other transports or application layers.
 * Currently, only HTTP/2 is supported. When other options exist, HTTP/2 will
 * remain the default.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig
 */
export const TcpProxy_TunnelingConfig = proto3.makeMessageType(
  "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig",
  () => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "TcpProxy_TunnelingConfig"},
);

