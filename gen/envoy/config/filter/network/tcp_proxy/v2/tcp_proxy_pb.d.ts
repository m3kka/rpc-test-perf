// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto (package envoy.config.filter.network.tcp_proxy.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Metadata } from "../../../../../api/v2/core/base_pb.js";
import type { AccessLog } from "../../../accesslog/v2/accesslog_pb.js";
import type { HashPolicy } from "../../../../../type/hash_policy_pb.js";
import type { CidrRange } from "../../../../../api/v2/core/address_pb.js";

/**
 * [#next-free-field: 13]
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy
 */
export declare class TcpProxy extends Message<TcpProxy> {
  /**
   * The prefix to use when emitting :ref:`statistics
   * <config_network_filters_tcp_proxy_stats>`.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * @generated from oneof envoy.config.filter.network.tcp_proxy.v2.TcpProxy.cluster_specifier
   */
  clusterSpecifier: {
    /**
     * The upstream cluster to connect to.
     *
     * @generated from field: string cluster = 2;
     */
    value: string;
    case: "cluster";
  } | {
    /**
     * Multiple upstream clusters can be specified for a given route. The
     * request is routed to one of the upstream clusters based on weights
     * assigned to each cluster.
     *
     * @generated from field: envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster weighted_clusters = 10;
     */
    value: TcpProxy_WeightedCluster;
    case: "weightedClusters";
  } | { case: undefined; value?: undefined };

  /**
   * Optional endpoint metadata match criteria. Only endpoints in the upstream
   * cluster with metadata matching that set in metadata_match will be
   * considered. The filter name should be specified as *envoy.lb*.
   *
   * @generated from field: envoy.api.v2.core.Metadata metadata_match = 9;
   */
  metadataMatch?: Metadata;

  /**
   * The idle timeout for connections managed by the TCP proxy filter. The idle timeout
   * is defined as the period in which there are no bytes sent or received on either
   * the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set
   * to 0s, the timeout will be disabled.
   *
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   *
   * @generated from field: google.protobuf.Duration idle_timeout = 8;
   */
  idleTimeout?: Duration;

  /**
   * [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
   * filter. The idle timeout is defined as the period in which there is no
   * active traffic. If not set, there is no idle timeout. When the idle timeout
   * is reached the connection will be closed. The distinction between
   * downstream_idle_timeout/upstream_idle_timeout provides a means to set
   * timeout based on the last byte sent on the downstream/upstream connection.
   *
   * @generated from field: google.protobuf.Duration downstream_idle_timeout = 3;
   */
  downstreamIdleTimeout?: Duration;

  /**
   * [#not-implemented-hide:]
   *
   * @generated from field: google.protobuf.Duration upstream_idle_timeout = 4;
   */
  upstreamIdleTimeout?: Duration;

  /**
   * Configuration for :ref:`access logs <arch_overview_access_logs>`
   * emitted by the this tcp_proxy.
   *
   * @generated from field: repeated envoy.config.filter.accesslog.v2.AccessLog access_log = 5;
   */
  accessLog: AccessLog[];

  /**
   * [#not-implemented-hide:] Deprecated.
   *
   * @generated from field: envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 deprecated_v1 = 6 [deprecated = true];
   * @deprecated
   */
  deprecatedV1?: TcpProxy_DeprecatedV1;

  /**
   * The maximum number of unsuccessful connection attempts that will be made before
   * giving up. If the parameter is not specified, 1 connection attempt will be made.
   *
   * @generated from field: google.protobuf.UInt32Value max_connect_attempts = 7;
   */
  maxConnectAttempts?: number;

  /**
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   *
   * @generated from field: repeated envoy.type.HashPolicy hash_policy = 11;
   */
  hashPolicy: HashPolicy[];

  /**
   * [#not-implemented-hide:] feature in progress
   * If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
   * payloads over a shared HTTP/2 tunnel. If this message is absent, the payload
   * will be proxied upstream as per usual.
   *
   * @generated from field: envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig tunneling_config = 12;
   */
  tunnelingConfig?: TcpProxy_TunnelingConfig;

  constructor(data?: PartialMessage<TcpProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy;

  static equals(a: TcpProxy | PlainMessage<TcpProxy> | undefined, b: TcpProxy | PlainMessage<TcpProxy> | undefined): boolean;
}

/**
 * [#not-implemented-hide:] Deprecated.
 * TCP Proxy filter configuration using V1 format.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1
 * @deprecated
 */
export declare class TcpProxy_DeprecatedV1 extends Message<TcpProxy_DeprecatedV1> {
  /**
   * The route table for the filter. All filter instances must have a route
   * table, even if it is empty.
   *
   * @generated from field: repeated envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute routes = 1;
   */
  routes: TcpProxy_DeprecatedV1_TCPRoute[];

  constructor(data?: PartialMessage<TcpProxy_DeprecatedV1>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy_DeprecatedV1;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy_DeprecatedV1;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy_DeprecatedV1;

  static equals(a: TcpProxy_DeprecatedV1 | PlainMessage<TcpProxy_DeprecatedV1> | undefined, b: TcpProxy_DeprecatedV1 | PlainMessage<TcpProxy_DeprecatedV1> | undefined): boolean;
}

/**
 * A TCP proxy route consists of a set of optional L4 criteria and the
 * name of a cluster. If a downstream connection matches all the
 * specified criteria, the cluster in the route is used for the
 * corresponding upstream connection. Routes are tried in the order
 * specified until a match is found. If no match is found, the connection
 * is closed. A route with no criteria is valid and always produces a
 * match.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute
 */
export declare class TcpProxy_DeprecatedV1_TCPRoute extends Message<TcpProxy_DeprecatedV1_TCPRoute> {
  /**
   * The cluster to connect to when a the downstream network connection
   * matches the specified criteria.
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * An optional list of IP address subnets in the form
   * “ip_address/xx”. The criteria is satisfied if the destination IP
   * address of the downstream connection is contained in at least one of
   * the specified subnets. If the parameter is not specified or the list
   * is empty, the destination IP address is ignored. The destination IP
   * address of the downstream connection might be different from the
   * addresses on which the proxy is listening if the connection has been
   * redirected.
   *
   * @generated from field: repeated envoy.api.v2.core.CidrRange destination_ip_list = 2;
   */
  destinationIpList: CidrRange[];

  /**
   * An optional string containing a comma-separated list of port numbers
   * or ranges. The criteria is satisfied if the destination port of the
   * downstream connection is contained in at least one of the specified
   * ranges. If the parameter is not specified, the destination port is
   * ignored. The destination port address of the downstream connection
   * might be different from the port on which the proxy is listening if
   * the connection has been redirected.
   *
   * @generated from field: string destination_ports = 3;
   */
  destinationPorts: string;

  /**
   * An optional list of IP address subnets in the form
   * “ip_address/xx”. The criteria is satisfied if the source IP address
   * of the downstream connection is contained in at least one of the
   * specified subnets. If the parameter is not specified or the list is
   * empty, the source IP address is ignored.
   *
   * @generated from field: repeated envoy.api.v2.core.CidrRange source_ip_list = 4;
   */
  sourceIpList: CidrRange[];

  /**
   * An optional string containing a comma-separated list of port numbers
   * or ranges. The criteria is satisfied if the source port of the
   * downstream connection is contained in at least one of the specified
   * ranges. If the parameter is not specified, the source port is
   * ignored.
   *
   * @generated from field: string source_ports = 5;
   */
  sourcePorts: string;

  constructor(data?: PartialMessage<TcpProxy_DeprecatedV1_TCPRoute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy_DeprecatedV1_TCPRoute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy_DeprecatedV1_TCPRoute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy_DeprecatedV1_TCPRoute;

  static equals(a: TcpProxy_DeprecatedV1_TCPRoute | PlainMessage<TcpProxy_DeprecatedV1_TCPRoute> | undefined, b: TcpProxy_DeprecatedV1_TCPRoute | PlainMessage<TcpProxy_DeprecatedV1_TCPRoute> | undefined): boolean;
}

/**
 * Allows for specification of multiple upstream clusters along with weights
 * that indicate the percentage of traffic to be forwarded to each cluster.
 * The router selects an upstream cluster based on these weights.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster
 */
export declare class TcpProxy_WeightedCluster extends Message<TcpProxy_WeightedCluster> {
  /**
   * Specifies one or more upstream clusters associated with the route.
   *
   * @generated from field: repeated envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight clusters = 1;
   */
  clusters: TcpProxy_WeightedCluster_ClusterWeight[];

  constructor(data?: PartialMessage<TcpProxy_WeightedCluster>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy_WeightedCluster;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy_WeightedCluster;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy_WeightedCluster;

  static equals(a: TcpProxy_WeightedCluster | PlainMessage<TcpProxy_WeightedCluster> | undefined, b: TcpProxy_WeightedCluster | PlainMessage<TcpProxy_WeightedCluster> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight
 */
export declare class TcpProxy_WeightedCluster_ClusterWeight extends Message<TcpProxy_WeightedCluster_ClusterWeight> {
  /**
   * Name of the upstream cluster.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When a request matches the route, the choice of an upstream cluster is
   * determined by its weight. The sum of weights across all entries in the
   * clusters array determines the total weight.
   *
   * @generated from field: uint32 weight = 2;
   */
  weight: number;

  /**
   * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints
   * in the upstream cluster with metadata matching what is set in this field will be considered
   * for load balancing. Note that this will be merged with what's provided in
   * :ref:`TcpProxy.metadata_match
   * <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.metadata_match>`, with values
   * here taking precedence. The filter name should be specified as *envoy.lb*.
   *
   * @generated from field: envoy.api.v2.core.Metadata metadata_match = 3;
   */
  metadataMatch?: Metadata;

  constructor(data?: PartialMessage<TcpProxy_WeightedCluster_ClusterWeight>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy_WeightedCluster_ClusterWeight;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy_WeightedCluster_ClusterWeight;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy_WeightedCluster_ClusterWeight;

  static equals(a: TcpProxy_WeightedCluster_ClusterWeight | PlainMessage<TcpProxy_WeightedCluster_ClusterWeight> | undefined, b: TcpProxy_WeightedCluster_ClusterWeight | PlainMessage<TcpProxy_WeightedCluster_ClusterWeight> | undefined): boolean;
}

/**
 * Configuration for tunneling TCP over other transports or application layers.
 * Currently, only HTTP/2 is supported. When other options exist, HTTP/2 will
 * remain the default.
 *
 * @generated from message envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig
 */
export declare class TcpProxy_TunnelingConfig extends Message<TcpProxy_TunnelingConfig> {
  /**
   * The hostname to send in the synthesized CONNECT headers to the upstream proxy.
   *
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  constructor(data?: PartialMessage<TcpProxy_TunnelingConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TcpProxy_TunnelingConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TcpProxy_TunnelingConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TcpProxy_TunnelingConfig;

  static equals(a: TcpProxy_TunnelingConfig | PlainMessage<TcpProxy_TunnelingConfig> | undefined, b: TcpProxy_TunnelingConfig | PlainMessage<TcpProxy_TunnelingConfig> | undefined): boolean;
}

