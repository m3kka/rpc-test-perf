// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto (package envoy.config.filter.network.http_connection_manager.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RouteConfiguration } from "../../../../../api/v2/route_pb.js";
import type { Http1ProtocolOptions, Http2ProtocolOptions, HttpProtocolOptions } from "../../../../../api/v2/core/protocol_pb.js";
import type { AccessLog } from "../../../accesslog/v2/accesslog_pb.js";
import type { Percent } from "../../../../../type/percent_pb.js";
import type { CustomTag } from "../../../../../type/tracing/v2/custom_tag_pb.js";
import type { Tracing_Http } from "../../../../trace/v2/http_tracer_pb.js";
import type { ConfigSource } from "../../../../../api/v2/core/config_source_pb.js";
import type { ScopedRouteConfiguration } from "../../../../../api/v2/scoped_route_pb.js";

/**
 * [#next-free-field: 37]
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
 */
export declare class HttpConnectionManager extends Message<HttpConnectionManager> {
  /**
   * Supplies the type of codec that the connection manager should use.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType codec_type = 1;
   */
  codecType: HttpConnectionManager_CodecType;

  /**
   * The human readable prefix to use when emitting statistics for the
   * connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
   * more information.
   *
   * @generated from field: string stat_prefix = 2;
   */
  statPrefix: string;

  /**
   * @generated from oneof envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_specifier
   */
  routeSpecifier: {
    /**
     * The connection manager’s route table will be dynamically loaded via the RDS API.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.Rds rds = 3;
     */
    value: Rds;
    case: "rds";
  } | {
    /**
     * The route table for the connection manager is static and is specified in this property.
     *
     * @generated from field: envoy.api.v2.RouteConfiguration route_config = 4;
     */
    value: RouteConfiguration;
    case: "routeConfig";
  } | {
    /**
     * A route table will be dynamically assigned to each request based on request attributes
     * (e.g., the value of a header). The "routing scopes" (i.e., route tables) and "scope keys" are
     * specified in this message.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes scoped_routes = 31;
     */
    value: ScopedRoutes;
    case: "scopedRoutes";
  } | { case: undefined; value?: undefined };

  /**
   * A list of individual HTTP filters that make up the filter chain for
   * requests made to the connection manager. :ref:`Order matters <arch_overview_http_filters_ordering>`
   * as the filters are processed sequentially as request events happen.
   *
   * @generated from field: repeated envoy.config.filter.network.http_connection_manager.v2.HttpFilter http_filters = 5;
   */
  httpFilters: HttpFilter[];

  /**
   * Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
   * and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
   * documentation for more information. Defaults to false.
   *
   * @generated from field: google.protobuf.BoolValue add_user_agent = 6;
   */
  addUserAgent?: boolean;

  /**
   * Presence of the object defines whether the connection manager
   * emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
   * <envoy_api_msg_config.trace.v2.Tracing>`.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing tracing = 7;
   */
  tracing?: HttpConnectionManager_Tracing;

  /**
   * Additional settings for HTTP requests handled by the connection manager. These will be
   * applicable to both HTTP1 and HTTP2 requests.
   *
   * @generated from field: envoy.api.v2.core.HttpProtocolOptions common_http_protocol_options = 35;
   */
  commonHttpProtocolOptions?: HttpProtocolOptions;

  /**
   * Additional HTTP/1 settings that are passed to the HTTP/1 codec.
   *
   * @generated from field: envoy.api.v2.core.Http1ProtocolOptions http_protocol_options = 8;
   */
  httpProtocolOptions?: Http1ProtocolOptions;

  /**
   * Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
   *
   * @generated from field: envoy.api.v2.core.Http2ProtocolOptions http2_protocol_options = 9;
   */
  http2ProtocolOptions?: Http2ProtocolOptions;

  /**
   * An optional override that the connection manager will write to the server
   * header in responses. If not set, the default is *envoy*.
   *
   * @generated from field: string server_name = 10;
   */
  serverName: string;

  /**
   * Defines the action to be applied to the Server header on the response path.
   * By default, Envoy will overwrite the header with the value specified in
   * server_name.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.ServerHeaderTransformation server_header_transformation = 34;
   */
  serverHeaderTransformation: HttpConnectionManager_ServerHeaderTransformation;

  /**
   * The maximum request headers size for incoming connections.
   * If unconfigured, the default max request headers allowed is 60 KiB.
   * Requests that exceed this limit will receive a 431 response.
   *
   * @generated from field: google.protobuf.UInt32Value max_request_headers_kb = 29;
   */
  maxRequestHeadersKb?: number;

  /**
   * The idle timeout for connections managed by the connection manager. The
   * idle timeout is defined as the period in which there are no active
   * requests. If not set, there is no idle timeout. When the idle timeout is
   * reached the connection will be closed. If the connection is an HTTP/2
   * connection a drain sequence will occur prior to closing the connection.
   * This field is deprecated. Use :ref:`idle_timeout
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.common_http_protocol_options>`
   * instead.
   *
   * @generated from field: google.protobuf.Duration idle_timeout = 11 [deprecated = true];
   * @deprecated
   */
  idleTimeout?: Duration;

  /**
   * The stream idle timeout for connections managed by the connection manager.
   * If not specified, this defaults to 5 minutes. The default value was selected
   * so as not to interfere with any smaller configured timeouts that may have
   * existed in configurations prior to the introduction of this feature, while
   * introducing robustness to TCP connections that terminate without a FIN.
   *
   * This idle timeout applies to new streams and is overridable by the
   * :ref:`route-level idle_timeout
   * <envoy_api_field_route.RouteAction.idle_timeout>`. Even on a stream in
   * which the override applies, prior to receipt of the initial request
   * headers, the :ref:`stream_idle_timeout
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.stream_idle_timeout>`
   * applies. Each time an encode/decode event for headers or data is processed
   * for the stream, the timer will be reset. If the timeout fires, the stream
   * is terminated with a 408 Request Timeout error code if no upstream response
   * header has been received, otherwise a stream reset occurs.
   *
   * This timeout also specifies the amount of time that Envoy will wait for the peer to open enough
   * window to write any remaining stream data once the entirety of stream data (local end stream is
   * true) has been buffered pending available window. In other words, this timeout defends against
   * a peer that does not release enough window to completely write the stream, even though all
   * data has been proxied within available flow control windows. If the timeout is hit in this
   * case, the :ref:`tx_flush_timeout <config_http_conn_man_stats_per_codec>` counter will be
   * incremented. Note that :ref:`max_stream_duration
   * <envoy_api_field_core.HttpProtocolOptions.max_stream_duration>` does not apply to this corner
   * case.
   *
   * Note that it is possible to idle timeout even if the wire traffic for a stream is non-idle, due
   * to the granularity of events presented to the connection manager. For example, while receiving
   * very large request headers, it may be the case that there is traffic regularly arriving on the
   * wire while the connection manage is only able to observe the end-of-headers event, hence the
   * stream may still idle timeout.
   *
   * A value of 0 will completely disable the connection manager stream idle
   * timeout, although per-route idle timeout overrides will continue to apply.
   *
   * @generated from field: google.protobuf.Duration stream_idle_timeout = 24;
   */
  streamIdleTimeout?: Duration;

  /**
   * The amount of time that Envoy will wait for the entire request to be received.
   * The timer is activated when the request is initiated, and is disarmed when the last byte of the
   * request is sent upstream (i.e. all decoding filters have processed the request), OR when the
   * response is initiated. If not specified or set to 0, this timeout is disabled.
   *
   * @generated from field: google.protobuf.Duration request_timeout = 28;
   */
  requestTimeout?: Duration;

  /**
   * The time that Envoy will wait between sending an HTTP/2 “shutdown
   * notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
   * This is used so that Envoy provides a grace period for new streams that
   * race with the final GOAWAY frame. During this grace period, Envoy will
   * continue to accept new streams. After the grace period, a final GOAWAY
   * frame is sent and Envoy will start refusing new streams. Draining occurs
   * both when a connection hits the idle timeout or during general server
   * draining. The default grace period is 5000 milliseconds (5 seconds) if this
   * option is not specified.
   *
   * @generated from field: google.protobuf.Duration drain_timeout = 12;
   */
  drainTimeout?: Duration;

  /**
   * The delayed close timeout is for downstream connections managed by the HTTP connection manager.
   * It is defined as a grace period after connection close processing has been locally initiated
   * during which Envoy will wait for the peer to close (i.e., a TCP FIN/RST is received by Envoy
   * from the downstream connection) prior to Envoy closing the socket associated with that
   * connection.
   * NOTE: This timeout is enforced even when the socket associated with the downstream connection
   * is pending a flush of the write buffer. However, any progress made writing data to the socket
   * will restart the timer associated with this timeout. This means that the total grace period for
   * a socket in this state will be
   * <total_time_waiting_for_write_buffer_flushes>+<delayed_close_timeout>.
   *
   * Delaying Envoy's connection close and giving the peer the opportunity to initiate the close
   * sequence mitigates a race condition that exists when downstream clients do not drain/process
   * data in a connection's receive buffer after a remote close has been detected via a socket
   * write(). This race leads to such clients failing to process the response code sent by Envoy,
   * which could result in erroneous downstream processing.
   *
   * If the timeout triggers, Envoy will close the connection's socket.
   *
   * The default timeout is 1000 ms if this option is not specified.
   *
   * .. NOTE::
   *    To be useful in avoiding the race condition described above, this timeout must be set
   *    to *at least* <max round trip time expected between clients and Envoy>+<100ms to account for
   *    a reasonable "worst" case processing time for a full iteration of Envoy's event loop>.
   *
   * .. WARNING::
   *    A value of 0 will completely disable delayed close processing. When disabled, the downstream
   *    connection's socket will be closed immediately after the write flush is completed or will
   *    never close if the write flush does not complete.
   *
   * @generated from field: google.protobuf.Duration delayed_close_timeout = 26;
   */
  delayedCloseTimeout?: Duration;

  /**
   * Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
   * emitted by the connection manager.
   *
   * @generated from field: repeated envoy.config.filter.accesslog.v2.AccessLog access_log = 13;
   */
  accessLog: AccessLog[];

  /**
   * If set to true, the connection manager will use the real remote address
   * of the client connection when determining internal versus external origin and manipulating
   * various headers. If set to false or absent, the connection manager will use the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
   * :ref:`config_http_conn_man_headers_x-forwarded-for`,
   * :ref:`config_http_conn_man_headers_x-envoy-internal`, and
   * :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
   *
   * @generated from field: google.protobuf.BoolValue use_remote_address = 14;
   */
  useRemoteAddress?: boolean;

  /**
   * The number of additional ingress proxy hops from the right side of the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
   * determining the origin client's IP address. The default is zero if this option
   * is not specified. See the documentation for
   * :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
   *
   * @generated from field: uint32 xff_num_trusted_hops = 19;
   */
  xffNumTrustedHops: number;

  /**
   * Configures what network addresses are considered internal for stats and header sanitation
   * purposes. If unspecified, only RFC1918 IP addresses will be considered internal.
   * See the documentation for :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information about internal/external addresses.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.InternalAddressConfig internal_address_config = 25;
   */
  internalAddressConfig?: HttpConnectionManager_InternalAddressConfig;

  /**
   * If set, Envoy will not append the remote address to the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
   * conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
   * has mutated the request headers. While :ref:`use_remote_address
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
   * will also suppress XFF addition, it has consequences for logging and other
   * Envoy uses of the remote address, so *skip_xff_append* should be used
   * when only an elision of XFF addition is intended.
   *
   * @generated from field: bool skip_xff_append = 21;
   */
  skipXffAppend: boolean;

  /**
   * Via header value to append to request and response headers. If this is
   * empty, no via header will be appended.
   *
   * @generated from field: string via = 22;
   */
  via: string;

  /**
   * Whether the connection manager will generate the :ref:`x-request-id
   * <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
   * true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
   * is not desired it can be disabled.
   *
   * @generated from field: google.protobuf.BoolValue generate_request_id = 15;
   */
  generateRequestId?: boolean;

  /**
   * Whether the connection manager will keep the :ref:`x-request-id
   * <config_http_conn_man_headers_x-request-id>` header if passed for a request that is edge
   * (Edge request is the request from external clients to front Envoy) and not reset it, which
   * is the current Envoy behaviour. This defaults to false.
   *
   * @generated from field: bool preserve_external_request_id = 32;
   */
  preserveExternalRequestId: boolean;

  /**
   * How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
   * header.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
   */
  forwardClientCertDetails: HttpConnectionManager_ForwardClientCertDetails;

  /**
   * This field is valid only when :ref:`forward_client_cert_details
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.forward_client_cert_details>`
   * is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
   * the client certificate to be forwarded. Note that in the
   * :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
   * *By* is always set when the client certificate presents the URI type Subject Alternative Name
   * value.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
   */
  setCurrentClientCertDetails?: HttpConnectionManager_SetCurrentClientCertDetails;

  /**
   * If proxy_100_continue is true, Envoy will proxy incoming "Expect:
   * 100-continue" headers upstream, and forward "100 Continue" responses
   * downstream. If this is false or not set, Envoy will instead strip the
   * "Expect: 100-continue" header, and send a "100 Continue" response itself.
   *
   * @generated from field: bool proxy_100_continue = 18;
   */
  proxy100Continue: boolean;

  /**
   * If
   * :ref:`use_remote_address
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
   * is true and represent_ipv4_remote_address_as_ipv4_mapped_ipv6 is true and the remote address is
   * an IPv4 address, the address will be mapped to IPv6 before it is appended to *x-forwarded-for*.
   * This is useful for testing compatibility of upstream services that parse the header value. For
   * example, 50.0.0.1 is represented as ::FFFF:50.0.0.1. See `IPv4-Mapped IPv6 Addresses
   * <https://tools.ietf.org/html/rfc4291#section-2.5.5.2>`_ for details. This will also affect the
   * :ref:`config_http_conn_man_headers_x-envoy-external-address` header. See
   * :ref:`http_connection_manager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
   * <config_http_conn_man_runtime_represent_ipv4_remote_address_as_ipv4_mapped_ipv6>` for runtime
   * control.
   * [#not-implemented-hide:]
   *
   * @generated from field: bool represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = 20;
   */
  representIpv4RemoteAddressAsIpv4MappedIpv6: boolean;

  /**
   * @generated from field: repeated envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.UpgradeConfig upgrade_configs = 23;
   */
  upgradeConfigs: HttpConnectionManager_UpgradeConfig[];

  /**
   * Should paths be normalized according to RFC 3986 before any processing of
   * requests by HTTP filters or routing? This affects the upstream *:path* header
   * as well. For paths that fail this check, Envoy will respond with 400 to
   * paths that are malformed. This defaults to false currently but will default
   * true in the future. When not specified, this value may be overridden by the
   * runtime variable
   * :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
   * See `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`_
   * for details of normalization.
   * Note that Envoy does not perform
   * `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
   *
   * @generated from field: google.protobuf.BoolValue normalize_path = 30;
   */
  normalizePath?: boolean;

  /**
   * Determines if adjacent slashes in the path are merged into one before any processing of
   * requests by HTTP filters or routing. This affects the upstream *:path* header as well. Without
   * setting this option, incoming requests with path `//dir///file` will not match against route
   * with `prefix` match set to `/dir`. Defaults to `false`. Note that slash merging is not part of
   * `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
   *
   * @generated from field: bool merge_slashes = 33;
   */
  mergeSlashes: boolean;

  /**
   * The configuration of the request ID extension. This includes operations such as
   * generation, validation, and associated tracing operations.
   *
   * If not set, Envoy uses the default UUID-based behavior:
   *
   * 1. Request ID is propagated using *x-request-id* header.
   *
   * 2. Request ID is a universally unique identifier (UUID).
   *
   * 3. Tracing decision (sampled, forced, etc) is set in 14th byte of the UUID.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.RequestIDExtension request_id_extension = 36;
   */
  requestIdExtension?: RequestIDExtension;

  constructor(data?: PartialMessage<HttpConnectionManager>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpConnectionManager;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpConnectionManager;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpConnectionManager;

  static equals(a: HttpConnectionManager | PlainMessage<HttpConnectionManager> | undefined, b: HttpConnectionManager | PlainMessage<HttpConnectionManager> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType
 */
export declare enum HttpConnectionManager_CodecType {
  /**
   * For every new connection, the connection manager will determine which
   * codec to use. This mode supports both ALPN for TLS listeners as well as
   * protocol inference for plaintext listeners. If ALPN data is available, it
   * is preferred, otherwise protocol inference is used. In almost all cases,
   * this is the right option to choose for this setting.
   *
   * @generated from enum value: AUTO = 0;
   */
  AUTO = 0,

  /**
   * The connection manager will assume that the client is speaking HTTP/1.1.
   *
   * @generated from enum value: HTTP1 = 1;
   */
  HTTP1 = 1,

  /**
   * The connection manager will assume that the client is speaking HTTP/2
   * (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
   * Prior knowledge is allowed).
   *
   * @generated from enum value: HTTP2 = 2;
   */
  HTTP2 = 2,

  /**
   * [#not-implemented-hide:] QUIC implementation is not production ready yet. Use this enum with
   * caution to prevent accidental execution of QUIC code. I.e. `!= HTTP2` is no longer sufficient
   * to distinguish HTTP1 and HTTP2 traffic.
   *
   * @generated from enum value: HTTP3 = 3;
   */
  HTTP3 = 3,
}

/**
 * @generated from enum envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.ServerHeaderTransformation
 */
export declare enum HttpConnectionManager_ServerHeaderTransformation {
  /**
   * Overwrite any Server header with the contents of server_name.
   *
   * @generated from enum value: OVERWRITE = 0;
   */
  OVERWRITE = 0,

  /**
   * If no Server header is present, append Server server_name
   * If a Server header is present, pass it through.
   *
   * @generated from enum value: APPEND_IF_ABSENT = 1;
   */
  APPEND_IF_ABSENT = 1,

  /**
   * Pass through the value of the server header, and do not append a header
   * if none is present.
   *
   * @generated from enum value: PASS_THROUGH = 2;
   */
  PASS_THROUGH = 2,
}

/**
 * How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
 * header.
 *
 * @generated from enum envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails
 */
export declare enum HttpConnectionManager_ForwardClientCertDetails {
  /**
   * Do not send the XFCC header to the next hop. This is the default value.
   *
   * @generated from enum value: SANITIZE = 0;
   */
  SANITIZE = 0,

  /**
   * When the client connection is mTLS (Mutual TLS), forward the XFCC header
   * in the request.
   *
   * @generated from enum value: FORWARD_ONLY = 1;
   */
  FORWARD_ONLY = 1,

  /**
   * When the client connection is mTLS, append the client certificate
   * information to the request’s XFCC header and forward it.
   *
   * @generated from enum value: APPEND_FORWARD = 2;
   */
  APPEND_FORWARD = 2,

  /**
   * When the client connection is mTLS, reset the XFCC header with the client
   * certificate information and send it to the next hop.
   *
   * @generated from enum value: SANITIZE_SET = 3;
   */
  SANITIZE_SET = 3,

  /**
   * Always forward the XFCC header in the request, regardless of whether the
   * client connection is mTLS.
   *
   * @generated from enum value: ALWAYS_FORWARD_ONLY = 4;
   */
  ALWAYS_FORWARD_ONLY = 4,
}

/**
 * [#next-free-field: 10]
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing
 */
export declare class HttpConnectionManager_Tracing extends Message<HttpConnectionManager_Tracing> {
  /**
   * The span name will be derived from this field. If
   * :ref:`traffic_direction <envoy_api_field_Listener.traffic_direction>` is
   * specified on the parent listener, then it is used instead of this field.
   *
   * .. attention::
   *  This field has been deprecated in favor of `traffic_direction`.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName operation_name = 1 [deprecated = true];
   * @deprecated
   */
  operationName: HttpConnectionManager_Tracing_OperationName;

  /**
   * A list of header names used to create tags for the active span. The header name is used to
   * populate the tag name, and the header value is used to populate the tag value. The tag is
   * created if the specified header name is present in the request's headers.
   *
   * .. attention::
   *  This field has been deprecated in favor of :ref:`custom_tags
   *  <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.tracing.custom_tags>`.
   *
   * @generated from field: repeated string request_headers_for_tags = 2 [deprecated = true];
   * @deprecated
   */
  requestHeadersForTags: string[];

  /**
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_enabled' in the :ref:`HTTP Connection Manager
   * <config_http_conn_man_runtime>`.
   * Default: 100%
   *
   * @generated from field: envoy.type.Percent client_sampling = 3;
   */
  clientSampling?: Percent;

  /**
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
   * Default: 100%
   *
   * @generated from field: envoy.type.Percent random_sampling = 4;
   */
  randomSampling?: Percent;

  /**
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
   * Default: 100%
   *
   * @generated from field: envoy.type.Percent overall_sampling = 5;
   */
  overallSampling?: Percent;

  /**
   * Whether to annotate spans with additional data. If true, spans will include logs for stream
   * events.
   *
   * @generated from field: bool verbose = 6;
   */
  verbose: boolean;

  /**
   * Maximum length of the request path to extract and include in the HttpUrl tag. Used to
   * truncate lengthy request paths to meet the needs of a tracing backend.
   * Default: 256
   *
   * @generated from field: google.protobuf.UInt32Value max_path_tag_length = 7;
   */
  maxPathTagLength?: number;

  /**
   * A list of custom tags with unique tag name to create tags for the active span.
   *
   * @generated from field: repeated envoy.type.tracing.v2.CustomTag custom_tags = 8;
   */
  customTags: CustomTag[];

  /**
   * Configuration for an external tracing provider.
   * If not specified, no tracing will be performed.
   *
   * .. attention::
   *   Please be aware that *envoy.tracers.opencensus* provider can only be configured once
   *   in Envoy lifetime.
   *   Any attempts to reconfigure it or to use different configurations for different HCM filters
   *   will be rejected.
   *   Such a constraint is inherent to OpenCensus itself. It cannot be overcome without changes
   *   on OpenCensus side.
   *
   * @generated from field: envoy.config.trace.v2.Tracing.Http provider = 9;
   */
  provider?: Tracing_Http;

  constructor(data?: PartialMessage<HttpConnectionManager_Tracing>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpConnectionManager_Tracing;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpConnectionManager_Tracing;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpConnectionManager_Tracing;

  static equals(a: HttpConnectionManager_Tracing | PlainMessage<HttpConnectionManager_Tracing> | undefined, b: HttpConnectionManager_Tracing | PlainMessage<HttpConnectionManager_Tracing> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName
 */
export declare enum HttpConnectionManager_Tracing_OperationName {
  /**
   * The HTTP listener is used for ingress/incoming requests.
   *
   * @generated from enum value: INGRESS = 0;
   */
  INGRESS = 0,

  /**
   * The HTTP listener is used for egress/outgoing requests.
   *
   * @generated from enum value: EGRESS = 1;
   */
  EGRESS = 1,
}

/**
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.InternalAddressConfig
 */
export declare class HttpConnectionManager_InternalAddressConfig extends Message<HttpConnectionManager_InternalAddressConfig> {
  /**
   * Whether unix socket addresses should be considered internal.
   *
   * @generated from field: bool unix_sockets = 1;
   */
  unixSockets: boolean;

  constructor(data?: PartialMessage<HttpConnectionManager_InternalAddressConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.InternalAddressConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpConnectionManager_InternalAddressConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpConnectionManager_InternalAddressConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpConnectionManager_InternalAddressConfig;

  static equals(a: HttpConnectionManager_InternalAddressConfig | PlainMessage<HttpConnectionManager_InternalAddressConfig> | undefined, b: HttpConnectionManager_InternalAddressConfig | PlainMessage<HttpConnectionManager_InternalAddressConfig> | undefined): boolean;
}

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails
 */
export declare class HttpConnectionManager_SetCurrentClientCertDetails extends Message<HttpConnectionManager_SetCurrentClientCertDetails> {
  /**
   * Whether to forward the subject of the client cert. Defaults to false.
   *
   * @generated from field: google.protobuf.BoolValue subject = 1;
   */
  subject?: boolean;

  /**
   * Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
   * XFCC header comma separated from other values with the value Cert="PEM".
   * Defaults to false.
   *
   * @generated from field: bool cert = 3;
   */
  cert: boolean;

  /**
   * Whether to forward the entire client cert chain (including the leaf cert) in URL encoded PEM
   * format. This will appear in the XFCC header comma separated from other values with the value
   * Chain="PEM".
   * Defaults to false.
   *
   * @generated from field: bool chain = 6;
   */
  chain: boolean;

  /**
   * Whether to forward the DNS type Subject Alternative Names of the client cert.
   * Defaults to false.
   *
   * @generated from field: bool dns = 4;
   */
  dns: boolean;

  /**
   * Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
   * false.
   *
   * @generated from field: bool uri = 5;
   */
  uri: boolean;

  constructor(data?: PartialMessage<HttpConnectionManager_SetCurrentClientCertDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpConnectionManager_SetCurrentClientCertDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpConnectionManager_SetCurrentClientCertDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpConnectionManager_SetCurrentClientCertDetails;

  static equals(a: HttpConnectionManager_SetCurrentClientCertDetails | PlainMessage<HttpConnectionManager_SetCurrentClientCertDetails> | undefined, b: HttpConnectionManager_SetCurrentClientCertDetails | PlainMessage<HttpConnectionManager_SetCurrentClientCertDetails> | undefined): boolean;
}

/**
 * The configuration for HTTP upgrades.
 * For each upgrade type desired, an UpgradeConfig must be added.
 *
 * .. warning::
 *
 *    The current implementation of upgrade headers does not handle
 *    multi-valued upgrade headers. Support for multi-valued headers may be
 *    added in the future if needed.
 *
 * .. warning::
 *    The current implementation of upgrade headers does not work with HTTP/2
 *    upstreams.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.UpgradeConfig
 */
export declare class HttpConnectionManager_UpgradeConfig extends Message<HttpConnectionManager_UpgradeConfig> {
  /**
   * The case-insensitive name of this upgrade, e.g. "websocket".
   * For each upgrade type present in upgrade_configs, requests with
   * Upgrade: [upgrade_type]
   * will be proxied upstream.
   *
   * @generated from field: string upgrade_type = 1;
   */
  upgradeType: string;

  /**
   * If present, this represents the filter chain which will be created for
   * this type of upgrade. If no filters are present, the filter chain for
   * HTTP connections will be used for this upgrade type.
   *
   * @generated from field: repeated envoy.config.filter.network.http_connection_manager.v2.HttpFilter filters = 2;
   */
  filters: HttpFilter[];

  /**
   * Determines if upgrades are enabled or disabled by default. Defaults to true.
   * This can be overridden on a per-route basis with :ref:`cluster
   * <envoy_api_field_route.RouteAction.upgrade_configs>` as documented in the
   * :ref:`upgrade documentation <arch_overview_upgrades>`.
   *
   * @generated from field: google.protobuf.BoolValue enabled = 3;
   */
  enabled?: boolean;

  constructor(data?: PartialMessage<HttpConnectionManager_UpgradeConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.UpgradeConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpConnectionManager_UpgradeConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpConnectionManager_UpgradeConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpConnectionManager_UpgradeConfig;

  static equals(a: HttpConnectionManager_UpgradeConfig | PlainMessage<HttpConnectionManager_UpgradeConfig> | undefined, b: HttpConnectionManager_UpgradeConfig | PlainMessage<HttpConnectionManager_UpgradeConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.Rds
 */
export declare class Rds extends Message<Rds> {
  /**
   * Configuration source specifier for RDS.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource config_source = 1;
   */
  configSource?: ConfigSource;

  /**
   * The name of the route configuration. This name will be passed to the RDS
   * API. This allows an Envoy configuration with multiple HTTP listeners (and
   * associated HTTP connection manager filters) to use different route
   * configurations.
   *
   * @generated from field: string route_config_name = 2;
   */
  routeConfigName: string;

  constructor(data?: PartialMessage<Rds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.Rds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rds;

  static equals(a: Rds | PlainMessage<Rds> | undefined, b: Rds | PlainMessage<Rds> | undefined): boolean;
}

/**
 * This message is used to work around the limitations with 'oneof' and repeated fields.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRouteConfigurationsList
 */
export declare class ScopedRouteConfigurationsList extends Message<ScopedRouteConfigurationsList> {
  /**
   * @generated from field: repeated envoy.api.v2.ScopedRouteConfiguration scoped_route_configurations = 1;
   */
  scopedRouteConfigurations: ScopedRouteConfiguration[];

  constructor(data?: PartialMessage<ScopedRouteConfigurationsList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRouteConfigurationsList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRouteConfigurationsList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRouteConfigurationsList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRouteConfigurationsList;

  static equals(a: ScopedRouteConfigurationsList | PlainMessage<ScopedRouteConfigurationsList> | undefined, b: ScopedRouteConfigurationsList | PlainMessage<ScopedRouteConfigurationsList> | undefined): boolean;
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes
 */
export declare class ScopedRoutes extends Message<ScopedRoutes> {
  /**
   * The name assigned to the scoped routing configuration.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The algorithm to use for constructing a scope key for each request.
   *
   * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder scope_key_builder = 2;
   */
  scopeKeyBuilder?: ScopedRoutes_ScopeKeyBuilder;

  /**
   * Configuration source specifier for RDS.
   * This config source is used to subscribe to RouteConfiguration resources specified in
   * ScopedRouteConfiguration messages.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource rds_config_source = 3;
   */
  rdsConfigSource?: ConfigSource;

  /**
   * @generated from oneof envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.config_specifier
   */
  configSpecifier: {
    /**
     * The set of routing scopes corresponding to the HCM. A scope is assigned to a request by
     * matching a key constructed from the request's attributes according to the algorithm specified
     * by the
     * :ref:`ScopeKeyBuilder<envoy_api_msg_config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder>`
     * in this message.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRouteConfigurationsList scoped_route_configurations_list = 4;
     */
    value: ScopedRouteConfigurationsList;
    case: "scopedRouteConfigurationsList";
  } | {
    /**
     * The set of routing scopes associated with the HCM will be dynamically loaded via the SRDS
     * API. A scope is assigned to a request by matching a key constructed from the request's
     * attributes according to the algorithm specified by the
     * :ref:`ScopeKeyBuilder<envoy_api_msg_config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder>`
     * in this message.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRds scoped_rds = 5;
     */
    value: ScopedRds;
    case: "scopedRds";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ScopedRoutes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRoutes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRoutes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRoutes;

  static equals(a: ScopedRoutes | PlainMessage<ScopedRoutes> | undefined, b: ScopedRoutes | PlainMessage<ScopedRoutes> | undefined): boolean;
}

/**
 * Specifies the mechanism for constructing "scope keys" based on HTTP request attributes. These
 * keys are matched against a set of :ref:`Key<envoy_api_msg_ScopedRouteConfiguration.Key>`
 * objects assembled from :ref:`ScopedRouteConfiguration<envoy_api_msg_ScopedRouteConfiguration>`
 * messages distributed via SRDS (the Scoped Route Discovery Service) or assigned statically via
 * :ref:`scoped_route_configurations_list<envoy_api_field_config.filter.network.http_connection_manager.v2.ScopedRoutes.scoped_route_configurations_list>`.
 *
 * Upon receiving a request's headers, the Router will build a key using the algorithm specified
 * by this message. This key will be used to look up the routing table (i.e., the
 * :ref:`RouteConfiguration<envoy_api_msg_RouteConfiguration>`) to use for the request.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder
 */
export declare class ScopedRoutes_ScopeKeyBuilder extends Message<ScopedRoutes_ScopeKeyBuilder> {
  /**
   * The final(built) scope key consists of the ordered union of these fragments, which are compared in order with the
   * fragments of a :ref:`ScopedRouteConfiguration<envoy_api_msg_ScopedRouteConfiguration>`.
   * A missing fragment during comparison will make the key invalid, i.e., the computed key doesn't match any key.
   *
   * @generated from field: repeated envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder fragments = 1;
   */
  fragments: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder[];

  constructor(data?: PartialMessage<ScopedRoutes_ScopeKeyBuilder>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRoutes_ScopeKeyBuilder;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder;

  static equals(a: ScopedRoutes_ScopeKeyBuilder | PlainMessage<ScopedRoutes_ScopeKeyBuilder> | undefined, b: ScopedRoutes_ScopeKeyBuilder | PlainMessage<ScopedRoutes_ScopeKeyBuilder> | undefined): boolean;
}

/**
 * Specifies the mechanism for constructing key fragments which are composed into scope keys.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder
 */
export declare class ScopedRoutes_ScopeKeyBuilder_FragmentBuilder extends Message<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> {
  /**
   * @generated from oneof envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.type
   */
  type: {
    /**
     * Specifies how a header field's value should be extracted.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor header_value_extractor = 1;
     */
    value: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor;
    case: "headerValueExtractor";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder;

  static equals(a: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> | undefined, b: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> | undefined): boolean;
}

/**
 * Specifies how the value of a header should be extracted.
 * The following example maps the structure of a header to the fields in this message.
 *
 * .. code::
 *
 *              <0> <1>   <-- index
 *    X-Header: a=b;c=d
 *    |         || |
 *    |         || \----> <element_separator>
 *    |         ||
 *    |         |\----> <element.separator>
 *    |         |
 *    |         \----> <element.key>
 *    |
 *    \----> <name>
 *
 *    Each 'a=b' key-value pair constitutes an 'element' of the header field.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor
 */
export declare class ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor extends Message<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor> {
  /**
   * The name of the header field to extract the value from.
   *
   * .. note::
   *
   *   If the header appears multiple times only the first value is used.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The element separator (e.g., ';' separates 'a;b;c;d').
   * Default: empty string. This causes the entirety of the header field to be extracted.
   * If this field is set to an empty string and 'index' is used in the oneof below, 'index'
   * must be set to 0.
   *
   * @generated from field: string element_separator = 2;
   */
  elementSeparator: string;

  /**
   * @generated from oneof envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.extract_type
   */
  extractType: {
    /**
     * Specifies the zero based index of the element to extract.
     * Note Envoy concatenates multiple values of the same header key into a comma separated
     * string, the splitting always happens after the concatenation.
     *
     * @generated from field: uint32 index = 3;
     */
    value: number;
    case: "index";
  } | {
    /**
     * Specifies the key value pair to extract the value from.
     *
     * @generated from field: envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement element = 4;
     */
    value: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement;
    case: "element";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor;

  static equals(a: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor> | undefined, b: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor> | undefined): boolean;
}

/**
 * Specifies a header field's key value pair to match on.
 *
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement
 */
export declare class ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement extends Message<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement> {
  /**
   * The separator between key and value (e.g., '=' separates 'k=v;...').
   * If an element is an empty string, the element is ignored.
   * If an element contains no separator, the whole element is parsed as key and the
   * fragment value is an empty string.
   * If there are multiple values for a matched key, the first value is returned.
   *
   * @generated from field: string separator = 1;
   */
  separator: string;

  /**
   * The key to match on.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  constructor(data?: PartialMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement;

  static equals(a: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement> | undefined, b: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement | PlainMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.ScopedRds
 */
export declare class ScopedRds extends Message<ScopedRds> {
  /**
   * Configuration source specifier for scoped RDS.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource scoped_rds_config_source = 1;
   */
  scopedRdsConfigSource?: ConfigSource;

  constructor(data?: PartialMessage<ScopedRds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.ScopedRds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedRds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedRds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedRds;

  static equals(a: ScopedRds | PlainMessage<ScopedRds> | undefined, b: ScopedRds | PlainMessage<ScopedRds> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.HttpFilter
 */
export declare class HttpFilter extends Message<HttpFilter> {
  /**
   * The name of the filter to instantiate. The name must match a
   * :ref:`supported filter <config_http_filters>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   *
   * @generated from oneof envoy.config.filter.network.http_connection_manager.v2.HttpFilter.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Struct config = 2 [deprecated = true];
     * @deprecated
     */
    value: Struct;
    case: "config";
  } | {
    /**
     * @generated from field: google.protobuf.Any typed_config = 4;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<HttpFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.HttpFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpFilter;

  static equals(a: HttpFilter | PlainMessage<HttpFilter> | undefined, b: HttpFilter | PlainMessage<HttpFilter> | undefined): boolean;
}

/**
 * @generated from message envoy.config.filter.network.http_connection_manager.v2.RequestIDExtension
 */
export declare class RequestIDExtension extends Message<RequestIDExtension> {
  /**
   * Request ID extension specific configuration.
   *
   * @generated from field: google.protobuf.Any typed_config = 1;
   */
  typedConfig?: Any;

  constructor(data?: PartialMessage<RequestIDExtension>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.http_connection_manager.v2.RequestIDExtension";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestIDExtension;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestIDExtension;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestIDExtension;

  static equals(a: RequestIDExtension | PlainMessage<RequestIDExtension> | undefined, b: RequestIDExtension | PlainMessage<RequestIDExtension> | undefined): boolean;
}

