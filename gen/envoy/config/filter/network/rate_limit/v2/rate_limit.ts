// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/network/rate_limit/v2/rate_limit.proto" (package "envoy.config.filter.network.rate_limit.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RateLimitServiceConfig } from "../../../../ratelimit/v2/rls";
import { Duration } from "../../../../../../google/protobuf/duration";
import { RateLimitDescriptor } from "../../../../../api/v2/ratelimit/ratelimit";
// [#protodoc-title: Rate limit]
// Rate limit :ref:`configuration overview <config_network_filters_rate_limit>`.
// [#extension: envoy.filters.network.ratelimit]

/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.filter.network.rate_limit.v2.RateLimit
 */
export interface RateLimit {
    /**
     * The prefix to use when emitting :ref:`statistics <config_network_filters_rate_limit_stats>`.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The rate limit domain to use in the rate limit service request.
     *
     * @generated from protobuf field: string domain = 2;
     */
    domain: string;
    /**
     * The rate limit descriptor list to use in the rate limit service request.
     *
     * @generated from protobuf field: repeated envoy.api.v2.ratelimit.RateLimitDescriptor descriptors = 3;
     */
    descriptors: RateLimitDescriptor[];
    /**
     * The timeout in milliseconds for the rate limit service RPC. If not
     * set, this defaults to 20ms.
     *
     * @generated from protobuf field: google.protobuf.Duration timeout = 4;
     */
    timeout?: Duration;
    /**
     * The filter's behaviour in case the rate limiting service does
     * not respond back. When it is set to true, Envoy will not allow traffic in case of
     * communication failure between rate limiting service and the proxy.
     * Defaults to false.
     *
     * @generated from protobuf field: bool failure_mode_deny = 5;
     */
    failureModeDeny: boolean;
    /**
     * Configuration for an external rate limit service provider. If not
     * specified, any calls to the rate limit service will immediately return
     * success.
     *
     * @generated from protobuf field: envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service = 6;
     */
    rateLimitService?: RateLimitServiceConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class RateLimit$Type extends MessageType<RateLimit> {
    constructor() {
        super("envoy.config.filter.network.rate_limit.v2.RateLimit", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 3, name: "descriptors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RateLimitDescriptor, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 4, name: "timeout", kind: "message", T: () => Duration },
            { no: 5, name: "failure_mode_deny", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "rate_limit_service", kind: "message", T: () => RateLimitServiceConfig, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<RateLimit>): RateLimit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.domain = "";
        message.descriptors = [];
        message.failureModeDeny = false;
        if (value !== undefined)
            reflectionMergePartial<RateLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimit): RateLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* string domain */ 2:
                    message.domain = reader.string();
                    break;
                case /* repeated envoy.api.v2.ratelimit.RateLimitDescriptor descriptors */ 3:
                    message.descriptors.push(RateLimitDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Duration timeout */ 4:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* bool failure_mode_deny */ 5:
                    message.failureModeDeny = reader.bool();
                    break;
                case /* envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service */ 6:
                    message.rateLimitService = RateLimitServiceConfig.internalBinaryRead(reader, reader.uint32(), options, message.rateLimitService);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RateLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* string domain = 2; */
        if (message.domain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.domain);
        /* repeated envoy.api.v2.ratelimit.RateLimitDescriptor descriptors = 3; */
        for (let i = 0; i < message.descriptors.length; i++)
            RateLimitDescriptor.internalBinaryWrite(message.descriptors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration timeout = 4; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool failure_mode_deny = 5; */
        if (message.failureModeDeny !== false)
            writer.tag(5, WireType.Varint).bool(message.failureModeDeny);
        /* envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service = 6; */
        if (message.rateLimitService)
            RateLimitServiceConfig.internalBinaryWrite(message.rateLimitService, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.rate_limit.v2.RateLimit
 */
export const RateLimit = new RateLimit$Type();
