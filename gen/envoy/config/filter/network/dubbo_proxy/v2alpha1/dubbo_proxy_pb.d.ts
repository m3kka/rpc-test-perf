// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/filter/network/dubbo_proxy/v2alpha1/dubbo_proxy.proto (package envoy.config.filter.network.dubbo_proxy.v2alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RouteConfiguration } from "./route_pb.js";

/**
 * Dubbo Protocol types supported by Envoy.
 *
 * @generated from enum envoy.config.filter.network.dubbo_proxy.v2alpha1.ProtocolType
 */
export declare enum ProtocolType {
  /**
   * the default protocol.
   *
   * @generated from enum value: Dubbo = 0;
   */
  Dubbo = 0,
}

/**
 * Dubbo Serialization types supported by Envoy.
 *
 * @generated from enum envoy.config.filter.network.dubbo_proxy.v2alpha1.SerializationType
 */
export declare enum SerializationType {
  /**
   * the default serialization protocol.
   *
   * @generated from enum value: Hessian2 = 0;
   */
  Hessian2 = 0,
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboProxy
 */
export declare class DubboProxy extends Message<DubboProxy> {
  /**
   * The human readable prefix to use when emitting statistics.
   *
   * @generated from field: string stat_prefix = 1;
   */
  statPrefix: string;

  /**
   * Configure the protocol used.
   *
   * @generated from field: envoy.config.filter.network.dubbo_proxy.v2alpha1.ProtocolType protocol_type = 2;
   */
  protocolType: ProtocolType;

  /**
   * Configure the serialization protocol used.
   *
   * @generated from field: envoy.config.filter.network.dubbo_proxy.v2alpha1.SerializationType serialization_type = 3;
   */
  serializationType: SerializationType;

  /**
   * The route table for the connection manager is static and is specified in this property.
   *
   * @generated from field: repeated envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration route_config = 4;
   */
  routeConfig: RouteConfiguration[];

  /**
   * A list of individual Dubbo filters that make up the filter chain for requests made to the
   * Dubbo proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no dubbo_filters are specified, a default Dubbo router filter
   * (`envoy.filters.dubbo.router`) is used.
   *
   * @generated from field: repeated envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboFilter dubbo_filters = 5;
   */
  dubboFilters: DubboFilter[];

  constructor(data?: PartialMessage<DubboProxy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboProxy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DubboProxy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DubboProxy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DubboProxy;

  static equals(a: DubboProxy | PlainMessage<DubboProxy> | undefined, b: DubboProxy | PlainMessage<DubboProxy> | undefined): boolean;
}

/**
 * DubboFilter configures a Dubbo filter.
 *
 * @generated from message envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboFilter
 */
export declare class DubboFilter extends Message<DubboFilter> {
  /**
   * The name of the filter to instantiate. The name must match a supported
   * filter.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Filter specific configuration which depends on the filter being
   * instantiated. See the supported filters for further documentation.
   *
   * @generated from field: google.protobuf.Any config = 2;
   */
  config?: Any;

  constructor(data?: PartialMessage<DubboFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DubboFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DubboFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DubboFilter;

  static equals(a: DubboFilter | PlainMessage<DubboFilter> | undefined, b: DubboFilter | PlainMessage<DubboFilter> | undefined): boolean;
}

