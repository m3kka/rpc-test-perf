// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto" (package "envoy.config.filter.network.thrift_proxy.v2alpha1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { RateLimit } from "../../../../../api/v2/route/route_components";
import { Metadata } from "../../../../../api/v2/core/base";
import { HeaderMatcher } from "../../../../../api/v2/route/route_components";
// [#protodoc-title: Thrift Proxy Route Configuration]
// Thrift Proxy :ref:`configuration overview <config_network_filters_thrift_proxy>`.

/**
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration
 */
export interface RouteConfiguration {
    /**
     * The name of the route configuration. Reserved for future use in asynchronous route discovery.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The list of routes that will be matched, in order, against incoming requests. The first route
     * that matches will be used.
     *
     * @generated from protobuf field: repeated envoy.config.filter.network.thrift_proxy.v2alpha1.Route routes = 2;
     */
    routes: Route[];
}
/**
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.Route
 */
export interface Route {
    /**
     * Route matching parameters.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch match = 1;
     */
    match?: RouteMatch;
    /**
     * Route request to some upstream cluster.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction route = 2;
     */
    route?: RouteAction;
}
/**
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch
 */
export interface RouteMatch {
    /**
     * @generated from protobuf oneof: match_specifier
     */
    matchSpecifier: {
        oneofKind: "methodName";
        /**
         * If specified, the route must exactly match the request method name. As a special case, an
         * empty string matches any request method name.
         *
         * @generated from protobuf field: string method_name = 1;
         */
        methodName: string;
    } | {
        oneofKind: "serviceName";
        /**
         * If specified, the route must have the service name as the request method name prefix. As a
         * special case, an empty string matches any service name. Only relevant when service
         * multiplexing.
         *
         * @generated from protobuf field: string service_name = 2;
         */
        serviceName: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * Inverts whatever matching is done in the :ref:`method_name
     * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>` or
     * :ref:`service_name
     * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` fields.
     * Cannot be combined with wildcard matching as that would result in routes never being matched.
     *
     * .. note::
     *
     *   This does not invert matching done as part of the :ref:`headers field
     *   <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers>` field. To
     *   invert header matching, see :ref:`invert_match
     *   <envoy_api_field_route.HeaderMatcher.invert_match>`.
     *
     * @generated from protobuf field: bool invert = 3;
     */
    invert: boolean;
    /**
     * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
     * headers against all the specified headers in the route config. A match will happen if all the
     * headers in the route are present in the request with the same values (or based on presence if
     * the value field is not in the config). Note that this only applies for Thrift transports and/or
     * protocols that support headers.
     *
     * @generated from protobuf field: repeated envoy.api.v2.route.HeaderMatcher headers = 4;
     */
    headers: HeaderMatcher[];
}
/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction
 */
export interface RouteAction {
    /**
     * @generated from protobuf oneof: cluster_specifier
     */
    clusterSpecifier: {
        oneofKind: "cluster";
        /**
         * Indicates a single upstream cluster to which the request should be routed
         * to.
         *
         * @generated from protobuf field: string cluster = 1;
         */
        cluster: string;
    } | {
        oneofKind: "weightedClusters";
        /**
         * Multiple upstream clusters can be specified for a given route. The
         * request is routed to one of the upstream clusters based on weights
         * assigned to each cluster.
         *
         * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster weighted_clusters = 2;
         */
        weightedClusters: WeightedCluster;
    } | {
        oneofKind: "clusterHeader";
        /**
         * Envoy will determine the cluster to route to by reading the value of the
         * Thrift header named by cluster_header from the request headers. If the
         * header is not found or the referenced cluster does not exist Envoy will
         * respond with an unknown method exception or an internal error exception,
         * respectively.
         *
         * @generated from protobuf field: string cluster_header = 6;
         */
        clusterHeader: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
     * the upstream cluster with metadata matching what is set in this field will be considered.
     * Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match
     * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.metadata_match>`,
     * with values there taking precedence. Keys and values should be provided under the "envoy.lb"
     * metadata key.
     *
     * @generated from protobuf field: envoy.api.v2.core.Metadata metadata_match = 3;
     */
    metadataMatch?: Metadata;
    /**
     * Specifies a set of rate limit configurations that could be applied to the route.
     * N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders
     * action with the header name ":method-name".
     *
     * @generated from protobuf field: repeated envoy.api.v2.route.RateLimit rate_limits = 4;
     */
    rateLimits: RateLimit[];
    /**
     * Strip the service prefix from the method name, if there's a prefix. For
     * example, the method call Service:method would end up being just method.
     *
     * @generated from protobuf field: bool strip_service_name = 5;
     */
    stripServiceName: boolean;
}
/**
 * Allows for specification of multiple upstream clusters along with weights that indicate the
 * percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
 * based on these weights.
 *
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster
 */
export interface WeightedCluster {
    /**
     * Specifies one or more upstream clusters associated with the route.
     *
     * @generated from protobuf field: repeated envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight clusters = 1;
     */
    clusters: WeightedCluster_ClusterWeight[];
}
/**
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight
 */
export interface WeightedCluster_ClusterWeight {
    /**
     * Name of the upstream cluster.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * When a request matches the route, the choice of an upstream cluster is determined by its
     * weight. The sum of weights across all entries in the clusters array determines the total
     * weight.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value weight = 2;
     */
    weight?: UInt32Value;
    /**
     * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
     * the upstream cluster with metadata matching what is set in this field, combined with what's
     * provided in :ref:`RouteAction's metadata_match
     * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteAction.metadata_match>`,
     * will be considered. Values here will take precedence. Keys and values should be provided
     * under the "envoy.lb" metadata key.
     *
     * @generated from protobuf field: envoy.api.v2.core.Metadata metadata_match = 3;
     */
    metadataMatch?: Metadata;
}
// @generated message type with reflection information, may provide speed optimized methods
class RouteConfiguration$Type extends MessageType<RouteConfiguration> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Route }
        ]);
    }
    create(value?: PartialMessage<RouteConfiguration>): RouteConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<RouteConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteConfiguration): RouteConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.Route routes */ 2:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.Route routes = 2; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration
 */
export const RouteConfiguration = new RouteConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Route$Type extends MessageType<Route> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.Route", [
            { no: 1, name: "match", kind: "message", T: () => RouteMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "route", kind: "message", T: () => RouteAction, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Route>): Route {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Route): Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch match */ 1:
                    message.match = RouteMatch.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction route */ 2:
                    message.route = RouteAction.internalBinaryRead(reader, reader.uint32(), options, message.route);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch match = 1; */
        if (message.match)
            RouteMatch.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction route = 2; */
        if (message.route)
            RouteAction.internalBinaryWrite(message.route, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.Route
 */
export const Route = new Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteMatch$Type extends MessageType<RouteMatch> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch", [
            { no: 1, name: "method_name", kind: "scalar", oneof: "matchSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_name", kind: "scalar", oneof: "matchSpecifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "invert", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderMatcher }
        ]);
    }
    create(value?: PartialMessage<RouteMatch>): RouteMatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchSpecifier = { oneofKind: undefined };
        message.invert = false;
        message.headers = [];
        if (value !== undefined)
            reflectionMergePartial<RouteMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteMatch): RouteMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method_name */ 1:
                    message.matchSpecifier = {
                        oneofKind: "methodName",
                        methodName: reader.string()
                    };
                    break;
                case /* string service_name */ 2:
                    message.matchSpecifier = {
                        oneofKind: "serviceName",
                        serviceName: reader.string()
                    };
                    break;
                case /* bool invert */ 3:
                    message.invert = reader.bool();
                    break;
                case /* repeated envoy.api.v2.route.HeaderMatcher headers */ 4:
                    message.headers.push(HeaderMatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method_name = 1; */
        if (message.matchSpecifier.oneofKind === "methodName")
            writer.tag(1, WireType.LengthDelimited).string(message.matchSpecifier.methodName);
        /* string service_name = 2; */
        if (message.matchSpecifier.oneofKind === "serviceName")
            writer.tag(2, WireType.LengthDelimited).string(message.matchSpecifier.serviceName);
        /* bool invert = 3; */
        if (message.invert !== false)
            writer.tag(3, WireType.Varint).bool(message.invert);
        /* repeated envoy.api.v2.route.HeaderMatcher headers = 4; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderMatcher.internalBinaryWrite(message.headers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch
 */
export const RouteMatch = new RouteMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteAction$Type extends MessageType<RouteAction> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction", [
            { no: 1, name: "cluster", kind: "scalar", oneof: "clusterSpecifier", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "weighted_clusters", kind: "message", oneof: "clusterSpecifier", T: () => WeightedCluster },
            { no: 6, name: "cluster_header", kind: "scalar", oneof: "clusterSpecifier", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 3, name: "metadata_match", kind: "message", T: () => Metadata },
            { no: 4, name: "rate_limits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RateLimit },
            { no: 5, name: "strip_service_name", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RouteAction>): RouteAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterSpecifier = { oneofKind: undefined };
        message.rateLimits = [];
        message.stripServiceName = false;
        if (value !== undefined)
            reflectionMergePartial<RouteAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteAction): RouteAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster */ 1:
                    message.clusterSpecifier = {
                        oneofKind: "cluster",
                        cluster: reader.string()
                    };
                    break;
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster weighted_clusters */ 2:
                    message.clusterSpecifier = {
                        oneofKind: "weightedClusters",
                        weightedClusters: WeightedCluster.internalBinaryRead(reader, reader.uint32(), options, (message.clusterSpecifier as any).weightedClusters)
                    };
                    break;
                case /* string cluster_header */ 6:
                    message.clusterSpecifier = {
                        oneofKind: "clusterHeader",
                        clusterHeader: reader.string()
                    };
                    break;
                case /* envoy.api.v2.core.Metadata metadata_match */ 3:
                    message.metadataMatch = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadataMatch);
                    break;
                case /* repeated envoy.api.v2.route.RateLimit rate_limits */ 4:
                    message.rateLimits.push(RateLimit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool strip_service_name */ 5:
                    message.stripServiceName = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster = 1; */
        if (message.clusterSpecifier.oneofKind === "cluster")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterSpecifier.cluster);
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster weighted_clusters = 2; */
        if (message.clusterSpecifier.oneofKind === "weightedClusters")
            WeightedCluster.internalBinaryWrite(message.clusterSpecifier.weightedClusters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string cluster_header = 6; */
        if (message.clusterSpecifier.oneofKind === "clusterHeader")
            writer.tag(6, WireType.LengthDelimited).string(message.clusterSpecifier.clusterHeader);
        /* envoy.api.v2.core.Metadata metadata_match = 3; */
        if (message.metadataMatch)
            Metadata.internalBinaryWrite(message.metadataMatch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.api.v2.route.RateLimit rate_limits = 4; */
        for (let i = 0; i < message.rateLimits.length; i++)
            RateLimit.internalBinaryWrite(message.rateLimits[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool strip_service_name = 5; */
        if (message.stripServiceName !== false)
            writer.tag(5, WireType.Varint).bool(message.stripServiceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction
 */
export const RouteAction = new RouteAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeightedCluster$Type extends MessageType<WeightedCluster> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster", [
            { no: 1, name: "clusters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WeightedCluster_ClusterWeight, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<WeightedCluster>): WeightedCluster {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusters = [];
        if (value !== undefined)
            reflectionMergePartial<WeightedCluster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeightedCluster): WeightedCluster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight clusters */ 1:
                    message.clusters.push(WeightedCluster_ClusterWeight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeightedCluster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight clusters = 1; */
        for (let i = 0; i < message.clusters.length; i++)
            WeightedCluster_ClusterWeight.internalBinaryWrite(message.clusters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster
 */
export const WeightedCluster = new WeightedCluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeightedCluster_ClusterWeight$Type extends MessageType<WeightedCluster_ClusterWeight> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "weight", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 3, name: "metadata_match", kind: "message", T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<WeightedCluster_ClusterWeight>): WeightedCluster_ClusterWeight {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<WeightedCluster_ClusterWeight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeightedCluster_ClusterWeight): WeightedCluster_ClusterWeight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.UInt32Value weight */ 2:
                    message.weight = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.weight);
                    break;
                case /* envoy.api.v2.core.Metadata metadata_match */ 3:
                    message.metadataMatch = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadataMatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeightedCluster_ClusterWeight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.UInt32Value weight = 2; */
        if (message.weight)
            UInt32Value.internalBinaryWrite(message.weight, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.api.v2.core.Metadata metadata_match = 3; */
        if (message.metadataMatch)
            Metadata.internalBinaryWrite(message.metadataMatch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight
 */
export const WeightedCluster_ClusterWeight = new WeightedCluster_ClusterWeight$Type();
