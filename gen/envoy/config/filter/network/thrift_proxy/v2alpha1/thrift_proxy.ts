// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto" (package "envoy.config.filter.network.thrift_proxy.v2alpha1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../../../google/protobuf/any";
import { Struct } from "../../../../../../google/protobuf/struct";
import { RouteConfiguration } from "./route";
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy
 */
export interface ThriftProxy {
    /**
     * Supplies the type of transport that the Thrift proxy should use. Defaults to
     * :ref:`AUTO_TRANSPORT<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.TransportType.AUTO_TRANSPORT>`.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 2;
     */
    transport: TransportType;
    /**
     * Supplies the type of protocol that the Thrift proxy should use. Defaults to
     * :ref:`AUTO_PROTOCOL<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.ProtocolType.AUTO_PROTOCOL>`.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 3;
     */
    protocol: ProtocolType;
    /**
     * The human readable prefix to use when emitting statistics.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * The route table for the connection manager is static and is specified in this property.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration route_config = 4;
     */
    routeConfig?: RouteConfiguration;
    /**
     * A list of individual Thrift filters that make up the filter chain for requests made to the
     * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
     * compatibility, if no thrift_filters are specified, a default Thrift router filter
     * (`envoy.filters.thrift.router`) is used.
     *
     * @generated from protobuf field: repeated envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter thrift_filters = 5;
     */
    thriftFilters: ThriftFilter[];
}
/**
 * ThriftFilter configures a Thrift filter.
 *
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter
 */
export interface ThriftFilter {
    /**
     * The name of the filter to instantiate. The name must match a supported
     * filter. The built-in filters are:
     *
     * [#comment:TODO(zuercher): Auto generate the following list]
     * * :ref:`envoy.filters.thrift.router <config_thrift_filters_router>`
     * * :ref:`envoy.filters.thrift.rate_limit <config_thrift_filters_rate_limit>`
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: config_type
     */
    configType: {
        oneofKind: "config";
        /**
         * @deprecated
         * @generated from protobuf field: google.protobuf.Struct config = 2 [deprecated = true];
         */
        config: Struct;
    } | {
        oneofKind: "typedConfig";
        /**
         * @generated from protobuf field: google.protobuf.Any typed_config = 3;
         */
        typedConfig: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * ThriftProtocolOptions specifies Thrift upstream protocol options. This object is used in
 * in
 * :ref:`typed_extension_protocol_options<envoy_api_field_Cluster.typed_extension_protocol_options>`,
 * keyed by the name `envoy.filters.network.thrift_proxy`.
 *
 * @generated from protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProtocolOptions
 */
export interface ThriftProtocolOptions {
    /**
     * Supplies the type of transport that the Thrift proxy should use for upstream connections.
     * Selecting
     * :ref:`AUTO_TRANSPORT<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.TransportType.AUTO_TRANSPORT>`,
     * which is the default, causes the proxy to use the same transport as the downstream connection.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 1;
     */
    transport: TransportType;
    /**
     * Supplies the type of protocol that the Thrift proxy should use for upstream connections.
     * Selecting
     * :ref:`AUTO_PROTOCOL<envoy_api_enum_value_config.filter.network.thrift_proxy.v2alpha1.ProtocolType.AUTO_PROTOCOL>`,
     * which is the default, causes the proxy to use the same protocol as the downstream connection.
     *
     * @generated from protobuf field: envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 2;
     */
    protocol: ProtocolType;
}
// [#protodoc-title: Thrift Proxy]
// Thrift Proxy :ref:`configuration overview <config_network_filters_thrift_proxy>`.
// [#extension: envoy.filters.network.thrift_proxy]

/**
 * Thrift transport types supported by Envoy.
 *
 * @generated from protobuf enum envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType
 */
export enum TransportType {
    /**
     * For downstream connections, the Thrift proxy will attempt to determine which transport to use.
     * For upstream connections, the Thrift proxy will use same transport as the downstream
     * connection.
     *
     * @generated from protobuf enum value: AUTO_TRANSPORT = 0;
     */
    AUTO_TRANSPORT = 0,
    /**
     * The Thrift proxy will use the Thrift framed transport.
     *
     * @generated from protobuf enum value: FRAMED = 1;
     */
    FRAMED = 1,
    /**
     * The Thrift proxy will use the Thrift unframed transport.
     *
     * @generated from protobuf enum value: UNFRAMED = 2;
     */
    UNFRAMED = 2,
    /**
     * The Thrift proxy will assume the client is using the Thrift header transport.
     *
     * @generated from protobuf enum value: HEADER = 3;
     */
    HEADER = 3
}
/**
 * Thrift Protocol types supported by Envoy.
 *
 * @generated from protobuf enum envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType
 */
export enum ProtocolType {
    /**
     * For downstream connections, the Thrift proxy will attempt to determine which protocol to use.
     * Note that the older, non-strict (or lax) binary protocol is not included in automatic protocol
     * detection. For upstream connections, the Thrift proxy will use the same protocol as the
     * downstream connection.
     *
     * @generated from protobuf enum value: AUTO_PROTOCOL = 0;
     */
    AUTO_PROTOCOL = 0,
    /**
     * The Thrift proxy will use the Thrift binary protocol.
     *
     * @generated from protobuf enum value: BINARY = 1;
     */
    BINARY = 1,
    /**
     * The Thrift proxy will use Thrift non-strict binary protocol.
     *
     * @generated from protobuf enum value: LAX_BINARY = 2;
     */
    LAX_BINARY = 2,
    /**
     * The Thrift proxy will use the Thrift compact protocol.
     *
     * @generated from protobuf enum value: COMPACT = 3;
     */
    COMPACT = 3,
    /**
     * The Thrift proxy will use the Thrift "Twitter" protocol implemented by the finagle library.
     *
     * @generated from protobuf enum value: TWITTER = 4;
     */
    TWITTER = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class ThriftProxy$Type extends MessageType<ThriftProxy> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy", [
            { no: 2, name: "transport", kind: "enum", T: () => ["envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType", TransportType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "protocol", kind: "enum", T: () => ["envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType", ProtocolType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 4, name: "route_config", kind: "message", T: () => RouteConfiguration },
            { no: 5, name: "thrift_filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ThriftFilter }
        ]);
    }
    create(value?: PartialMessage<ThriftProxy>): ThriftProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transport = 0;
        message.protocol = 0;
        message.statPrefix = "";
        message.thriftFilters = [];
        if (value !== undefined)
            reflectionMergePartial<ThriftProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThriftProxy): ThriftProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport */ 2:
                    message.transport = reader.int32();
                    break;
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol */ 3:
                    message.protocol = reader.int32();
                    break;
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration route_config */ 4:
                    message.routeConfig = RouteConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.routeConfig);
                    break;
                case /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter thrift_filters */ 5:
                    message.thriftFilters.push(ThriftFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThriftProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 2; */
        if (message.transport !== 0)
            writer.tag(2, WireType.Varint).int32(message.transport);
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 3; */
        if (message.protocol !== 0)
            writer.tag(3, WireType.Varint).int32(message.protocol);
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration route_config = 4; */
        if (message.routeConfig)
            RouteConfiguration.internalBinaryWrite(message.routeConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter thrift_filters = 5; */
        for (let i = 0; i < message.thriftFilters.length; i++)
            ThriftFilter.internalBinaryWrite(message.thriftFilters[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy
 */
export const ThriftProxy = new ThriftProxy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThriftFilter$Type extends MessageType<ThriftFilter> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "config", kind: "message", oneof: "configType", T: () => Struct },
            { no: 3, name: "typed_config", kind: "message", oneof: "configType", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<ThriftFilter>): ThriftFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.configType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ThriftFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThriftFilter): ThriftFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct config = 2 [deprecated = true];*/ 2:
                    message.configType = {
                        oneofKind: "config",
                        config: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).config)
                    };
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.configType = {
                        oneofKind: "typedConfig",
                        typedConfig: Any.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).typedConfig)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThriftFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct config = 2 [deprecated = true]; */
        if (message.configType.oneofKind === "config")
            Struct.internalBinaryWrite(message.configType.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any typed_config = 3; */
        if (message.configType.oneofKind === "typedConfig")
            Any.internalBinaryWrite(message.configType.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter
 */
export const ThriftFilter = new ThriftFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThriftProtocolOptions$Type extends MessageType<ThriftProtocolOptions> {
    constructor() {
        super("envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProtocolOptions", [
            { no: 1, name: "transport", kind: "enum", T: () => ["envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType", TransportType], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "protocol", kind: "enum", T: () => ["envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType", ProtocolType], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<ThriftProtocolOptions>): ThriftProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transport = 0;
        message.protocol = 0;
        if (value !== undefined)
            reflectionMergePartial<ThriftProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThriftProtocolOptions): ThriftProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport */ 1:
                    message.transport = reader.int32();
                    break;
                case /* envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol */ 2:
                    message.protocol = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThriftProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 1; */
        if (message.transport !== 0)
            writer.tag(1, WireType.Varint).int32(message.transport);
        /* envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 2; */
        if (message.protocol !== 0)
            writer.tag(2, WireType.Varint).int32(message.protocol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProtocolOptions
 */
export const ThriftProtocolOptions = new ThriftProtocolOptions$Type();
