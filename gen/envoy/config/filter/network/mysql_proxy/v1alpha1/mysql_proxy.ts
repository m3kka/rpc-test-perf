// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/filter/network/mysql_proxy/v1alpha1/mysql_proxy.proto" (package "envoy.config.filter.network.mysql_proxy.v1alpha1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: MySQL proxy]
// MySQL Proxy :ref:`configuration overview <config_network_filters_mysql_proxy>`.
// [#extension: envoy.filters.network.mysql_proxy]

/**
 * @generated from protobuf message envoy.config.filter.network.mysql_proxy.v1alpha1.MySQLProxy
 */
export interface MySQLProxy {
    /**
     * The human readable prefix to use when emitting :ref:`statistics
     * <config_network_filters_mysql_proxy_stats>`.
     *
     * @generated from protobuf field: string stat_prefix = 1;
     */
    statPrefix: string;
    /**
     * [#not-implemented-hide:] The optional path to use for writing MySQL access logs.
     * If the access log field is empty, access logs will not be written.
     *
     * @generated from protobuf field: string access_log = 2;
     */
    accessLog: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MySQLProxy$Type extends MessageType<MySQLProxy> {
    constructor() {
        super("envoy.config.filter.network.mysql_proxy.v1alpha1.MySQLProxy", [
            { no: 1, name: "stat_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "access_log", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MySQLProxy>): MySQLProxy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statPrefix = "";
        message.accessLog = "";
        if (value !== undefined)
            reflectionMergePartial<MySQLProxy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MySQLProxy): MySQLProxy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stat_prefix */ 1:
                    message.statPrefix = reader.string();
                    break;
                case /* string access_log */ 2:
                    message.accessLog = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MySQLProxy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stat_prefix = 1; */
        if (message.statPrefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.statPrefix);
        /* string access_log = 2; */
        if (message.accessLog !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessLog);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.filter.network.mysql_proxy.v1alpha1.MySQLProxy
 */
export const MySQLProxy = new MySQLProxy$Type();
