// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/common/key_value/v3/config.proto" (package "envoy.config.common.key_value.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "../../../core/v3/extension";
// [#protodoc-title: Key/value store storage plugin]

/**
 * This shared configuration for Envoy key value stores.
 *
 * @generated from protobuf message envoy.config.common.key_value.v3.KeyValueStoreConfig
 */
export interface KeyValueStoreConfig {
    /**
     * [#extension-category: envoy.common.key_value]
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig config = 1;
     */
    config?: TypedExtensionConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class KeyValueStoreConfig$Type extends MessageType<KeyValueStoreConfig> {
    constructor() {
        super("envoy.config.common.key_value.v3.KeyValueStoreConfig", [
            { no: 1, name: "config", kind: "message", T: () => TypedExtensionConfig, options: { "validate.rules": { message: { required: true } } } }
        ], { "xds.annotations.v3.message_status": { workInProgress: true } });
    }
    create(value?: PartialMessage<KeyValueStoreConfig>): KeyValueStoreConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<KeyValueStoreConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyValueStoreConfig): KeyValueStoreConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.TypedExtensionConfig config */ 1:
                    message.config = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeyValueStoreConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.TypedExtensionConfig config = 1; */
        if (message.config)
            TypedExtensionConfig.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.common.key_value.v3.KeyValueStoreConfig
 */
export const KeyValueStoreConfig = new KeyValueStoreConfig$Type();
