// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/metrics/v3/metrics_service.proto (package envoy.config.metrics.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcService } from "../../core/v3/grpc_service_pb.js";
import type { ApiVersion } from "../../core/v3/config_source_pb.js";

/**
 * HistogramEmitMode is used to configure which metric types should be emitted for histograms.
 *
 * @generated from enum envoy.config.metrics.v3.HistogramEmitMode
 */
export declare enum HistogramEmitMode {
  /**
   * Emit Histogram and Summary metric types.
   *
   * @generated from enum value: SUMMARY_AND_HISTOGRAM = 0;
   */
  SUMMARY_AND_HISTOGRAM = 0,

  /**
   * Emit only Summary metric types.
   *
   * @generated from enum value: SUMMARY = 1;
   */
  SUMMARY = 1,

  /**
   * Emit only Histogram metric types.
   *
   * @generated from enum value: HISTOGRAM = 2;
   */
  HISTOGRAM = 2,
}

/**
 * Metrics Service is configured as a built-in ``envoy.stat_sinks.metrics_service`` :ref:`StatsSink
 * <envoy_v3_api_msg_config.metrics.v3.StatsSink>`. This opaque configuration will be used to create
 * Metrics Service.
 *
 * Example:
 *
 * .. code-block:: yaml
 *
 *     stats_sinks:
 *       - name: envoy.stat_sinks.metrics_service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.config.metrics.v3.MetricsServiceConfig
 *           transport_api_version: V3
 *
 * [#extension: envoy.stat_sinks.metrics_service]
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.metrics.v3.MetricsServiceConfig
 */
export declare class MetricsServiceConfig extends Message<MetricsServiceConfig> {
  /**
   * The upstream gRPC cluster that hosts the metrics service.
   *
   * @generated from field: envoy.config.core.v3.GrpcService grpc_service = 1;
   */
  grpcService?: GrpcService;

  /**
   * API version for metric service transport protocol. This describes the metric service gRPC
   * endpoint and version of messages used on the wire.
   *
   * @generated from field: envoy.config.core.v3.ApiVersion transport_api_version = 3;
   */
  transportApiVersion: ApiVersion;

  /**
   * If true, counters are reported as the delta between flushing intervals. Otherwise, the current
   * counter value is reported. Defaults to false.
   * Eventually (https://github.com/envoyproxy/envoy/issues/10968) if this value is not set, the
   * sink will take updates from the :ref:`MetricsResponse <envoy_v3_api_msg_service.metrics.v3.StreamMetricsResponse>`.
   *
   * @generated from field: google.protobuf.BoolValue report_counters_as_deltas = 2;
   */
  reportCountersAsDeltas?: boolean;

  /**
   * If true, metrics will have their tags emitted as labels on the metrics objects sent to the MetricsService,
   * and the tag extracted name will be used instead of the full name, which may contain values used by the tag
   * extractor or additional tags added during stats creation.
   *
   * @generated from field: bool emit_tags_as_labels = 4;
   */
  emitTagsAsLabels: boolean;

  /**
   * Specify which metrics types to emit for histograms. Defaults to SUMMARY_AND_HISTOGRAM.
   *
   * @generated from field: envoy.config.metrics.v3.HistogramEmitMode histogram_emit_mode = 5;
   */
  histogramEmitMode: HistogramEmitMode;

  constructor(data?: PartialMessage<MetricsServiceConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.metrics.v3.MetricsServiceConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsServiceConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsServiceConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsServiceConfig;

  static equals(a: MetricsServiceConfig | PlainMessage<MetricsServiceConfig> | undefined, b: MetricsServiceConfig | PlainMessage<MetricsServiceConfig> | undefined): boolean;
}

