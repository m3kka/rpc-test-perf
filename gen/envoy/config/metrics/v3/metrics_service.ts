// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/metrics/v3/metrics_service.proto" (package "envoy.config.metrics.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { ApiVersion } from "../../core/v3/config_source";
import { GrpcService } from "../../core/v3/grpc_service";
/**
 * Metrics Service is configured as a built-in ``envoy.stat_sinks.metrics_service`` :ref:`StatsSink
 * <envoy_v3_api_msg_config.metrics.v3.StatsSink>`. This opaque configuration will be used to create
 * Metrics Service.
 *
 * Example:
 *
 * .. code-block:: yaml
 *
 *     stats_sinks:
 *       - name: envoy.stat_sinks.metrics_service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.config.metrics.v3.MetricsServiceConfig
 *           transport_api_version: V3
 *
 * [#extension: envoy.stat_sinks.metrics_service]
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.metrics.v3.MetricsServiceConfig
 */
export interface MetricsServiceConfig {
    /**
     * The upstream gRPC cluster that hosts the metrics service.
     *
     * @generated from protobuf field: envoy.config.core.v3.GrpcService grpc_service = 1;
     */
    grpcService?: GrpcService;
    /**
     * API version for metric service transport protocol. This describes the metric service gRPC
     * endpoint and version of messages used on the wire.
     *
     * @generated from protobuf field: envoy.config.core.v3.ApiVersion transport_api_version = 3;
     */
    transportApiVersion: ApiVersion;
    /**
     * If true, counters are reported as the delta between flushing intervals. Otherwise, the current
     * counter value is reported. Defaults to false.
     * Eventually (https://github.com/envoyproxy/envoy/issues/10968) if this value is not set, the
     * sink will take updates from the :ref:`MetricsResponse <envoy_v3_api_msg_service.metrics.v3.StreamMetricsResponse>`.
     *
     * @generated from protobuf field: google.protobuf.BoolValue report_counters_as_deltas = 2;
     */
    reportCountersAsDeltas?: BoolValue;
    /**
     * If true, metrics will have their tags emitted as labels on the metrics objects sent to the MetricsService,
     * and the tag extracted name will be used instead of the full name, which may contain values used by the tag
     * extractor or additional tags added during stats creation.
     *
     * @generated from protobuf field: bool emit_tags_as_labels = 4;
     */
    emitTagsAsLabels: boolean;
    /**
     * Specify which metrics types to emit for histograms. Defaults to SUMMARY_AND_HISTOGRAM.
     *
     * @generated from protobuf field: envoy.config.metrics.v3.HistogramEmitMode histogram_emit_mode = 5;
     */
    histogramEmitMode: HistogramEmitMode;
}
// [#protodoc-title: Metrics service]

/**
 * HistogramEmitMode is used to configure which metric types should be emitted for histograms.
 *
 * @generated from protobuf enum envoy.config.metrics.v3.HistogramEmitMode
 */
export enum HistogramEmitMode {
    /**
     * Emit Histogram and Summary metric types.
     *
     * @generated from protobuf enum value: SUMMARY_AND_HISTOGRAM = 0;
     */
    SUMMARY_AND_HISTOGRAM = 0,
    /**
     * Emit only Summary metric types.
     *
     * @generated from protobuf enum value: SUMMARY = 1;
     */
    SUMMARY = 1,
    /**
     * Emit only Histogram metric types.
     *
     * @generated from protobuf enum value: HISTOGRAM = 2;
     */
    HISTOGRAM = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class MetricsServiceConfig$Type extends MessageType<MetricsServiceConfig> {
    constructor() {
        super("envoy.config.metrics.v3.MetricsServiceConfig", [
            { no: 1, name: "grpc_service", kind: "message", T: () => GrpcService, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "transport_api_version", kind: "enum", T: () => ["envoy.config.core.v3.ApiVersion", ApiVersion], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "report_counters_as_deltas", kind: "message", T: () => BoolValue },
            { no: 4, name: "emit_tags_as_labels", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "histogram_emit_mode", kind: "enum", T: () => ["envoy.config.metrics.v3.HistogramEmitMode", HistogramEmitMode], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.metrics.v2.MetricsServiceConfig" } });
    }
    create(value?: PartialMessage<MetricsServiceConfig>): MetricsServiceConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transportApiVersion = 0;
        message.emitTagsAsLabels = false;
        message.histogramEmitMode = 0;
        if (value !== undefined)
            reflectionMergePartial<MetricsServiceConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsServiceConfig): MetricsServiceConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.GrpcService grpc_service */ 1:
                    message.grpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.grpcService);
                    break;
                case /* envoy.config.core.v3.ApiVersion transport_api_version */ 3:
                    message.transportApiVersion = reader.int32();
                    break;
                case /* google.protobuf.BoolValue report_counters_as_deltas */ 2:
                    message.reportCountersAsDeltas = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.reportCountersAsDeltas);
                    break;
                case /* bool emit_tags_as_labels */ 4:
                    message.emitTagsAsLabels = reader.bool();
                    break;
                case /* envoy.config.metrics.v3.HistogramEmitMode histogram_emit_mode */ 5:
                    message.histogramEmitMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricsServiceConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.GrpcService grpc_service = 1; */
        if (message.grpcService)
            GrpcService.internalBinaryWrite(message.grpcService, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.ApiVersion transport_api_version = 3; */
        if (message.transportApiVersion !== 0)
            writer.tag(3, WireType.Varint).int32(message.transportApiVersion);
        /* google.protobuf.BoolValue report_counters_as_deltas = 2; */
        if (message.reportCountersAsDeltas)
            BoolValue.internalBinaryWrite(message.reportCountersAsDeltas, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool emit_tags_as_labels = 4; */
        if (message.emitTagsAsLabels !== false)
            writer.tag(4, WireType.Varint).bool(message.emitTagsAsLabels);
        /* envoy.config.metrics.v3.HistogramEmitMode histogram_emit_mode = 5; */
        if (message.histogramEmitMode !== 0)
            writer.tag(5, WireType.Varint).int32(message.histogramEmitMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.metrics.v3.MetricsServiceConfig
 */
export const MetricsServiceConfig = new MetricsServiceConfig$Type();
