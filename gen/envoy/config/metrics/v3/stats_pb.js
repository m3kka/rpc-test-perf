// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/metrics/v3/stats.proto (package envoy.config.metrics.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, BoolValue, proto3, UInt64Value } from "@bufbuild/protobuf";
import { ListStringMatcher, StringMatcher } from "../../../type/matcher/v3/string_pb.js";
import { Address } from "../../core/v3/address_pb.js";

/**
 * Configuration for pluggable stats sinks.
 *
 * @generated from message envoy.config.metrics.v3.StatsSink
 */
export const StatsSink = proto3.makeMessageType(
  "envoy.config.metrics.v3.StatsSink",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
  ],
);

/**
 * Statistics configuration such as tagging.
 *
 * @generated from message envoy.config.metrics.v3.StatsConfig
 */
export const StatsConfig = proto3.makeMessageType(
  "envoy.config.metrics.v3.StatsConfig",
  () => [
    { no: 1, name: "stats_tags", kind: "message", T: TagSpecifier, repeated: true },
    { no: 2, name: "use_all_default_tags", kind: "message", T: BoolValue },
    { no: 3, name: "stats_matcher", kind: "message", T: StatsMatcher },
    { no: 4, name: "histogram_bucket_settings", kind: "message", T: HistogramBucketSettings, repeated: true },
  ],
);

/**
 * Configuration for disabling stat instantiation.
 *
 * The instantiation of stats is unrestricted by default. If the goal is to configure Envoy to
 * instantiate all stats, there is no need to construct a StatsMatcher.
 *
 * However, StatsMatcher can be used to limit the creation of families of stats in order to
 * conserve memory. Stats can either be disabled entirely, or they can be
 * limited by either an exclusion or an inclusion list of :ref:`StringMatcher
 * <envoy_v3_api_msg_type.matcher.v3.StringMatcher>` protos:
 *
 * * If ``reject_all`` is set to `true`, no stats will be instantiated. If ``reject_all`` is set to
 *   `false`, all stats will be instantiated.
 *
 * * If an exclusion list is supplied, any stat name matching *any* of the StringMatchers in the
 *   list will not instantiate.
 *
 * * If an inclusion list is supplied, no stats will instantiate, except those matching *any* of
 *   the StringMatchers in the list.
 *
 *
 * A StringMatcher can be used to match against an exact string, a suffix / prefix, or a regex.
 * **NB:** For performance reasons, it is highly recommended to use a prefix- or suffix-based
 * matcher rather than a regex-based matcher.
 *
 * Example 1. Excluding all stats.
 *
 * .. code-block:: json
 *
 *   {
 *     "statsMatcher": {
 *       "rejectAll": "true"
 *     }
 *   }
 *
 * Example 2. Excluding all cluster-specific stats, but not cluster-manager stats:
 *
 * .. code-block:: json
 *
 *   {
 *     "statsMatcher": {
 *       "exclusionList": {
 *         "patterns": [
 *           {
 *             "prefix": "cluster."
 *           }
 *         ]
 *       }
 *     }
 *   }
 *
 * Example 3. Including only manager-related stats:
 *
 * .. code-block:: json
 *
 *   {
 *     "statsMatcher": {
 *       "inclusionList": {
 *         "patterns": [
 *           {
 *             "prefix": "cluster_manager."
 *           },
 *           {
 *             "prefix": "listener_manager."
 *           }
 *         ]
 *       }
 *     }
 *   }
 *
 *
 * @generated from message envoy.config.metrics.v3.StatsMatcher
 */
export const StatsMatcher = proto3.makeMessageType(
  "envoy.config.metrics.v3.StatsMatcher",
  () => [
    { no: 1, name: "reject_all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "stats_matcher" },
    { no: 2, name: "exclusion_list", kind: "message", T: ListStringMatcher, oneof: "stats_matcher" },
    { no: 3, name: "inclusion_list", kind: "message", T: ListStringMatcher, oneof: "stats_matcher" },
  ],
);

/**
 * Designates a tag name and value pair. The value may be either a fixed value
 * or a regex providing the value via capture groups. The specified tag will be
 * unconditionally set if a fixed value, otherwise it will only be set if one
 * or more capture groups in the regex match.
 *
 * @generated from message envoy.config.metrics.v3.TagSpecifier
 */
export const TagSpecifier = proto3.makeMessageType(
  "envoy.config.metrics.v3.TagSpecifier",
  () => [
    { no: 1, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "tag_value" },
    { no: 3, name: "fixed_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "tag_value" },
  ],
);

/**
 * Specifies a matcher for stats and the buckets that matching stats should use.
 *
 * @generated from message envoy.config.metrics.v3.HistogramBucketSettings
 */
export const HistogramBucketSettings = proto3.makeMessageType(
  "envoy.config.metrics.v3.HistogramBucketSettings",
  () => [
    { no: 1, name: "match", kind: "message", T: StringMatcher },
    { no: 2, name: "buckets", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ],
);

/**
 * Stats configuration proto schema for built-in ``envoy.stat_sinks.statsd`` sink. This sink does not support
 * tagged metrics.
 * [#extension: envoy.stat_sinks.statsd]
 *
 * @generated from message envoy.config.metrics.v3.StatsdSink
 */
export const StatsdSink = proto3.makeMessageType(
  "envoy.config.metrics.v3.StatsdSink",
  () => [
    { no: 1, name: "address", kind: "message", T: Address, oneof: "statsd_specifier" },
    { no: 2, name: "tcp_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "statsd_specifier" },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Stats configuration proto schema for built-in ``envoy.stat_sinks.dog_statsd`` sink.
 * The sink emits stats with `DogStatsD <https://docs.datadoghq.com/guides/dogstatsd/>`_
 * compatible tags. Tags are configurable via :ref:`StatsConfig
 * <envoy_v3_api_msg_config.metrics.v3.StatsConfig>`.
 * [#extension: envoy.stat_sinks.dog_statsd]
 *
 * @generated from message envoy.config.metrics.v3.DogStatsdSink
 */
export const DogStatsdSink = proto3.makeMessageType(
  "envoy.config.metrics.v3.DogStatsdSink",
  () => [
    { no: 1, name: "address", kind: "message", T: Address, oneof: "dog_statsd_specifier" },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "max_bytes_per_datagram", kind: "message", T: UInt64Value },
  ],
);

/**
 * Stats configuration proto schema for built-in ``envoy.stat_sinks.hystrix`` sink.
 * The sink emits stats in `text/event-stream
 * <https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events>`_
 * formatted stream for use by `Hystrix dashboard
 * <https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki>`_.
 *
 * Note that only a single HystrixSink should be configured.
 *
 * Streaming is started through an admin endpoint :http:get:`/hystrix_event_stream`.
 * [#extension: envoy.stat_sinks.hystrix]
 *
 * @generated from message envoy.config.metrics.v3.HystrixSink
 */
export const HystrixSink = proto3.makeMessageType(
  "envoy.config.metrics.v3.HystrixSink",
  () => [
    { no: 1, name: "num_buckets", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

