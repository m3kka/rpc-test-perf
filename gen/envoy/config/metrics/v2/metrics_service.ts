// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/metrics/v2/metrics_service.proto" (package "envoy.config.metrics.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GrpcService } from "../../../api/v2/core/grpc_service";
// [#protodoc-title: Metrics service]

/**
 * Metrics Service is configured as a built-in *envoy.stat_sinks.metrics_service* :ref:`StatsSink
 * <envoy_api_msg_config.metrics.v2.StatsSink>`. This opaque configuration will be used to create
 * Metrics Service.
 * [#extension: envoy.stat_sinks.metrics_service]
 *
 * @generated from protobuf message envoy.config.metrics.v2.MetricsServiceConfig
 */
export interface MetricsServiceConfig {
    /**
     * The upstream gRPC cluster that hosts the metrics service.
     *
     * @generated from protobuf field: envoy.api.v2.core.GrpcService grpc_service = 1;
     */
    grpcService?: GrpcService;
}
// @generated message type with reflection information, may provide speed optimized methods
class MetricsServiceConfig$Type extends MessageType<MetricsServiceConfig> {
    constructor() {
        super("envoy.config.metrics.v2.MetricsServiceConfig", [
            { no: 1, name: "grpc_service", kind: "message", T: () => GrpcService, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<MetricsServiceConfig>): MetricsServiceConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetricsServiceConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsServiceConfig): MetricsServiceConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.api.v2.core.GrpcService grpc_service */ 1:
                    message.grpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.grpcService);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricsServiceConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.api.v2.core.GrpcService grpc_service = 1; */
        if (message.grpcService)
            GrpcService.internalBinaryWrite(message.grpcService, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.metrics.v2.MetricsServiceConfig
 */
export const MetricsServiceConfig = new MetricsServiceConfig$Type();
