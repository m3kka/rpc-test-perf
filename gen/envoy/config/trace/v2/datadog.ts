// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/trace/v2/datadog.proto" (package "envoy.config.trace.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Datadog tracer]

/**
 * Configuration for the Datadog tracer.
 * [#extension: envoy.tracers.datadog]
 *
 * @generated from protobuf message envoy.config.trace.v2.DatadogConfig
 */
export interface DatadogConfig {
    /**
     * The cluster to use for submitting traces to the Datadog agent.
     *
     * @generated from protobuf field: string collector_cluster = 1;
     */
    collectorCluster: string;
    /**
     * The name used for the service when traces are generated by envoy.
     *
     * @generated from protobuf field: string service_name = 2;
     */
    serviceName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DatadogConfig$Type extends MessageType<DatadogConfig> {
    constructor() {
        super("envoy.config.trace.v2.DatadogConfig", [
            { no: 1, name: "collector_cluster", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<DatadogConfig>): DatadogConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.collectorCluster = "";
        message.serviceName = "";
        if (value !== undefined)
            reflectionMergePartial<DatadogConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatadogConfig): DatadogConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string collector_cluster */ 1:
                    message.collectorCluster = reader.string();
                    break;
                case /* string service_name */ 2:
                    message.serviceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DatadogConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string collector_cluster = 1; */
        if (message.collectorCluster !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.collectorCluster);
        /* string service_name = 2; */
        if (message.serviceName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v2.DatadogConfig
 */
export const DatadogConfig = new DatadogConfig$Type();
