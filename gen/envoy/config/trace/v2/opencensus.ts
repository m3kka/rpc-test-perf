// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/trace/v2/opencensus.proto" (package "envoy.config.trace.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GrpcService } from "../../../api/v2/core/grpc_service";
import { TraceConfig } from "../../../../opencensus/proto/trace/v1/trace_config";
// [#protodoc-title: OpenCensus tracer]

/**
 * Configuration for the OpenCensus tracer.
 * [#next-free-field: 15]
 * [#extension: envoy.tracers.opencensus]
 *
 * @generated from protobuf message envoy.config.trace.v2.OpenCensusConfig
 */
export interface OpenCensusConfig {
    /**
     * Configures tracing, e.g. the sampler, max number of annotations, etc.
     *
     * @generated from protobuf field: opencensus.proto.trace.v1.TraceConfig trace_config = 1;
     */
    traceConfig?: TraceConfig;
    /**
     * Enables the stdout exporter if set to true. This is intended for debugging
     * purposes.
     *
     * @generated from protobuf field: bool stdout_exporter_enabled = 2;
     */
    stdoutExporterEnabled: boolean;
    /**
     * Enables the Stackdriver exporter if set to true. The project_id must also
     * be set.
     *
     * @generated from protobuf field: bool stackdriver_exporter_enabled = 3;
     */
    stackdriverExporterEnabled: boolean;
    /**
     * The Cloud project_id to use for Stackdriver tracing.
     *
     * @generated from protobuf field: string stackdriver_project_id = 4;
     */
    stackdriverProjectId: string;
    /**
     * (optional) By default, the Stackdriver exporter will connect to production
     * Stackdriver. If stackdriver_address is non-empty, it will instead connect
     * to this address, which is in the gRPC format:
     * https://github.com/grpc/grpc/blob/master/doc/naming.md
     *
     * @generated from protobuf field: string stackdriver_address = 10;
     */
    stackdriverAddress: string;
    /**
     * (optional) The gRPC server that hosts Stackdriver tracing service. Only
     * Google gRPC is supported. If :ref:`target_uri <envoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.target_uri>`
     * is not provided, the default production Stackdriver address will be used.
     *
     * @generated from protobuf field: envoy.api.v2.core.GrpcService stackdriver_grpc_service = 13;
     */
    stackdriverGrpcService?: GrpcService;
    /**
     * Enables the Zipkin exporter if set to true. The url and service name must
     * also be set.
     *
     * @generated from protobuf field: bool zipkin_exporter_enabled = 5;
     */
    zipkinExporterEnabled: boolean;
    /**
     * The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
     *
     * @generated from protobuf field: string zipkin_url = 6;
     */
    zipkinUrl: string;
    /**
     * Enables the OpenCensus Agent exporter if set to true. The ocagent_address or
     * ocagent_grpc_service must also be set.
     *
     * @generated from protobuf field: bool ocagent_exporter_enabled = 11;
     */
    ocagentExporterEnabled: boolean;
    /**
     * The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
     * format: https://github.com/grpc/grpc/blob/master/doc/naming.md
     * [#comment:TODO: deprecate this field]
     *
     * @generated from protobuf field: string ocagent_address = 12;
     */
    ocagentAddress: string;
    /**
     * (optional) The gRPC server hosted by the OpenCensus Agent. Only Google gRPC is supported.
     * This is only used if the ocagent_address is left empty.
     *
     * @generated from protobuf field: envoy.api.v2.core.GrpcService ocagent_grpc_service = 14;
     */
    ocagentGrpcService?: GrpcService;
    /**
     * List of incoming trace context headers we will accept. First one found
     * wins.
     *
     * @generated from protobuf field: repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext incoming_trace_context = 8;
     */
    incomingTraceContext: OpenCensusConfig_TraceContext[];
    /**
     * List of outgoing trace context headers we will produce.
     *
     * @generated from protobuf field: repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext outgoing_trace_context = 9;
     */
    outgoingTraceContext: OpenCensusConfig_TraceContext[];
}
/**
 * @generated from protobuf enum envoy.config.trace.v2.OpenCensusConfig.TraceContext
 */
export enum OpenCensusConfig_TraceContext {
    /**
     * No-op default, no trace context is utilized.
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * W3C Trace-Context format "traceparent:" header.
     *
     * @generated from protobuf enum value: TRACE_CONTEXT = 1;
     */
    TRACE_CONTEXT = 1,
    /**
     * Binary "grpc-trace-bin:" header.
     *
     * @generated from protobuf enum value: GRPC_TRACE_BIN = 2;
     */
    GRPC_TRACE_BIN = 2,
    /**
     * "X-Cloud-Trace-Context:" header.
     *
     * @generated from protobuf enum value: CLOUD_TRACE_CONTEXT = 3;
     */
    CLOUD_TRACE_CONTEXT = 3,
    /**
     * X-B3-* headers.
     *
     * @generated from protobuf enum value: B3 = 4;
     */
    B3 = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class OpenCensusConfig$Type extends MessageType<OpenCensusConfig> {
    constructor() {
        super("envoy.config.trace.v2.OpenCensusConfig", [
            { no: 1, name: "trace_config", kind: "message", T: () => TraceConfig },
            { no: 2, name: "stdout_exporter_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "stackdriver_exporter_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stackdriver_project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "stackdriver_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "stackdriver_grpc_service", kind: "message", T: () => GrpcService },
            { no: 5, name: "zipkin_exporter_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "zipkin_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "ocagent_exporter_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "ocagent_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "ocagent_grpc_service", kind: "message", T: () => GrpcService },
            { no: 8, name: "incoming_trace_context", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["envoy.config.trace.v2.OpenCensusConfig.TraceContext", OpenCensusConfig_TraceContext] },
            { no: 9, name: "outgoing_trace_context", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["envoy.config.trace.v2.OpenCensusConfig.TraceContext", OpenCensusConfig_TraceContext] }
        ]);
    }
    create(value?: PartialMessage<OpenCensusConfig>): OpenCensusConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stdoutExporterEnabled = false;
        message.stackdriverExporterEnabled = false;
        message.stackdriverProjectId = "";
        message.stackdriverAddress = "";
        message.zipkinExporterEnabled = false;
        message.zipkinUrl = "";
        message.ocagentExporterEnabled = false;
        message.ocagentAddress = "";
        message.incomingTraceContext = [];
        message.outgoingTraceContext = [];
        if (value !== undefined)
            reflectionMergePartial<OpenCensusConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenCensusConfig): OpenCensusConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* opencensus.proto.trace.v1.TraceConfig trace_config */ 1:
                    message.traceConfig = TraceConfig.internalBinaryRead(reader, reader.uint32(), options, message.traceConfig);
                    break;
                case /* bool stdout_exporter_enabled */ 2:
                    message.stdoutExporterEnabled = reader.bool();
                    break;
                case /* bool stackdriver_exporter_enabled */ 3:
                    message.stackdriverExporterEnabled = reader.bool();
                    break;
                case /* string stackdriver_project_id */ 4:
                    message.stackdriverProjectId = reader.string();
                    break;
                case /* string stackdriver_address */ 10:
                    message.stackdriverAddress = reader.string();
                    break;
                case /* envoy.api.v2.core.GrpcService stackdriver_grpc_service */ 13:
                    message.stackdriverGrpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.stackdriverGrpcService);
                    break;
                case /* bool zipkin_exporter_enabled */ 5:
                    message.zipkinExporterEnabled = reader.bool();
                    break;
                case /* string zipkin_url */ 6:
                    message.zipkinUrl = reader.string();
                    break;
                case /* bool ocagent_exporter_enabled */ 11:
                    message.ocagentExporterEnabled = reader.bool();
                    break;
                case /* string ocagent_address */ 12:
                    message.ocagentAddress = reader.string();
                    break;
                case /* envoy.api.v2.core.GrpcService ocagent_grpc_service */ 14:
                    message.ocagentGrpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.ocagentGrpcService);
                    break;
                case /* repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext incoming_trace_context */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.incomingTraceContext.push(reader.int32());
                    else
                        message.incomingTraceContext.push(reader.int32());
                    break;
                case /* repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext outgoing_trace_context */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.outgoingTraceContext.push(reader.int32());
                    else
                        message.outgoingTraceContext.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenCensusConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* opencensus.proto.trace.v1.TraceConfig trace_config = 1; */
        if (message.traceConfig)
            TraceConfig.internalBinaryWrite(message.traceConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool stdout_exporter_enabled = 2; */
        if (message.stdoutExporterEnabled !== false)
            writer.tag(2, WireType.Varint).bool(message.stdoutExporterEnabled);
        /* bool stackdriver_exporter_enabled = 3; */
        if (message.stackdriverExporterEnabled !== false)
            writer.tag(3, WireType.Varint).bool(message.stackdriverExporterEnabled);
        /* string stackdriver_project_id = 4; */
        if (message.stackdriverProjectId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stackdriverProjectId);
        /* string stackdriver_address = 10; */
        if (message.stackdriverAddress !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.stackdriverAddress);
        /* envoy.api.v2.core.GrpcService stackdriver_grpc_service = 13; */
        if (message.stackdriverGrpcService)
            GrpcService.internalBinaryWrite(message.stackdriverGrpcService, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bool zipkin_exporter_enabled = 5; */
        if (message.zipkinExporterEnabled !== false)
            writer.tag(5, WireType.Varint).bool(message.zipkinExporterEnabled);
        /* string zipkin_url = 6; */
        if (message.zipkinUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.zipkinUrl);
        /* bool ocagent_exporter_enabled = 11; */
        if (message.ocagentExporterEnabled !== false)
            writer.tag(11, WireType.Varint).bool(message.ocagentExporterEnabled);
        /* string ocagent_address = 12; */
        if (message.ocagentAddress !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.ocagentAddress);
        /* envoy.api.v2.core.GrpcService ocagent_grpc_service = 14; */
        if (message.ocagentGrpcService)
            GrpcService.internalBinaryWrite(message.ocagentGrpcService, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext incoming_trace_context = 8; */
        if (message.incomingTraceContext.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.incomingTraceContext.length; i++)
                writer.int32(message.incomingTraceContext[i]);
            writer.join();
        }
        /* repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext outgoing_trace_context = 9; */
        if (message.outgoingTraceContext.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.outgoingTraceContext.length; i++)
                writer.int32(message.outgoingTraceContext[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v2.OpenCensusConfig
 */
export const OpenCensusConfig = new OpenCensusConfig$Type();
