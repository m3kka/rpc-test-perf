// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/trace/v2/opencensus.proto (package envoy.config.trace.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TraceConfig } from "../../../../opencensus/proto/trace/v1/trace_config_pb.js";
import type { GrpcService } from "../../../api/v2/core/grpc_service_pb.js";

/**
 * Configuration for the OpenCensus tracer.
 * [#next-free-field: 15]
 * [#extension: envoy.tracers.opencensus]
 *
 * @generated from message envoy.config.trace.v2.OpenCensusConfig
 */
export declare class OpenCensusConfig extends Message<OpenCensusConfig> {
  /**
   * Configures tracing, e.g. the sampler, max number of annotations, etc.
   *
   * @generated from field: opencensus.proto.trace.v1.TraceConfig trace_config = 1;
   */
  traceConfig?: TraceConfig;

  /**
   * Enables the stdout exporter if set to true. This is intended for debugging
   * purposes.
   *
   * @generated from field: bool stdout_exporter_enabled = 2;
   */
  stdoutExporterEnabled: boolean;

  /**
   * Enables the Stackdriver exporter if set to true. The project_id must also
   * be set.
   *
   * @generated from field: bool stackdriver_exporter_enabled = 3;
   */
  stackdriverExporterEnabled: boolean;

  /**
   * The Cloud project_id to use for Stackdriver tracing.
   *
   * @generated from field: string stackdriver_project_id = 4;
   */
  stackdriverProjectId: string;

  /**
   * (optional) By default, the Stackdriver exporter will connect to production
   * Stackdriver. If stackdriver_address is non-empty, it will instead connect
   * to this address, which is in the gRPC format:
   * https://github.com/grpc/grpc/blob/master/doc/naming.md
   *
   * @generated from field: string stackdriver_address = 10;
   */
  stackdriverAddress: string;

  /**
   * (optional) The gRPC server that hosts Stackdriver tracing service. Only
   * Google gRPC is supported. If :ref:`target_uri <envoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.target_uri>`
   * is not provided, the default production Stackdriver address will be used.
   *
   * @generated from field: envoy.api.v2.core.GrpcService stackdriver_grpc_service = 13;
   */
  stackdriverGrpcService?: GrpcService;

  /**
   * Enables the Zipkin exporter if set to true. The url and service name must
   * also be set.
   *
   * @generated from field: bool zipkin_exporter_enabled = 5;
   */
  zipkinExporterEnabled: boolean;

  /**
   * The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
   *
   * @generated from field: string zipkin_url = 6;
   */
  zipkinUrl: string;

  /**
   * Enables the OpenCensus Agent exporter if set to true. The ocagent_address or
   * ocagent_grpc_service must also be set.
   *
   * @generated from field: bool ocagent_exporter_enabled = 11;
   */
  ocagentExporterEnabled: boolean;

  /**
   * The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
   * format: https://github.com/grpc/grpc/blob/master/doc/naming.md
   * [#comment:TODO: deprecate this field]
   *
   * @generated from field: string ocagent_address = 12;
   */
  ocagentAddress: string;

  /**
   * (optional) The gRPC server hosted by the OpenCensus Agent. Only Google gRPC is supported.
   * This is only used if the ocagent_address is left empty.
   *
   * @generated from field: envoy.api.v2.core.GrpcService ocagent_grpc_service = 14;
   */
  ocagentGrpcService?: GrpcService;

  /**
   * List of incoming trace context headers we will accept. First one found
   * wins.
   *
   * @generated from field: repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext incoming_trace_context = 8;
   */
  incomingTraceContext: OpenCensusConfig_TraceContext[];

  /**
   * List of outgoing trace context headers we will produce.
   *
   * @generated from field: repeated envoy.config.trace.v2.OpenCensusConfig.TraceContext outgoing_trace_context = 9;
   */
  outgoingTraceContext: OpenCensusConfig_TraceContext[];

  constructor(data?: PartialMessage<OpenCensusConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.trace.v2.OpenCensusConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenCensusConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenCensusConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenCensusConfig;

  static equals(a: OpenCensusConfig | PlainMessage<OpenCensusConfig> | undefined, b: OpenCensusConfig | PlainMessage<OpenCensusConfig> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.trace.v2.OpenCensusConfig.TraceContext
 */
export declare enum OpenCensusConfig_TraceContext {
  /**
   * No-op default, no trace context is utilized.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * W3C Trace-Context format "traceparent:" header.
   *
   * @generated from enum value: TRACE_CONTEXT = 1;
   */
  TRACE_CONTEXT = 1,

  /**
   * Binary "grpc-trace-bin:" header.
   *
   * @generated from enum value: GRPC_TRACE_BIN = 2;
   */
  GRPC_TRACE_BIN = 2,

  /**
   * "X-Cloud-Trace-Context:" header.
   *
   * @generated from enum value: CLOUD_TRACE_CONTEXT = 3;
   */
  CLOUD_TRACE_CONTEXT = 3,

  /**
   * X-B3-* headers.
   *
   * @generated from enum value: B3 = 4;
   */
  B3 = 4,
}

