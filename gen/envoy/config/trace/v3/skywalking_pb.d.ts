// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/trace/v3/skywalking.proto (package envoy.config.trace.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GrpcService } from "../../core/v3/grpc_service_pb.js";

/**
 * Configuration for the SkyWalking tracer. Please note that if SkyWalking tracer is used as the
 * provider of http tracer, then
 * :ref:`start_child_span <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
 * in the router must be set to true to get the correct topology and tracing data. Moreover, SkyWalking
 * Tracer does not support SkyWalking extension header (``sw8-x``) temporarily.
 * [#extension: envoy.tracers.skywalking]
 *
 * @generated from message envoy.config.trace.v3.SkyWalkingConfig
 */
export declare class SkyWalkingConfig extends Message<SkyWalkingConfig> {
  /**
   * SkyWalking collector service.
   *
   * @generated from field: envoy.config.core.v3.GrpcService grpc_service = 1;
   */
  grpcService?: GrpcService;

  /**
   * @generated from field: envoy.config.trace.v3.ClientConfig client_config = 2;
   */
  clientConfig?: ClientConfig;

  constructor(data?: PartialMessage<SkyWalkingConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.trace.v3.SkyWalkingConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SkyWalkingConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SkyWalkingConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SkyWalkingConfig;

  static equals(a: SkyWalkingConfig | PlainMessage<SkyWalkingConfig> | undefined, b: SkyWalkingConfig | PlainMessage<SkyWalkingConfig> | undefined): boolean;
}

/**
 * Client config for SkyWalking tracer.
 *
 * @generated from message envoy.config.trace.v3.ClientConfig
 */
export declare class ClientConfig extends Message<ClientConfig> {
  /**
   * Service name for SkyWalking tracer. If this field is empty, then local service cluster name
   * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
   * message's :ref:`cluster <envoy_v3_api_field_config.core.v3.Node.cluster>` field or command line
   * option :option:`--service-cluster` will be used. If both this field and local service cluster
   * name are empty, ``EnvoyProxy`` is used as the service name by default.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName: string;

  /**
   * Service instance name for SkyWalking tracer. If this field is empty, then local service node
   * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
   * message's :ref:`id <envoy_v3_api_field_config.core.v3.Node.id>` field or command line  option
   * :option:`--service-node` will be used. If both this field and local service node are empty,
   * ``EnvoyProxy`` is used as the instance name by default.
   *
   * @generated from field: string instance_name = 2;
   */
  instanceName: string;

  /**
   * Authentication token config for SkyWalking. SkyWalking can use token authentication to secure
   * that monitoring application data can be trusted. In current version, Token is considered as a
   * simple string.
   * [#comment:TODO(wbpcode): Get backend token through the SDS API.]
   *
   * @generated from oneof envoy.config.trace.v3.ClientConfig.backend_token_specifier
   */
  backendTokenSpecifier: {
    /**
     * Inline authentication token string.
     *
     * @generated from field: string backend_token = 3;
     */
    value: string;
    case: "backendToken";
  } | { case: undefined; value?: undefined };

  /**
   * Envoy caches the segment in memory when the SkyWalking backend service is temporarily unavailable.
   * This field specifies the maximum number of segments that can be cached. If not specified, the
   * default is 1024.
   *
   * @generated from field: google.protobuf.UInt32Value max_cache_size = 4;
   */
  maxCacheSize?: number;

  constructor(data?: PartialMessage<ClientConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.trace.v3.ClientConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfig;

  static equals(a: ClientConfig | PlainMessage<ClientConfig> | undefined, b: ClientConfig | PlainMessage<ClientConfig> | undefined): boolean;
}

