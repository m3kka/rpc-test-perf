// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/trace/v3/skywalking.proto" (package "envoy.config.trace.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { GrpcService } from "../../core/v3/grpc_service";
// [#protodoc-title: SkyWalking tracer]

/**
 * Configuration for the SkyWalking tracer. Please note that if SkyWalking tracer is used as the
 * provider of http tracer, then
 * :ref:`start_child_span <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
 * in the router must be set to true to get the correct topology and tracing data. Moreover, SkyWalking
 * Tracer does not support SkyWalking extension header (``sw8-x``) temporarily.
 * [#extension: envoy.tracers.skywalking]
 *
 * @generated from protobuf message envoy.config.trace.v3.SkyWalkingConfig
 */
export interface SkyWalkingConfig {
    /**
     * SkyWalking collector service.
     *
     * @generated from protobuf field: envoy.config.core.v3.GrpcService grpc_service = 1;
     */
    grpcService?: GrpcService;
    /**
     * @generated from protobuf field: envoy.config.trace.v3.ClientConfig client_config = 2;
     */
    clientConfig?: ClientConfig;
}
/**
 * Client config for SkyWalking tracer.
 *
 * @generated from protobuf message envoy.config.trace.v3.ClientConfig
 */
export interface ClientConfig {
    /**
     * Service name for SkyWalking tracer. If this field is empty, then local service cluster name
     * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
     * message's :ref:`cluster <envoy_v3_api_field_config.core.v3.Node.cluster>` field or command line
     * option :option:`--service-cluster` will be used. If both this field and local service cluster
     * name are empty, ``EnvoyProxy`` is used as the service name by default.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Service instance name for SkyWalking tracer. If this field is empty, then local service node
     * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
     * message's :ref:`id <envoy_v3_api_field_config.core.v3.Node.id>` field or command line  option
     * :option:`--service-node` will be used. If both this field and local service node are empty,
     * ``EnvoyProxy`` is used as the instance name by default.
     *
     * @generated from protobuf field: string instance_name = 2;
     */
    instanceName: string;
    /**
     * @generated from protobuf oneof: backend_token_specifier
     */
    backendTokenSpecifier: {
        oneofKind: "backendToken";
        /**
         * Inline authentication token string.
         *
         * @generated from protobuf field: string backend_token = 3;
         */
        backendToken: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * Envoy caches the segment in memory when the SkyWalking backend service is temporarily unavailable.
     * This field specifies the maximum number of segments that can be cached. If not specified, the
     * default is 1024.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_cache_size = 4;
     */
    maxCacheSize?: UInt32Value;
}
// @generated message type with reflection information, may provide speed optimized methods
class SkyWalkingConfig$Type extends MessageType<SkyWalkingConfig> {
    constructor() {
        super("envoy.config.trace.v3.SkyWalkingConfig", [
            { no: 1, name: "grpc_service", kind: "message", T: () => GrpcService, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "client_config", kind: "message", T: () => ClientConfig }
        ]);
    }
    create(value?: PartialMessage<SkyWalkingConfig>): SkyWalkingConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SkyWalkingConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkyWalkingConfig): SkyWalkingConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.GrpcService grpc_service */ 1:
                    message.grpcService = GrpcService.internalBinaryRead(reader, reader.uint32(), options, message.grpcService);
                    break;
                case /* envoy.config.trace.v3.ClientConfig client_config */ 2:
                    message.clientConfig = ClientConfig.internalBinaryRead(reader, reader.uint32(), options, message.clientConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkyWalkingConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.GrpcService grpc_service = 1; */
        if (message.grpcService)
            GrpcService.internalBinaryWrite(message.grpcService, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.trace.v3.ClientConfig client_config = 2; */
        if (message.clientConfig)
            ClientConfig.internalBinaryWrite(message.clientConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v3.SkyWalkingConfig
 */
export const SkyWalkingConfig = new SkyWalkingConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientConfig$Type extends MessageType<ClientConfig> {
    constructor() {
        super("envoy.config.trace.v3.ClientConfig", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "instance_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backend_token", kind: "scalar", oneof: "backendTokenSpecifier", T: 9 /*ScalarType.STRING*/, options: { "udpa.annotations.sensitive": true } },
            { no: 4, name: "max_cache_size", kind: "message", T: () => UInt32Value }
        ]);
    }
    create(value?: PartialMessage<ClientConfig>): ClientConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceName = "";
        message.instanceName = "";
        message.backendTokenSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientConfig): ClientConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string instance_name */ 2:
                    message.instanceName = reader.string();
                    break;
                case /* string backend_token */ 3:
                    message.backendTokenSpecifier = {
                        oneofKind: "backendToken",
                        backendToken: reader.string()
                    };
                    break;
                case /* google.protobuf.UInt32Value max_cache_size */ 4:
                    message.maxCacheSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxCacheSize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string instance_name = 2; */
        if (message.instanceName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.instanceName);
        /* string backend_token = 3; */
        if (message.backendTokenSpecifier.oneofKind === "backendToken")
            writer.tag(3, WireType.LengthDelimited).string(message.backendTokenSpecifier.backendToken);
        /* google.protobuf.UInt32Value max_cache_size = 4; */
        if (message.maxCacheSize)
            UInt32Value.internalBinaryWrite(message.maxCacheSize, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v3.ClientConfig
 */
export const ClientConfig = new ClientConfig$Type();
