// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/trace/v3/zipkin.proto" (package "envoy.config.trace.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../google/protobuf/wrappers";
// [#protodoc-title: Zipkin tracer]

/**
 * Configuration for the Zipkin tracer.
 * [#extension: envoy.tracers.zipkin]
 * [#next-free-field: 8]
 *
 * @generated from protobuf message envoy.config.trace.v3.ZipkinConfig
 */
export interface ZipkinConfig {
    /**
     * The cluster manager cluster that hosts the Zipkin collectors.
     *
     * @generated from protobuf field: string collector_cluster = 1;
     */
    collectorCluster: string;
    /**
     * The API endpoint of the Zipkin service where the spans will be sent. When
     * using a standard Zipkin installation.
     *
     * @generated from protobuf field: string collector_endpoint = 2;
     */
    collectorEndpoint: string;
    /**
     * Determines whether a 128bit trace id will be used when creating a new
     * trace instance. The default value is false, which will result in a 64 bit trace id being used.
     *
     * @generated from protobuf field: bool trace_id_128bit = 3 [json_name = "traceId128bit"];
     */
    traceId128Bit: boolean;
    /**
     * Determines whether client and server spans will share the same span context.
     * The default value is true.
     *
     * @generated from protobuf field: google.protobuf.BoolValue shared_span_context = 4;
     */
    sharedSpanContext?: BoolValue;
    /**
     * Determines the selected collector endpoint version.
     *
     * @generated from protobuf field: envoy.config.trace.v3.ZipkinConfig.CollectorEndpointVersion collector_endpoint_version = 5;
     */
    collectorEndpointVersion: ZipkinConfig_CollectorEndpointVersion;
    /**
     * Optional hostname to use when sending spans to the collector_cluster. Useful for collectors
     * that require a specific hostname. Defaults to :ref:`collector_cluster <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_cluster>` above.
     *
     * @generated from protobuf field: string collector_hostname = 6;
     */
    collectorHostname: string;
    /**
     * If this is set to true, then Envoy will be treated as an independent hop in trace chain. A complete span pair will be created for a single
     * request. Server span will be created for the downstream request and client span will be created for the related upstream request.
     * This should be set to true in the following cases:
     *
     * * The Envoy Proxy is used as gateway or ingress.
     * * The Envoy Proxy is used as sidecar but inbound traffic capturing or outbound traffic capturing is disabled.
     * * Any case that the `start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>` is set to true.
     *
     * .. attention::
     *
     *   If this is set to true, then the
     *   :ref:`start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
     *   SHOULD be set to true also to ensure the correctness of trace chain.
     *
     * @generated from protobuf field: bool split_spans_for_request = 7;
     */
    splitSpansForRequest: boolean;
}
/**
 * Available Zipkin collector endpoint versions.
 *
 * @generated from protobuf enum envoy.config.trace.v3.ZipkinConfig.CollectorEndpointVersion
 */
export enum ZipkinConfig_CollectorEndpointVersion {
    /**
     * Zipkin API v1, JSON over HTTP.
     * [#comment: The default implementation of Zipkin client before this field is added was only v1
     * and the way user configure this was by not explicitly specifying the version. Consequently,
     * before this is added, the corresponding Zipkin collector expected to receive v1 payload.
     * Hence the motivation of adding HTTP_JSON_V1 as the default is to avoid a breaking change when
     * user upgrading Envoy with this change. Furthermore, we also immediately deprecate this field,
     * since in Zipkin realm this v1 version is considered to be not preferable anymore.]
     *
     * @deprecated
     * @generated from protobuf enum value: DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = 0 [deprecated = true];
     */
    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = 0,
    /**
     * Zipkin API v2, JSON over HTTP.
     *
     * @generated from protobuf enum value: HTTP_JSON = 1;
     */
    HTTP_JSON = 1,
    /**
     * Zipkin API v2, protobuf over HTTP.
     *
     * @generated from protobuf enum value: HTTP_PROTO = 2;
     */
    HTTP_PROTO = 2,
    /**
     * [#not-implemented-hide:]
     *
     * @generated from protobuf enum value: GRPC = 3;
     */
    GRPC = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ZipkinConfig$Type extends MessageType<ZipkinConfig> {
    constructor() {
        super("envoy.config.trace.v3.ZipkinConfig", [
            { no: 1, name: "collector_cluster", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "collector_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "trace_id_128bit", kind: "scalar", jsonName: "traceId128bit", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "shared_span_context", kind: "message", T: () => BoolValue },
            { no: 5, name: "collector_endpoint_version", kind: "enum", T: () => ["envoy.config.trace.v3.ZipkinConfig.CollectorEndpointVersion", ZipkinConfig_CollectorEndpointVersion] },
            { no: 6, name: "collector_hostname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "split_spans_for_request", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.trace.v2.ZipkinConfig" } });
    }
    create(value?: PartialMessage<ZipkinConfig>): ZipkinConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.collectorCluster = "";
        message.collectorEndpoint = "";
        message.traceId128Bit = false;
        message.collectorEndpointVersion = 0;
        message.collectorHostname = "";
        message.splitSpansForRequest = false;
        if (value !== undefined)
            reflectionMergePartial<ZipkinConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ZipkinConfig): ZipkinConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string collector_cluster */ 1:
                    message.collectorCluster = reader.string();
                    break;
                case /* string collector_endpoint */ 2:
                    message.collectorEndpoint = reader.string();
                    break;
                case /* bool trace_id_128bit = 3 [json_name = "traceId128bit"];*/ 3:
                    message.traceId128Bit = reader.bool();
                    break;
                case /* google.protobuf.BoolValue shared_span_context */ 4:
                    message.sharedSpanContext = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.sharedSpanContext);
                    break;
                case /* envoy.config.trace.v3.ZipkinConfig.CollectorEndpointVersion collector_endpoint_version */ 5:
                    message.collectorEndpointVersion = reader.int32();
                    break;
                case /* string collector_hostname */ 6:
                    message.collectorHostname = reader.string();
                    break;
                case /* bool split_spans_for_request */ 7:
                    message.splitSpansForRequest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ZipkinConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string collector_cluster = 1; */
        if (message.collectorCluster !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.collectorCluster);
        /* string collector_endpoint = 2; */
        if (message.collectorEndpoint !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.collectorEndpoint);
        /* bool trace_id_128bit = 3 [json_name = "traceId128bit"]; */
        if (message.traceId128Bit !== false)
            writer.tag(3, WireType.Varint).bool(message.traceId128Bit);
        /* google.protobuf.BoolValue shared_span_context = 4; */
        if (message.sharedSpanContext)
            BoolValue.internalBinaryWrite(message.sharedSpanContext, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.trace.v3.ZipkinConfig.CollectorEndpointVersion collector_endpoint_version = 5; */
        if (message.collectorEndpointVersion !== 0)
            writer.tag(5, WireType.Varint).int32(message.collectorEndpointVersion);
        /* string collector_hostname = 6; */
        if (message.collectorHostname !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.collectorHostname);
        /* bool split_spans_for_request = 7; */
        if (message.splitSpansForRequest !== false)
            writer.tag(7, WireType.Varint).bool(message.splitSpansForRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v3.ZipkinConfig
 */
export const ZipkinConfig = new ZipkinConfig$Type();
