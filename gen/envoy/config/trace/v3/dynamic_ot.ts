// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/trace/v3/dynamic_ot.proto" (package "envoy.config.trace.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../../../google/protobuf/struct";
// [#protodoc-title: Dynamically loadable OpenTracing tracer]

/**
 * DynamicOtConfig is used to dynamically load a tracer from a shared library
 * that implements the `OpenTracing dynamic loading API
 * <https://github.com/opentracing/opentracing-cpp>`_.
 * [#extension: envoy.tracers.dynamic_ot]
 *
 * @generated from protobuf message envoy.config.trace.v3.DynamicOtConfig
 */
export interface DynamicOtConfig {
    /**
     * Dynamic library implementing the `OpenTracing API
     * <https://github.com/opentracing/opentracing-cpp>`_.
     *
     * @generated from protobuf field: string library = 1;
     */
    library: string;
    /**
     * The configuration to use when creating a tracer from the given dynamic
     * library.
     *
     * @generated from protobuf field: google.protobuf.Struct config = 2;
     */
    config?: Struct;
}
// @generated message type with reflection information, may provide speed optimized methods
class DynamicOtConfig$Type extends MessageType<DynamicOtConfig> {
    constructor() {
        super("envoy.config.trace.v3.DynamicOtConfig", [
            { no: 1, name: "library", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "config", kind: "message", T: () => Struct }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.trace.v2.DynamicOtConfig" } });
    }
    create(value?: PartialMessage<DynamicOtConfig>): DynamicOtConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.library = "";
        if (value !== undefined)
            reflectionMergePartial<DynamicOtConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DynamicOtConfig): DynamicOtConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string library */ 1:
                    message.library = reader.string();
                    break;
                case /* google.protobuf.Struct config */ 2:
                    message.config = Struct.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DynamicOtConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string library = 1; */
        if (message.library !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.library);
        /* google.protobuf.Struct config = 2; */
        if (message.config)
            Struct.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.trace.v3.DynamicOtConfig
 */
export const DynamicOtConfig = new DynamicOtConfig$Type();
