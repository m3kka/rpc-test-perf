// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/endpoint/v3/endpoint.proto" (package "envoy.config.endpoint.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FractionalPercent } from "../../../type/v3/percent";
import { Duration } from "../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { Endpoint } from "./endpoint_components";
import { LocalityLbEndpoints } from "./endpoint_components";
// [#protodoc-title: Endpoint configuration]
// Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`

/**
 * Each route from RDS will map to a single cluster or traffic split across
 * clusters using weights expressed in the RDS WeightedCluster.
 *
 * With EDS, each cluster is treated independently from a LB perspective, with
 * LB taking place between the Localities within a cluster and at a finer
 * granularity between the hosts within a locality. The percentage of traffic
 * for each endpoint is determined by both its load_balancing_weight, and the
 * load_balancing_weight of its locality. First, a locality will be selected,
 * then an endpoint within that locality will be chose based on its weight.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment
 */
export interface ClusterLoadAssignment {
    /**
     * Name of the cluster. This will be the :ref:`service_name
     * <envoy_v3_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name>` value if specified
     * in the cluster :ref:`EdsClusterConfig
     * <envoy_v3_api_msg_config.cluster.v3.Cluster.EdsClusterConfig>`.
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * List of endpoints to load balance to.
     *
     * @generated from protobuf field: repeated envoy.config.endpoint.v3.LocalityLbEndpoints endpoints = 2;
     */
    endpoints: LocalityLbEndpoints[];
    /**
     * Map of named endpoints that can be referenced in LocalityLbEndpoints.
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: map<string, envoy.config.endpoint.v3.Endpoint> named_endpoints = 5;
     */
    namedEndpoints: {
        [key: string]: Endpoint;
    };
    /**
     * Load balancing policy settings.
     *
     * @generated from protobuf field: envoy.config.endpoint.v3.ClusterLoadAssignment.Policy policy = 4;
     */
    policy?: ClusterLoadAssignment_Policy;
}
/**
 * Load balancing policy settings.
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment.Policy
 */
export interface ClusterLoadAssignment_Policy {
    /**
     * Action to trim the overall incoming traffic to protect the upstream
     * hosts. This action allows protection in case the hosts are unable to
     * recover from an outage, or unable to autoscale or unable to handle
     * incoming traffic volume for any reason.
     *
     * At the client each category is applied one after the other to generate
     * the 'actual' drop percentage on all outgoing traffic. For example:
     *
     * .. code-block:: json
     *
     *  { "drop_overloads": [
     *      { "category": "throttle", "drop_percentage": 60 }
     *      { "category": "lb", "drop_percentage": 50 }
     *  ]}
     *
     * The actual drop percentages applied to the traffic at the clients will be
     *    "throttle"_drop = 60%
     *    "lb"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.
     *    actual_outgoing_load = 20% // remaining after applying all categories.
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: repeated envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload drop_overloads = 2;
     */
    dropOverloads: ClusterLoadAssignment_Policy_DropOverload[];
    /**
     * Priority levels and localities are considered overprovisioned with this
     * factor (in percentage). This means that we don't consider a priority
     * level or locality unhealthy until the fraction of healthy hosts
     * multiplied by the overprovisioning factor drops below 100.
     * With the default value 140(1.4), Envoy doesn't consider a priority level
     * or a locality unhealthy until their percentage of healthy hosts drops
     * below 72%. For example:
     *
     * .. code-block:: json
     *
     *  { "overprovisioning_factor": 100 }
     *
     * Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>` and
     * :ref:`localities <arch_overview_load_balancing_locality_weighted_lb>`.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value overprovisioning_factor = 3;
     */
    overprovisioningFactor?: UInt32Value;
    /**
     * The max time until which the endpoints from this assignment can be used.
     * If no new assignments are received before this time expires the endpoints
     * are considered stale and should be marked unhealthy.
     * Defaults to 0 which means endpoints never go stale.
     *
     * @generated from protobuf field: google.protobuf.Duration endpoint_stale_after = 4;
     */
    endpointStaleAfter?: Duration;
    /**
     * If true, use the :ref:`load balancing weight
     * <envoy_v3_api_field_config.endpoint.v3.LbEndpoint.load_balancing_weight>` of healthy and unhealthy
     * hosts to determine the health of the priority level. If false, use the number of healthy and unhealthy hosts
     * to determine the health of the priority level, or in other words assume each host has a weight of 1 for
     * this calculation.
     *
     * Note: this is not currently implemented for
     * :ref:`locality weighted load balancing <arch_overview_load_balancing_locality_weighted_lb>`.
     *
     * @generated from protobuf field: bool weighted_priority_health = 6;
     */
    weightedPriorityHealth: boolean;
}
/**
 * [#not-implemented-hide:]
 *
 * @generated from protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload
 */
export interface ClusterLoadAssignment_Policy_DropOverload {
    /**
     * Identifier for the policy specifying the drop.
     *
     * @generated from protobuf field: string category = 1;
     */
    category: string;
    /**
     * Percentage of traffic that should be dropped for the category.
     *
     * @generated from protobuf field: envoy.type.v3.FractionalPercent drop_percentage = 2;
     */
    dropPercentage?: FractionalPercent;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClusterLoadAssignment$Type extends MessageType<ClusterLoadAssignment> {
    constructor() {
        super("envoy.config.endpoint.v3.ClusterLoadAssignment", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "endpoints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LocalityLbEndpoints },
            { no: 5, name: "named_endpoints", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Endpoint } },
            { no: 4, name: "policy", kind: "message", T: () => ClusterLoadAssignment_Policy }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ClusterLoadAssignment" } });
    }
    create(value?: PartialMessage<ClusterLoadAssignment>): ClusterLoadAssignment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.endpoints = [];
        message.namedEndpoints = {};
        if (value !== undefined)
            reflectionMergePartial<ClusterLoadAssignment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterLoadAssignment): ClusterLoadAssignment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* repeated envoy.config.endpoint.v3.LocalityLbEndpoints endpoints */ 2:
                    message.endpoints.push(LocalityLbEndpoints.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, envoy.config.endpoint.v3.Endpoint> named_endpoints */ 5:
                    this.binaryReadMap5(message.namedEndpoints, reader, options);
                    break;
                case /* envoy.config.endpoint.v3.ClusterLoadAssignment.Policy policy */ 4:
                    message.policy = ClusterLoadAssignment_Policy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: ClusterLoadAssignment["namedEndpoints"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClusterLoadAssignment["namedEndpoints"] | undefined, val: ClusterLoadAssignment["namedEndpoints"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Endpoint.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.config.endpoint.v3.ClusterLoadAssignment.named_endpoints");
            }
        }
        map[key ?? ""] = val ?? Endpoint.create();
    }
    internalBinaryWrite(message: ClusterLoadAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* repeated envoy.config.endpoint.v3.LocalityLbEndpoints endpoints = 2; */
        for (let i = 0; i < message.endpoints.length; i++)
            LocalityLbEndpoints.internalBinaryWrite(message.endpoints[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, envoy.config.endpoint.v3.Endpoint> named_endpoints = 5; */
        for (let k of globalThis.Object.keys(message.namedEndpoints)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Endpoint.internalBinaryWrite(message.namedEndpoints[k], writer, options);
            writer.join().join();
        }
        /* envoy.config.endpoint.v3.ClusterLoadAssignment.Policy policy = 4; */
        if (message.policy)
            ClusterLoadAssignment_Policy.internalBinaryWrite(message.policy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment
 */
export const ClusterLoadAssignment = new ClusterLoadAssignment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterLoadAssignment_Policy$Type extends MessageType<ClusterLoadAssignment_Policy> {
    constructor() {
        super("envoy.config.endpoint.v3.ClusterLoadAssignment.Policy", [
            { no: 2, name: "drop_overloads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClusterLoadAssignment_Policy_DropOverload },
            { no: 3, name: "overprovisioning_factor", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gt: 0 } } } },
            { no: 4, name: "endpoint_stale_after", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gt: {} } } } },
            { no: 6, name: "weighted_priority_health", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ClusterLoadAssignment.Policy" } });
    }
    create(value?: PartialMessage<ClusterLoadAssignment_Policy>): ClusterLoadAssignment_Policy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dropOverloads = [];
        message.weightedPriorityHealth = false;
        if (value !== undefined)
            reflectionMergePartial<ClusterLoadAssignment_Policy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterLoadAssignment_Policy): ClusterLoadAssignment_Policy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload drop_overloads */ 2:
                    message.dropOverloads.push(ClusterLoadAssignment_Policy_DropOverload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.UInt32Value overprovisioning_factor */ 3:
                    message.overprovisioningFactor = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.overprovisioningFactor);
                    break;
                case /* google.protobuf.Duration endpoint_stale_after */ 4:
                    message.endpointStaleAfter = Duration.internalBinaryRead(reader, reader.uint32(), options, message.endpointStaleAfter);
                    break;
                case /* bool weighted_priority_health */ 6:
                    message.weightedPriorityHealth = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterLoadAssignment_Policy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload drop_overloads = 2; */
        for (let i = 0; i < message.dropOverloads.length; i++)
            ClusterLoadAssignment_Policy_DropOverload.internalBinaryWrite(message.dropOverloads[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value overprovisioning_factor = 3; */
        if (message.overprovisioningFactor)
            UInt32Value.internalBinaryWrite(message.overprovisioningFactor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration endpoint_stale_after = 4; */
        if (message.endpointStaleAfter)
            Duration.internalBinaryWrite(message.endpointStaleAfter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool weighted_priority_health = 6; */
        if (message.weightedPriorityHealth !== false)
            writer.tag(6, WireType.Varint).bool(message.weightedPriorityHealth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment.Policy
 */
export const ClusterLoadAssignment_Policy = new ClusterLoadAssignment_Policy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterLoadAssignment_Policy_DropOverload$Type extends MessageType<ClusterLoadAssignment_Policy_DropOverload> {
    constructor() {
        super("envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload", [
            { no: 1, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "drop_percentage", kind: "message", T: () => FractionalPercent }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ClusterLoadAssignment.Policy.DropOverload" } });
    }
    create(value?: PartialMessage<ClusterLoadAssignment_Policy_DropOverload>): ClusterLoadAssignment_Policy_DropOverload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.category = "";
        if (value !== undefined)
            reflectionMergePartial<ClusterLoadAssignment_Policy_DropOverload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterLoadAssignment_Policy_DropOverload): ClusterLoadAssignment_Policy_DropOverload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string category */ 1:
                    message.category = reader.string();
                    break;
                case /* envoy.type.v3.FractionalPercent drop_percentage */ 2:
                    message.dropPercentage = FractionalPercent.internalBinaryRead(reader, reader.uint32(), options, message.dropPercentage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterLoadAssignment_Policy_DropOverload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string category = 1; */
        if (message.category !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.category);
        /* envoy.type.v3.FractionalPercent drop_percentage = 2; */
        if (message.dropPercentage)
            FractionalPercent.internalBinaryWrite(message.dropPercentage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload
 */
export const ClusterLoadAssignment_Policy_DropOverload = new ClusterLoadAssignment_Policy_DropOverload$Type();
