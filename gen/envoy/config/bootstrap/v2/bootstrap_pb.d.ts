// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/bootstrap/v2/bootstrap.proto (package envoy.config.bootstrap.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Node } from "../../../api/v2/core/base_pb.js";
import type { ApiConfigSource, ConfigSource } from "../../../api/v2/core/config_source_pb.js";
import type { StatsConfig, StatsSink } from "../../metrics/v2/stats_pb.js";
import type { Tracing } from "../../trace/v2/http_tracer_pb.js";
import type { OverloadManager } from "../../overload/v2alpha/overload_pb.js";
import type { Listener } from "../../../api/v2/listener_pb.js";
import type { Cluster } from "../../../api/v2/cluster_pb.js";
import type { Secret } from "../../../api/v2/auth/secret_pb.js";
import type { Address, BindConfig } from "../../../api/v2/core/address_pb.js";
import type { SocketOption } from "../../../api/v2/core/socket_option_pb.js";
import type { EventServiceConfig } from "../../../api/v2/core/event_service_config_pb.js";

/**
 * Bootstrap :ref:`configuration overview <config_overview_bootstrap>`.
 * [#next-free-field: 21]
 *
 * @generated from message envoy.config.bootstrap.v2.Bootstrap
 */
export declare class Bootstrap extends Message<Bootstrap> {
  /**
   * Node identity to present to the management server and for instance
   * identification purposes (e.g. in generated headers).
   *
   * @generated from field: envoy.api.v2.core.Node node = 1;
   */
  node?: Node;

  /**
   * Statically specified resources.
   *
   * @generated from field: envoy.config.bootstrap.v2.Bootstrap.StaticResources static_resources = 2;
   */
  staticResources?: Bootstrap_StaticResources;

  /**
   * xDS configuration sources.
   *
   * @generated from field: envoy.config.bootstrap.v2.Bootstrap.DynamicResources dynamic_resources = 3;
   */
  dynamicResources?: Bootstrap_DynamicResources;

  /**
   * Configuration for the cluster manager which owns all upstream clusters
   * within the server.
   *
   * @generated from field: envoy.config.bootstrap.v2.ClusterManager cluster_manager = 4;
   */
  clusterManager?: ClusterManager;

  /**
   * Health discovery service config option.
   * (:ref:`core.ApiConfigSource <envoy_api_msg_core.ApiConfigSource>`)
   *
   * @generated from field: envoy.api.v2.core.ApiConfigSource hds_config = 14;
   */
  hdsConfig?: ApiConfigSource;

  /**
   * Optional file system path to search for startup flag files.
   *
   * @generated from field: string flags_path = 5;
   */
  flagsPath: string;

  /**
   * Optional set of stats sinks.
   *
   * @generated from field: repeated envoy.config.metrics.v2.StatsSink stats_sinks = 6;
   */
  statsSinks: StatsSink[];

  /**
   * Configuration for internal processing of stats.
   *
   * @generated from field: envoy.config.metrics.v2.StatsConfig stats_config = 13;
   */
  statsConfig?: StatsConfig;

  /**
   * Optional duration between flushes to configured stats sinks. For
   * performance reasons Envoy latches counters and only flushes counters and
   * gauges at a periodic interval. If not specified the default is 5000ms (5
   * seconds).
   * Duration must be at least 1ms and at most 5 min.
   *
   * @generated from field: google.protobuf.Duration stats_flush_interval = 7;
   */
  statsFlushInterval?: Duration;

  /**
   * Optional watchdog configuration.
   *
   * @generated from field: envoy.config.bootstrap.v2.Watchdog watchdog = 8;
   */
  watchdog?: Watchdog;

  /**
   * Configuration for an external tracing provider.
   *
   * .. attention::
   *  This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
   *  <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.provider>`.
   *
   * @generated from field: envoy.config.trace.v2.Tracing tracing = 9;
   */
  tracing?: Tracing;

  /**
   * Configuration for the runtime configuration provider (deprecated). If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   *
   * @generated from field: envoy.config.bootstrap.v2.Runtime runtime = 11 [deprecated = true];
   * @deprecated
   */
  runtime?: Runtime;

  /**
   * Configuration for the runtime configuration provider. If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   *
   * @generated from field: envoy.config.bootstrap.v2.LayeredRuntime layered_runtime = 17;
   */
  layeredRuntime?: LayeredRuntime;

  /**
   * Configuration for the local administration HTTP server.
   *
   * @generated from field: envoy.config.bootstrap.v2.Admin admin = 12;
   */
  admin?: Admin;

  /**
   * Optional overload manager configuration.
   *
   * @generated from field: envoy.config.overload.v2alpha.OverloadManager overload_manager = 15;
   */
  overloadManager?: OverloadManager;

  /**
   * Enable :ref:`stats for event dispatcher <operations_performance>`, defaults to false.
   * Note that this records a value for each iteration of the event loop on every thread. This
   * should normally be minimal overhead, but when using
   * :ref:`statsd <envoy_api_msg_config.metrics.v2.StatsdSink>`, it will send each observed value
   * over the wire individually because the statsd protocol doesn't have any way to represent a
   * histogram summary. Be aware that this can be a very large volume of data.
   *
   * @generated from field: bool enable_dispatcher_stats = 16;
   */
  enableDispatcherStats: boolean;

  /**
   * Optional string which will be used in lieu of x-envoy in prefixing headers.
   *
   * For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
   * transformed into x-foo-retry-on etc.
   *
   * Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
   * headers Envoy will trust for core code and core extensions only. Be VERY careful making
   * changes to this string, especially in multi-layer Envoy deployments or deployments using
   * extensions which are not upstream.
   *
   * @generated from field: string header_prefix = 18;
   */
  headerPrefix: string;

  /**
   * Optional proxy version which will be used to set the value of :ref:`server.version statistic
   * <server_statistics>` if specified. Envoy will not process this value, it will be sent as is to
   * :ref:`stats sinks <envoy_api_msg_config.metrics.v2.StatsSink>`.
   *
   * @generated from field: google.protobuf.UInt64Value stats_server_version_override = 19;
   */
  statsServerVersionOverride?: bigint;

  /**
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * This may be overridden on a per-cluster basis in cds_config,
   * when :ref:`dns_resolvers <envoy_api_field_Cluster.dns_resolvers>` and
   * :ref:`use_tcp_for_dns_lookups <envoy_api_field_Cluster.use_tcp_for_dns_lookups>` are
   * specified.
   * Setting this value causes failure if the
   * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
   * server startup. Apple' API only uses UDP for DNS resolution.
   *
   * @generated from field: bool use_tcp_for_dns_lookups = 20;
   */
  useTcpForDnsLookups: boolean;

  constructor(data?: PartialMessage<Bootstrap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Bootstrap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap;

  static equals(a: Bootstrap | PlainMessage<Bootstrap> | undefined, b: Bootstrap | PlainMessage<Bootstrap> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v2.Bootstrap.StaticResources
 */
export declare class Bootstrap_StaticResources extends Message<Bootstrap_StaticResources> {
  /**
   * Static :ref:`Listeners <envoy_api_msg_Listener>`. These listeners are
   * available regardless of LDS configuration.
   *
   * @generated from field: repeated envoy.api.v2.Listener listeners = 1;
   */
  listeners: Listener[];

  /**
   * If a network based configuration source is specified for :ref:`cds_config
   * <envoy_api_field_config.bootstrap.v2.Bootstrap.DynamicResources.cds_config>`, it's necessary
   * to have some initial cluster definitions available to allow Envoy to know
   * how to speak to the management server. These cluster definitions may not
   * use :ref:`EDS <arch_overview_dynamic_config_eds>` (i.e. they should be static
   * IP or DNS-based).
   *
   * @generated from field: repeated envoy.api.v2.Cluster clusters = 2;
   */
  clusters: Cluster[];

  /**
   * These static secrets can be used by :ref:`SdsSecretConfig
   * <envoy_api_msg_auth.SdsSecretConfig>`
   *
   * @generated from field: repeated envoy.api.v2.auth.Secret secrets = 3;
   */
  secrets: Secret[];

  constructor(data?: PartialMessage<Bootstrap_StaticResources>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Bootstrap.StaticResources";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_StaticResources;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_StaticResources;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_StaticResources;

  static equals(a: Bootstrap_StaticResources | PlainMessage<Bootstrap_StaticResources> | undefined, b: Bootstrap_StaticResources | PlainMessage<Bootstrap_StaticResources> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v2.Bootstrap.DynamicResources
 */
export declare class Bootstrap_DynamicResources extends Message<Bootstrap_DynamicResources> {
  /**
   * All :ref:`Listeners <envoy_api_msg_Listener>` are provided by a single
   * :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource lds_config = 1;
   */
  ldsConfig?: ConfigSource;

  /**
   * All post-bootstrap :ref:`Cluster <envoy_api_msg_Cluster>` definitions are
   * provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
   * configuration source.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource cds_config = 2;
   */
  cdsConfig?: ConfigSource;

  /**
   * A single :ref:`ADS <config_overview_ads>` source may be optionally
   * specified. This must have :ref:`api_type
   * <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
   * <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`. Only
   * :ref:`ConfigSources <envoy_api_msg_core.ConfigSource>` that have
   * the :ref:`ads <envoy_api_field_core.ConfigSource.ads>` field set will be
   * streamed on the ADS channel.
   *
   * @generated from field: envoy.api.v2.core.ApiConfigSource ads_config = 3;
   */
  adsConfig?: ApiConfigSource;

  constructor(data?: PartialMessage<Bootstrap_DynamicResources>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Bootstrap.DynamicResources";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_DynamicResources;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_DynamicResources;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_DynamicResources;

  static equals(a: Bootstrap_DynamicResources | PlainMessage<Bootstrap_DynamicResources> | undefined, b: Bootstrap_DynamicResources | PlainMessage<Bootstrap_DynamicResources> | undefined): boolean;
}

/**
 * Administration interface :ref:`operations documentation
 * <operations_admin_interface>`.
 *
 * @generated from message envoy.config.bootstrap.v2.Admin
 */
export declare class Admin extends Message<Admin> {
  /**
   * The path to write the access log for the administration server. If no
   * access log is desired specify ‘/dev/null’. This is only required if
   * :ref:`address <envoy_api_field_config.bootstrap.v2.Admin.address>` is set.
   *
   * @generated from field: string access_log_path = 1;
   */
  accessLogPath: string;

  /**
   * The cpu profiler output path for the administration server. If no profile
   * path is specified, the default is ‘/var/log/envoy/envoy.prof’.
   *
   * @generated from field: string profile_path = 2;
   */
  profilePath: string;

  /**
   * The TCP address that the administration server will listen on.
   * If not specified, Envoy will not start an administration server.
   *
   * @generated from field: envoy.api.v2.core.Address address = 3;
   */
  address?: Address;

  /**
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   *
   * @generated from field: repeated envoy.api.v2.core.SocketOption socket_options = 4;
   */
  socketOptions: SocketOption[];

  constructor(data?: PartialMessage<Admin>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Admin";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Admin;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Admin;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Admin;

  static equals(a: Admin | PlainMessage<Admin> | undefined, b: Admin | PlainMessage<Admin> | undefined): boolean;
}

/**
 * Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.
 *
 * @generated from message envoy.config.bootstrap.v2.ClusterManager
 */
export declare class ClusterManager extends Message<ClusterManager> {
  /**
   * Name of the local cluster (i.e., the cluster that owns the Envoy running
   * this configuration). In order to enable :ref:`zone aware routing
   * <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
   * If *local_cluster_name* is defined then :ref:`clusters
   * <envoy_api_msg_Cluster>` must be defined in the :ref:`Bootstrap
   * static cluster resources
   * <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`. This is unrelated to
   * the :option:`--service-cluster` option which does not `affect zone aware
   * routing <https://github.com/envoyproxy/envoy/issues/774>`_.
   *
   * @generated from field: string local_cluster_name = 1;
   */
  localClusterName: string;

  /**
   * Optional global configuration for outlier detection.
   *
   * @generated from field: envoy.config.bootstrap.v2.ClusterManager.OutlierDetection outlier_detection = 2;
   */
  outlierDetection?: ClusterManager_OutlierDetection;

  /**
   * Optional configuration used to bind newly established upstream connections.
   * This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
   *
   * @generated from field: envoy.api.v2.core.BindConfig upstream_bind_config = 3;
   */
  upstreamBindConfig?: BindConfig;

  /**
   * A management server endpoint to stream load stats to via
   * *StreamLoadStats*. This must have :ref:`api_type
   * <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
   * <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`.
   *
   * @generated from field: envoy.api.v2.core.ApiConfigSource load_stats_config = 4;
   */
  loadStatsConfig?: ApiConfigSource;

  constructor(data?: PartialMessage<ClusterManager>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.ClusterManager";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterManager;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterManager;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterManager;

  static equals(a: ClusterManager | PlainMessage<ClusterManager> | undefined, b: ClusterManager | PlainMessage<ClusterManager> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v2.ClusterManager.OutlierDetection
 */
export declare class ClusterManager_OutlierDetection extends Message<ClusterManager_OutlierDetection> {
  /**
   * Specifies the path to the outlier event log.
   *
   * @generated from field: string event_log_path = 1;
   */
  eventLogPath: string;

  /**
   * [#not-implemented-hide:]
   * The gRPC service for the outlier detection event service.
   * If empty, outlier detection events won't be sent to a remote endpoint.
   *
   * @generated from field: envoy.api.v2.core.EventServiceConfig event_service = 2;
   */
  eventService?: EventServiceConfig;

  constructor(data?: PartialMessage<ClusterManager_OutlierDetection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.ClusterManager.OutlierDetection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterManager_OutlierDetection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterManager_OutlierDetection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterManager_OutlierDetection;

  static equals(a: ClusterManager_OutlierDetection | PlainMessage<ClusterManager_OutlierDetection> | undefined, b: ClusterManager_OutlierDetection | PlainMessage<ClusterManager_OutlierDetection> | undefined): boolean;
}

/**
 * Envoy process watchdog configuration. When configured, this monitors for
 * nonresponsive threads and kills the process after the configured thresholds.
 * See the :ref:`watchdog documentation <operations_performance_watchdog>` for more information.
 *
 * @generated from message envoy.config.bootstrap.v2.Watchdog
 */
export declare class Watchdog extends Message<Watchdog> {
  /**
   * The duration after which Envoy counts a nonresponsive thread in the
   * *watchdog_miss* statistic. If not specified the default is 200ms.
   *
   * @generated from field: google.protobuf.Duration miss_timeout = 1;
   */
  missTimeout?: Duration;

  /**
   * The duration after which Envoy counts a nonresponsive thread in the
   * *watchdog_mega_miss* statistic. If not specified the default is
   * 1000ms.
   *
   * @generated from field: google.protobuf.Duration megamiss_timeout = 2;
   */
  megamissTimeout?: Duration;

  /**
   * If a watched thread has been nonresponsive for this duration, assume a
   * programming error and kill the entire Envoy process. Set to 0 to disable
   * kill behavior. If not specified the default is 0 (disabled).
   *
   * @generated from field: google.protobuf.Duration kill_timeout = 3;
   */
  killTimeout?: Duration;

  /**
   * If at least two watched threads have been nonresponsive for at least this
   * duration assume a true deadlock and kill the entire Envoy process. Set to 0
   * to disable this behavior. If not specified the default is 0 (disabled).
   *
   * @generated from field: google.protobuf.Duration multikill_timeout = 4;
   */
  multikillTimeout?: Duration;

  constructor(data?: PartialMessage<Watchdog>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Watchdog";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Watchdog;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Watchdog;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Watchdog;

  static equals(a: Watchdog | PlainMessage<Watchdog> | undefined, b: Watchdog | PlainMessage<Watchdog> | undefined): boolean;
}

/**
 * Runtime :ref:`configuration overview <config_runtime>` (deprecated).
 *
 * @generated from message envoy.config.bootstrap.v2.Runtime
 */
export declare class Runtime extends Message<Runtime> {
  /**
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   *
   * @generated from field: string symlink_root = 1;
   */
  symlinkRoot: string;

  /**
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   *
   * @generated from field: string subdirectory = 2;
   */
  subdirectory: string;

  /**
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   *
   * @generated from field: string override_subdirectory = 3;
   */
  overrideSubdirectory: string;

  /**
   * Static base runtime. This will be :ref:`overridden
   * <config_runtime_layering>` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding <config_runtime_proto_json>`.
   *
   * @generated from field: google.protobuf.Struct base = 4;
   */
  base?: Struct;

  constructor(data?: PartialMessage<Runtime>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.Runtime";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Runtime;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Runtime;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Runtime;

  static equals(a: Runtime | PlainMessage<Runtime> | undefined, b: Runtime | PlainMessage<Runtime> | undefined): boolean;
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.bootstrap.v2.RuntimeLayer
 */
export declare class RuntimeLayer extends Message<RuntimeLayer> {
  /**
   * Descriptive name for the runtime layer. This is only used for the runtime
   * :http:get:`/runtime` output.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof envoy.config.bootstrap.v2.RuntimeLayer.layer_specifier
   */
  layerSpecifier: {
    /**
     * :ref:`Static runtime <config_runtime_bootstrap>` layer.
     * This follows the :ref:`runtime protobuf JSON representation encoding
     * <config_runtime_proto_json>`. Unlike static xDS resources, this static
     * layer is overridable by later layers in the runtime virtual filesystem.
     *
     * @generated from field: google.protobuf.Struct static_layer = 2;
     */
    value: Struct;
    case: "staticLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v2.RuntimeLayer.DiskLayer disk_layer = 3;
     */
    value: RuntimeLayer_DiskLayer;
    case: "diskLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v2.RuntimeLayer.AdminLayer admin_layer = 4;
     */
    value: RuntimeLayer_AdminLayer;
    case: "adminLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v2.RuntimeLayer.RtdsLayer rtds_layer = 5;
     */
    value: RuntimeLayer_RtdsLayer;
    case: "rtdsLayer";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RuntimeLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.RuntimeLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer;

  static equals(a: RuntimeLayer | PlainMessage<RuntimeLayer> | undefined, b: RuntimeLayer | PlainMessage<RuntimeLayer> | undefined): boolean;
}

/**
 * :ref:`Disk runtime <config_runtime_local_disk>` layer.
 *
 * @generated from message envoy.config.bootstrap.v2.RuntimeLayer.DiskLayer
 */
export declare class RuntimeLayer_DiskLayer extends Message<RuntimeLayer_DiskLayer> {
  /**
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link.
   * Envoy will watch the location for changes and reload the file system tree
   * when they happen. See documentation on runtime :ref:`atomicity
   * <config_runtime_atomicity>` for further details on how reloads are
   * treated.
   *
   * @generated from field: string symlink_root = 1;
   */
  symlinkRoot: string;

  /**
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   *
   * @generated from field: string subdirectory = 3;
   */
  subdirectory: string;

  /**
   * :ref:`Append <config_runtime_local_disk_service_cluster_subdirs>` the
   * service cluster to the path under symlink root.
   *
   * @generated from field: bool append_service_cluster = 2;
   */
  appendServiceCluster: boolean;

  constructor(data?: PartialMessage<RuntimeLayer_DiskLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.RuntimeLayer.DiskLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_DiskLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_DiskLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_DiskLayer;

  static equals(a: RuntimeLayer_DiskLayer | PlainMessage<RuntimeLayer_DiskLayer> | undefined, b: RuntimeLayer_DiskLayer | PlainMessage<RuntimeLayer_DiskLayer> | undefined): boolean;
}

/**
 * :ref:`Admin console runtime <config_runtime_admin>` layer.
 *
 * @generated from message envoy.config.bootstrap.v2.RuntimeLayer.AdminLayer
 */
export declare class RuntimeLayer_AdminLayer extends Message<RuntimeLayer_AdminLayer> {
  constructor(data?: PartialMessage<RuntimeLayer_AdminLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.RuntimeLayer.AdminLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_AdminLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_AdminLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_AdminLayer;

  static equals(a: RuntimeLayer_AdminLayer | PlainMessage<RuntimeLayer_AdminLayer> | undefined, b: RuntimeLayer_AdminLayer | PlainMessage<RuntimeLayer_AdminLayer> | undefined): boolean;
}

/**
 * :ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer.
 *
 * @generated from message envoy.config.bootstrap.v2.RuntimeLayer.RtdsLayer
 */
export declare class RuntimeLayer_RtdsLayer extends Message<RuntimeLayer_RtdsLayer> {
  /**
   * Resource to subscribe to at *rtds_config* for the RTDS layer.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * RTDS configuration source.
   *
   * @generated from field: envoy.api.v2.core.ConfigSource rtds_config = 2;
   */
  rtdsConfig?: ConfigSource;

  constructor(data?: PartialMessage<RuntimeLayer_RtdsLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.RuntimeLayer.RtdsLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_RtdsLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_RtdsLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_RtdsLayer;

  static equals(a: RuntimeLayer_RtdsLayer | PlainMessage<RuntimeLayer_RtdsLayer> | undefined, b: RuntimeLayer_RtdsLayer | PlainMessage<RuntimeLayer_RtdsLayer> | undefined): boolean;
}

/**
 * Runtime :ref:`configuration overview <config_runtime>`.
 *
 * @generated from message envoy.config.bootstrap.v2.LayeredRuntime
 */
export declare class LayeredRuntime extends Message<LayeredRuntime> {
  /**
   * The :ref:`layers <config_runtime_layering>` of the runtime. This is ordered
   * such that later layers in the list overlay earlier entries.
   *
   * @generated from field: repeated envoy.config.bootstrap.v2.RuntimeLayer layers = 1;
   */
  layers: RuntimeLayer[];

  constructor(data?: PartialMessage<LayeredRuntime>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v2.LayeredRuntime";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LayeredRuntime;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LayeredRuntime;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LayeredRuntime;

  static equals(a: LayeredRuntime | PlainMessage<LayeredRuntime> | undefined, b: LayeredRuntime | PlainMessage<LayeredRuntime> | undefined): boolean;
}

