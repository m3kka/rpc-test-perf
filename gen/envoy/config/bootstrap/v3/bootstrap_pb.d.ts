// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/bootstrap/v3/bootstrap.proto (package envoy.config.bootstrap.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Node } from "../../core/v3/base_pb.js";
import type { ApiConfigSource, ConfigSource } from "../../core/v3/config_source_pb.js";
import type { StatsConfig, StatsSink } from "../../metrics/v3/stats_pb.js";
import type { Tracing } from "../../trace/v3/http_tracer_pb.js";
import type { OverloadManager } from "../../overload/v3/overload_pb.js";
import type { DnsResolutionConfig } from "../../core/v3/resolver_pb.js";
import type { TypedExtensionConfig } from "../../core/v3/extension_pb.js";
import type { Listener } from "../../listener/v3/listener_pb.js";
import type { Cluster } from "../../cluster/v3/cluster_pb.js";
import type { Secret } from "../../../extensions/transport_sockets/tls/v3/secret_pb.js";
import type { AccessLog } from "../../accesslog/v3/accesslog_pb.js";
import type { Address, BindConfig } from "../../core/v3/address_pb.js";
import type { SocketOption } from "../../core/v3/socket_option_pb.js";
import type { EventServiceConfig } from "../../core/v3/event_service_config_pb.js";
import type { Percent } from "../../../type/v3/percent_pb.js";

/**
 * Bootstrap :ref:`configuration overview <config_overview_bootstrap>`.
 * [#next-free-field: 40]
 *
 * @generated from message envoy.config.bootstrap.v3.Bootstrap
 */
export declare class Bootstrap extends Message<Bootstrap> {
  /**
   * Node identity to present to the management server and for instance
   * identification purposes (e.g. in generated headers).
   *
   * @generated from field: envoy.config.core.v3.Node node = 1;
   */
  node?: Node;

  /**
   * A list of :ref:`Node <envoy_v3_api_msg_config.core.v3.Node>` field names
   * that will be included in the context parameters of the effective
   * xdstp:// URL that is sent in a discovery request when resource
   * locators are used for LDS/CDS. Any non-string field will have its JSON
   * encoding set as the context parameter value, with the exception of
   * metadata, which will be flattened (see example below). The supported field
   * names are:
   * - "cluster"
   * - "id"
   * - "locality.region"
   * - "locality.sub_zone"
   * - "locality.zone"
   * - "metadata"
   * - "user_agent_build_version.metadata"
   * - "user_agent_build_version.version"
   * - "user_agent_name"
   * - "user_agent_version"
   *
   * The node context parameters act as a base layer dictionary for the context
   * parameters (i.e. more specific resource specific context parameters will
   * override). Field names will be prefixed with “udpa.node.” when included in
   * context parameters.
   *
   * For example, if node_context_params is ``["user_agent_name", "metadata"]``,
   * the implied context parameters might be::
   *
   *   node.user_agent_name: "envoy"
   *   node.metadata.foo: "{\"bar\": \"baz\"}"
   *   node.metadata.some: "42"
   *   node.metadata.thing: "\"thing\""
   *
   * [#not-implemented-hide:]
   *
   * @generated from field: repeated string node_context_params = 26;
   */
  nodeContextParams: string[];

  /**
   * Statically specified resources.
   *
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap.StaticResources static_resources = 2;
   */
  staticResources?: Bootstrap_StaticResources;

  /**
   * xDS configuration sources.
   *
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap.DynamicResources dynamic_resources = 3;
   */
  dynamicResources?: Bootstrap_DynamicResources;

  /**
   * Configuration for the cluster manager which owns all upstream clusters
   * within the server.
   *
   * @generated from field: envoy.config.bootstrap.v3.ClusterManager cluster_manager = 4;
   */
  clusterManager?: ClusterManager;

  /**
   * Health discovery service config option.
   * (:ref:`core.ApiConfigSource <envoy_v3_api_msg_config.core.v3.ApiConfigSource>`)
   *
   * @generated from field: envoy.config.core.v3.ApiConfigSource hds_config = 14;
   */
  hdsConfig?: ApiConfigSource;

  /**
   * Optional file system path to search for startup flag files.
   *
   * @generated from field: string flags_path = 5;
   */
  flagsPath: string;

  /**
   * Optional set of stats sinks.
   *
   * @generated from field: repeated envoy.config.metrics.v3.StatsSink stats_sinks = 6;
   */
  statsSinks: StatsSink[];

  /**
   * Options to control behaviors of deferred creation compatible stats.
   *
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap.DeferredStatOptions deferred_stat_options = 39;
   */
  deferredStatOptions?: Bootstrap_DeferredStatOptions;

  /**
   * Configuration for internal processing of stats.
   *
   * @generated from field: envoy.config.metrics.v3.StatsConfig stats_config = 13;
   */
  statsConfig?: StatsConfig;

  /**
   * Optional duration between flushes to configured stats sinks. For
   * performance reasons Envoy latches counters and only flushes counters and
   * gauges at a periodic interval. If not specified the default is 5000ms (5
   * seconds). Only one of ``stats_flush_interval`` or ``stats_flush_on_admin``
   * can be set.
   * Duration must be at least 1ms and at most 5 min.
   *
   * @generated from field: google.protobuf.Duration stats_flush_interval = 7;
   */
  statsFlushInterval?: Duration;

  /**
   * @generated from oneof envoy.config.bootstrap.v3.Bootstrap.stats_flush
   */
  statsFlush: {
    /**
     * Flush stats to sinks only when queried for on the admin interface. If set,
     * a flush timer is not created. Only one of ``stats_flush_on_admin`` or
     * ``stats_flush_interval`` can be set.
     *
     * @generated from field: bool stats_flush_on_admin = 29;
     */
    value: boolean;
    case: "statsFlushOnAdmin";
  } | { case: undefined; value?: undefined };

  /**
   * Optional watchdog configuration.
   * This is for a single watchdog configuration for the entire system.
   * Deprecated in favor of ``watchdogs`` which has finer granularity.
   *
   * @generated from field: envoy.config.bootstrap.v3.Watchdog watchdog = 8 [deprecated = true];
   * @deprecated
   */
  watchdog?: Watchdog;

  /**
   * Optional watchdogs configuration.
   * This is used for specifying different watchdogs for the different subsystems.
   * [#extension-category: envoy.guarddog_actions]
   *
   * @generated from field: envoy.config.bootstrap.v3.Watchdogs watchdogs = 27;
   */
  watchdogs?: Watchdogs;

  /**
   * Configuration for an external tracing provider.
   *
   * .. attention::
   *  This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
   *  <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider>`.
   *
   * @generated from field: envoy.config.trace.v3.Tracing tracing = 9 [deprecated = true];
   * @deprecated
   */
  tracing?: Tracing;

  /**
   * Configuration for the runtime configuration provider. If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   *
   * @generated from field: envoy.config.bootstrap.v3.LayeredRuntime layered_runtime = 17;
   */
  layeredRuntime?: LayeredRuntime;

  /**
   * Configuration for the local administration HTTP server.
   *
   * @generated from field: envoy.config.bootstrap.v3.Admin admin = 12;
   */
  admin?: Admin;

  /**
   * Optional overload manager configuration.
   *
   * @generated from field: envoy.config.overload.v3.OverloadManager overload_manager = 15;
   */
  overloadManager?: OverloadManager;

  /**
   * Enable :ref:`stats for event dispatcher <operations_performance>`, defaults to false.
   * Note that this records a value for each iteration of the event loop on every thread. This
   * should normally be minimal overhead, but when using
   * :ref:`statsd <envoy_v3_api_msg_config.metrics.v3.StatsdSink>`, it will send each observed value
   * over the wire individually because the statsd protocol doesn't have any way to represent a
   * histogram summary. Be aware that this can be a very large volume of data.
   *
   * @generated from field: bool enable_dispatcher_stats = 16;
   */
  enableDispatcherStats: boolean;

  /**
   * Optional string which will be used in lieu of x-envoy in prefixing headers.
   *
   * For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
   * transformed into x-foo-retry-on etc.
   *
   * Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
   * headers Envoy will trust for core code and core extensions only. Be VERY careful making
   * changes to this string, especially in multi-layer Envoy deployments or deployments using
   * extensions which are not upstream.
   *
   * @generated from field: string header_prefix = 18;
   */
  headerPrefix: string;

  /**
   * Optional proxy version which will be used to set the value of :ref:`server.version statistic
   * <server_statistics>` if specified. Envoy will not process this value, it will be sent as is to
   * :ref:`stats sinks <envoy_v3_api_msg_config.metrics.v3.StatsSink>`.
   *
   * @generated from field: google.protobuf.UInt64Value stats_server_version_override = 19;
   */
  statsServerVersionOverride?: bigint;

  /**
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * This may be overridden on a per-cluster basis in cds_config,
   * when :ref:`dns_resolvers <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolvers>` and
   * :ref:`use_tcp_for_dns_lookups <envoy_v3_api_field_config.cluster.v3.Cluster.use_tcp_for_dns_lookups>` are
   * specified.
   * This field is deprecated in favor of ``dns_resolution_config``
   * which aggregates all of the DNS resolver configuration in a single message.
   *
   * @generated from field: bool use_tcp_for_dns_lookups = 20 [deprecated = true];
   * @deprecated
   */
  useTcpForDnsLookups: boolean;

  /**
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This may be overridden on a per-cluster basis in cds_config, when
   * :ref:`dns_resolution_config <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolution_config>`
   * is specified.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.typed_dns_resolver_config>`.
   *
   * @generated from field: envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 30 [deprecated = true];
   * @deprecated
   */
  dnsResolutionConfig?: DnsResolutionConfig;

  /**
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig <envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig>`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.dns_resolution_config>`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 31;
   */
  typedDnsResolverConfig?: TypedExtensionConfig;

  /**
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * [#extension-category: envoy.bootstrap]
   *
   * @generated from field: repeated envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;
   */
  bootstrapExtensions: TypedExtensionConfig[];

  /**
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   *
   * @generated from field: repeated envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;
   */
  fatalActions: FatalAction[];

  /**
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this ``resource_authority``.
   * 2. ``resource_authority`` is compared against the authorities in any peer
   *    ``ConfigSource``. The peer ``ConfigSource`` is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer ``ConfigSource`` message is used.
   * 3. ``resource_authority`` is compared sequentially with the authorities in
   *    each configuration source in ``config_sources``. The first ``ConfigSource``
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    ``default_config_source`` is used.
   * 5. If ``default_config_source`` is not specified, resolution fails.
   * [#not-implemented-hide:]
   *
   * @generated from field: repeated envoy.config.core.v3.ConfigSource config_sources = 22;
   */
  configSources: ConfigSource[];

  /**
   * Default configuration source for xdstp:// URLs if all
   * other resolution fails.
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.config.core.v3.ConfigSource default_config_source = 23;
   */
  defaultConfigSource?: ConfigSource;

  /**
   * Optional overriding of default socket interface. The value must be the name of one of the
   * socket interface factories initialized through a bootstrap extension
   *
   * @generated from field: string default_socket_interface = 24;
   */
  defaultSocketInterface: string;

  /**
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name>`
   * field.
   * [#not-implemented-hide:]
   *
   * @generated from field: map<string, envoy.config.core.v3.TypedExtensionConfig> certificate_provider_instances = 25;
   */
  certificateProviderInstances: { [key: string]: TypedExtensionConfig };

  /**
   * Specifies a set of headers that need to be registered as inline header. This configuration
   * allows users to customize the inline headers on-demand at Envoy startup without modifying
   * Envoy's source code.
   *
   * Note that the 'set-cookie' header cannot be registered as inline header.
   *
   * @generated from field: repeated envoy.config.bootstrap.v3.CustomInlineHeader inline_headers = 32;
   */
  inlineHeaders: CustomInlineHeader[];

  /**
   * Optional path to a file with performance tracing data created by "Perfetto" SDK in binary
   * ProtoBuf format. The default value is "envoy.pftrace".
   *
   * @generated from field: string perf_tracing_file_path = 33;
   */
  perfTracingFilePath: string;

  /**
   * Optional overriding of default regex engine.
   * If the value is not specified, Google RE2 will be used by default.
   * [#extension-category: envoy.regex_engines]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig default_regex_engine = 34;
   */
  defaultRegexEngine?: TypedExtensionConfig;

  /**
   * Optional XdsResourcesDelegate configuration, which allows plugging custom logic into both
   * fetch and load events during xDS processing.
   * If a value is not specified, no XdsResourcesDelegate will be used.
   * TODO(abeyad): Add public-facing documentation.
   * [#not-implemented-hide:]
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig xds_delegate_extension = 35;
   */
  xdsDelegateExtension?: TypedExtensionConfig;

  /**
   * Optional XdsConfigTracker configuration, which allows tracking xDS responses in external components,
   * e.g., external tracer or monitor. It provides the process point when receive, ingest, or fail to
   * process xDS resources and messages. If a value is not specified, no XdsConfigTracker will be used.
   *
   * .. note::
   *
   *    There are no in-repo extensions currently, and the :repo:`XdsConfigTracker <envoy/config/xds_config_tracker.h>`
   *    interface should be implemented before using.
   *    See :repo:`xds_config_tracker_integration_test <test/integration/xds_config_tracker_integration_test.cc>`
   *    for an example usage of the interface.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig xds_config_tracker_extension = 36;
   */
  xdsConfigTrackerExtension?: TypedExtensionConfig;

  /**
   * [#not-implemented-hide:]
   * This controls the type of listener manager configured for Envoy. Currently
   * Envoy only supports ListenerManager for this field and Envoy Mobile
   * supports ApiListenerManager.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig listener_manager = 37;
   */
  listenerManager?: TypedExtensionConfig;

  /**
   * Optional application log configuration.
   *
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig application_log_config = 38;
   */
  applicationLogConfig?: Bootstrap_ApplicationLogConfig;

  constructor(data?: PartialMessage<Bootstrap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap;

  static equals(a: Bootstrap | PlainMessage<Bootstrap> | undefined, b: Bootstrap | PlainMessage<Bootstrap> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.StaticResources
 */
export declare class Bootstrap_StaticResources extends Message<Bootstrap_StaticResources> {
  /**
   * Static :ref:`Listeners <envoy_v3_api_msg_config.listener.v3.Listener>`. These listeners are
   * available regardless of LDS configuration.
   *
   * @generated from field: repeated envoy.config.listener.v3.Listener listeners = 1;
   */
  listeners: Listener[];

  /**
   * If a network based configuration source is specified for :ref:`cds_config
   * <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.DynamicResources.cds_config>`, it's necessary
   * to have some initial cluster definitions available to allow Envoy to know
   * how to speak to the management server. These cluster definitions may not
   * use :ref:`EDS <arch_overview_dynamic_config_eds>` (i.e. they should be static
   * IP or DNS-based).
   *
   * @generated from field: repeated envoy.config.cluster.v3.Cluster clusters = 2;
   */
  clusters: Cluster[];

  /**
   * These static secrets can be used by :ref:`SdsSecretConfig
   * <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.SdsSecretConfig>`
   *
   * @generated from field: repeated envoy.extensions.transport_sockets.tls.v3.Secret secrets = 3;
   */
  secrets: Secret[];

  constructor(data?: PartialMessage<Bootstrap_StaticResources>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap.StaticResources";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_StaticResources;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_StaticResources;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_StaticResources;

  static equals(a: Bootstrap_StaticResources | PlainMessage<Bootstrap_StaticResources> | undefined, b: Bootstrap_StaticResources | PlainMessage<Bootstrap_StaticResources> | undefined): boolean;
}

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.DynamicResources
 */
export declare class Bootstrap_DynamicResources extends Message<Bootstrap_DynamicResources> {
  /**
   * All :ref:`Listeners <envoy_v3_api_msg_config.listener.v3.Listener>` are provided by a single
   * :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
   *
   * @generated from field: envoy.config.core.v3.ConfigSource lds_config = 1;
   */
  ldsConfig?: ConfigSource;

  /**
   * xdstp:// resource locator for listener collection.
   * [#not-implemented-hide:]
   *
   * @generated from field: string lds_resources_locator = 5;
   */
  ldsResourcesLocator: string;

  /**
   * All post-bootstrap :ref:`Cluster <envoy_v3_api_msg_config.cluster.v3.Cluster>` definitions are
   * provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
   * configuration source.
   *
   * @generated from field: envoy.config.core.v3.ConfigSource cds_config = 2;
   */
  cdsConfig?: ConfigSource;

  /**
   * xdstp:// resource locator for cluster collection.
   * [#not-implemented-hide:]
   *
   * @generated from field: string cds_resources_locator = 6;
   */
  cdsResourcesLocator: string;

  /**
   * A single :ref:`ADS <config_overview_ads>` source may be optionally
   * specified. This must have :ref:`api_type
   * <envoy_v3_api_field_config.core.v3.ApiConfigSource.api_type>` :ref:`GRPC
   * <envoy_v3_api_enum_value_config.core.v3.ApiConfigSource.ApiType.GRPC>`. Only
   * :ref:`ConfigSources <envoy_v3_api_msg_config.core.v3.ConfigSource>` that have
   * the :ref:`ads <envoy_v3_api_field_config.core.v3.ConfigSource.ads>` field set will be
   * streamed on the ADS channel.
   *
   * @generated from field: envoy.config.core.v3.ApiConfigSource ads_config = 3;
   */
  adsConfig?: ApiConfigSource;

  constructor(data?: PartialMessage<Bootstrap_DynamicResources>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap.DynamicResources";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_DynamicResources;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_DynamicResources;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_DynamicResources;

  static equals(a: Bootstrap_DynamicResources | PlainMessage<Bootstrap_DynamicResources> | undefined, b: Bootstrap_DynamicResources | PlainMessage<Bootstrap_DynamicResources> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig
 */
export declare class Bootstrap_ApplicationLogConfig extends Message<Bootstrap_ApplicationLogConfig> {
  /**
   * Optional field to set the application logs format. If this field is set, it will override
   * the default log format. Setting both this field and :option:`--log-format` command line
   * option is not allowed, and will cause a bootstrap error.
   *
   * @generated from field: envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat log_format = 1;
   */
  logFormat?: Bootstrap_ApplicationLogConfig_LogFormat;

  constructor(data?: PartialMessage<Bootstrap_ApplicationLogConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_ApplicationLogConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_ApplicationLogConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_ApplicationLogConfig;

  static equals(a: Bootstrap_ApplicationLogConfig | PlainMessage<Bootstrap_ApplicationLogConfig> | undefined, b: Bootstrap_ApplicationLogConfig | PlainMessage<Bootstrap_ApplicationLogConfig> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat
 */
export declare class Bootstrap_ApplicationLogConfig_LogFormat extends Message<Bootstrap_ApplicationLogConfig_LogFormat> {
  /**
   * @generated from oneof envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat.log_format
   */
  logFormat: {
    /**
     * Flush application logs in JSON format. The configured JSON struct can
     * support all the format flags specified in the :option:`--log-format`
     * command line options section, except for the ``%v`` and ``%_`` flags.
     *
     * @generated from field: google.protobuf.Struct json_format = 1;
     */
    value: Struct;
    case: "jsonFormat";
  } | {
    /**
     * Flush application log in a format defined by a string. The text format
     * can support all the format flags specified in the :option:`--log-format`
     * command line option section.
     *
     * @generated from field: string text_format = 2;
     */
    value: string;
    case: "textFormat";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Bootstrap_ApplicationLogConfig_LogFormat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_ApplicationLogConfig_LogFormat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_ApplicationLogConfig_LogFormat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_ApplicationLogConfig_LogFormat;

  static equals(a: Bootstrap_ApplicationLogConfig_LogFormat | PlainMessage<Bootstrap_ApplicationLogConfig_LogFormat> | undefined, b: Bootstrap_ApplicationLogConfig_LogFormat | PlainMessage<Bootstrap_ApplicationLogConfig_LogFormat> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.DeferredStatOptions
 */
export declare class Bootstrap_DeferredStatOptions extends Message<Bootstrap_DeferredStatOptions> {
  /**
   * When the flag is enabled, Envoy will lazily initialize a subset of the stats (see below).
   * This will save memory and CPU cycles when creating the objects that own these stats, if those
   * stats are never referenced throughout the lifetime of the process. However, it will incur additional
   * memory overhead for these objects, and a small increase of CPU usage when a at least one of the stats
   * is updated for the first time.
   * Groups of stats that will be lazily initialized:
   * - Cluster traffic stats: a subgroup of the :ref:`cluster statistics <config_cluster_manager_cluster_stats>`
   * that are used when requests are routed to the cluster.
   *
   * @generated from field: bool enable_deferred_creation_stats = 1;
   */
  enableDeferredCreationStats: boolean;

  constructor(data?: PartialMessage<Bootstrap_DeferredStatOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Bootstrap.DeferredStatOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bootstrap_DeferredStatOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bootstrap_DeferredStatOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bootstrap_DeferredStatOptions;

  static equals(a: Bootstrap_DeferredStatOptions | PlainMessage<Bootstrap_DeferredStatOptions> | undefined, b: Bootstrap_DeferredStatOptions | PlainMessage<Bootstrap_DeferredStatOptions> | undefined): boolean;
}

/**
 * Administration interface :ref:`operations documentation
 * <operations_admin_interface>`.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.bootstrap.v3.Admin
 */
export declare class Admin extends Message<Admin> {
  /**
   * Configuration for :ref:`access logs <arch_overview_access_logs>`
   * emitted by the administration server.
   *
   * @generated from field: repeated envoy.config.accesslog.v3.AccessLog access_log = 5;
   */
  accessLog: AccessLog[];

  /**
   * The path to write the access log for the administration server. If no
   * access log is desired specify ‘/dev/null’. This is only required if
   * :ref:`address <envoy_v3_api_field_config.bootstrap.v3.Admin.address>` is set.
   * Deprecated in favor of ``access_log`` which offers more options.
   *
   * @generated from field: string access_log_path = 1 [deprecated = true];
   * @deprecated
   */
  accessLogPath: string;

  /**
   * The cpu profiler output path for the administration server. If no profile
   * path is specified, the default is ‘/var/log/envoy/envoy.prof’.
   *
   * @generated from field: string profile_path = 2;
   */
  profilePath: string;

  /**
   * The TCP address that the administration server will listen on.
   * If not specified, Envoy will not start an administration server.
   *
   * @generated from field: envoy.config.core.v3.Address address = 3;
   */
  address?: Address;

  /**
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   *
   * @generated from field: repeated envoy.config.core.v3.SocketOption socket_options = 4;
   */
  socketOptions: SocketOption[];

  /**
   * Indicates whether :ref:`global_downstream_max_connections <config_overload_manager_limiting_connections>`
   * should apply to the admin interface or not.
   *
   * @generated from field: bool ignore_global_conn_limit = 6;
   */
  ignoreGlobalConnLimit: boolean;

  constructor(data?: PartialMessage<Admin>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Admin";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Admin;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Admin;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Admin;

  static equals(a: Admin | PlainMessage<Admin> | undefined, b: Admin | PlainMessage<Admin> | undefined): boolean;
}

/**
 * Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.
 *
 * @generated from message envoy.config.bootstrap.v3.ClusterManager
 */
export declare class ClusterManager extends Message<ClusterManager> {
  /**
   * Name of the local cluster (i.e., the cluster that owns the Envoy running
   * this configuration). In order to enable :ref:`zone aware routing
   * <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
   * If ``local_cluster_name`` is defined then :ref:`clusters
   * <envoy_v3_api_msg_config.cluster.v3.Cluster>` must be defined in the :ref:`Bootstrap
   * static cluster resources
   * <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.StaticResources.clusters>`. This is unrelated to
   * the :option:`--service-cluster` option which does not `affect zone aware
   * routing <https://github.com/envoyproxy/envoy/issues/774>`_.
   *
   * @generated from field: string local_cluster_name = 1;
   */
  localClusterName: string;

  /**
   * Optional global configuration for outlier detection.
   *
   * @generated from field: envoy.config.bootstrap.v3.ClusterManager.OutlierDetection outlier_detection = 2;
   */
  outlierDetection?: ClusterManager_OutlierDetection;

  /**
   * Optional configuration used to bind newly established upstream connections.
   * This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
   *
   * @generated from field: envoy.config.core.v3.BindConfig upstream_bind_config = 3;
   */
  upstreamBindConfig?: BindConfig;

  /**
   * A management server endpoint to stream load stats to via
   * ``StreamLoadStats``. This must have :ref:`api_type
   * <envoy_v3_api_field_config.core.v3.ApiConfigSource.api_type>` :ref:`GRPC
   * <envoy_v3_api_enum_value_config.core.v3.ApiConfigSource.ApiType.GRPC>`.
   *
   * @generated from field: envoy.config.core.v3.ApiConfigSource load_stats_config = 4;
   */
  loadStatsConfig?: ApiConfigSource;

  constructor(data?: PartialMessage<ClusterManager>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.ClusterManager";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterManager;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterManager;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterManager;

  static equals(a: ClusterManager | PlainMessage<ClusterManager> | undefined, b: ClusterManager | PlainMessage<ClusterManager> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.ClusterManager.OutlierDetection
 */
export declare class ClusterManager_OutlierDetection extends Message<ClusterManager_OutlierDetection> {
  /**
   * Specifies the path to the outlier event log.
   *
   * @generated from field: string event_log_path = 1;
   */
  eventLogPath: string;

  /**
   * [#not-implemented-hide:]
   * The gRPC service for the outlier detection event service.
   * If empty, outlier detection events won't be sent to a remote endpoint.
   *
   * @generated from field: envoy.config.core.v3.EventServiceConfig event_service = 2;
   */
  eventService?: EventServiceConfig;

  constructor(data?: PartialMessage<ClusterManager_OutlierDetection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.ClusterManager.OutlierDetection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterManager_OutlierDetection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterManager_OutlierDetection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterManager_OutlierDetection;

  static equals(a: ClusterManager_OutlierDetection | PlainMessage<ClusterManager_OutlierDetection> | undefined, b: ClusterManager_OutlierDetection | PlainMessage<ClusterManager_OutlierDetection> | undefined): boolean;
}

/**
 * Allows you to specify different watchdog configs for different subsystems.
 * This allows finer tuned policies for the watchdog. If a subsystem is omitted
 * the default values for that system will be used.
 *
 * @generated from message envoy.config.bootstrap.v3.Watchdogs
 */
export declare class Watchdogs extends Message<Watchdogs> {
  /**
   * Watchdog for the main thread.
   *
   * @generated from field: envoy.config.bootstrap.v3.Watchdog main_thread_watchdog = 1;
   */
  mainThreadWatchdog?: Watchdog;

  /**
   * Watchdog for the worker threads.
   *
   * @generated from field: envoy.config.bootstrap.v3.Watchdog worker_watchdog = 2;
   */
  workerWatchdog?: Watchdog;

  constructor(data?: PartialMessage<Watchdogs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Watchdogs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Watchdogs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Watchdogs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Watchdogs;

  static equals(a: Watchdogs | PlainMessage<Watchdogs> | undefined, b: Watchdogs | PlainMessage<Watchdogs> | undefined): boolean;
}

/**
 * Envoy process watchdog configuration. When configured, this monitors for
 * nonresponsive threads and kills the process after the configured thresholds.
 * See the :ref:`watchdog documentation <operations_performance_watchdog>` for more information.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.config.bootstrap.v3.Watchdog
 */
export declare class Watchdog extends Message<Watchdog> {
  /**
   * Register actions that will fire on given WatchDog events.
   * See ``WatchDogAction`` for priority of events.
   *
   * @generated from field: repeated envoy.config.bootstrap.v3.Watchdog.WatchdogAction actions = 7;
   */
  actions: Watchdog_WatchdogAction[];

  /**
   * The duration after which Envoy counts a nonresponsive thread in the
   * ``watchdog_miss`` statistic. If not specified the default is 200ms.
   *
   * @generated from field: google.protobuf.Duration miss_timeout = 1;
   */
  missTimeout?: Duration;

  /**
   * The duration after which Envoy counts a nonresponsive thread in the
   * ``watchdog_mega_miss`` statistic. If not specified the default is
   * 1000ms.
   *
   * @generated from field: google.protobuf.Duration megamiss_timeout = 2;
   */
  megamissTimeout?: Duration;

  /**
   * If a watched thread has been nonresponsive for this duration, assume a
   * programming error and kill the entire Envoy process. Set to 0 to disable
   * kill behavior. If not specified the default is 0 (disabled).
   *
   * @generated from field: google.protobuf.Duration kill_timeout = 3;
   */
  killTimeout?: Duration;

  /**
   * Defines the maximum jitter used to adjust the ``kill_timeout`` if ``kill_timeout`` is
   * enabled. Enabling this feature would help to reduce risk of synchronized
   * watchdog kill events across proxies due to external triggers. Set to 0 to
   * disable. If not specified the default is 0 (disabled).
   *
   * @generated from field: google.protobuf.Duration max_kill_timeout_jitter = 6;
   */
  maxKillTimeoutJitter?: Duration;

  /**
   * If ``max(2, ceil(registered_threads * Fraction(*multikill_threshold*)))``
   * threads have been nonresponsive for at least this duration kill the entire
   * Envoy process. Set to 0 to disable this behavior. If not specified the
   * default is 0 (disabled).
   *
   * @generated from field: google.protobuf.Duration multikill_timeout = 4;
   */
  multikillTimeout?: Duration;

  /**
   * Sets the threshold for ``multikill_timeout`` in terms of the percentage of
   * nonresponsive threads required for the ``multikill_timeout``.
   * If not specified the default is 0.
   *
   * @generated from field: envoy.type.v3.Percent multikill_threshold = 5;
   */
  multikillThreshold?: Percent;

  constructor(data?: PartialMessage<Watchdog>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Watchdog";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Watchdog;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Watchdog;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Watchdog;

  static equals(a: Watchdog | PlainMessage<Watchdog> | undefined, b: Watchdog | PlainMessage<Watchdog> | undefined): boolean;
}

/**
 * @generated from message envoy.config.bootstrap.v3.Watchdog.WatchdogAction
 */
export declare class Watchdog_WatchdogAction extends Message<Watchdog_WatchdogAction> {
  /**
   * Extension specific configuration for the action.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig config = 1;
   */
  config?: TypedExtensionConfig;

  /**
   * @generated from field: envoy.config.bootstrap.v3.Watchdog.WatchdogAction.WatchdogEvent event = 2;
   */
  event: Watchdog_WatchdogAction_WatchdogEvent;

  constructor(data?: PartialMessage<Watchdog_WatchdogAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Watchdog.WatchdogAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Watchdog_WatchdogAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Watchdog_WatchdogAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Watchdog_WatchdogAction;

  static equals(a: Watchdog_WatchdogAction | PlainMessage<Watchdog_WatchdogAction> | undefined, b: Watchdog_WatchdogAction | PlainMessage<Watchdog_WatchdogAction> | undefined): boolean;
}

/**
 * The events are fired in this order: KILL, MULTIKILL, MEGAMISS, MISS.
 * Within an event type, actions execute in the order they are configured.
 * For KILL/MULTIKILL there is a default PANIC that will run after the
 * registered actions and kills the process if it wasn't already killed.
 * It might be useful to specify several debug actions, and possibly an
 * alternate FATAL action.
 *
 * @generated from enum envoy.config.bootstrap.v3.Watchdog.WatchdogAction.WatchdogEvent
 */
export declare enum Watchdog_WatchdogAction_WatchdogEvent {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: KILL = 1;
   */
  KILL = 1,

  /**
   * @generated from enum value: MULTIKILL = 2;
   */
  MULTIKILL = 2,

  /**
   * @generated from enum value: MEGAMISS = 3;
   */
  MEGAMISS = 3,

  /**
   * @generated from enum value: MISS = 4;
   */
  MISS = 4,
}

/**
 * Fatal actions to run while crashing. Actions can be safe (meaning they are
 * async-signal safe) or unsafe. We run all safe actions before we run unsafe actions.
 * If using an unsafe action that could get stuck or deadlock, it important to
 * have an out of band system to terminate the process.
 *
 * The interface for the extension is ``Envoy::Server::Configuration::FatalAction``.
 * ``FatalAction`` extensions live in the ``envoy.extensions.fatal_actions`` API
 * namespace.
 *
 * @generated from message envoy.config.bootstrap.v3.FatalAction
 */
export declare class FatalAction extends Message<FatalAction> {
  /**
   * Extension specific configuration for the action. It's expected to conform
   * to the ``Envoy::Server::Configuration::FatalAction`` interface.
   *
   * @generated from field: envoy.config.core.v3.TypedExtensionConfig config = 1;
   */
  config?: TypedExtensionConfig;

  constructor(data?: PartialMessage<FatalAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.FatalAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FatalAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FatalAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FatalAction;

  static equals(a: FatalAction | PlainMessage<FatalAction> | undefined, b: FatalAction | PlainMessage<FatalAction> | undefined): boolean;
}

/**
 * Runtime :ref:`configuration overview <config_runtime>` (deprecated).
 *
 * @generated from message envoy.config.bootstrap.v3.Runtime
 */
export declare class Runtime extends Message<Runtime> {
  /**
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   *
   * @generated from field: string symlink_root = 1;
   */
  symlinkRoot: string;

  /**
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   *
   * @generated from field: string subdirectory = 2;
   */
  subdirectory: string;

  /**
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   *
   * @generated from field: string override_subdirectory = 3;
   */
  overrideSubdirectory: string;

  /**
   * Static base runtime. This will be :ref:`overridden
   * <config_runtime_layering>` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding <config_runtime_proto_json>`.
   *
   * @generated from field: google.protobuf.Struct base = 4;
   */
  base?: Struct;

  constructor(data?: PartialMessage<Runtime>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.Runtime";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Runtime;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Runtime;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Runtime;

  static equals(a: Runtime | PlainMessage<Runtime> | undefined, b: Runtime | PlainMessage<Runtime> | undefined): boolean;
}

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer
 */
export declare class RuntimeLayer extends Message<RuntimeLayer> {
  /**
   * Descriptive name for the runtime layer. This is only used for the runtime
   * :http:get:`/runtime` output.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof envoy.config.bootstrap.v3.RuntimeLayer.layer_specifier
   */
  layerSpecifier: {
    /**
     * :ref:`Static runtime <config_runtime_bootstrap>` layer.
     * This follows the :ref:`runtime protobuf JSON representation encoding
     * <config_runtime_proto_json>`. Unlike static xDS resources, this static
     * layer is overridable by later layers in the runtime virtual filesystem.
     *
     * @generated from field: google.protobuf.Struct static_layer = 2;
     */
    value: Struct;
    case: "staticLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer disk_layer = 3;
     */
    value: RuntimeLayer_DiskLayer;
    case: "diskLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer admin_layer = 4;
     */
    value: RuntimeLayer_AdminLayer;
    case: "adminLayer";
  } | {
    /**
     * @generated from field: envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer rtds_layer = 5;
     */
    value: RuntimeLayer_RtdsLayer;
    case: "rtdsLayer";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RuntimeLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.RuntimeLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer;

  static equals(a: RuntimeLayer | PlainMessage<RuntimeLayer> | undefined, b: RuntimeLayer | PlainMessage<RuntimeLayer> | undefined): boolean;
}

/**
 * :ref:`Disk runtime <config_runtime_local_disk>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer
 */
export declare class RuntimeLayer_DiskLayer extends Message<RuntimeLayer_DiskLayer> {
  /**
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link.
   * Envoy will watch the location for changes and reload the file system tree
   * when they happen. See documentation on runtime :ref:`atomicity
   * <config_runtime_atomicity>` for further details on how reloads are
   * treated.
   *
   * @generated from field: string symlink_root = 1;
   */
  symlinkRoot: string;

  /**
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   *
   * @generated from field: string subdirectory = 3;
   */
  subdirectory: string;

  /**
   * :ref:`Append <config_runtime_local_disk_service_cluster_subdirs>` the
   * service cluster to the path under symlink root.
   *
   * @generated from field: bool append_service_cluster = 2;
   */
  appendServiceCluster: boolean;

  constructor(data?: PartialMessage<RuntimeLayer_DiskLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_DiskLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_DiskLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_DiskLayer;

  static equals(a: RuntimeLayer_DiskLayer | PlainMessage<RuntimeLayer_DiskLayer> | undefined, b: RuntimeLayer_DiskLayer | PlainMessage<RuntimeLayer_DiskLayer> | undefined): boolean;
}

/**
 * :ref:`Admin console runtime <config_runtime_admin>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer
 */
export declare class RuntimeLayer_AdminLayer extends Message<RuntimeLayer_AdminLayer> {
  constructor(data?: PartialMessage<RuntimeLayer_AdminLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_AdminLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_AdminLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_AdminLayer;

  static equals(a: RuntimeLayer_AdminLayer | PlainMessage<RuntimeLayer_AdminLayer> | undefined, b: RuntimeLayer_AdminLayer | PlainMessage<RuntimeLayer_AdminLayer> | undefined): boolean;
}

/**
 * :ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer
 */
export declare class RuntimeLayer_RtdsLayer extends Message<RuntimeLayer_RtdsLayer> {
  /**
   * Resource to subscribe to at ``rtds_config`` for the RTDS layer.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * RTDS configuration source.
   *
   * @generated from field: envoy.config.core.v3.ConfigSource rtds_config = 2;
   */
  rtdsConfig?: ConfigSource;

  constructor(data?: PartialMessage<RuntimeLayer_RtdsLayer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeLayer_RtdsLayer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeLayer_RtdsLayer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeLayer_RtdsLayer;

  static equals(a: RuntimeLayer_RtdsLayer | PlainMessage<RuntimeLayer_RtdsLayer> | undefined, b: RuntimeLayer_RtdsLayer | PlainMessage<RuntimeLayer_RtdsLayer> | undefined): boolean;
}

/**
 * Runtime :ref:`configuration overview <config_runtime>`.
 *
 * @generated from message envoy.config.bootstrap.v3.LayeredRuntime
 */
export declare class LayeredRuntime extends Message<LayeredRuntime> {
  /**
   * The :ref:`layers <config_runtime_layering>` of the runtime. This is ordered
   * such that later layers in the list overlay earlier entries.
   *
   * @generated from field: repeated envoy.config.bootstrap.v3.RuntimeLayer layers = 1;
   */
  layers: RuntimeLayer[];

  constructor(data?: PartialMessage<LayeredRuntime>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.LayeredRuntime";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LayeredRuntime;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LayeredRuntime;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LayeredRuntime;

  static equals(a: LayeredRuntime | PlainMessage<LayeredRuntime> | undefined, b: LayeredRuntime | PlainMessage<LayeredRuntime> | undefined): boolean;
}

/**
 * Used to specify the header that needs to be registered as an inline header.
 *
 * If request or response contain multiple headers with the same name and the header
 * name is registered as an inline header. Then multiple headers will be folded
 * into one, and multiple header values will be concatenated by a suitable delimiter.
 * The delimiter is generally a comma.
 *
 * For example, if 'foo' is registered as an inline header, and the headers contains
 * the following two headers:
 *
 * .. code-block:: text
 *
 *   foo: bar
 *   foo: eep
 *
 * Then they will eventually be folded into:
 *
 * .. code-block:: text
 *
 *   foo: bar, eep
 *
 * Inline headers provide O(1) search performance, but each inline header imposes
 * an additional memory overhead on all instances of the corresponding type of
 * HeaderMap or TrailerMap.
 *
 * @generated from message envoy.config.bootstrap.v3.CustomInlineHeader
 */
export declare class CustomInlineHeader extends Message<CustomInlineHeader> {
  /**
   * The name of the header that is expected to be set as the inline header.
   *
   * @generated from field: string inline_header_name = 1;
   */
  inlineHeaderName: string;

  /**
   * The type of the header that is expected to be set as the inline header.
   *
   * @generated from field: envoy.config.bootstrap.v3.CustomInlineHeader.InlineHeaderType inline_header_type = 2;
   */
  inlineHeaderType: CustomInlineHeader_InlineHeaderType;

  constructor(data?: PartialMessage<CustomInlineHeader>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.bootstrap.v3.CustomInlineHeader";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomInlineHeader;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomInlineHeader;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomInlineHeader;

  static equals(a: CustomInlineHeader | PlainMessage<CustomInlineHeader> | undefined, b: CustomInlineHeader | PlainMessage<CustomInlineHeader> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.bootstrap.v3.CustomInlineHeader.InlineHeaderType
 */
export declare enum CustomInlineHeader_InlineHeaderType {
  /**
   * @generated from enum value: REQUEST_HEADER = 0;
   */
  REQUEST_HEADER = 0,

  /**
   * @generated from enum value: REQUEST_TRAILER = 1;
   */
  REQUEST_TRAILER = 1,

  /**
   * @generated from enum value: RESPONSE_HEADER = 2;
   */
  RESPONSE_HEADER = 2,

  /**
   * @generated from enum value: RESPONSE_TRAILER = 3;
   */
  RESPONSE_TRAILER = 3,
}

