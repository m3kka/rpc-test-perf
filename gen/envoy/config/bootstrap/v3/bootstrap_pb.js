// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/bootstrap/v3/bootstrap.proto (package envoy.config.bootstrap.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Struct, UInt64Value } from "@bufbuild/protobuf";
import { Node } from "../../core/v3/base_pb.js";
import { ApiConfigSource, ConfigSource } from "../../core/v3/config_source_pb.js";
import { StatsConfig, StatsSink } from "../../metrics/v3/stats_pb.js";
import { Tracing } from "../../trace/v3/http_tracer_pb.js";
import { OverloadManager } from "../../overload/v3/overload_pb.js";
import { DnsResolutionConfig } from "../../core/v3/resolver_pb.js";
import { TypedExtensionConfig } from "../../core/v3/extension_pb.js";
import { Listener } from "../../listener/v3/listener_pb.js";
import { Cluster } from "../../cluster/v3/cluster_pb.js";
import { Secret } from "../../../extensions/transport_sockets/tls/v3/secret_pb.js";
import { AccessLog } from "../../accesslog/v3/accesslog_pb.js";
import { Address, BindConfig } from "../../core/v3/address_pb.js";
import { SocketOption } from "../../core/v3/socket_option_pb.js";
import { EventServiceConfig } from "../../core/v3/event_service_config_pb.js";
import { Percent } from "../../../type/v3/percent_pb.js";

/**
 * Bootstrap :ref:`configuration overview <config_overview_bootstrap>`.
 * [#next-free-field: 40]
 *
 * @generated from message envoy.config.bootstrap.v3.Bootstrap
 */
export const Bootstrap = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 26, name: "node_context_params", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "static_resources", kind: "message", T: Bootstrap_StaticResources },
    { no: 3, name: "dynamic_resources", kind: "message", T: Bootstrap_DynamicResources },
    { no: 4, name: "cluster_manager", kind: "message", T: ClusterManager },
    { no: 14, name: "hds_config", kind: "message", T: ApiConfigSource },
    { no: 5, name: "flags_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "stats_sinks", kind: "message", T: StatsSink, repeated: true },
    { no: 39, name: "deferred_stat_options", kind: "message", T: Bootstrap_DeferredStatOptions },
    { no: 13, name: "stats_config", kind: "message", T: StatsConfig },
    { no: 7, name: "stats_flush_interval", kind: "message", T: Duration },
    { no: 29, name: "stats_flush_on_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "stats_flush" },
    { no: 8, name: "watchdog", kind: "message", T: Watchdog },
    { no: 27, name: "watchdogs", kind: "message", T: Watchdogs },
    { no: 9, name: "tracing", kind: "message", T: Tracing },
    { no: 17, name: "layered_runtime", kind: "message", T: LayeredRuntime },
    { no: 12, name: "admin", kind: "message", T: Admin },
    { no: 15, name: "overload_manager", kind: "message", T: OverloadManager },
    { no: 16, name: "enable_dispatcher_stats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "header_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "stats_server_version_override", kind: "message", T: UInt64Value },
    { no: 20, name: "use_tcp_for_dns_lookups", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "dns_resolution_config", kind: "message", T: DnsResolutionConfig },
    { no: 31, name: "typed_dns_resolver_config", kind: "message", T: TypedExtensionConfig },
    { no: 21, name: "bootstrap_extensions", kind: "message", T: TypedExtensionConfig, repeated: true },
    { no: 28, name: "fatal_actions", kind: "message", T: FatalAction, repeated: true },
    { no: 22, name: "config_sources", kind: "message", T: ConfigSource, repeated: true },
    { no: 23, name: "default_config_source", kind: "message", T: ConfigSource },
    { no: 24, name: "default_socket_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "certificate_provider_instances", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TypedExtensionConfig} },
    { no: 32, name: "inline_headers", kind: "message", T: CustomInlineHeader, repeated: true },
    { no: 33, name: "perf_tracing_file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "default_regex_engine", kind: "message", T: TypedExtensionConfig },
    { no: 35, name: "xds_delegate_extension", kind: "message", T: TypedExtensionConfig },
    { no: 36, name: "xds_config_tracker_extension", kind: "message", T: TypedExtensionConfig },
    { no: 37, name: "listener_manager", kind: "message", T: TypedExtensionConfig },
    { no: 38, name: "application_log_config", kind: "message", T: Bootstrap_ApplicationLogConfig },
  ],
);

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.StaticResources
 */
export const Bootstrap_StaticResources = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap.StaticResources",
  () => [
    { no: 1, name: "listeners", kind: "message", T: Listener, repeated: true },
    { no: 2, name: "clusters", kind: "message", T: Cluster, repeated: true },
    { no: 3, name: "secrets", kind: "message", T: Secret, repeated: true },
  ],
  {localName: "Bootstrap_StaticResources"},
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.DynamicResources
 */
export const Bootstrap_DynamicResources = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap.DynamicResources",
  () => [
    { no: 1, name: "lds_config", kind: "message", T: ConfigSource },
    { no: 5, name: "lds_resources_locator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cds_config", kind: "message", T: ConfigSource },
    { no: 6, name: "cds_resources_locator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ads_config", kind: "message", T: ApiConfigSource },
  ],
  {localName: "Bootstrap_DynamicResources"},
);

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig
 */
export const Bootstrap_ApplicationLogConfig = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig",
  () => [
    { no: 1, name: "log_format", kind: "message", T: Bootstrap_ApplicationLogConfig_LogFormat },
  ],
  {localName: "Bootstrap_ApplicationLogConfig"},
);

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat
 */
export const Bootstrap_ApplicationLogConfig_LogFormat = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap.ApplicationLogConfig.LogFormat",
  () => [
    { no: 1, name: "json_format", kind: "message", T: Struct, oneof: "log_format" },
    { no: 2, name: "text_format", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "log_format" },
  ],
  {localName: "Bootstrap_ApplicationLogConfig_LogFormat"},
);

/**
 * @generated from message envoy.config.bootstrap.v3.Bootstrap.DeferredStatOptions
 */
export const Bootstrap_DeferredStatOptions = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Bootstrap.DeferredStatOptions",
  () => [
    { no: 1, name: "enable_deferred_creation_stats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "Bootstrap_DeferredStatOptions"},
);

/**
 * Administration interface :ref:`operations documentation
 * <operations_admin_interface>`.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.bootstrap.v3.Admin
 */
export const Admin = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Admin",
  () => [
    { no: 5, name: "access_log", kind: "message", T: AccessLog, repeated: true },
    { no: 1, name: "access_log_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "message", T: Address },
    { no: 4, name: "socket_options", kind: "message", T: SocketOption, repeated: true },
    { no: 6, name: "ignore_global_conn_limit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.
 *
 * @generated from message envoy.config.bootstrap.v3.ClusterManager
 */
export const ClusterManager = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.ClusterManager",
  () => [
    { no: 1, name: "local_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "outlier_detection", kind: "message", T: ClusterManager_OutlierDetection },
    { no: 3, name: "upstream_bind_config", kind: "message", T: BindConfig },
    { no: 4, name: "load_stats_config", kind: "message", T: ApiConfigSource },
  ],
);

/**
 * @generated from message envoy.config.bootstrap.v3.ClusterManager.OutlierDetection
 */
export const ClusterManager_OutlierDetection = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.ClusterManager.OutlierDetection",
  () => [
    { no: 1, name: "event_log_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_service", kind: "message", T: EventServiceConfig },
  ],
  {localName: "ClusterManager_OutlierDetection"},
);

/**
 * Allows you to specify different watchdog configs for different subsystems.
 * This allows finer tuned policies for the watchdog. If a subsystem is omitted
 * the default values for that system will be used.
 *
 * @generated from message envoy.config.bootstrap.v3.Watchdogs
 */
export const Watchdogs = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Watchdogs",
  () => [
    { no: 1, name: "main_thread_watchdog", kind: "message", T: Watchdog },
    { no: 2, name: "worker_watchdog", kind: "message", T: Watchdog },
  ],
);

/**
 * Envoy process watchdog configuration. When configured, this monitors for
 * nonresponsive threads and kills the process after the configured thresholds.
 * See the :ref:`watchdog documentation <operations_performance_watchdog>` for more information.
 * [#next-free-field: 8]
 *
 * @generated from message envoy.config.bootstrap.v3.Watchdog
 */
export const Watchdog = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Watchdog",
  () => [
    { no: 7, name: "actions", kind: "message", T: Watchdog_WatchdogAction, repeated: true },
    { no: 1, name: "miss_timeout", kind: "message", T: Duration },
    { no: 2, name: "megamiss_timeout", kind: "message", T: Duration },
    { no: 3, name: "kill_timeout", kind: "message", T: Duration },
    { no: 6, name: "max_kill_timeout_jitter", kind: "message", T: Duration },
    { no: 4, name: "multikill_timeout", kind: "message", T: Duration },
    { no: 5, name: "multikill_threshold", kind: "message", T: Percent },
  ],
);

/**
 * @generated from message envoy.config.bootstrap.v3.Watchdog.WatchdogAction
 */
export const Watchdog_WatchdogAction = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Watchdog.WatchdogAction",
  () => [
    { no: 1, name: "config", kind: "message", T: TypedExtensionConfig },
    { no: 2, name: "event", kind: "enum", T: proto3.getEnumType(Watchdog_WatchdogAction_WatchdogEvent) },
  ],
  {localName: "Watchdog_WatchdogAction"},
);

/**
 * The events are fired in this order: KILL, MULTIKILL, MEGAMISS, MISS.
 * Within an event type, actions execute in the order they are configured.
 * For KILL/MULTIKILL there is a default PANIC that will run after the
 * registered actions and kills the process if it wasn't already killed.
 * It might be useful to specify several debug actions, and possibly an
 * alternate FATAL action.
 *
 * @generated from enum envoy.config.bootstrap.v3.Watchdog.WatchdogAction.WatchdogEvent
 */
export const Watchdog_WatchdogAction_WatchdogEvent = proto3.makeEnum(
  "envoy.config.bootstrap.v3.Watchdog.WatchdogAction.WatchdogEvent",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "KILL"},
    {no: 2, name: "MULTIKILL"},
    {no: 3, name: "MEGAMISS"},
    {no: 4, name: "MISS"},
  ],
);

/**
 * Fatal actions to run while crashing. Actions can be safe (meaning they are
 * async-signal safe) or unsafe. We run all safe actions before we run unsafe actions.
 * If using an unsafe action that could get stuck or deadlock, it important to
 * have an out of band system to terminate the process.
 *
 * The interface for the extension is ``Envoy::Server::Configuration::FatalAction``.
 * ``FatalAction`` extensions live in the ``envoy.extensions.fatal_actions`` API
 * namespace.
 *
 * @generated from message envoy.config.bootstrap.v3.FatalAction
 */
export const FatalAction = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.FatalAction",
  () => [
    { no: 1, name: "config", kind: "message", T: TypedExtensionConfig },
  ],
);

/**
 * Runtime :ref:`configuration overview <config_runtime>` (deprecated).
 *
 * @generated from message envoy.config.bootstrap.v3.Runtime
 */
export const Runtime = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.Runtime",
  () => [
    { no: 1, name: "symlink_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subdirectory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "override_subdirectory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "base", kind: "message", T: Struct },
  ],
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer
 */
export const RuntimeLayer = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.RuntimeLayer",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_layer", kind: "message", T: Struct, oneof: "layer_specifier" },
    { no: 3, name: "disk_layer", kind: "message", T: RuntimeLayer_DiskLayer, oneof: "layer_specifier" },
    { no: 4, name: "admin_layer", kind: "message", T: RuntimeLayer_AdminLayer, oneof: "layer_specifier" },
    { no: 5, name: "rtds_layer", kind: "message", T: RuntimeLayer_RtdsLayer, oneof: "layer_specifier" },
  ],
);

/**
 * :ref:`Disk runtime <config_runtime_local_disk>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer
 */
export const RuntimeLayer_DiskLayer = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.RuntimeLayer.DiskLayer",
  () => [
    { no: 1, name: "symlink_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subdirectory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "append_service_cluster", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "RuntimeLayer_DiskLayer"},
);

/**
 * :ref:`Admin console runtime <config_runtime_admin>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer
 */
export const RuntimeLayer_AdminLayer = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.RuntimeLayer.AdminLayer",
  [],
  {localName: "RuntimeLayer_AdminLayer"},
);

/**
 * :ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer.
 *
 * @generated from message envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer
 */
export const RuntimeLayer_RtdsLayer = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.RuntimeLayer.RtdsLayer",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rtds_config", kind: "message", T: ConfigSource },
  ],
  {localName: "RuntimeLayer_RtdsLayer"},
);

/**
 * Runtime :ref:`configuration overview <config_runtime>`.
 *
 * @generated from message envoy.config.bootstrap.v3.LayeredRuntime
 */
export const LayeredRuntime = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.LayeredRuntime",
  () => [
    { no: 1, name: "layers", kind: "message", T: RuntimeLayer, repeated: true },
  ],
);

/**
 * Used to specify the header that needs to be registered as an inline header.
 *
 * If request or response contain multiple headers with the same name and the header
 * name is registered as an inline header. Then multiple headers will be folded
 * into one, and multiple header values will be concatenated by a suitable delimiter.
 * The delimiter is generally a comma.
 *
 * For example, if 'foo' is registered as an inline header, and the headers contains
 * the following two headers:
 *
 * .. code-block:: text
 *
 *   foo: bar
 *   foo: eep
 *
 * Then they will eventually be folded into:
 *
 * .. code-block:: text
 *
 *   foo: bar, eep
 *
 * Inline headers provide O(1) search performance, but each inline header imposes
 * an additional memory overhead on all instances of the corresponding type of
 * HeaderMap or TrailerMap.
 *
 * @generated from message envoy.config.bootstrap.v3.CustomInlineHeader
 */
export const CustomInlineHeader = proto3.makeMessageType(
  "envoy.config.bootstrap.v3.CustomInlineHeader",
  () => [
    { no: 1, name: "inline_header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "inline_header_type", kind: "enum", T: proto3.getEnumType(CustomInlineHeader_InlineHeaderType) },
  ],
);

/**
 * @generated from enum envoy.config.bootstrap.v3.CustomInlineHeader.InlineHeaderType
 */
export const CustomInlineHeader_InlineHeaderType = proto3.makeEnum(
  "envoy.config.bootstrap.v3.CustomInlineHeader.InlineHeaderType",
  [
    {no: 0, name: "REQUEST_HEADER"},
    {no: 1, name: "REQUEST_TRAILER"},
    {no: 2, name: "RESPONSE_HEADER"},
    {no: 3, name: "RESPONSE_TRAILER"},
  ],
);

