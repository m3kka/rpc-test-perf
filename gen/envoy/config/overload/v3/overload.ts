// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/overload/v3/overload.proto" (package "envoy.config.overload.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Percent } from "../../../type/v3/percent";
import { Duration } from "../../../../google/protobuf/duration";
import { Any } from "../../../../google/protobuf/any";
// [#protodoc-title: Overload Manager]

// The Overload Manager provides an extensible framework to protect Envoy instances
// from overload of various resources (memory, cpu, file descriptors, etc).
// It monitors a configurable set of resources and notifies registered listeners
// when triggers related to those resources fire.

/**
 * @generated from protobuf message envoy.config.overload.v3.ResourceMonitor
 */
export interface ResourceMonitor {
    /**
     * The name of the resource monitor to instantiate. Must match a registered
     * resource monitor type.
     * See the :ref:`extensions listed in typed_config below <extension_category_envoy.resource_monitors>` for the default list of available resource monitor.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: config_type
     */
    configType: {
        oneofKind: "typedConfig";
        /**
         * @generated from protobuf field: google.protobuf.Any typed_config = 3;
         */
        typedConfig: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.config.overload.v3.ThresholdTrigger
 */
export interface ThresholdTrigger {
    /**
     * If the resource pressure is greater than or equal to this value, the trigger
     * will enter saturation.
     *
     * @generated from protobuf field: double value = 1;
     */
    value: number;
}
/**
 * @generated from protobuf message envoy.config.overload.v3.ScaledTrigger
 */
export interface ScaledTrigger {
    /**
     * If the resource pressure is greater than this value, the trigger will be in the
     * :ref:`scaling <arch_overview_overload_manager-triggers-state>` state with value
     * ``(pressure - scaling_threshold) / (saturation_threshold - scaling_threshold)``.
     *
     * @generated from protobuf field: double scaling_threshold = 1;
     */
    scalingThreshold: number;
    /**
     * If the resource pressure is greater than this value, the trigger will enter saturation.
     *
     * @generated from protobuf field: double saturation_threshold = 2;
     */
    saturationThreshold: number;
}
/**
 * @generated from protobuf message envoy.config.overload.v3.Trigger
 */
export interface Trigger {
    /**
     * The name of the resource this is a trigger for.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: trigger_oneof
     */
    triggerOneof: {
        oneofKind: "threshold";
        /**
         * @generated from protobuf field: envoy.config.overload.v3.ThresholdTrigger threshold = 2;
         */
        threshold: ThresholdTrigger;
    } | {
        oneofKind: "scaled";
        /**
         * @generated from protobuf field: envoy.config.overload.v3.ScaledTrigger scaled = 3;
         */
        scaled: ScaledTrigger;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Typed configuration for the "envoy.overload_actions.reduce_timeouts" action. See
 * :ref:`the docs <config_overload_manager_reducing_timeouts>` for an example of how to configure
 * the action with different timeouts and minimum values.
 *
 * @generated from protobuf message envoy.config.overload.v3.ScaleTimersOverloadActionConfig
 */
export interface ScaleTimersOverloadActionConfig {
    /**
     * A set of timer scaling rules to be applied.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer timer_scale_factors = 1;
     */
    timerScaleFactors: ScaleTimersOverloadActionConfig_ScaleTimer[];
}
/**
 * @generated from protobuf message envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer
 */
export interface ScaleTimersOverloadActionConfig_ScaleTimer {
    /**
     * The type of timer this minimum applies to.
     *
     * @generated from protobuf field: envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType timer = 1;
     */
    timer: ScaleTimersOverloadActionConfig_TimerType;
    /**
     * @generated from protobuf oneof: overload_adjust
     */
    overloadAdjust: {
        oneofKind: "minTimeout";
        /**
         * Sets the minimum duration as an absolute value.
         *
         * @generated from protobuf field: google.protobuf.Duration min_timeout = 2;
         */
        minTimeout: Duration;
    } | {
        oneofKind: "minScale";
        /**
         * Sets the minimum duration as a percentage of the maximum value.
         *
         * @generated from protobuf field: envoy.type.v3.Percent min_scale = 3;
         */
        minScale: Percent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType
 */
export enum ScaleTimersOverloadActionConfig_TimerType {
    /**
     * Unsupported value; users must explicitly specify the timer they want scaled.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Adjusts the idle timer for downstream HTTP connections that takes effect when there are no active streams.
     * This affects the value of :ref:`HttpConnectionManager.common_http_protocol_options.idle_timeout
     * <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.idle_timeout>`
     *
     * @generated from protobuf enum value: HTTP_DOWNSTREAM_CONNECTION_IDLE = 1;
     */
    HTTP_DOWNSTREAM_CONNECTION_IDLE = 1,
    /**
     * Adjusts the idle timer for HTTP streams initiated by downstream clients.
     * This affects the value of :ref:`RouteAction.idle_timeout <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>` and
     * :ref:`HttpConnectionManager.stream_idle_timeout
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
     *
     * @generated from protobuf enum value: HTTP_DOWNSTREAM_STREAM_IDLE = 2;
     */
    HTTP_DOWNSTREAM_STREAM_IDLE = 2,
    /**
     * Adjusts the timer for how long downstream clients have to finish transport-level negotiations
     * before the connection is closed.
     * This affects the value of
     * :ref:`FilterChain.transport_socket_connect_timeout <envoy_v3_api_field_config.listener.v3.FilterChain.transport_socket_connect_timeout>`.
     *
     * @generated from protobuf enum value: TRANSPORT_SOCKET_CONNECT = 3;
     */
    TRANSPORT_SOCKET_CONNECT = 3
}
/**
 * @generated from protobuf message envoy.config.overload.v3.OverloadAction
 */
export interface OverloadAction {
    /**
     * The name of the overload action. This is just a well-known string that listeners can
     * use for registering callbacks. Custom overload actions should be named using reverse
     * DNS to ensure uniqueness.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * A set of triggers for this action. The state of the action is the maximum
     * state of all triggers, which can be scalar values between 0 and 1 or
     * saturated. Listeners are notified when the overload action changes state.
     * An overload manager action can only have one trigger for a given resource
     * e.g. :ref:`Trigger.name
     * <envoy_v3_api_field_config.overload.v3.Trigger.name>` must be unique
     * in this list.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.Trigger triggers = 2;
     */
    triggers: Trigger[];
    /**
     * Configuration for the action being instantiated.
     *
     * @generated from protobuf field: google.protobuf.Any typed_config = 3;
     */
    typedConfig?: Any;
}
/**
 * A point within the connection or request lifecycle that provides context on
 * whether to shed load at that given stage for the current entity at the
 * point.
 *
 * @generated from protobuf message envoy.config.overload.v3.LoadShedPoint
 */
export interface LoadShedPoint {
    /**
     * This is just a well-known string for the LoadShedPoint.
     * Deployment specific LoadShedPoints e.g. within a custom extension should
     * be prefixed by the company / deployment name to avoid colliding with any
     * open source LoadShedPoints.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * A set of triggers for this LoadShedPoint. The LoadShedPoint will use the
     * the maximum state of all triggers, which can be scalar values between 0 and
     * 1 or saturated. A LoadShedPoint can only have one trigger for a given
     * resource e.g. :ref:`Trigger.name
     * <envoy_v3_api_field_config.overload.v3.Trigger.name>` must be unique in
     * this list.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.Trigger triggers = 2;
     */
    triggers: Trigger[];
}
/**
 * Configuration for which accounts the WatermarkBuffer Factories should
 * track.
 *
 * @generated from protobuf message envoy.config.overload.v3.BufferFactoryConfig
 */
export interface BufferFactoryConfig {
    /**
     * The minimum power of two at which Envoy starts tracking an account.
     *
     * Envoy has 8 power of two buckets starting with the provided exponent below.
     * Concretely the 1st bucket contains accounts for streams that use
     * [2^minimum_account_to_track_power_of_two,
     * 2^(minimum_account_to_track_power_of_two + 1)) bytes.
     * With the 8th bucket tracking accounts
     * >= 128 * 2^minimum_account_to_track_power_of_two.
     *
     * The maximum value is 56, since we're using uint64_t for bytes counting,
     * and that's the last value that would use the 8 buckets. In practice,
     * we don't expect the proxy to be holding 2^56 bytes.
     *
     * If omitted, Envoy should not do any tracking.
     *
     * @generated from protobuf field: uint32 minimum_account_to_track_power_of_two = 1;
     */
    minimumAccountToTrackPowerOfTwo: number;
}
/**
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.overload.v3.OverloadManager
 */
export interface OverloadManager {
    /**
     * The interval for refreshing resource usage.
     *
     * @generated from protobuf field: google.protobuf.Duration refresh_interval = 1;
     */
    refreshInterval?: Duration;
    /**
     * The set of resources to monitor.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.ResourceMonitor resource_monitors = 2;
     */
    resourceMonitors: ResourceMonitor[];
    /**
     * The set of overload actions.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.OverloadAction actions = 3;
     */
    actions: OverloadAction[];
    /**
     * The set of load shed points.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v3.LoadShedPoint loadshed_points = 5;
     */
    loadshedPoints: LoadShedPoint[];
    /**
     * Configuration for buffer factory.
     *
     * @generated from protobuf field: envoy.config.overload.v3.BufferFactoryConfig buffer_factory_config = 4;
     */
    bufferFactoryConfig?: BufferFactoryConfig;
}
// @generated message type with reflection information, may provide speed optimized methods
class ResourceMonitor$Type extends MessageType<ResourceMonitor> {
    constructor() {
        super("envoy.config.overload.v3.ResourceMonitor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "typed_config", kind: "message", oneof: "configType", T: () => Any }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.overload.v2alpha.ResourceMonitor" } });
    }
    create(value?: PartialMessage<ResourceMonitor>): ResourceMonitor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.configType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ResourceMonitor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMonitor): ResourceMonitor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.configType = {
                        oneofKind: "typedConfig",
                        typedConfig: Any.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).typedConfig)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceMonitor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Any typed_config = 3; */
        if (message.configType.oneofKind === "typedConfig")
            Any.internalBinaryWrite(message.configType.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.ResourceMonitor
 */
export const ResourceMonitor = new ResourceMonitor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThresholdTrigger$Type extends MessageType<ThresholdTrigger> {
    constructor() {
        super("envoy.config.overload.v3.ThresholdTrigger", [
            { no: 1, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "validate.rules": { double: { lte: 1, gte: 0 } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.overload.v2alpha.ThresholdTrigger" } });
    }
    create(value?: PartialMessage<ThresholdTrigger>): ThresholdTrigger {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<ThresholdTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThresholdTrigger): ThresholdTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double value */ 1:
                    message.value = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThresholdTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit64).double(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.ThresholdTrigger
 */
export const ThresholdTrigger = new ThresholdTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScaledTrigger$Type extends MessageType<ScaledTrigger> {
    constructor() {
        super("envoy.config.overload.v3.ScaledTrigger", [
            { no: 1, name: "scaling_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "validate.rules": { double: { lte: 1, gte: 0 } } } },
            { no: 2, name: "saturation_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "validate.rules": { double: { lte: 1, gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ScaledTrigger>): ScaledTrigger {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scalingThreshold = 0;
        message.saturationThreshold = 0;
        if (value !== undefined)
            reflectionMergePartial<ScaledTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScaledTrigger): ScaledTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double scaling_threshold */ 1:
                    message.scalingThreshold = reader.double();
                    break;
                case /* double saturation_threshold */ 2:
                    message.saturationThreshold = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScaledTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double scaling_threshold = 1; */
        if (message.scalingThreshold !== 0)
            writer.tag(1, WireType.Bit64).double(message.scalingThreshold);
        /* double saturation_threshold = 2; */
        if (message.saturationThreshold !== 0)
            writer.tag(2, WireType.Bit64).double(message.saturationThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.ScaledTrigger
 */
export const ScaledTrigger = new ScaledTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Trigger$Type extends MessageType<Trigger> {
    constructor() {
        super("envoy.config.overload.v3.Trigger", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "threshold", kind: "message", oneof: "triggerOneof", T: () => ThresholdTrigger },
            { no: 3, name: "scaled", kind: "message", oneof: "triggerOneof", T: () => ScaledTrigger }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.overload.v2alpha.Trigger" } });
    }
    create(value?: PartialMessage<Trigger>): Trigger {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.triggerOneof = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Trigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Trigger): Trigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.config.overload.v3.ThresholdTrigger threshold */ 2:
                    message.triggerOneof = {
                        oneofKind: "threshold",
                        threshold: ThresholdTrigger.internalBinaryRead(reader, reader.uint32(), options, (message.triggerOneof as any).threshold)
                    };
                    break;
                case /* envoy.config.overload.v3.ScaledTrigger scaled */ 3:
                    message.triggerOneof = {
                        oneofKind: "scaled",
                        scaled: ScaledTrigger.internalBinaryRead(reader, reader.uint32(), options, (message.triggerOneof as any).scaled)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Trigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.config.overload.v3.ThresholdTrigger threshold = 2; */
        if (message.triggerOneof.oneofKind === "threshold")
            ThresholdTrigger.internalBinaryWrite(message.triggerOneof.threshold, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.overload.v3.ScaledTrigger scaled = 3; */
        if (message.triggerOneof.oneofKind === "scaled")
            ScaledTrigger.internalBinaryWrite(message.triggerOneof.scaled, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.Trigger
 */
export const Trigger = new Trigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScaleTimersOverloadActionConfig$Type extends MessageType<ScaleTimersOverloadActionConfig> {
    constructor() {
        super("envoy.config.overload.v3.ScaleTimersOverloadActionConfig", [
            { no: 1, name: "timer_scale_factors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScaleTimersOverloadActionConfig_ScaleTimer, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<ScaleTimersOverloadActionConfig>): ScaleTimersOverloadActionConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timerScaleFactors = [];
        if (value !== undefined)
            reflectionMergePartial<ScaleTimersOverloadActionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScaleTimersOverloadActionConfig): ScaleTimersOverloadActionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer timer_scale_factors */ 1:
                    message.timerScaleFactors.push(ScaleTimersOverloadActionConfig_ScaleTimer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScaleTimersOverloadActionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer timer_scale_factors = 1; */
        for (let i = 0; i < message.timerScaleFactors.length; i++)
            ScaleTimersOverloadActionConfig_ScaleTimer.internalBinaryWrite(message.timerScaleFactors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.ScaleTimersOverloadActionConfig
 */
export const ScaleTimersOverloadActionConfig = new ScaleTimersOverloadActionConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScaleTimersOverloadActionConfig_ScaleTimer$Type extends MessageType<ScaleTimersOverloadActionConfig_ScaleTimer> {
    constructor() {
        super("envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer", [
            { no: 1, name: "timer", kind: "enum", T: () => ["envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType", ScaleTimersOverloadActionConfig_TimerType], options: { "validate.rules": { enum: { definedOnly: true, notIn: [0] } } } },
            { no: 2, name: "min_timeout", kind: "message", oneof: "overloadAdjust", T: () => Duration },
            { no: 3, name: "min_scale", kind: "message", oneof: "overloadAdjust", T: () => Percent }
        ]);
    }
    create(value?: PartialMessage<ScaleTimersOverloadActionConfig_ScaleTimer>): ScaleTimersOverloadActionConfig_ScaleTimer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timer = 0;
        message.overloadAdjust = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ScaleTimersOverloadActionConfig_ScaleTimer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScaleTimersOverloadActionConfig_ScaleTimer): ScaleTimersOverloadActionConfig_ScaleTimer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType timer */ 1:
                    message.timer = reader.int32();
                    break;
                case /* google.protobuf.Duration min_timeout */ 2:
                    message.overloadAdjust = {
                        oneofKind: "minTimeout",
                        minTimeout: Duration.internalBinaryRead(reader, reader.uint32(), options, (message.overloadAdjust as any).minTimeout)
                    };
                    break;
                case /* envoy.type.v3.Percent min_scale */ 3:
                    message.overloadAdjust = {
                        oneofKind: "minScale",
                        minScale: Percent.internalBinaryRead(reader, reader.uint32(), options, (message.overloadAdjust as any).minScale)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScaleTimersOverloadActionConfig_ScaleTimer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType timer = 1; */
        if (message.timer !== 0)
            writer.tag(1, WireType.Varint).int32(message.timer);
        /* google.protobuf.Duration min_timeout = 2; */
        if (message.overloadAdjust.oneofKind === "minTimeout")
            Duration.internalBinaryWrite(message.overloadAdjust.minTimeout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.v3.Percent min_scale = 3; */
        if (message.overloadAdjust.oneofKind === "minScale")
            Percent.internalBinaryWrite(message.overloadAdjust.minScale, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer
 */
export const ScaleTimersOverloadActionConfig_ScaleTimer = new ScaleTimersOverloadActionConfig_ScaleTimer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverloadAction$Type extends MessageType<OverloadAction> {
    constructor() {
        super("envoy.config.overload.v3.OverloadAction", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "triggers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trigger, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "typed_config", kind: "message", T: () => Any }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.overload.v2alpha.OverloadAction" } });
    }
    create(value?: PartialMessage<OverloadAction>): OverloadAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.triggers = [];
        if (value !== undefined)
            reflectionMergePartial<OverloadAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverloadAction): OverloadAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.config.overload.v3.Trigger triggers */ 2:
                    message.triggers.push(Trigger.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.typedConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.typedConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OverloadAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.config.overload.v3.Trigger triggers = 2; */
        for (let i = 0; i < message.triggers.length; i++)
            Trigger.internalBinaryWrite(message.triggers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any typed_config = 3; */
        if (message.typedConfig)
            Any.internalBinaryWrite(message.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.OverloadAction
 */
export const OverloadAction = new OverloadAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadShedPoint$Type extends MessageType<LoadShedPoint> {
    constructor() {
        super("envoy.config.overload.v3.LoadShedPoint", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "triggers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trigger, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<LoadShedPoint>): LoadShedPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.triggers = [];
        if (value !== undefined)
            reflectionMergePartial<LoadShedPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadShedPoint): LoadShedPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.config.overload.v3.Trigger triggers */ 2:
                    message.triggers.push(Trigger.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadShedPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.config.overload.v3.Trigger triggers = 2; */
        for (let i = 0; i < message.triggers.length; i++)
            Trigger.internalBinaryWrite(message.triggers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.LoadShedPoint
 */
export const LoadShedPoint = new LoadShedPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BufferFactoryConfig$Type extends MessageType<BufferFactoryConfig> {
    constructor() {
        super("envoy.config.overload.v3.BufferFactoryConfig", [
            { no: 1, name: "minimum_account_to_track_power_of_two", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 56, gte: 10 } } } }
        ]);
    }
    create(value?: PartialMessage<BufferFactoryConfig>): BufferFactoryConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minimumAccountToTrackPowerOfTwo = 0;
        if (value !== undefined)
            reflectionMergePartial<BufferFactoryConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BufferFactoryConfig): BufferFactoryConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 minimum_account_to_track_power_of_two */ 1:
                    message.minimumAccountToTrackPowerOfTwo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BufferFactoryConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 minimum_account_to_track_power_of_two = 1; */
        if (message.minimumAccountToTrackPowerOfTwo !== 0)
            writer.tag(1, WireType.Varint).uint32(message.minimumAccountToTrackPowerOfTwo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.BufferFactoryConfig
 */
export const BufferFactoryConfig = new BufferFactoryConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverloadManager$Type extends MessageType<OverloadManager> {
    constructor() {
        super("envoy.config.overload.v3.OverloadManager", [
            { no: 1, name: "refresh_interval", kind: "message", T: () => Duration },
            { no: 2, name: "resource_monitors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMonitor, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OverloadAction },
            { no: 5, name: "loadshed_points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadShedPoint },
            { no: 4, name: "buffer_factory_config", kind: "message", T: () => BufferFactoryConfig }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.config.overload.v2alpha.OverloadManager" } });
    }
    create(value?: PartialMessage<OverloadManager>): OverloadManager {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceMonitors = [];
        message.actions = [];
        message.loadshedPoints = [];
        if (value !== undefined)
            reflectionMergePartial<OverloadManager>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverloadManager): OverloadManager {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration refresh_interval */ 1:
                    message.refreshInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.refreshInterval);
                    break;
                case /* repeated envoy.config.overload.v3.ResourceMonitor resource_monitors */ 2:
                    message.resourceMonitors.push(ResourceMonitor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.overload.v3.OverloadAction actions */ 3:
                    message.actions.push(OverloadAction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.overload.v3.LoadShedPoint loadshed_points */ 5:
                    message.loadshedPoints.push(LoadShedPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.overload.v3.BufferFactoryConfig buffer_factory_config */ 4:
                    message.bufferFactoryConfig = BufferFactoryConfig.internalBinaryRead(reader, reader.uint32(), options, message.bufferFactoryConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OverloadManager, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration refresh_interval = 1; */
        if (message.refreshInterval)
            Duration.internalBinaryWrite(message.refreshInterval, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.overload.v3.ResourceMonitor resource_monitors = 2; */
        for (let i = 0; i < message.resourceMonitors.length; i++)
            ResourceMonitor.internalBinaryWrite(message.resourceMonitors[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.overload.v3.OverloadAction actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            OverloadAction.internalBinaryWrite(message.actions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.overload.v3.LoadShedPoint loadshed_points = 5; */
        for (let i = 0; i < message.loadshedPoints.length; i++)
            LoadShedPoint.internalBinaryWrite(message.loadshedPoints[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.overload.v3.BufferFactoryConfig buffer_factory_config = 4; */
        if (message.bufferFactoryConfig)
            BufferFactoryConfig.internalBinaryWrite(message.bufferFactoryConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v3.OverloadManager
 */
export const OverloadManager = new OverloadManager$Type();
