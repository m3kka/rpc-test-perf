// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/overload/v3/overload.proto (package envoy.config.overload.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, Duration, proto3 } from "@bufbuild/protobuf";
import { Percent } from "../../../type/v3/percent_pb.js";

/**
 * @generated from message envoy.config.overload.v3.ResourceMonitor
 */
export const ResourceMonitor = proto3.makeMessageType(
  "envoy.config.overload.v3.ResourceMonitor",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
  ],
);

/**
 * @generated from message envoy.config.overload.v3.ThresholdTrigger
 */
export const ThresholdTrigger = proto3.makeMessageType(
  "envoy.config.overload.v3.ThresholdTrigger",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * @generated from message envoy.config.overload.v3.ScaledTrigger
 */
export const ScaledTrigger = proto3.makeMessageType(
  "envoy.config.overload.v3.ScaledTrigger",
  () => [
    { no: 1, name: "scaling_threshold", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "saturation_threshold", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * @generated from message envoy.config.overload.v3.Trigger
 */
export const Trigger = proto3.makeMessageType(
  "envoy.config.overload.v3.Trigger",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "threshold", kind: "message", T: ThresholdTrigger, oneof: "trigger_oneof" },
    { no: 3, name: "scaled", kind: "message", T: ScaledTrigger, oneof: "trigger_oneof" },
  ],
);

/**
 * Typed configuration for the "envoy.overload_actions.reduce_timeouts" action. See
 * :ref:`the docs <config_overload_manager_reducing_timeouts>` for an example of how to configure
 * the action with different timeouts and minimum values.
 *
 * @generated from message envoy.config.overload.v3.ScaleTimersOverloadActionConfig
 */
export const ScaleTimersOverloadActionConfig = proto3.makeMessageType(
  "envoy.config.overload.v3.ScaleTimersOverloadActionConfig",
  () => [
    { no: 1, name: "timer_scale_factors", kind: "message", T: ScaleTimersOverloadActionConfig_ScaleTimer, repeated: true },
  ],
);

/**
 * @generated from enum envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType
 */
export const ScaleTimersOverloadActionConfig_TimerType = proto3.makeEnum(
  "envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType",
  [
    {no: 0, name: "UNSPECIFIED"},
    {no: 1, name: "HTTP_DOWNSTREAM_CONNECTION_IDLE"},
    {no: 2, name: "HTTP_DOWNSTREAM_STREAM_IDLE"},
    {no: 3, name: "TRANSPORT_SOCKET_CONNECT"},
  ],
);

/**
 * @generated from message envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer
 */
export const ScaleTimersOverloadActionConfig_ScaleTimer = proto3.makeMessageType(
  "envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer",
  () => [
    { no: 1, name: "timer", kind: "enum", T: proto3.getEnumType(ScaleTimersOverloadActionConfig_TimerType) },
    { no: 2, name: "min_timeout", kind: "message", T: Duration, oneof: "overload_adjust" },
    { no: 3, name: "min_scale", kind: "message", T: Percent, oneof: "overload_adjust" },
  ],
  {localName: "ScaleTimersOverloadActionConfig_ScaleTimer"},
);

/**
 * @generated from message envoy.config.overload.v3.OverloadAction
 */
export const OverloadAction = proto3.makeMessageType(
  "envoy.config.overload.v3.OverloadAction",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "triggers", kind: "message", T: Trigger, repeated: true },
    { no: 3, name: "typed_config", kind: "message", T: Any },
  ],
);

/**
 * A point within the connection or request lifecycle that provides context on
 * whether to shed load at that given stage for the current entity at the
 * point.
 *
 * @generated from message envoy.config.overload.v3.LoadShedPoint
 */
export const LoadShedPoint = proto3.makeMessageType(
  "envoy.config.overload.v3.LoadShedPoint",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "triggers", kind: "message", T: Trigger, repeated: true },
  ],
);

/**
 * Configuration for which accounts the WatermarkBuffer Factories should
 * track.
 *
 * @generated from message envoy.config.overload.v3.BufferFactoryConfig
 */
export const BufferFactoryConfig = proto3.makeMessageType(
  "envoy.config.overload.v3.BufferFactoryConfig",
  () => [
    { no: 1, name: "minimum_account_to_track_power_of_two", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.overload.v3.OverloadManager
 */
export const OverloadManager = proto3.makeMessageType(
  "envoy.config.overload.v3.OverloadManager",
  () => [
    { no: 1, name: "refresh_interval", kind: "message", T: Duration },
    { no: 2, name: "resource_monitors", kind: "message", T: ResourceMonitor, repeated: true },
    { no: 3, name: "actions", kind: "message", T: OverloadAction, repeated: true },
    { no: 5, name: "loadshed_points", kind: "message", T: LoadShedPoint, repeated: true },
    { no: 4, name: "buffer_factory_config", kind: "message", T: BufferFactoryConfig },
  ],
);

