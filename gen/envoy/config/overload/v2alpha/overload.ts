// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/overload/v2alpha/overload.proto" (package "envoy.config.overload.v2alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../google/protobuf/duration";
import { Any } from "../../../../google/protobuf/any";
import { Struct } from "../../../../google/protobuf/struct";
// [#protodoc-title: Overload Manager]

// The Overload Manager provides an extensible framework to protect Envoy instances
// from overload of various resources (memory, cpu, file descriptors, etc).
// It monitors a configurable set of resources and notifies registered listeners
// when triggers related to those resources fire.

/**
 * @generated from protobuf message envoy.config.overload.v2alpha.ResourceMonitor
 */
export interface ResourceMonitor {
    /**
     * The name of the resource monitor to instantiate. Must match a registered
     * resource monitor type. The built-in resource monitors are:
     *
     * * :ref:`envoy.resource_monitors.fixed_heap
     *   <envoy_api_msg_config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig>`
     * * :ref:`envoy.resource_monitors.injected_resource
     *   <envoy_api_msg_config.resource_monitor.injected_resource.v2alpha.InjectedResourceConfig>`
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: config_type
     */
    configType: {
        oneofKind: "config";
        /**
         * @deprecated
         * @generated from protobuf field: google.protobuf.Struct config = 2 [deprecated = true];
         */
        config: Struct;
    } | {
        oneofKind: "typedConfig";
        /**
         * @generated from protobuf field: google.protobuf.Any typed_config = 3;
         */
        typedConfig: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.config.overload.v2alpha.ThresholdTrigger
 */
export interface ThresholdTrigger {
    /**
     * If the resource pressure is greater than or equal to this value, the trigger
     * will fire.
     *
     * @generated from protobuf field: double value = 1;
     */
    value: number;
}
/**
 * @generated from protobuf message envoy.config.overload.v2alpha.Trigger
 */
export interface Trigger {
    /**
     * The name of the resource this is a trigger for.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: trigger_oneof
     */
    triggerOneof: {
        oneofKind: "threshold";
        /**
         * @generated from protobuf field: envoy.config.overload.v2alpha.ThresholdTrigger threshold = 2;
         */
        threshold: ThresholdTrigger;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.config.overload.v2alpha.OverloadAction
 */
export interface OverloadAction {
    /**
     * The name of the overload action. This is just a well-known string that listeners can
     * use for registering callbacks. Custom overload actions should be named using reverse
     * DNS to ensure uniqueness.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * A set of triggers for this action. If any of these triggers fire the overload action
     * is activated. Listeners are notified when the overload action transitions from
     * inactivated to activated, or vice versa.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v2alpha.Trigger triggers = 2;
     */
    triggers: Trigger[];
}
/**
 * @generated from protobuf message envoy.config.overload.v2alpha.OverloadManager
 */
export interface OverloadManager {
    /**
     * The interval for refreshing resource usage.
     *
     * @generated from protobuf field: google.protobuf.Duration refresh_interval = 1;
     */
    refreshInterval?: Duration;
    /**
     * The set of resources to monitor.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v2alpha.ResourceMonitor resource_monitors = 2;
     */
    resourceMonitors: ResourceMonitor[];
    /**
     * The set of overload actions.
     *
     * @generated from protobuf field: repeated envoy.config.overload.v2alpha.OverloadAction actions = 3;
     */
    actions: OverloadAction[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ResourceMonitor$Type extends MessageType<ResourceMonitor> {
    constructor() {
        super("envoy.config.overload.v2alpha.ResourceMonitor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "config", kind: "message", oneof: "configType", T: () => Struct },
            { no: 3, name: "typed_config", kind: "message", oneof: "configType", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<ResourceMonitor>): ResourceMonitor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.configType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ResourceMonitor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMonitor): ResourceMonitor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct config = 2 [deprecated = true];*/ 2:
                    message.configType = {
                        oneofKind: "config",
                        config: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).config)
                    };
                    break;
                case /* google.protobuf.Any typed_config */ 3:
                    message.configType = {
                        oneofKind: "typedConfig",
                        typedConfig: Any.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).typedConfig)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceMonitor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct config = 2 [deprecated = true]; */
        if (message.configType.oneofKind === "config")
            Struct.internalBinaryWrite(message.configType.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any typed_config = 3; */
        if (message.configType.oneofKind === "typedConfig")
            Any.internalBinaryWrite(message.configType.typedConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v2alpha.ResourceMonitor
 */
export const ResourceMonitor = new ResourceMonitor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThresholdTrigger$Type extends MessageType<ThresholdTrigger> {
    constructor() {
        super("envoy.config.overload.v2alpha.ThresholdTrigger", [
            { no: 1, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "validate.rules": { double: { lte: 1, gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ThresholdTrigger>): ThresholdTrigger {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<ThresholdTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThresholdTrigger): ThresholdTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double value */ 1:
                    message.value = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThresholdTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit64).double(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v2alpha.ThresholdTrigger
 */
export const ThresholdTrigger = new ThresholdTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Trigger$Type extends MessageType<Trigger> {
    constructor() {
        super("envoy.config.overload.v2alpha.Trigger", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "threshold", kind: "message", oneof: "triggerOneof", T: () => ThresholdTrigger }
        ]);
    }
    create(value?: PartialMessage<Trigger>): Trigger {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.triggerOneof = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Trigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Trigger): Trigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* envoy.config.overload.v2alpha.ThresholdTrigger threshold */ 2:
                    message.triggerOneof = {
                        oneofKind: "threshold",
                        threshold: ThresholdTrigger.internalBinaryRead(reader, reader.uint32(), options, (message.triggerOneof as any).threshold)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Trigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* envoy.config.overload.v2alpha.ThresholdTrigger threshold = 2; */
        if (message.triggerOneof.oneofKind === "threshold")
            ThresholdTrigger.internalBinaryWrite(message.triggerOneof.threshold, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v2alpha.Trigger
 */
export const Trigger = new Trigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverloadAction$Type extends MessageType<OverloadAction> {
    constructor() {
        super("envoy.config.overload.v2alpha.OverloadAction", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "triggers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trigger, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<OverloadAction>): OverloadAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.triggers = [];
        if (value !== undefined)
            reflectionMergePartial<OverloadAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverloadAction): OverloadAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.config.overload.v2alpha.Trigger triggers */ 2:
                    message.triggers.push(Trigger.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OverloadAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.config.overload.v2alpha.Trigger triggers = 2; */
        for (let i = 0; i < message.triggers.length; i++)
            Trigger.internalBinaryWrite(message.triggers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v2alpha.OverloadAction
 */
export const OverloadAction = new OverloadAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverloadManager$Type extends MessageType<OverloadManager> {
    constructor() {
        super("envoy.config.overload.v2alpha.OverloadManager", [
            { no: 1, name: "refresh_interval", kind: "message", T: () => Duration },
            { no: 2, name: "resource_monitors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMonitor, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 3, name: "actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OverloadAction }
        ]);
    }
    create(value?: PartialMessage<OverloadManager>): OverloadManager {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceMonitors = [];
        message.actions = [];
        if (value !== undefined)
            reflectionMergePartial<OverloadManager>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverloadManager): OverloadManager {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration refresh_interval */ 1:
                    message.refreshInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.refreshInterval);
                    break;
                case /* repeated envoy.config.overload.v2alpha.ResourceMonitor resource_monitors */ 2:
                    message.resourceMonitors.push(ResourceMonitor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.overload.v2alpha.OverloadAction actions */ 3:
                    message.actions.push(OverloadAction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OverloadManager, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration refresh_interval = 1; */
        if (message.refreshInterval)
            Duration.internalBinaryWrite(message.refreshInterval, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.overload.v2alpha.ResourceMonitor resource_monitors = 2; */
        for (let i = 0; i < message.resourceMonitors.length; i++)
            ResourceMonitor.internalBinaryWrite(message.resourceMonitors[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.overload.v2alpha.OverloadAction actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            OverloadAction.internalBinaryWrite(message.actions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.overload.v2alpha.OverloadManager
 */
export const OverloadManager = new OverloadManager$Type();
