// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/overload/v2alpha/overload.proto (package envoy.config.overload.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message envoy.config.overload.v2alpha.ResourceMonitor
 */
export declare class ResourceMonitor extends Message<ResourceMonitor> {
  /**
   * The name of the resource monitor to instantiate. Must match a registered
   * resource monitor type. The built-in resource monitors are:
   *
   * * :ref:`envoy.resource_monitors.fixed_heap
   *   <envoy_api_msg_config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig>`
   * * :ref:`envoy.resource_monitors.injected_resource
   *   <envoy_api_msg_config.resource_monitor.injected_resource.v2alpha.InjectedResourceConfig>`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Configuration for the resource monitor being instantiated.
   *
   * @generated from oneof envoy.config.overload.v2alpha.ResourceMonitor.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Struct config = 2 [deprecated = true];
     * @deprecated
     */
    value: Struct;
    case: "config";
  } | {
    /**
     * @generated from field: google.protobuf.Any typed_config = 3;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ResourceMonitor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.overload.v2alpha.ResourceMonitor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceMonitor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceMonitor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceMonitor;

  static equals(a: ResourceMonitor | PlainMessage<ResourceMonitor> | undefined, b: ResourceMonitor | PlainMessage<ResourceMonitor> | undefined): boolean;
}

/**
 * @generated from message envoy.config.overload.v2alpha.ThresholdTrigger
 */
export declare class ThresholdTrigger extends Message<ThresholdTrigger> {
  /**
   * If the resource pressure is greater than or equal to this value, the trigger
   * will fire.
   *
   * @generated from field: double value = 1;
   */
  value: number;

  constructor(data?: PartialMessage<ThresholdTrigger>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.overload.v2alpha.ThresholdTrigger";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThresholdTrigger;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThresholdTrigger;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThresholdTrigger;

  static equals(a: ThresholdTrigger | PlainMessage<ThresholdTrigger> | undefined, b: ThresholdTrigger | PlainMessage<ThresholdTrigger> | undefined): boolean;
}

/**
 * @generated from message envoy.config.overload.v2alpha.Trigger
 */
export declare class Trigger extends Message<Trigger> {
  /**
   * The name of the resource this is a trigger for.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof envoy.config.overload.v2alpha.Trigger.trigger_oneof
   */
  triggerOneof: {
    /**
     * @generated from field: envoy.config.overload.v2alpha.ThresholdTrigger threshold = 2;
     */
    value: ThresholdTrigger;
    case: "threshold";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Trigger>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.overload.v2alpha.Trigger";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger;

  static equals(a: Trigger | PlainMessage<Trigger> | undefined, b: Trigger | PlainMessage<Trigger> | undefined): boolean;
}

/**
 * @generated from message envoy.config.overload.v2alpha.OverloadAction
 */
export declare class OverloadAction extends Message<OverloadAction> {
  /**
   * The name of the overload action. This is just a well-known string that listeners can
   * use for registering callbacks. Custom overload actions should be named using reverse
   * DNS to ensure uniqueness.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A set of triggers for this action. If any of these triggers fire the overload action
   * is activated. Listeners are notified when the overload action transitions from
   * inactivated to activated, or vice versa.
   *
   * @generated from field: repeated envoy.config.overload.v2alpha.Trigger triggers = 2;
   */
  triggers: Trigger[];

  constructor(data?: PartialMessage<OverloadAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.overload.v2alpha.OverloadAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverloadAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverloadAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverloadAction;

  static equals(a: OverloadAction | PlainMessage<OverloadAction> | undefined, b: OverloadAction | PlainMessage<OverloadAction> | undefined): boolean;
}

/**
 * @generated from message envoy.config.overload.v2alpha.OverloadManager
 */
export declare class OverloadManager extends Message<OverloadManager> {
  /**
   * The interval for refreshing resource usage.
   *
   * @generated from field: google.protobuf.Duration refresh_interval = 1;
   */
  refreshInterval?: Duration;

  /**
   * The set of resources to monitor.
   *
   * @generated from field: repeated envoy.config.overload.v2alpha.ResourceMonitor resource_monitors = 2;
   */
  resourceMonitors: ResourceMonitor[];

  /**
   * The set of overload actions.
   *
   * @generated from field: repeated envoy.config.overload.v2alpha.OverloadAction actions = 3;
   */
  actions: OverloadAction[];

  constructor(data?: PartialMessage<OverloadManager>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.overload.v2alpha.OverloadManager";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverloadManager;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverloadManager;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverloadManager;

  static equals(a: OverloadManager | PlainMessage<OverloadManager> | undefined, b: OverloadManager | PlainMessage<OverloadManager> | undefined): boolean;
}

