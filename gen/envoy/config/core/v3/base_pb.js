// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/base.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  Any,
  BoolValue,
  proto3,
  Struct,
  UInt32Value,
} from '@bufbuild/protobuf';
import { SemanticVersion } from '../../../type/v3/semantic_version_pb.js';
// import { ContextParams } from "../../../../xds/core/v3/context_params_pb.js";
import { Address } from './address_pb.js';
import { FractionalPercent, Percent } from '../../../type/v3/percent_pb.js';
import { BackoffStrategy } from './backoff_pb.js';
import { HttpUri } from './http_uri_pb.js';

/**
 * Envoy supports :ref:`upstream priority routing
 * <arch_overview_http_routing_priority>` both at the route and the virtual
 * cluster level. The current priority implementation uses different connection
 * pool and circuit breaking settings for each priority level. This means that
 * even for HTTP/2 requests, two physical connections will be used to an
 * upstream host. In the future Envoy will likely support true HTTP/2 priority
 * over a single upstream connection.
 *
 * @generated from enum envoy.config.core.v3.RoutingPriority
 */
export const RoutingPriority = proto3.makeEnum(
  'envoy.config.core.v3.RoutingPriority',
  [
    { no: 0, name: 'DEFAULT' },
    { no: 1, name: 'HIGH' },
  ],
);

/**
 * HTTP request method.
 *
 * @generated from enum envoy.config.core.v3.RequestMethod
 */
export const RequestMethod = proto3.makeEnum(
  'envoy.config.core.v3.RequestMethod',
  [
    { no: 0, name: 'METHOD_UNSPECIFIED' },
    { no: 1, name: 'GET' },
    { no: 2, name: 'HEAD' },
    { no: 3, name: 'POST' },
    { no: 4, name: 'PUT' },
    { no: 5, name: 'DELETE' },
    { no: 6, name: 'CONNECT' },
    { no: 7, name: 'OPTIONS' },
    { no: 8, name: 'TRACE' },
    { no: 9, name: 'PATCH' },
  ],
);

/**
 * Identifies the direction of the traffic relative to the local Envoy.
 *
 * @generated from enum envoy.config.core.v3.TrafficDirection
 */
export const TrafficDirection = proto3.makeEnum(
  'envoy.config.core.v3.TrafficDirection',
  [
    { no: 0, name: 'UNSPECIFIED' },
    { no: 1, name: 'INBOUND' },
    { no: 2, name: 'OUTBOUND' },
  ],
);

/**
 * Identifies location of where either Envoy runs or where upstream hosts run.
 *
 * @generated from message envoy.config.core.v3.Locality
 */
export const Locality = proto3.makeMessageType(
  'envoy.config.core.v3.Locality',
  () => [
    { no: 1, name: 'region', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'zone', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'sub_zone', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * BuildVersion combines SemVer version of extension with free-form build information
 * (i.e. 'alpha', 'private-build') as a set of strings.
 *
 * @generated from message envoy.config.core.v3.BuildVersion
 */
export const BuildVersion = proto3.makeMessageType(
  'envoy.config.core.v3.BuildVersion',
  () => [
    { no: 1, name: 'version', kind: 'message', T: SemanticVersion },
    { no: 2, name: 'metadata', kind: 'message', T: Struct },
  ],
);

/**
 * Version and identification for an Envoy extension.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.Extension
 */
export const Extension = proto3.makeMessageType(
  'envoy.config.core.v3.Extension',
  () => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'category', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'type_descriptor',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'version', kind: 'message', T: BuildVersion },
    { no: 5, name: 'disabled', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 6,
      name: 'type_urls',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ],
);

/**
 * Identifies a specific Envoy instance. The node identifier is presented to the
 * management server, which may use this identifier to distinguish per Envoy
 * configuration for serving.
 * [#next-free-field: 13]
 *
 * @generated from message envoy.config.core.v3.Node
 */
export const Node = proto3.makeMessageType('envoy.config.core.v3.Node', () => [
  { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  { no: 2, name: 'cluster', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  { no: 3, name: 'metadata', kind: 'message', T: Struct },
  // {
  //   no: 12,
  //   name: 'dynamic_parameters',
  //   kind: 'map',
  //   K: 9 /* ScalarType.STRING */,
  //   V: { kind: 'message', T: ContextParams },
  // },
  { no: 4, name: 'locality', kind: 'message', T: Locality },
  {
    no: 6,
    name: 'user_agent_name',
    kind: 'scalar',
    T: 9 /* ScalarType.STRING */,
  },
  {
    no: 7,
    name: 'user_agent_version',
    kind: 'scalar',
    T: 9 /* ScalarType.STRING */,
    oneof: 'user_agent_version_type',
  },
  {
    no: 8,
    name: 'user_agent_build_version',
    kind: 'message',
    T: BuildVersion,
    oneof: 'user_agent_version_type',
  },
  { no: 9, name: 'extensions', kind: 'message', T: Extension, repeated: true },
  {
    no: 10,
    name: 'client_features',
    kind: 'scalar',
    T: 9 /* ScalarType.STRING */,
    repeated: true,
  },
  {
    no: 11,
    name: 'listening_addresses',
    kind: 'message',
    T: Address,
    repeated: true,
  },
]);

/**
 * Metadata provides additional inputs to filters based on matched listeners,
 * filter chains, routes and endpoints. It is structured as a map, usually from
 * filter name (in reverse DNS format) to metadata specific to the filter. Metadata
 * key-values for a filter are merged as connection and request handling occurs,
 * with later values for the same key overriding earlier values.
 *
 * An example use of metadata is providing additional values to
 * http_connection_manager in the envoy.http_connection_manager.access_log
 * namespace.
 *
 * Another example use of metadata is to per service config info in cluster metadata, which may get
 * consumed by multiple filters.
 *
 * For load balancing, Metadata provides a means to subset cluster endpoints.
 * Endpoints have a Metadata object associated and routes contain a Metadata
 * object to match against. There are some well defined metadata used today for
 * this purpose:
 *
 * * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
 *   endpoint and is also used during header processing
 *   (x-envoy-upstream-canary) and for stats purposes.
 * [#next-major-version: move to type/metadata/v2]
 *
 * @generated from message envoy.config.core.v3.Metadata
 */
export const Metadata = proto3.makeMessageType(
  'envoy.config.core.v3.Metadata',
  () => [
    {
      no: 1,
      name: 'filter_metadata',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: Struct },
    },
    {
      no: 2,
      name: 'typed_filter_metadata',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: Any },
    },
  ],
);

/**
 * Runtime derived uint32 with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeUInt32
 */
export const RuntimeUInt32 = proto3.makeMessageType(
  'envoy.config.core.v3.RuntimeUInt32',
  () => [
    {
      no: 2,
      name: 'default_value',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 3,
      name: 'runtime_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ],
);

/**
 * Runtime derived percentage with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimePercent
 */
export const RuntimePercent = proto3.makeMessageType(
  'envoy.config.core.v3.RuntimePercent',
  () => [
    { no: 1, name: 'default_value', kind: 'message', T: Percent },
    {
      no: 2,
      name: 'runtime_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ],
);

/**
 * Runtime derived double with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeDouble
 */
export const RuntimeDouble = proto3.makeMessageType(
  'envoy.config.core.v3.RuntimeDouble',
  () => [
    {
      no: 1,
      name: 'default_value',
      kind: 'scalar',
      T: 1 /* ScalarType.DOUBLE */,
    },
    {
      no: 2,
      name: 'runtime_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ],
);

/**
 * Runtime derived bool with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeFeatureFlag
 */
export const RuntimeFeatureFlag = proto3.makeMessageType(
  'envoy.config.core.v3.RuntimeFeatureFlag',
  () => [
    { no: 1, name: 'default_value', kind: 'message', T: BoolValue },
    {
      no: 2,
      name: 'runtime_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ],
);

/**
 * Query parameter name/value pair.
 *
 * @generated from message envoy.config.core.v3.QueryParameter
 */
export const QueryParameter = proto3.makeMessageType(
  'envoy.config.core.v3.QueryParameter',
  () => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Header name/value pair.
 *
 * @generated from message envoy.config.core.v3.HeaderValue
 */
export const HeaderValue = proto3.makeMessageType(
  'envoy.config.core.v3.HeaderValue',
  () => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'raw_value', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Header name/value pair plus option to control append behavior.
 *
 * @generated from message envoy.config.core.v3.HeaderValueOption
 */
export const HeaderValueOption = proto3.makeMessageType(
  'envoy.config.core.v3.HeaderValueOption',
  () => [
    { no: 1, name: 'header', kind: 'message', T: HeaderValue },
    { no: 2, name: 'append', kind: 'message', T: BoolValue },
    {
      no: 3,
      name: 'append_action',
      kind: 'enum',
      T: proto3.getEnumType(HeaderValueOption_HeaderAppendAction),
    },
    {
      no: 4,
      name: 'keep_empty_value',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ],
);

/**
 * Describes the supported actions types for header append action.
 *
 * @generated from enum envoy.config.core.v3.HeaderValueOption.HeaderAppendAction
 */
export const HeaderValueOption_HeaderAppendAction = proto3.makeEnum(
  'envoy.config.core.v3.HeaderValueOption.HeaderAppendAction',
  [
    { no: 0, name: 'APPEND_IF_EXISTS_OR_ADD' },
    { no: 1, name: 'ADD_IF_ABSENT' },
    { no: 2, name: 'OVERWRITE_IF_EXISTS_OR_ADD' },
    { no: 3, name: 'OVERWRITE_IF_EXISTS' },
  ],
);

/**
 * Wrapper for a set of headers.
 *
 * @generated from message envoy.config.core.v3.HeaderMap
 */
export const HeaderMap = proto3.makeMessageType(
  'envoy.config.core.v3.HeaderMap',
  () => [
    { no: 1, name: 'headers', kind: 'message', T: HeaderValue, repeated: true },
  ],
);

/**
 * A directory that is watched for changes, e.g. by inotify on Linux. Move/rename
 * events inside this directory trigger the watch.
 *
 * @generated from message envoy.config.core.v3.WatchedDirectory
 */
export const WatchedDirectory = proto3.makeMessageType(
  'envoy.config.core.v3.WatchedDirectory',
  () => [{ no: 1, name: 'path', kind: 'scalar', T: 9 /* ScalarType.STRING */ }],
);

/**
 * Data source consisting of a file, an inline value, or an environment variable.
 *
 * @generated from message envoy.config.core.v3.DataSource
 */
export const DataSource = proto3.makeMessageType(
  'envoy.config.core.v3.DataSource',
  () => [
    {
      no: 1,
      name: 'filename',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      oneof: 'specifier',
    },
    {
      no: 2,
      name: 'inline_bytes',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
      oneof: 'specifier',
    },
    {
      no: 3,
      name: 'inline_string',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      oneof: 'specifier',
    },
    {
      no: 4,
      name: 'environment_variable',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      oneof: 'specifier',
    },
  ],
);

/**
 * The message specifies the retry policy of remote data source when fetching fails.
 *
 * @generated from message envoy.config.core.v3.RetryPolicy
 */
export const RetryPolicy = proto3.makeMessageType(
  'envoy.config.core.v3.RetryPolicy',
  () => [
    { no: 1, name: 'retry_back_off', kind: 'message', T: BackoffStrategy },
    { no: 2, name: 'num_retries', kind: 'message', T: UInt32Value },
  ],
);

/**
 * The message specifies how to fetch data from remote and how to verify it.
 *
 * @generated from message envoy.config.core.v3.RemoteDataSource
 */
export const RemoteDataSource = proto3.makeMessageType(
  'envoy.config.core.v3.RemoteDataSource',
  () => [
    { no: 1, name: 'http_uri', kind: 'message', T: HttpUri },
    { no: 2, name: 'sha256', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'retry_policy', kind: 'message', T: RetryPolicy },
  ],
);

/**
 * Async data source which support async data fetch.
 *
 * @generated from message envoy.config.core.v3.AsyncDataSource
 */
export const AsyncDataSource = proto3.makeMessageType(
  'envoy.config.core.v3.AsyncDataSource',
  () => [
    {
      no: 1,
      name: 'local',
      kind: 'message',
      T: DataSource,
      oneof: 'specifier',
    },
    {
      no: 2,
      name: 'remote',
      kind: 'message',
      T: RemoteDataSource,
      oneof: 'specifier',
    },
  ],
);

/**
 * Configuration for transport socket in :ref:`listeners <config_listeners>` and
 * :ref:`clusters <envoy_v3_api_msg_config.cluster.v3.Cluster>`. If the configuration is
 * empty, a default transport socket implementation and configuration will be
 * chosen based on the platform and existence of tls_context.
 *
 * @generated from message envoy.config.core.v3.TransportSocket
 */
export const TransportSocket = proto3.makeMessageType(
  'envoy.config.core.v3.TransportSocket',
  () => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'typed_config',
      kind: 'message',
      T: Any,
      oneof: 'config_type',
    },
  ],
);

/**
 * Runtime derived FractionalPercent with defaults for when the numerator or denominator is not
 * specified via a runtime key.
 *
 * .. note::
 *
 *   Parsing of the runtime key's data is implemented such that it may be represented as a
 *   :ref:`FractionalPercent <envoy_v3_api_msg_type.v3.FractionalPercent>` proto represented as JSON/YAML
 *   and may also be represented as an integer with the assumption that the value is an integral
 *   percentage out of 100. For instance, a runtime key lookup returning the value "42" would parse
 *   as a ``FractionalPercent`` whose numerator is 42 and denominator is HUNDRED.
 *
 * @generated from message envoy.config.core.v3.RuntimeFractionalPercent
 */
export const RuntimeFractionalPercent = proto3.makeMessageType(
  'envoy.config.core.v3.RuntimeFractionalPercent',
  () => [
    { no: 1, name: 'default_value', kind: 'message', T: FractionalPercent },
    {
      no: 2,
      name: 'runtime_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ],
);

/**
 * Identifies a specific ControlPlane instance that Envoy is connected to.
 *
 * @generated from message envoy.config.core.v3.ControlPlane
 */
export const ControlPlane = proto3.makeMessageType(
  'envoy.config.core.v3.ControlPlane',
  () => [
    { no: 1, name: 'identifier', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ],
);
