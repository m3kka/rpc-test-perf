// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/substitution_format_string.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TypedExtensionConfig } from "./extension";
import { DataSource } from "./base";
import { Struct } from "../../../../google/protobuf/struct";
// [#protodoc-title: Substitution format string]

/**
 * Configuration to use multiple :ref:`command operators <config_access_log_command_operators>`
 * to generate a new string in either plain text or JSON format.
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.core.v3.SubstitutionFormatString
 */
export interface SubstitutionFormatString {
    /**
     * @generated from protobuf oneof: format
     */
    format: {
        oneofKind: "textFormat";
        /**
         * Specify a format with command operators to form a text string.
         * Its details is described in :ref:`format string<config_access_log_format_strings>`.
         *
         * For example, setting ``text_format`` like below,
         *
         * .. validated-code-block:: yaml
         *   :type-name: envoy.config.core.v3.SubstitutionFormatString
         *
         *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
         *
         * generates plain text similar to:
         *
         * .. code-block:: text
         *
         *   upstream connect error:503:path=/foo
         *
         * Deprecated in favor of :ref:`text_format_source <envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source>`. To migrate text format strings, use the :ref:`inline_string <envoy_v3_api_field_config.core.v3.DataSource.inline_string>` field.
         *
         * @deprecated
         * @generated from protobuf field: string text_format = 1 [deprecated = true];
         */
        textFormat: string;
    } | {
        oneofKind: "jsonFormat";
        /**
         * Specify a format with command operators to form a JSON string.
         * Its details is described in :ref:`format dictionary<config_access_log_format_dictionaries>`.
         * Values are rendered as strings, numbers, or boolean values as appropriate.
         * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
         * See the documentation for a specific command operator for details.
         *
         * .. validated-code-block:: yaml
         *   :type-name: envoy.config.core.v3.SubstitutionFormatString
         *
         *   json_format:
         *     status: "%RESPONSE_CODE%"
         *     message: "%LOCAL_REPLY_BODY%"
         *
         * The following JSON object would be created:
         *
         * .. code-block:: json
         *
         *  {
         *    "status": 500,
         *    "message": "My error message"
         *  }
         *
         *
         * @generated from protobuf field: google.protobuf.Struct json_format = 2;
         */
        jsonFormat: Struct;
    } | {
        oneofKind: "textFormatSource";
        /**
         * Specify a format with command operators to form a text string.
         * Its details is described in :ref:`format string<config_access_log_format_strings>`.
         *
         * For example, setting ``text_format`` like below,
         *
         * .. validated-code-block:: yaml
         *   :type-name: envoy.config.core.v3.SubstitutionFormatString
         *
         *   text_format_source:
         *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
         *
         * generates plain text similar to:
         *
         * .. code-block:: text
         *
         *   upstream connect error:503:path=/foo
         *
         *
         * @generated from protobuf field: envoy.config.core.v3.DataSource text_format_source = 5;
         */
        textFormatSource: DataSource;
    } | {
        oneofKind: undefined;
    };
    /**
     * If set to true, when command operators are evaluated to null,
     *
     * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
     *   empty string, so that empty values are omitted entirely.
     * * for ``json_format`` the keys with null values are omitted in the output structure.
     *
     * @generated from protobuf field: bool omit_empty_values = 3;
     */
    omitEmptyValues: boolean;
    /**
     * Specify a ``content_type`` field.
     * If this field is not set then ``text/plain`` is used for ``text_format`` and
     * ``application/json`` is used for ``json_format``.
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   content_type: "text/html; charset=UTF-8"
     *
     *
     * @generated from protobuf field: string content_type = 4;
     */
    contentType: string;
    /**
     * Specifies a collection of Formatter plugins that can be called from the access log configuration.
     * See the formatters extensions documentation for details.
     * [#extension-category: envoy.formatter]
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.TypedExtensionConfig formatters = 6;
     */
    formatters: TypedExtensionConfig[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SubstitutionFormatString$Type extends MessageType<SubstitutionFormatString> {
    constructor() {
        super("envoy.config.core.v3.SubstitutionFormatString", [
            { no: 1, name: "text_format", kind: "scalar", oneof: "format", T: 9 /*ScalarType.STRING*/, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 2, name: "json_format", kind: "message", oneof: "format", T: () => Struct, options: { "validate.rules": { message: { required: true } } } },
            { no: 5, name: "text_format_source", kind: "message", oneof: "format", T: () => DataSource },
            { no: 3, name: "omit_empty_values", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_VALUE", strict: false } } } },
            { no: 6, name: "formatters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TypedExtensionConfig }
        ]);
    }
    create(value?: PartialMessage<SubstitutionFormatString>): SubstitutionFormatString {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.format = { oneofKind: undefined };
        message.omitEmptyValues = false;
        message.contentType = "";
        message.formatters = [];
        if (value !== undefined)
            reflectionMergePartial<SubstitutionFormatString>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubstitutionFormatString): SubstitutionFormatString {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text_format = 1 [deprecated = true];*/ 1:
                    message.format = {
                        oneofKind: "textFormat",
                        textFormat: reader.string()
                    };
                    break;
                case /* google.protobuf.Struct json_format */ 2:
                    message.format = {
                        oneofKind: "jsonFormat",
                        jsonFormat: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).jsonFormat)
                    };
                    break;
                case /* envoy.config.core.v3.DataSource text_format_source */ 5:
                    message.format = {
                        oneofKind: "textFormatSource",
                        textFormatSource: DataSource.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).textFormatSource)
                    };
                    break;
                case /* bool omit_empty_values */ 3:
                    message.omitEmptyValues = reader.bool();
                    break;
                case /* string content_type */ 4:
                    message.contentType = reader.string();
                    break;
                case /* repeated envoy.config.core.v3.TypedExtensionConfig formatters */ 6:
                    message.formatters.push(TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubstitutionFormatString, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text_format = 1 [deprecated = true]; */
        if (message.format.oneofKind === "textFormat")
            writer.tag(1, WireType.LengthDelimited).string(message.format.textFormat);
        /* google.protobuf.Struct json_format = 2; */
        if (message.format.oneofKind === "jsonFormat")
            Struct.internalBinaryWrite(message.format.jsonFormat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.DataSource text_format_source = 5; */
        if (message.format.oneofKind === "textFormatSource")
            DataSource.internalBinaryWrite(message.format.textFormatSource, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool omit_empty_values = 3; */
        if (message.omitEmptyValues !== false)
            writer.tag(3, WireType.Varint).bool(message.omitEmptyValues);
        /* string content_type = 4; */
        if (message.contentType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentType);
        /* repeated envoy.config.core.v3.TypedExtensionConfig formatters = 6; */
        for (let i = 0; i < message.formatters.length; i++)
            TypedExtensionConfig.internalBinaryWrite(message.formatters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.SubstitutionFormatString
 */
export const SubstitutionFormatString = new SubstitutionFormatString$Type();
