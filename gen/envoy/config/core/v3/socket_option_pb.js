// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/socket_option.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 *
 * For example:
 *
 * .. code-block:: json
 *
 *  {
 *    "description": "support tcp keep alive",
 *    "state": 0,
 *    "level": 1,
 *    "name": 9,
 *    "int_value": 1,
 *  }
 *
 * 1 means SOL_SOCKET and 9 means SO_KEEPALIVE on Linux.
 * With the above configuration, `TCP Keep-Alives <https://www.freesoft.org/CIE/RFC/1122/114.htm>`_
 * can be enabled in socket with Linux, which can be used in
 * :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.socket_options>` or
 * :ref:`admin's <envoy_v3_api_field_config.bootstrap.v3.Admin.socket_options>` socket_options etc.
 *
 * It should be noted that the name or level may have different values on different platforms.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.SocketOption
 */
export const SocketOption = proto3.makeMessageType(
  "envoy.config.core.v3.SocketOption",
  () => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "name", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "int_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "buf_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(SocketOption_SocketState) },
  ],
);

/**
 * @generated from enum envoy.config.core.v3.SocketOption.SocketState
 */
export const SocketOption_SocketState = proto3.makeEnum(
  "envoy.config.core.v3.SocketOption.SocketState",
  [
    {no: 0, name: "STATE_PREBIND"},
    {no: 1, name: "STATE_BOUND"},
    {no: 2, name: "STATE_LISTENING"},
  ],
);

/**
 * @generated from message envoy.config.core.v3.SocketOptionsOverride
 */
export const SocketOptionsOverride = proto3.makeMessageType(
  "envoy.config.core.v3.SocketOptionsOverride",
  () => [
    { no: 1, name: "socket_options", kind: "message", T: SocketOption, repeated: true },
  ],
);

