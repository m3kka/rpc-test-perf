// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/resolver.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Address } from "./address_pb.js";

/**
 * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
 *
 * @generated from message envoy.config.core.v3.DnsResolverOptions
 */
export declare class DnsResolverOptions extends Message<DnsResolverOptions> {
  /**
   * Use TCP for all DNS queries instead of the default protocol UDP.
   *
   * @generated from field: bool use_tcp_for_dns_lookups = 1;
   */
  useTcpForDnsLookups: boolean;

  /**
   * Do not use the default search domains; only query hostnames as-is or as aliases.
   *
   * @generated from field: bool no_default_search_domain = 2;
   */
  noDefaultSearchDomain: boolean;

  constructor(data?: PartialMessage<DnsResolverOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.DnsResolverOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsResolverOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsResolverOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsResolverOptions;

  static equals(a: DnsResolverOptions | PlainMessage<DnsResolverOptions> | undefined, b: DnsResolverOptions | PlainMessage<DnsResolverOptions> | undefined): boolean;
}

/**
 * DNS resolution configuration which includes the underlying dns resolver addresses and options.
 *
 * @generated from message envoy.config.core.v3.DnsResolutionConfig
 */
export declare class DnsResolutionConfig extends Message<DnsResolutionConfig> {
  /**
   * A list of dns resolver addresses. If specified, the DNS client library will perform resolution
   * via the underlying DNS resolvers. Otherwise, the default system resolvers
   * (e.g., /etc/resolv.conf) will be used.
   *
   * @generated from field: repeated envoy.config.core.v3.Address resolvers = 1;
   */
  resolvers: Address[];

  /**
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   *
   * @generated from field: envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;
   */
  dnsResolverOptions?: DnsResolverOptions;

  constructor(data?: PartialMessage<DnsResolutionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.DnsResolutionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DnsResolutionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DnsResolutionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DnsResolutionConfig;

  static equals(a: DnsResolutionConfig | PlainMessage<DnsResolutionConfig> | undefined, b: DnsResolutionConfig | PlainMessage<DnsResolutionConfig> | undefined): boolean;
}

