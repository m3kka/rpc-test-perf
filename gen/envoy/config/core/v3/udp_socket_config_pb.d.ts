// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/udp_socket_config.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Generic UDP socket configuration.
 *
 * @generated from message envoy.config.core.v3.UdpSocketConfig
 */
export declare class UdpSocketConfig extends Message<UdpSocketConfig> {
  /**
   * The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
   * more memory per socket. Received datagrams above this size will be dropped. If not set
   * defaults to 1500 bytes.
   *
   * @generated from field: google.protobuf.UInt64Value max_rx_datagram_size = 1;
   */
  maxRxDatagramSize?: bigint;

  /**
   * Configures whether Generic Receive Offload (GRO)
   * <https://en.wikipedia.org/wiki/Large_receive_offload>_ is preferred when reading from the
   * UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
   * This option affects performance but not functionality. If GRO is not supported by the operating
   * system, non-GRO receive will be used.
   *
   * @generated from field: google.protobuf.BoolValue prefer_gro = 2;
   */
  preferGro?: boolean;

  constructor(data?: PartialMessage<UdpSocketConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.UdpSocketConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UdpSocketConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UdpSocketConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UdpSocketConfig;

  static equals(a: UdpSocketConfig | PlainMessage<UdpSocketConfig> | undefined, b: UdpSocketConfig | PlainMessage<UdpSocketConfig> | undefined): boolean;
}

