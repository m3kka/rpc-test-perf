// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/substitution_format_string.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DataSource } from "./base_pb.js";
import type { TypedExtensionConfig } from "./extension_pb.js";

/**
 * Configuration to use multiple :ref:`command operators <config_access_log_command_operators>`
 * to generate a new string in either plain text or JSON format.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.SubstitutionFormatString
 */
export declare class SubstitutionFormatString extends Message<SubstitutionFormatString> {
  /**
   * @generated from oneof envoy.config.core.v3.SubstitutionFormatString.format
   */
  format: {
    /**
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string<config_access_log_format_strings>`.
     *
     * For example, setting ``text_format`` like below,
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
     *
     * generates plain text similar to:
     *
     * .. code-block:: text
     *
     *   upstream connect error:503:path=/foo
     *
     * Deprecated in favor of :ref:`text_format_source <envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source>`. To migrate text format strings, use the :ref:`inline_string <envoy_v3_api_field_config.core.v3.DataSource.inline_string>` field.
     *
     * @generated from field: string text_format = 1 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "textFormat";
  } | {
    /**
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary<config_access_log_format_dictionaries>`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *
     * The following JSON object would be created:
     *
     * .. code-block:: json
     *
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     *
     *
     * @generated from field: google.protobuf.Struct json_format = 2;
     */
    value: Struct;
    case: "jsonFormat";
  } | {
    /**
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string<config_access_log_format_strings>`.
     *
     * For example, setting ``text_format`` like below,
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
     *
     * generates plain text similar to:
     *
     * .. code-block:: text
     *
     *   upstream connect error:503:path=/foo
     *
     *
     * @generated from field: envoy.config.core.v3.DataSource text_format_source = 5;
     */
    value: DataSource;
    case: "textFormatSource";
  } | { case: undefined; value?: undefined };

  /**
   * If set to true, when command operators are evaluated to null,
   *
   * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
   *   empty string, so that empty values are omitted entirely.
   * * for ``json_format`` the keys with null values are omitted in the output structure.
   *
   * @generated from field: bool omit_empty_values = 3;
   */
  omitEmptyValues: boolean;

  /**
   * Specify a ``content_type`` field.
   * If this field is not set then ``text/plain`` is used for ``text_format`` and
   * ``application/json`` is used for ``json_format``.
   *
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *
   *   content_type: "text/html; charset=UTF-8"
   *
   *
   * @generated from field: string content_type = 4;
   */
  contentType: string;

  /**
   * Specifies a collection of Formatter plugins that can be called from the access log configuration.
   * See the formatters extensions documentation for details.
   * [#extension-category: envoy.formatter]
   *
   * @generated from field: repeated envoy.config.core.v3.TypedExtensionConfig formatters = 6;
   */
  formatters: TypedExtensionConfig[];

  constructor(data?: PartialMessage<SubstitutionFormatString>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.SubstitutionFormatString";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstitutionFormatString;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstitutionFormatString;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstitutionFormatString;

  static equals(a: SubstitutionFormatString | PlainMessage<SubstitutionFormatString> | undefined, b: SubstitutionFormatString | PlainMessage<SubstitutionFormatString> | undefined): boolean;
}

