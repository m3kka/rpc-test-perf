// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/health_check.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, BoolValue, Duration, proto3, Struct, UInt32Value, UInt64Value } from "@bufbuild/protobuf";
import { TypedExtensionConfig } from "./extension_pb.js";
import { EventServiceConfig } from "./event_service_config_pb.js";
import { HeaderValueOption, RequestMethod } from "./base_pb.js";
import { Int64Range } from "../../../type/v3/range_pb.js";
import { CodecClientType } from "../../../type/v3/http_pb.js";
import { StringMatcher } from "../../../type/matcher/v3/string_pb.js";

/**
 * Endpoint health status.
 *
 * @generated from enum envoy.config.core.v3.HealthStatus
 */
export const HealthStatus = proto3.makeEnum(
  "envoy.config.core.v3.HealthStatus",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "HEALTHY"},
    {no: 2, name: "UNHEALTHY"},
    {no: 3, name: "DRAINING"},
    {no: 4, name: "TIMEOUT"},
    {no: 5, name: "DEGRADED"},
  ],
);

/**
 * @generated from message envoy.config.core.v3.HealthStatusSet
 */
export const HealthStatusSet = proto3.makeMessageType(
  "envoy.config.core.v3.HealthStatusSet",
  () => [
    { no: 1, name: "statuses", kind: "enum", T: proto3.getEnumType(HealthStatus), repeated: true },
  ],
);

/**
 * [#next-free-field: 26]
 *
 * @generated from message envoy.config.core.v3.HealthCheck
 */
export const HealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck",
  () => [
    { no: 1, name: "timeout", kind: "message", T: Duration },
    { no: 2, name: "interval", kind: "message", T: Duration },
    { no: 20, name: "initial_jitter", kind: "message", T: Duration },
    { no: 3, name: "interval_jitter", kind: "message", T: Duration },
    { no: 18, name: "interval_jitter_percent", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "unhealthy_threshold", kind: "message", T: UInt32Value },
    { no: 5, name: "healthy_threshold", kind: "message", T: UInt32Value },
    { no: 6, name: "alt_port", kind: "message", T: UInt32Value },
    { no: 7, name: "reuse_connection", kind: "message", T: BoolValue },
    { no: 8, name: "http_health_check", kind: "message", T: HealthCheck_HttpHealthCheck, oneof: "health_checker" },
    { no: 9, name: "tcp_health_check", kind: "message", T: HealthCheck_TcpHealthCheck, oneof: "health_checker" },
    { no: 11, name: "grpc_health_check", kind: "message", T: HealthCheck_GrpcHealthCheck, oneof: "health_checker" },
    { no: 13, name: "custom_health_check", kind: "message", T: HealthCheck_CustomHealthCheck, oneof: "health_checker" },
    { no: 12, name: "no_traffic_interval", kind: "message", T: Duration },
    { no: 24, name: "no_traffic_healthy_interval", kind: "message", T: Duration },
    { no: 14, name: "unhealthy_interval", kind: "message", T: Duration },
    { no: 15, name: "unhealthy_edge_interval", kind: "message", T: Duration },
    { no: 16, name: "healthy_edge_interval", kind: "message", T: Duration },
    { no: 17, name: "event_log_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "event_logger", kind: "message", T: TypedExtensionConfig, repeated: true },
    { no: 22, name: "event_service", kind: "message", T: EventServiceConfig },
    { no: 19, name: "always_log_health_check_failures", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "tls_options", kind: "message", T: HealthCheck_TlsOptions },
    { no: 23, name: "transport_socket_match_criteria", kind: "message", T: Struct },
  ],
);

/**
 * Describes the encoding of the payload bytes in the payload.
 *
 * @generated from message envoy.config.core.v3.HealthCheck.Payload
 */
export const HealthCheck_Payload = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.Payload",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload" },
    { no: 2, name: "binary", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
  ],
  {localName: "HealthCheck_Payload"},
);

/**
 * [#next-free-field: 15]
 *
 * @generated from message envoy.config.core.v3.HealthCheck.HttpHealthCheck
 */
export const HealthCheck_HttpHealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.HttpHealthCheck",
  () => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "send", kind: "message", T: HealthCheck_Payload },
    { no: 4, name: "receive", kind: "message", T: HealthCheck_Payload, repeated: true },
    { no: 14, name: "response_buffer_size", kind: "message", T: UInt64Value },
    { no: 6, name: "request_headers_to_add", kind: "message", T: HeaderValueOption, repeated: true },
    { no: 8, name: "request_headers_to_remove", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "expected_statuses", kind: "message", T: Int64Range, repeated: true },
    { no: 12, name: "retriable_statuses", kind: "message", T: Int64Range, repeated: true },
    { no: 10, name: "codec_client_type", kind: "enum", T: proto3.getEnumType(CodecClientType) },
    { no: 11, name: "service_name_matcher", kind: "message", T: StringMatcher },
    { no: 13, name: "method", kind: "enum", T: proto3.getEnumType(RequestMethod) },
  ],
  {localName: "HealthCheck_HttpHealthCheck"},
);

/**
 * @generated from message envoy.config.core.v3.HealthCheck.TcpHealthCheck
 */
export const HealthCheck_TcpHealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.TcpHealthCheck",
  () => [
    { no: 1, name: "send", kind: "message", T: HealthCheck_Payload },
    { no: 2, name: "receive", kind: "message", T: HealthCheck_Payload, repeated: true },
  ],
  {localName: "HealthCheck_TcpHealthCheck"},
);

/**
 * @generated from message envoy.config.core.v3.HealthCheck.RedisHealthCheck
 */
export const HealthCheck_RedisHealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.RedisHealthCheck",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "HealthCheck_RedisHealthCheck"},
);

/**
 * `grpc.health.v1.Health
 * <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
 * healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
 * for details.
 *
 * @generated from message envoy.config.core.v3.HealthCheck.GrpcHealthCheck
 */
export const HealthCheck_GrpcHealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.GrpcHealthCheck",
  () => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "initial_metadata", kind: "message", T: HeaderValueOption, repeated: true },
  ],
  {localName: "HealthCheck_GrpcHealthCheck"},
);

/**
 * Custom health check.
 *
 * @generated from message envoy.config.core.v3.HealthCheck.CustomHealthCheck
 */
export const HealthCheck_CustomHealthCheck = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.CustomHealthCheck",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "typed_config", kind: "message", T: Any, oneof: "config_type" },
  ],
  {localName: "HealthCheck_CustomHealthCheck"},
);

/**
 * Health checks occur over the transport socket specified for the cluster. This implies that if a
 * cluster is using a TLS-enabled transport socket, the health check will also occur over TLS.
 *
 * This allows overriding the cluster TLS settings, just for health check connections.
 *
 * @generated from message envoy.config.core.v3.HealthCheck.TlsOptions
 */
export const HealthCheck_TlsOptions = proto3.makeMessageType(
  "envoy.config.core.v3.HealthCheck.TlsOptions",
  () => [
    { no: 1, name: "alpn_protocols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "HealthCheck_TlsOptions"},
);

