// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/config_source.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, DoubleValue, Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { GrpcService } from "./grpc_service_pb.js";
import { TypedExtensionConfig } from "./extension_pb.js";
import { WatchedDirectory } from "./base_pb.js";
import { Authority } from "../../../../xds/core/v3/authority_pb.js";

/**
 * xDS API and non-xDS services version. This is used to describe both resource and transport
 * protocol versions (in distinct configuration fields).
 *
 * @generated from enum envoy.config.core.v3.ApiVersion
 */
export const ApiVersion = proto3.makeEnum(
  "envoy.config.core.v3.ApiVersion",
  [
    {no: 0, name: "AUTO"},
    {no: 1, name: "V2"},
    {no: 2, name: "V3"},
  ],
);

/**
 * API configuration source. This identifies the API type and cluster that Envoy
 * will use to fetch an xDS API.
 * [#next-free-field: 10]
 *
 * @generated from message envoy.config.core.v3.ApiConfigSource
 */
export const ApiConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.ApiConfigSource",
  () => [
    { no: 1, name: "api_type", kind: "enum", T: proto3.getEnumType(ApiConfigSource_ApiType) },
    { no: 8, name: "transport_api_version", kind: "enum", T: proto3.getEnumType(ApiVersion) },
    { no: 2, name: "cluster_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "grpc_services", kind: "message", T: GrpcService, repeated: true },
    { no: 3, name: "refresh_delay", kind: "message", T: Duration },
    { no: 5, name: "request_timeout", kind: "message", T: Duration },
    { no: 6, name: "rate_limit_settings", kind: "message", T: RateLimitSettings },
    { no: 7, name: "set_node_on_first_message_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "config_validators", kind: "message", T: TypedExtensionConfig, repeated: true },
  ],
);

/**
 * APIs may be fetched via either REST or gRPC.
 *
 * @generated from enum envoy.config.core.v3.ApiConfigSource.ApiType
 */
export const ApiConfigSource_ApiType = proto3.makeEnum(
  "envoy.config.core.v3.ApiConfigSource.ApiType",
  [
    {no: 0, name: "DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE"},
    {no: 1, name: "REST"},
    {no: 2, name: "GRPC"},
    {no: 3, name: "DELTA_GRPC"},
    {no: 5, name: "AGGREGATED_GRPC"},
    {no: 6, name: "AGGREGATED_DELTA_GRPC"},
  ],
);

/**
 * Aggregated Discovery Service (ADS) options. This is currently empty, but when
 * set in :ref:`ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>` can be used to
 * specify that ADS is to be used.
 *
 * @generated from message envoy.config.core.v3.AggregatedConfigSource
 */
export const AggregatedConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.AggregatedConfigSource",
  [],
);

/**
 * [#not-implemented-hide:]
 * Self-referencing config source options. This is currently empty, but when
 * set in :ref:`ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>` can be used to
 * specify that other data can be obtained from the same server.
 *
 * @generated from message envoy.config.core.v3.SelfConfigSource
 */
export const SelfConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.SelfConfigSource",
  () => [
    { no: 1, name: "transport_api_version", kind: "enum", T: proto3.getEnumType(ApiVersion) },
  ],
);

/**
 * Rate Limit settings to be applied for discovery requests made by Envoy.
 *
 * @generated from message envoy.config.core.v3.RateLimitSettings
 */
export const RateLimitSettings = proto3.makeMessageType(
  "envoy.config.core.v3.RateLimitSettings",
  () => [
    { no: 1, name: "max_tokens", kind: "message", T: UInt32Value },
    { no: 2, name: "fill_rate", kind: "message", T: DoubleValue },
  ],
);

/**
 * Local filesystem path configuration source.
 *
 * @generated from message envoy.config.core.v3.PathConfigSource
 */
export const PathConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.PathConfigSource",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "watched_directory", kind: "message", T: WatchedDirectory },
  ],
);

/**
 * Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
 * <config_cluster_manager>`, :ref:`routes
 * <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`, :ref:`endpoints
 * <arch_overview_service_discovery>` etc. may either be sourced from the
 * filesystem or from an xDS API source. Filesystem configs are watched with
 * inotify for updates.
 * [#next-free-field: 9]
 *
 * @generated from message envoy.config.core.v3.ConfigSource
 */
export const ConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.ConfigSource",
  () => [
    { no: 7, name: "authorities", kind: "message", T: Authority, repeated: true },
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "config_source_specifier" },
    { no: 8, name: "path_config_source", kind: "message", T: PathConfigSource, oneof: "config_source_specifier" },
    { no: 2, name: "api_config_source", kind: "message", T: ApiConfigSource, oneof: "config_source_specifier" },
    { no: 3, name: "ads", kind: "message", T: AggregatedConfigSource, oneof: "config_source_specifier" },
    { no: 5, name: "self", kind: "message", T: SelfConfigSource, oneof: "config_source_specifier" },
    { no: 4, name: "initial_fetch_timeout", kind: "message", T: Duration },
    { no: 6, name: "resource_api_version", kind: "enum", T: proto3.getEnumType(ApiVersion) },
  ],
);

/**
 * Configuration source specifier for a late-bound extension configuration. The
 * parent resource is warmed until all the initial extension configurations are
 * received, unless the flag to apply the default configuration is set.
 * Subsequent extension updates are atomic on a per-worker basis. Once an
 * extension configuration is applied to a request or a connection, it remains
 * constant for the duration of processing. If the initial delivery of the
 * extension configuration fails, due to a timeout for example, the optional
 * default configuration is applied. Without a default configuration, the
 * extension is disabled, until an extension configuration is received. The
 * behavior of a disabled extension depends on the context. For example, a
 * filter chain with a disabled extension filter rejects all incoming streams.
 *
 * @generated from message envoy.config.core.v3.ExtensionConfigSource
 */
export const ExtensionConfigSource = proto3.makeMessageType(
  "envoy.config.core.v3.ExtensionConfigSource",
  () => [
    { no: 1, name: "config_source", kind: "message", T: ConfigSource },
    { no: 2, name: "default_config", kind: "message", T: Any },
    { no: 3, name: "apply_default_config_without_warming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "type_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

