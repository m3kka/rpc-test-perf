// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/resolver.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Address } from "./address";
// [#protodoc-title: Resolver]

/**
 * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
 *
 * @generated from protobuf message envoy.config.core.v3.DnsResolverOptions
 */
export interface DnsResolverOptions {
    /**
     * Use TCP for all DNS queries instead of the default protocol UDP.
     *
     * @generated from protobuf field: bool use_tcp_for_dns_lookups = 1;
     */
    useTcpForDnsLookups: boolean;
    /**
     * Do not use the default search domains; only query hostnames as-is or as aliases.
     *
     * @generated from protobuf field: bool no_default_search_domain = 2;
     */
    noDefaultSearchDomain: boolean;
}
/**
 * DNS resolution configuration which includes the underlying dns resolver addresses and options.
 *
 * @generated from protobuf message envoy.config.core.v3.DnsResolutionConfig
 */
export interface DnsResolutionConfig {
    /**
     * A list of dns resolver addresses. If specified, the DNS client library will perform resolution
     * via the underlying DNS resolvers. Otherwise, the default system resolvers
     * (e.g., /etc/resolv.conf) will be used.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.Address resolvers = 1;
     */
    resolvers: Address[];
    /**
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     *
     * @generated from protobuf field: envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;
     */
    dnsResolverOptions?: DnsResolverOptions;
}
// @generated message type with reflection information, may provide speed optimized methods
class DnsResolverOptions$Type extends MessageType<DnsResolverOptions> {
    constructor() {
        super("envoy.config.core.v3.DnsResolverOptions", [
            { no: 1, name: "use_tcp_for_dns_lookups", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "no_default_search_domain", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DnsResolverOptions>): DnsResolverOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.useTcpForDnsLookups = false;
        message.noDefaultSearchDomain = false;
        if (value !== undefined)
            reflectionMergePartial<DnsResolverOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsResolverOptions): DnsResolverOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_tcp_for_dns_lookups */ 1:
                    message.useTcpForDnsLookups = reader.bool();
                    break;
                case /* bool no_default_search_domain */ 2:
                    message.noDefaultSearchDomain = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsResolverOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_tcp_for_dns_lookups = 1; */
        if (message.useTcpForDnsLookups !== false)
            writer.tag(1, WireType.Varint).bool(message.useTcpForDnsLookups);
        /* bool no_default_search_domain = 2; */
        if (message.noDefaultSearchDomain !== false)
            writer.tag(2, WireType.Varint).bool(message.noDefaultSearchDomain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.DnsResolverOptions
 */
export const DnsResolverOptions = new DnsResolverOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DnsResolutionConfig$Type extends MessageType<DnsResolutionConfig> {
    constructor() {
        super("envoy.config.core.v3.DnsResolutionConfig", [
            { no: 1, name: "resolvers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Address, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "dns_resolver_options", kind: "message", T: () => DnsResolverOptions }
        ]);
    }
    create(value?: PartialMessage<DnsResolutionConfig>): DnsResolutionConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resolvers = [];
        if (value !== undefined)
            reflectionMergePartial<DnsResolutionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DnsResolutionConfig): DnsResolutionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.Address resolvers */ 1:
                    message.resolvers.push(Address.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.core.v3.DnsResolverOptions dns_resolver_options */ 2:
                    message.dnsResolverOptions = DnsResolverOptions.internalBinaryRead(reader, reader.uint32(), options, message.dnsResolverOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DnsResolutionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.Address resolvers = 1; */
        for (let i = 0; i < message.resolvers.length; i++)
            Address.internalBinaryWrite(message.resolvers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2; */
        if (message.dnsResolverOptions)
            DnsResolverOptions.internalBinaryWrite(message.dnsResolverOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.DnsResolutionConfig
 */
export const DnsResolutionConfig = new DnsResolutionConfig$Type();
