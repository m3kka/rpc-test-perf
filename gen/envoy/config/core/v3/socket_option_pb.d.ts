// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/socket_option.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 *
 * For example:
 *
 * .. code-block:: json
 *
 *  {
 *    "description": "support tcp keep alive",
 *    "state": 0,
 *    "level": 1,
 *    "name": 9,
 *    "int_value": 1,
 *  }
 *
 * 1 means SOL_SOCKET and 9 means SO_KEEPALIVE on Linux.
 * With the above configuration, `TCP Keep-Alives <https://www.freesoft.org/CIE/RFC/1122/114.htm>`_
 * can be enabled in socket with Linux, which can be used in
 * :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.socket_options>` or
 * :ref:`admin's <envoy_v3_api_field_config.bootstrap.v3.Admin.socket_options>` socket_options etc.
 *
 * It should be noted that the name or level may have different values on different platforms.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.SocketOption
 */
export declare class SocketOption extends Message<SocketOption> {
  /**
   * An optional name to give this socket option for debugging, etc.
   * Uniqueness is not required and no special meaning is assumed.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
   *
   * @generated from field: int64 level = 2;
   */
  level: bigint;

  /**
   * The numeric name as passed to setsockopt
   *
   * @generated from field: int64 name = 3;
   */
  name: bigint;

  /**
   * @generated from oneof envoy.config.core.v3.SocketOption.value
   */
  value: {
    /**
     * Because many sockopts take an int value.
     *
     * @generated from field: int64 int_value = 4;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * Otherwise it's a byte buffer.
     *
     * @generated from field: bytes buf_value = 5;
     */
    value: Uint8Array;
    case: "bufValue";
  } | { case: undefined; value?: undefined };

  /**
   * The state in which the option will be applied. When used in BindConfig
   * STATE_PREBIND is currently the only valid value.
   *
   * @generated from field: envoy.config.core.v3.SocketOption.SocketState state = 6;
   */
  state: SocketOption_SocketState;

  constructor(data?: PartialMessage<SocketOption>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.SocketOption";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SocketOption;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SocketOption;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SocketOption;

  static equals(a: SocketOption | PlainMessage<SocketOption> | undefined, b: SocketOption | PlainMessage<SocketOption> | undefined): boolean;
}

/**
 * @generated from enum envoy.config.core.v3.SocketOption.SocketState
 */
export declare enum SocketOption_SocketState {
  /**
   * Socket options are applied after socket creation but before binding the socket to a port
   *
   * @generated from enum value: STATE_PREBIND = 0;
   */
  STATE_PREBIND = 0,

  /**
   * Socket options are applied after binding the socket to a port but before calling listen()
   *
   * @generated from enum value: STATE_BOUND = 1;
   */
  STATE_BOUND = 1,

  /**
   * Socket options are applied after calling listen()
   *
   * @generated from enum value: STATE_LISTENING = 2;
   */
  STATE_LISTENING = 2,
}

/**
 * @generated from message envoy.config.core.v3.SocketOptionsOverride
 */
export declare class SocketOptionsOverride extends Message<SocketOptionsOverride> {
  /**
   * @generated from field: repeated envoy.config.core.v3.SocketOption socket_options = 1;
   */
  socketOptions: SocketOption[];

  constructor(data?: PartialMessage<SocketOptionsOverride>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.SocketOptionsOverride";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SocketOptionsOverride;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SocketOptionsOverride;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SocketOptionsOverride;

  static equals(a: SocketOptionsOverride | PlainMessage<SocketOptionsOverride> | undefined, b: SocketOptionsOverride | PlainMessage<SocketOptionsOverride> | undefined): boolean;
}

