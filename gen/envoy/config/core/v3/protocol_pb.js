// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/protocol.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, Duration, proto3, UInt32Value } from "@bufbuild/protobuf";
import { TypedExtensionConfig } from "./extension_pb.js";
import { Percent } from "../../../type/v3/percent_pb.js";

/**
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.core.v3.TcpProtocolOptions
 */
export const TcpProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.TcpProtocolOptions",
  [],
);

/**
 * Config for keepalive probes in a QUIC connection.
 * Note that QUIC keep-alive probing packets work differently from HTTP/2 keep-alive PINGs in a sense that the probing packet
 * itself doesn't timeout waiting for a probing response. Quic has a shorter idle timeout than TCP, so it doesn't rely on such probing to discover dead connections. If the peer fails to respond, the connection will idle timeout eventually. Thus, they are configured differently from :ref:`connection_keepalive <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.connection_keepalive>`.
 *
 * @generated from message envoy.config.core.v3.QuicKeepAliveSettings
 */
export const QuicKeepAliveSettings = proto3.makeMessageType(
  "envoy.config.core.v3.QuicKeepAliveSettings",
  () => [
    { no: 1, name: "max_interval", kind: "message", T: Duration },
    { no: 2, name: "initial_interval", kind: "message", T: Duration },
  ],
);

/**
 * QUIC protocol options which apply to both downstream and upstream connections.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.core.v3.QuicProtocolOptions
 */
export const QuicProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.QuicProtocolOptions",
  () => [
    { no: 1, name: "max_concurrent_streams", kind: "message", T: UInt32Value },
    { no: 2, name: "initial_stream_window_size", kind: "message", T: UInt32Value },
    { no: 3, name: "initial_connection_window_size", kind: "message", T: UInt32Value },
    { no: 4, name: "num_timeouts_to_trigger_port_migration", kind: "message", T: UInt32Value },
    { no: 5, name: "connection_keepalive", kind: "message", T: QuicKeepAliveSettings },
  ],
);

/**
 * @generated from message envoy.config.core.v3.UpstreamHttpProtocolOptions
 */
export const UpstreamHttpProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.UpstreamHttpProtocolOptions",
  () => [
    { no: 1, name: "auto_sni", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "auto_san_validation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "override_auto_sni_header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Configures the alternate protocols cache which tracks alternate protocols that can be used to
 * make an HTTP connection to an origin server. See https://tools.ietf.org/html/rfc7838 for
 * HTTP Alternative Services and https://datatracker.ietf.org/doc/html/draft-ietf-dnsop-svcb-https-04
 * for the "HTTPS" DNS resource record.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.core.v3.AlternateProtocolsCacheOptions
 */
export const AlternateProtocolsCacheOptions = proto3.makeMessageType(
  "envoy.config.core.v3.AlternateProtocolsCacheOptions",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_entries", kind: "message", T: UInt32Value },
    { no: 3, name: "key_value_store_config", kind: "message", T: TypedExtensionConfig },
    { no: 4, name: "prepopulated_entries", kind: "message", T: AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry, repeated: true },
    { no: 5, name: "canonical_suffixes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Allows pre-populating the cache with HTTP/3 alternate protocols entries with a 7 day lifetime.
 * This will cause Envoy to attempt HTTP/3 to those upstreams, even if the upstreams have not
 * advertised HTTP/3 support. These entries will be overwritten by alt-svc
 * response headers or cached values.
 * As with regular cached entries, if the origin response would result in clearing an existing
 * alternate protocol cache entry, pre-populated entries will also be cleared.
 * Adding a cache entry with hostname=foo.com port=123 is the equivalent of getting
 * response headers
 * alt-svc: h3=:"123"; ma=86400" in a response to a request to foo.com:123
 *
 * @generated from message envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry
 */
export const AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry = proto3.makeMessageType(
  "envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry",
  () => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry"},
);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.HttpProtocolOptions
 */
export const HttpProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.HttpProtocolOptions",
  () => [
    { no: 1, name: "idle_timeout", kind: "message", T: Duration },
    { no: 3, name: "max_connection_duration", kind: "message", T: Duration },
    { no: 2, name: "max_headers_count", kind: "message", T: UInt32Value },
    { no: 4, name: "max_stream_duration", kind: "message", T: Duration },
    { no: 5, name: "headers_with_underscores_action", kind: "enum", T: proto3.getEnumType(HttpProtocolOptions_HeadersWithUnderscoresAction) },
    { no: 6, name: "max_requests_per_connection", kind: "message", T: UInt32Value },
  ],
);

/**
 * Action to take when Envoy receives client request with header names containing underscore
 * characters.
 * Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
 * as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
 * characters.
 *
 * @generated from enum envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction
 */
export const HttpProtocolOptions_HeadersWithUnderscoresAction = proto3.makeEnum(
  "envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction",
  [
    {no: 0, name: "ALLOW"},
    {no: 1, name: "REJECT_REQUEST"},
    {no: 2, name: "DROP_HEADER"},
  ],
);

/**
 * [#next-free-field: 11]
 *
 * @generated from message envoy.config.core.v3.Http1ProtocolOptions
 */
export const Http1ProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.Http1ProtocolOptions",
  () => [
    { no: 1, name: "allow_absolute_url", kind: "message", T: BoolValue },
    { no: 2, name: "accept_http_10", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "default_host_for_http_10", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "header_key_format", kind: "message", T: Http1ProtocolOptions_HeaderKeyFormat },
    { no: 5, name: "enable_trailers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "allow_chunked_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "override_stream_error_on_invalid_http_message", kind: "message", T: BoolValue },
    { no: 8, name: "send_fully_qualified_url", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "use_balsa_parser", kind: "message", T: BoolValue },
    { no: 10, name: "allow_custom_methods", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * [#next-free-field: 9]
 *
 * @generated from message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat
 */
export const Http1ProtocolOptions_HeaderKeyFormat = proto3.makeMessageType(
  "envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat",
  () => [
    { no: 1, name: "proper_case_words", kind: "message", T: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords, oneof: "header_format" },
    { no: 8, name: "stateful_formatter", kind: "message", T: TypedExtensionConfig, oneof: "header_format" },
  ],
  {localName: "Http1ProtocolOptions_HeaderKeyFormat"},
);

/**
 * @generated from message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords
 */
export const Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords = proto3.makeMessageType(
  "envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords",
  [],
  {localName: "Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords"},
);

/**
 * @generated from message envoy.config.core.v3.KeepaliveSettings
 */
export const KeepaliveSettings = proto3.makeMessageType(
  "envoy.config.core.v3.KeepaliveSettings",
  () => [
    { no: 1, name: "interval", kind: "message", T: Duration },
    { no: 2, name: "timeout", kind: "message", T: Duration },
    { no: 3, name: "interval_jitter", kind: "message", T: Percent },
    { no: 4, name: "connection_idle_interval", kind: "message", T: Duration },
  ],
);

/**
 * [#next-free-field: 17]
 *
 * @generated from message envoy.config.core.v3.Http2ProtocolOptions
 */
export const Http2ProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.Http2ProtocolOptions",
  () => [
    { no: 1, name: "hpack_table_size", kind: "message", T: UInt32Value },
    { no: 2, name: "max_concurrent_streams", kind: "message", T: UInt32Value },
    { no: 3, name: "initial_stream_window_size", kind: "message", T: UInt32Value },
    { no: 4, name: "initial_connection_window_size", kind: "message", T: UInt32Value },
    { no: 5, name: "allow_connect", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "allow_metadata", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "max_outbound_frames", kind: "message", T: UInt32Value },
    { no: 8, name: "max_outbound_control_frames", kind: "message", T: UInt32Value },
    { no: 9, name: "max_consecutive_inbound_frames_with_empty_payload", kind: "message", T: UInt32Value },
    { no: 10, name: "max_inbound_priority_frames_per_stream", kind: "message", T: UInt32Value },
    { no: 11, name: "max_inbound_window_update_frames_per_data_frame_sent", kind: "message", T: UInt32Value },
    { no: 12, name: "stream_error_on_invalid_http_messaging", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "override_stream_error_on_invalid_http_message", kind: "message", T: BoolValue },
    { no: 13, name: "custom_settings_parameters", kind: "message", T: Http2ProtocolOptions_SettingsParameter, repeated: true },
    { no: 15, name: "connection_keepalive", kind: "message", T: KeepaliveSettings },
    { no: 16, name: "use_oghttp2_codec", kind: "message", T: BoolValue },
  ],
);

/**
 * Defines a parameter to be sent in the SETTINGS frame.
 * See `RFC7540, sec. 6.5.1 <https://tools.ietf.org/html/rfc7540#section-6.5.1>`_ for details.
 *
 * @generated from message envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter
 */
export const Http2ProtocolOptions_SettingsParameter = proto3.makeMessageType(
  "envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter",
  () => [
    { no: 1, name: "identifier", kind: "message", T: UInt32Value },
    { no: 2, name: "value", kind: "message", T: UInt32Value },
  ],
  {localName: "Http2ProtocolOptions_SettingsParameter"},
);

/**
 * [#not-implemented-hide:]
 *
 * @generated from message envoy.config.core.v3.GrpcProtocolOptions
 */
export const GrpcProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.GrpcProtocolOptions",
  () => [
    { no: 1, name: "http2_protocol_options", kind: "message", T: Http2ProtocolOptions },
  ],
);

/**
 * A message which allows using HTTP/3.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.config.core.v3.Http3ProtocolOptions
 */
export const Http3ProtocolOptions = proto3.makeMessageType(
  "envoy.config.core.v3.Http3ProtocolOptions",
  () => [
    { no: 1, name: "quic_protocol_options", kind: "message", T: QuicProtocolOptions },
    { no: 2, name: "override_stream_error_on_invalid_http_message", kind: "message", T: BoolValue },
    { no: 5, name: "allow_extended_connect", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A message to control transformations to the :scheme header
 *
 * @generated from message envoy.config.core.v3.SchemeHeaderTransformation
 */
export const SchemeHeaderTransformation = proto3.makeMessageType(
  "envoy.config.core.v3.SchemeHeaderTransformation",
  () => [
    { no: 1, name: "scheme_to_overwrite", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "transformation" },
  ],
);

