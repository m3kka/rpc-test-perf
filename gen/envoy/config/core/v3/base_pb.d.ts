// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/base.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { SemanticVersion } from "../../../type/v3/semantic_version_pb.js";
import type { ContextParams } from "../../../../xds/core/v3/context_params_pb.js";
import type { Address } from "./address_pb.js";
import type { FractionalPercent, Percent } from "../../../type/v3/percent_pb.js";
import type { BackoffStrategy } from "./backoff_pb.js";
import type { HttpUri } from "./http_uri_pb.js";

/**
 * Envoy supports :ref:`upstream priority routing
 * <arch_overview_http_routing_priority>` both at the route and the virtual
 * cluster level. The current priority implementation uses different connection
 * pool and circuit breaking settings for each priority level. This means that
 * even for HTTP/2 requests, two physical connections will be used to an
 * upstream host. In the future Envoy will likely support true HTTP/2 priority
 * over a single upstream connection.
 *
 * @generated from enum envoy.config.core.v3.RoutingPriority
 */
export declare enum RoutingPriority {
  /**
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * @generated from enum value: HIGH = 1;
   */
  HIGH = 1,
}

/**
 * HTTP request method.
 *
 * @generated from enum envoy.config.core.v3.RequestMethod
 */
export declare enum RequestMethod {
  /**
   * @generated from enum value: METHOD_UNSPECIFIED = 0;
   */
  METHOD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: GET = 1;
   */
  GET = 1,

  /**
   * @generated from enum value: HEAD = 2;
   */
  HEAD = 2,

  /**
   * @generated from enum value: POST = 3;
   */
  POST = 3,

  /**
   * @generated from enum value: PUT = 4;
   */
  PUT = 4,

  /**
   * @generated from enum value: DELETE = 5;
   */
  DELETE = 5,

  /**
   * @generated from enum value: CONNECT = 6;
   */
  CONNECT = 6,

  /**
   * @generated from enum value: OPTIONS = 7;
   */
  OPTIONS = 7,

  /**
   * @generated from enum value: TRACE = 8;
   */
  TRACE = 8,

  /**
   * @generated from enum value: PATCH = 9;
   */
  PATCH = 9,
}

/**
 * Identifies the direction of the traffic relative to the local Envoy.
 *
 * @generated from enum envoy.config.core.v3.TrafficDirection
 */
export declare enum TrafficDirection {
  /**
   * Default option is unspecified.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The transport is used for incoming traffic.
   *
   * @generated from enum value: INBOUND = 1;
   */
  INBOUND = 1,

  /**
   * The transport is used for outgoing traffic.
   *
   * @generated from enum value: OUTBOUND = 2;
   */
  OUTBOUND = 2,
}

/**
 * Identifies location of where either Envoy runs or where upstream hosts run.
 *
 * @generated from message envoy.config.core.v3.Locality
 */
export declare class Locality extends Message<Locality> {
  /**
   * Region this :ref:`zone <envoy_v3_api_field_config.core.v3.Locality.zone>` belongs to.
   *
   * @generated from field: string region = 1;
   */
  region: string;

  /**
   * Defines the local service zone where Envoy is running. Though optional, it
   * should be set if discovery service routing is used and the discovery
   * service exposes :ref:`zone data <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,
   * either in this message or via :option:`--service-zone`. The meaning of zone
   * is context dependent, e.g. `Availability Zone (AZ)
   * <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
   * on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
   * GCP, etc.
   *
   * @generated from field: string zone = 2;
   */
  zone: string;

  /**
   * When used for locality of upstream hosts, this field further splits zone
   * into smaller chunks of sub-zones so they can be load balanced
   * independently.
   *
   * @generated from field: string sub_zone = 3;
   */
  subZone: string;

  constructor(data?: PartialMessage<Locality>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.Locality";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Locality;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Locality;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Locality;

  static equals(a: Locality | PlainMessage<Locality> | undefined, b: Locality | PlainMessage<Locality> | undefined): boolean;
}

/**
 * BuildVersion combines SemVer version of extension with free-form build information
 * (i.e. 'alpha', 'private-build') as a set of strings.
 *
 * @generated from message envoy.config.core.v3.BuildVersion
 */
export declare class BuildVersion extends Message<BuildVersion> {
  /**
   * SemVer version of extension.
   *
   * @generated from field: envoy.type.v3.SemanticVersion version = 1;
   */
  version?: SemanticVersion;

  /**
   * Free-form build information.
   * Envoy defines several well known keys in the source/common/version/version.h file
   *
   * @generated from field: google.protobuf.Struct metadata = 2;
   */
  metadata?: Struct;

  constructor(data?: PartialMessage<BuildVersion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.BuildVersion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildVersion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildVersion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildVersion;

  static equals(a: BuildVersion | PlainMessage<BuildVersion> | undefined, b: BuildVersion | PlainMessage<BuildVersion> | undefined): boolean;
}

/**
 * Version and identification for an Envoy extension.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.config.core.v3.Extension
 */
export declare class Extension extends Message<Extension> {
  /**
   * This is the name of the Envoy filter as specified in the Envoy
   * configuration, e.g. envoy.filters.http.router, com.acme.widget.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Category of the extension.
   * Extension category names use reverse DNS notation. For instance "envoy.filters.listener"
   * for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from
   * acme.com vendor.
   * [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]
   *
   * @generated from field: string category = 2;
   */
  category: string;

  /**
   * [#not-implemented-hide:] Type descriptor of extension configuration proto.
   * [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]
   * [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]
   *
   * @generated from field: string type_descriptor = 3 [deprecated = true];
   * @deprecated
   */
  typeDescriptor: string;

  /**
   * The version is a property of the extension and maintained independently
   * of other extensions and the Envoy API.
   * This field is not set when extension did not provide version information.
   *
   * @generated from field: envoy.config.core.v3.BuildVersion version = 4;
   */
  version?: BuildVersion;

  /**
   * Indicates that the extension is present but was disabled via dynamic configuration.
   *
   * @generated from field: bool disabled = 5;
   */
  disabled: boolean;

  /**
   * Type URLs of extension configuration protos.
   *
   * @generated from field: repeated string type_urls = 6;
   */
  typeUrls: string[];

  constructor(data?: PartialMessage<Extension>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.Extension";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension;

  static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean;
}

/**
 * Identifies a specific Envoy instance. The node identifier is presented to the
 * management server, which may use this identifier to distinguish per Envoy
 * configuration for serving.
 * [#next-free-field: 13]
 *
 * @generated from message envoy.config.core.v3.Node
 */
export declare class Node extends Message<Node> {
  /**
   * An opaque node identifier for the Envoy node. This also provides the local
   * service node name. It should be set if any of the following features are
   * used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
   * <config_cluster_manager_cds>`, and :ref:`HTTP tracing
   * <arch_overview_tracing>`, either in this message or via
   * :option:`--service-node`.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Defines the local service cluster name where Envoy is running. Though
   * optional, it should be set if any of the following features are used:
   * :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
   * verification
   * <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>`,
   * :ref:`runtime override directory <envoy_v3_api_msg_config.bootstrap.v3.Runtime>`,
   * :ref:`user agent addition
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent>`,
   * :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
   * :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
   * <arch_overview_tracing>`, either in this message or via
   * :option:`--service-cluster`.
   *
   * @generated from field: string cluster = 2;
   */
  cluster: string;

  /**
   * Opaque metadata extending the node identifier. Envoy will pass this
   * directly to the management server.
   *
   * @generated from field: google.protobuf.Struct metadata = 3;
   */
  metadata?: Struct;

  /**
   * Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike
   * other fields in this message). For example, the xDS client may have a shard identifier that
   * changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the
   * dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic
   * parameter then appears in this field during future discovery requests.
   *
   * @generated from field: map<string, xds.core.v3.ContextParams> dynamic_parameters = 12;
   */
  dynamicParameters: { [key: string]: ContextParams };

  /**
   * Locality specifying where the Envoy instance is running.
   *
   * @generated from field: envoy.config.core.v3.Locality locality = 4;
   */
  locality?: Locality;

  /**
   * Free-form string that identifies the entity requesting config.
   * E.g. "envoy" or "grpc"
   *
   * @generated from field: string user_agent_name = 6;
   */
  userAgentName: string;

  /**
   * @generated from oneof envoy.config.core.v3.Node.user_agent_version_type
   */
  userAgentVersionType: {
    /**
     * Free-form string that identifies the version of the entity requesting config.
     * E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
     *
     * @generated from field: string user_agent_version = 7;
     */
    value: string;
    case: "userAgentVersion";
  } | {
    /**
     * Structured version of the entity requesting config.
     *
     * @generated from field: envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
     */
    value: BuildVersion;
    case: "userAgentBuildVersion";
  } | { case: undefined; value?: undefined };

  /**
   * List of extensions and their versions supported by the node.
   *
   * @generated from field: repeated envoy.config.core.v3.Extension extensions = 9;
   */
  extensions: Extension[];

  /**
   * Client feature support list. These are well known features described
   * in the Envoy API repository for a given major version of an API. Client features
   * use reverse DNS naming scheme, for example ``com.acme.feature``.
   * See :ref:`the list of features <client_features>` that xDS client may
   * support.
   *
   * @generated from field: repeated string client_features = 10;
   */
  clientFeatures: string[];

  /**
   * Known listening ports on the node as a generic hint to the management server
   * for filtering :ref:`listeners <config_listeners>` to be returned. For example,
   * if there is a listener bound to port 80, the list can optionally contain the
   * SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.
   *
   * @generated from field: repeated envoy.config.core.v3.Address listening_addresses = 11 [deprecated = true];
   * @deprecated
   */
  listeningAddresses: Address[];

  constructor(data?: PartialMessage<Node>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.Node";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node;

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean;
}

/**
 * Metadata provides additional inputs to filters based on matched listeners,
 * filter chains, routes and endpoints. It is structured as a map, usually from
 * filter name (in reverse DNS format) to metadata specific to the filter. Metadata
 * key-values for a filter are merged as connection and request handling occurs,
 * with later values for the same key overriding earlier values.
 *
 * An example use of metadata is providing additional values to
 * http_connection_manager in the envoy.http_connection_manager.access_log
 * namespace.
 *
 * Another example use of metadata is to per service config info in cluster metadata, which may get
 * consumed by multiple filters.
 *
 * For load balancing, Metadata provides a means to subset cluster endpoints.
 * Endpoints have a Metadata object associated and routes contain a Metadata
 * object to match against. There are some well defined metadata used today for
 * this purpose:
 *
 * * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
 *   endpoint and is also used during header processing
 *   (x-envoy-upstream-canary) and for stats purposes.
 * [#next-major-version: move to type/metadata/v2]
 *
 * @generated from message envoy.config.core.v3.Metadata
 */
export declare class Metadata extends Message<Metadata> {
  /**
   * Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
   * namespace is reserved for Envoy's built-in filters.
   * If both ``filter_metadata`` and
   * :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
   * fields are present in the metadata with same keys,
   * only ``typed_filter_metadata`` field will be parsed.
   *
   * @generated from field: map<string, google.protobuf.Struct> filter_metadata = 1;
   */
  filterMetadata: { [key: string]: Struct };

  /**
   * Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
   * namespace is reserved for Envoy's built-in filters.
   * The value is encoded as google.protobuf.Any.
   * If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
   * and ``typed_filter_metadata`` fields are present in the metadata with same keys,
   * only ``typed_filter_metadata`` field will be parsed.
   *
   * @generated from field: map<string, google.protobuf.Any> typed_filter_metadata = 2;
   */
  typedFilterMetadata: { [key: string]: Any };

  constructor(data?: PartialMessage<Metadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.Metadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}

/**
 * Runtime derived uint32 with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeUInt32
 */
export declare class RuntimeUInt32 extends Message<RuntimeUInt32> {
  /**
   * Default value if runtime value is not available.
   *
   * @generated from field: uint32 default_value = 2;
   */
  defaultValue: number;

  /**
   * Runtime key to get value for comparison. This value is used if defined.
   *
   * @generated from field: string runtime_key = 3;
   */
  runtimeKey: string;

  constructor(data?: PartialMessage<RuntimeUInt32>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RuntimeUInt32";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeUInt32;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeUInt32;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeUInt32;

  static equals(a: RuntimeUInt32 | PlainMessage<RuntimeUInt32> | undefined, b: RuntimeUInt32 | PlainMessage<RuntimeUInt32> | undefined): boolean;
}

/**
 * Runtime derived percentage with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimePercent
 */
export declare class RuntimePercent extends Message<RuntimePercent> {
  /**
   * Default value if runtime value is not available.
   *
   * @generated from field: envoy.type.v3.Percent default_value = 1;
   */
  defaultValue?: Percent;

  /**
   * Runtime key to get value for comparison. This value is used if defined.
   *
   * @generated from field: string runtime_key = 2;
   */
  runtimeKey: string;

  constructor(data?: PartialMessage<RuntimePercent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RuntimePercent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimePercent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimePercent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimePercent;

  static equals(a: RuntimePercent | PlainMessage<RuntimePercent> | undefined, b: RuntimePercent | PlainMessage<RuntimePercent> | undefined): boolean;
}

/**
 * Runtime derived double with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeDouble
 */
export declare class RuntimeDouble extends Message<RuntimeDouble> {
  /**
   * Default value if runtime value is not available.
   *
   * @generated from field: double default_value = 1;
   */
  defaultValue: number;

  /**
   * Runtime key to get value for comparison. This value is used if defined.
   *
   * @generated from field: string runtime_key = 2;
   */
  runtimeKey: string;

  constructor(data?: PartialMessage<RuntimeDouble>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RuntimeDouble";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeDouble;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeDouble;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeDouble;

  static equals(a: RuntimeDouble | PlainMessage<RuntimeDouble> | undefined, b: RuntimeDouble | PlainMessage<RuntimeDouble> | undefined): boolean;
}

/**
 * Runtime derived bool with a default when not specified.
 *
 * @generated from message envoy.config.core.v3.RuntimeFeatureFlag
 */
export declare class RuntimeFeatureFlag extends Message<RuntimeFeatureFlag> {
  /**
   * Default value if runtime value is not available.
   *
   * @generated from field: google.protobuf.BoolValue default_value = 1;
   */
  defaultValue?: boolean;

  /**
   * Runtime key to get value for comparison. This value is used if defined. The boolean value must
   * be represented via its
   * `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
   *
   * @generated from field: string runtime_key = 2;
   */
  runtimeKey: string;

  constructor(data?: PartialMessage<RuntimeFeatureFlag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RuntimeFeatureFlag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeFeatureFlag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeFeatureFlag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeFeatureFlag;

  static equals(a: RuntimeFeatureFlag | PlainMessage<RuntimeFeatureFlag> | undefined, b: RuntimeFeatureFlag | PlainMessage<RuntimeFeatureFlag> | undefined): boolean;
}

/**
 * Query parameter name/value pair.
 *
 * @generated from message envoy.config.core.v3.QueryParameter
 */
export declare class QueryParameter extends Message<QueryParameter> {
  /**
   * The key of the query parameter. Case sensitive.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value of the query parameter.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<QueryParameter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.QueryParameter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParameter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParameter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParameter;

  static equals(a: QueryParameter | PlainMessage<QueryParameter> | undefined, b: QueryParameter | PlainMessage<QueryParameter> | undefined): boolean;
}

/**
 * Header name/value pair.
 *
 * @generated from message envoy.config.core.v3.HeaderValue
 */
export declare class HeaderValue extends Message<HeaderValue> {
  /**
   * Header name.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Header value.
   *
   * The same :ref:`format specifier <config_access_log_format>` as used for
   * :ref:`HTTP access logging <config_access_log>` applies here, however
   * unknown header values are replaced with the empty string instead of ``-``.
   * Header value is encoded as string. This does not work for non-utf8 characters.
   * Only one of ``value`` or ``raw_value`` can be set.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * Header value is encoded as bytes which can support non-utf8 characters.
   * Only one of ``value`` or ``raw_value`` can be set.
   *
   * @generated from field: bytes raw_value = 3;
   */
  rawValue: Uint8Array;

  constructor(data?: PartialMessage<HeaderValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.HeaderValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderValue;

  static equals(a: HeaderValue | PlainMessage<HeaderValue> | undefined, b: HeaderValue | PlainMessage<HeaderValue> | undefined): boolean;
}

/**
 * Header name/value pair plus option to control append behavior.
 *
 * @generated from message envoy.config.core.v3.HeaderValueOption
 */
export declare class HeaderValueOption extends Message<HeaderValueOption> {
  /**
   * Header name/value pair that this option applies to.
   *
   * @generated from field: envoy.config.core.v3.HeaderValue header = 1;
   */
  header?: HeaderValue;

  /**
   * Should the value be appended? If true (default), the value is appended to
   * existing values. Otherwise it replaces any existing values.
   * This field is deprecated and please use
   * :ref:`append_action <envoy_v3_api_field_config.core.v3.HeaderValueOption.append_action>` as replacement.
   *
   * .. note::
   *   The :ref:`external authorization service <envoy_v3_api_msg_service.auth.v3.CheckResponse>` and
   *   :ref:`external processor service <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>` have
   *   default value (``false``) for this field.
   *
   * @generated from field: google.protobuf.BoolValue append = 2 [deprecated = true];
   * @deprecated
   */
  append?: boolean;

  /**
   * Describes the action taken to append/overwrite the given value for an existing header
   * or to only add this header if it's absent.
   * Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD
   * <envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
   *
   * @generated from field: envoy.config.core.v3.HeaderValueOption.HeaderAppendAction append_action = 3;
   */
  appendAction: HeaderValueOption_HeaderAppendAction;

  /**
   * Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped,
   * otherwise they are added.
   *
   * @generated from field: bool keep_empty_value = 4;
   */
  keepEmptyValue: boolean;

  constructor(data?: PartialMessage<HeaderValueOption>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.HeaderValueOption";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderValueOption;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderValueOption;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderValueOption;

  static equals(a: HeaderValueOption | PlainMessage<HeaderValueOption> | undefined, b: HeaderValueOption | PlainMessage<HeaderValueOption> | undefined): boolean;
}

/**
 * Describes the supported actions types for header append action.
 *
 * @generated from enum envoy.config.core.v3.HeaderValueOption.HeaderAppendAction
 */
export declare enum HeaderValueOption_HeaderAppendAction {
  /**
   * This action will append the specified value to the existing values if the header
   * already exists. If the header doesn't exist then this will add the header with
   * specified key and value.
   *
   * @generated from enum value: APPEND_IF_EXISTS_OR_ADD = 0;
   */
  APPEND_IF_EXISTS_OR_ADD = 0,

  /**
   * This action will add the header if it doesn't already exist. If the header
   * already exists then this will be a no-op.
   *
   * @generated from enum value: ADD_IF_ABSENT = 1;
   */
  ADD_IF_ABSENT = 1,

  /**
   * This action will overwrite the specified value by discarding any existing values if
   * the header already exists. If the header doesn't exist then this will add the header
   * with specified key and value.
   *
   * @generated from enum value: OVERWRITE_IF_EXISTS_OR_ADD = 2;
   */
  OVERWRITE_IF_EXISTS_OR_ADD = 2,

  /**
   * This action will overwrite the specified value by discarding any existing values if
   * the header already exists. If the header doesn't exist then this will be no-op.
   *
   * @generated from enum value: OVERWRITE_IF_EXISTS = 3;
   */
  OVERWRITE_IF_EXISTS = 3,
}

/**
 * Wrapper for a set of headers.
 *
 * @generated from message envoy.config.core.v3.HeaderMap
 */
export declare class HeaderMap extends Message<HeaderMap> {
  /**
   * @generated from field: repeated envoy.config.core.v3.HeaderValue headers = 1;
   */
  headers: HeaderValue[];

  constructor(data?: PartialMessage<HeaderMap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.HeaderMap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMap;

  static equals(a: HeaderMap | PlainMessage<HeaderMap> | undefined, b: HeaderMap | PlainMessage<HeaderMap> | undefined): boolean;
}

/**
 * A directory that is watched for changes, e.g. by inotify on Linux. Move/rename
 * events inside this directory trigger the watch.
 *
 * @generated from message envoy.config.core.v3.WatchedDirectory
 */
export declare class WatchedDirectory extends Message<WatchedDirectory> {
  /**
   * Directory path to watch.
   *
   * @generated from field: string path = 1;
   */
  path: string;

  constructor(data?: PartialMessage<WatchedDirectory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.WatchedDirectory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchedDirectory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchedDirectory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchedDirectory;

  static equals(a: WatchedDirectory | PlainMessage<WatchedDirectory> | undefined, b: WatchedDirectory | PlainMessage<WatchedDirectory> | undefined): boolean;
}

/**
 * Data source consisting of a file, an inline value, or an environment variable.
 *
 * @generated from message envoy.config.core.v3.DataSource
 */
export declare class DataSource extends Message<DataSource> {
  /**
   * @generated from oneof envoy.config.core.v3.DataSource.specifier
   */
  specifier: {
    /**
     * Local filesystem data source.
     *
     * @generated from field: string filename = 1;
     */
    value: string;
    case: "filename";
  } | {
    /**
     * Bytes inlined in the configuration.
     *
     * @generated from field: bytes inline_bytes = 2;
     */
    value: Uint8Array;
    case: "inlineBytes";
  } | {
    /**
     * String inlined in the configuration.
     *
     * @generated from field: string inline_string = 3;
     */
    value: string;
    case: "inlineString";
  } | {
    /**
     * Environment variable data source.
     *
     * @generated from field: string environment_variable = 4;
     */
    value: string;
    case: "environmentVariable";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DataSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.DataSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSource;

  static equals(a: DataSource | PlainMessage<DataSource> | undefined, b: DataSource | PlainMessage<DataSource> | undefined): boolean;
}

/**
 * The message specifies the retry policy of remote data source when fetching fails.
 *
 * @generated from message envoy.config.core.v3.RetryPolicy
 */
export declare class RetryPolicy extends Message<RetryPolicy> {
  /**
   * Specifies parameters that control :ref:`retry backoff strategy <envoy_v3_api_msg_config.core.v3.BackoffStrategy>`.
   * This parameter is optional, in which case the default base interval is 1000 milliseconds. The
   * default maximum interval is 10 times the base interval.
   *
   * @generated from field: envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
   */
  retryBackOff?: BackoffStrategy;

  /**
   * Specifies the allowed number of retries. This parameter is optional and
   * defaults to 1.
   *
   * @generated from field: google.protobuf.UInt32Value num_retries = 2;
   */
  numRetries?: number;

  constructor(data?: PartialMessage<RetryPolicy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RetryPolicy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryPolicy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryPolicy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryPolicy;

  static equals(a: RetryPolicy | PlainMessage<RetryPolicy> | undefined, b: RetryPolicy | PlainMessage<RetryPolicy> | undefined): boolean;
}

/**
 * The message specifies how to fetch data from remote and how to verify it.
 *
 * @generated from message envoy.config.core.v3.RemoteDataSource
 */
export declare class RemoteDataSource extends Message<RemoteDataSource> {
  /**
   * The HTTP URI to fetch the remote data.
   *
   * @generated from field: envoy.config.core.v3.HttpUri http_uri = 1;
   */
  httpUri?: HttpUri;

  /**
   * SHA256 string for verifying data.
   *
   * @generated from field: string sha256 = 2;
   */
  sha256: string;

  /**
   * Retry policy for fetching remote data.
   *
   * @generated from field: envoy.config.core.v3.RetryPolicy retry_policy = 3;
   */
  retryPolicy?: RetryPolicy;

  constructor(data?: PartialMessage<RemoteDataSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RemoteDataSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteDataSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteDataSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteDataSource;

  static equals(a: RemoteDataSource | PlainMessage<RemoteDataSource> | undefined, b: RemoteDataSource | PlainMessage<RemoteDataSource> | undefined): boolean;
}

/**
 * Async data source which support async data fetch.
 *
 * @generated from message envoy.config.core.v3.AsyncDataSource
 */
export declare class AsyncDataSource extends Message<AsyncDataSource> {
  /**
   * @generated from oneof envoy.config.core.v3.AsyncDataSource.specifier
   */
  specifier: {
    /**
     * Local async data source.
     *
     * @generated from field: envoy.config.core.v3.DataSource local = 1;
     */
    value: DataSource;
    case: "local";
  } | {
    /**
     * Remote async data source.
     *
     * @generated from field: envoy.config.core.v3.RemoteDataSource remote = 2;
     */
    value: RemoteDataSource;
    case: "remote";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AsyncDataSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.AsyncDataSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AsyncDataSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AsyncDataSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AsyncDataSource;

  static equals(a: AsyncDataSource | PlainMessage<AsyncDataSource> | undefined, b: AsyncDataSource | PlainMessage<AsyncDataSource> | undefined): boolean;
}

/**
 * Configuration for transport socket in :ref:`listeners <config_listeners>` and
 * :ref:`clusters <envoy_v3_api_msg_config.cluster.v3.Cluster>`. If the configuration is
 * empty, a default transport socket implementation and configuration will be
 * chosen based on the platform and existence of tls_context.
 *
 * @generated from message envoy.config.core.v3.TransportSocket
 */
export declare class TransportSocket extends Message<TransportSocket> {
  /**
   * The name of the transport socket to instantiate. The name must match a supported transport
   * socket implementation.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Implementation specific configuration which depends on the implementation being instantiated.
   * See the supported transport socket implementations for further documentation.
   *
   * @generated from oneof envoy.config.core.v3.TransportSocket.config_type
   */
  configType: {
    /**
     * @generated from field: google.protobuf.Any typed_config = 3;
     */
    value: Any;
    case: "typedConfig";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<TransportSocket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.TransportSocket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransportSocket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransportSocket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransportSocket;

  static equals(a: TransportSocket | PlainMessage<TransportSocket> | undefined, b: TransportSocket | PlainMessage<TransportSocket> | undefined): boolean;
}

/**
 * Runtime derived FractionalPercent with defaults for when the numerator or denominator is not
 * specified via a runtime key.
 *
 * .. note::
 *
 *   Parsing of the runtime key's data is implemented such that it may be represented as a
 *   :ref:`FractionalPercent <envoy_v3_api_msg_type.v3.FractionalPercent>` proto represented as JSON/YAML
 *   and may also be represented as an integer with the assumption that the value is an integral
 *   percentage out of 100. For instance, a runtime key lookup returning the value "42" would parse
 *   as a ``FractionalPercent`` whose numerator is 42 and denominator is HUNDRED.
 *
 * @generated from message envoy.config.core.v3.RuntimeFractionalPercent
 */
export declare class RuntimeFractionalPercent extends Message<RuntimeFractionalPercent> {
  /**
   * Default value if the runtime value's for the numerator/denominator keys are not available.
   *
   * @generated from field: envoy.type.v3.FractionalPercent default_value = 1;
   */
  defaultValue?: FractionalPercent;

  /**
   * Runtime key for a YAML representation of a FractionalPercent.
   *
   * @generated from field: string runtime_key = 2;
   */
  runtimeKey: string;

  constructor(data?: PartialMessage<RuntimeFractionalPercent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.RuntimeFractionalPercent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeFractionalPercent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeFractionalPercent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeFractionalPercent;

  static equals(a: RuntimeFractionalPercent | PlainMessage<RuntimeFractionalPercent> | undefined, b: RuntimeFractionalPercent | PlainMessage<RuntimeFractionalPercent> | undefined): boolean;
}

/**
 * Identifies a specific ControlPlane instance that Envoy is connected to.
 *
 * @generated from message envoy.config.core.v3.ControlPlane
 */
export declare class ControlPlane extends Message<ControlPlane> {
  /**
   * An opaque control plane identifier that uniquely identifies an instance
   * of control plane. This can be used to identify which control plane instance,
   * the Envoy is connected to.
   *
   * @generated from field: string identifier = 1;
   */
  identifier: string;

  constructor(data?: PartialMessage<ControlPlane>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.ControlPlane";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlPlane;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlPlane;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlPlane;

  static equals(a: ControlPlane | PlainMessage<ControlPlane> | undefined, b: ControlPlane | PlainMessage<ControlPlane> | undefined): boolean;
}

