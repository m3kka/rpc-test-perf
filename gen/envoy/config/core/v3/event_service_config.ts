// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/event_service_config.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GrpcService } from "./grpc_service";
/**
 * [#not-implemented-hide:]
 * Configuration of the event reporting service endpoint.
 *
 * @generated from protobuf message envoy.config.core.v3.EventServiceConfig
 */
export interface EventServiceConfig {
    /**
     * @generated from protobuf oneof: config_source_specifier
     */
    configSourceSpecifier: {
        oneofKind: "grpcService";
        /**
         * Specifies the gRPC service that hosts the event reporting service.
         *
         * @generated from protobuf field: envoy.config.core.v3.GrpcService grpc_service = 1;
         */
        grpcService: GrpcService;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class EventServiceConfig$Type extends MessageType<EventServiceConfig> {
    constructor() {
        super("envoy.config.core.v3.EventServiceConfig", [
            { no: 1, name: "grpc_service", kind: "message", oneof: "configSourceSpecifier", T: () => GrpcService }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.EventServiceConfig" } });
    }
    create(value?: PartialMessage<EventServiceConfig>): EventServiceConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.configSourceSpecifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<EventServiceConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventServiceConfig): EventServiceConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.GrpcService grpc_service */ 1:
                    message.configSourceSpecifier = {
                        oneofKind: "grpcService",
                        grpcService: GrpcService.internalBinaryRead(reader, reader.uint32(), options, (message.configSourceSpecifier as any).grpcService)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventServiceConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.GrpcService grpc_service = 1; */
        if (message.configSourceSpecifier.oneofKind === "grpcService")
            GrpcService.internalBinaryWrite(message.configSourceSpecifier.grpcService, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.EventServiceConfig
 */
export const EventServiceConfig = new EventServiceConfig$Type();
