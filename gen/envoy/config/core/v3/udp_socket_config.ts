// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/udp_socket_config.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { UInt64Value } from "../../../../google/protobuf/wrappers";
// [#protodoc-title: UDP socket config]

/**
 * Generic UDP socket configuration.
 *
 * @generated from protobuf message envoy.config.core.v3.UdpSocketConfig
 */
export interface UdpSocketConfig {
    /**
     * The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
     * more memory per socket. Received datagrams above this size will be dropped. If not set
     * defaults to 1500 bytes.
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_rx_datagram_size = 1;
     */
    maxRxDatagramSize?: UInt64Value;
    /**
     * Configures whether Generic Receive Offload (GRO)
     * <https://en.wikipedia.org/wiki/Large_receive_offload>_ is preferred when reading from the
     * UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
     * This option affects performance but not functionality. If GRO is not supported by the operating
     * system, non-GRO receive will be used.
     *
     * @generated from protobuf field: google.protobuf.BoolValue prefer_gro = 2;
     */
    preferGro?: BoolValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class UdpSocketConfig$Type extends MessageType<UdpSocketConfig> {
    constructor() {
        super("envoy.config.core.v3.UdpSocketConfig", [
            { no: 1, name: "max_rx_datagram_size", kind: "message", T: () => UInt64Value, options: { "validate.rules": { uint64: { lt: "65536", gt: "0" } } } },
            { no: 2, name: "prefer_gro", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<UdpSocketConfig>): UdpSocketConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UdpSocketConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UdpSocketConfig): UdpSocketConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt64Value max_rx_datagram_size */ 1:
                    message.maxRxDatagramSize = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxRxDatagramSize);
                    break;
                case /* google.protobuf.BoolValue prefer_gro */ 2:
                    message.preferGro = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.preferGro);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UdpSocketConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt64Value max_rx_datagram_size = 1; */
        if (message.maxRxDatagramSize)
            UInt64Value.internalBinaryWrite(message.maxRxDatagramSize, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue prefer_gro = 2; */
        if (message.preferGro)
            BoolValue.internalBinaryWrite(message.preferGro, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.UdpSocketConfig
 */
export const UdpSocketConfig = new UdpSocketConfig$Type();
