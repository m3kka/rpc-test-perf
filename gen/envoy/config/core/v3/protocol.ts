// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/protocol.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Percent } from "../../../type/v3/percent";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { TypedExtensionConfig } from "./extension";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { Duration } from "../../../../google/protobuf/duration";
// [#protodoc-title: Protocol options]

/**
 * [#not-implemented-hide:]
 *
 * @generated from protobuf message envoy.config.core.v3.TcpProtocolOptions
 */
export interface TcpProtocolOptions {
}
/**
 * Config for keepalive probes in a QUIC connection.
 * Note that QUIC keep-alive probing packets work differently from HTTP/2 keep-alive PINGs in a sense that the probing packet
 * itself doesn't timeout waiting for a probing response. Quic has a shorter idle timeout than TCP, so it doesn't rely on such probing to discover dead connections. If the peer fails to respond, the connection will idle timeout eventually. Thus, they are configured differently from :ref:`connection_keepalive <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.connection_keepalive>`.
 *
 * @generated from protobuf message envoy.config.core.v3.QuicKeepAliveSettings
 */
export interface QuicKeepAliveSettings {
    /**
     * The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.
     *
     * If :ref:`initial_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval>` is absent or zero, a client connection will use this value to start probing.
     *
     * If zero, disable keepalive probing.
     * If absent, use the QUICHE default interval to probe.
     *
     * @generated from protobuf field: google.protobuf.Duration max_interval = 1;
     */
    maxInterval?: Duration;
    /**
     * The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`. And the probes afterwards will always use :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`.
     *
     * The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout and smaller than max_interval to take effect.
     *
     * If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
     *
     * @generated from protobuf field: google.protobuf.Duration initial_interval = 2;
     */
    initialInterval?: Duration;
}
/**
 * QUIC protocol options which apply to both downstream and upstream connections.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.core.v3.QuicProtocolOptions
 */
export interface QuicProtocolOptions {
    /**
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_concurrent_streams = 1;
     */
    maxConcurrentStreams?: UInt32Value;
    /**
     * `Initial stream-level flow-control receive window
     * <https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1>`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     *
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     *
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value initial_stream_window_size = 2;
     */
    initialStreamWindowSize?: UInt32Value;
    /**
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     *
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value initial_connection_window_size = 3;
     */
    initialConnectionWindowSize?: UInt32Value;
    /**
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4;
     */
    numTimeoutsToTriggerPortMigration?: UInt32Value;
    /**
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     *
     * @generated from protobuf field: envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;
     */
    connectionKeepalive?: QuicKeepAliveSettings;
}
/**
 * @generated from protobuf message envoy.config.core.v3.UpstreamHttpProtocolOptions
 */
export interface UpstreamHttpProtocolOptions {
    /**
     * Set transport socket `SNI <https://en.wikipedia.org/wiki/Server_Name_Indication>`_ for new
     * upstream connections based on the downstream HTTP host/authority header or any other arbitrary
     * header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
     * is set, as seen by the :ref:`router filter <config_http_filters_router>`.
     * Does nothing if a filter before the http router filter sets the corresponding metadata.
     *
     * @generated from protobuf field: bool auto_sni = 1;
     */
    autoSni: boolean;
    /**
     * Automatic validate upstream presented certificate for new upstream connections based on the
     * downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
     * is set, as seen by the :ref:`router filter <config_http_filters_router>`.
     * This field is intended to be set with ``auto_sni`` field.
     * Does nothing if a filter before the http router filter sets the corresponding metadata.
     *
     * @generated from protobuf field: bool auto_san_validation = 2;
     */
    autoSanValidation: boolean;
    /**
     * An optional alternative to the host/authority header to be used for setting the SNI value.
     * It should be a valid downstream HTTP header, as seen by the
     * :ref:`router filter <config_http_filters_router>`.
     * If unset, host/authority header will be used for populating the SNI. If the specified header
     * is not found or the value is empty, host/authority header will be used instead.
     * This field is intended to be set with ``auto_sni`` and/or ``auto_san_validation`` fields.
     * If none of these fields are set then setting this would be a no-op.
     * Does nothing if a filter before the http router filter sets the corresponding metadata.
     *
     * @generated from protobuf field: string override_auto_sni_header = 3;
     */
    overrideAutoSniHeader: string;
}
/**
 * Configures the alternate protocols cache which tracks alternate protocols that can be used to
 * make an HTTP connection to an origin server. See https://tools.ietf.org/html/rfc7838 for
 * HTTP Alternative Services and https://datatracker.ietf.org/doc/html/draft-ietf-dnsop-svcb-https-04
 * for the "HTTPS" DNS resource record.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.core.v3.AlternateProtocolsCacheOptions
 */
export interface AlternateProtocolsCacheOptions {
    /**
     * The name of the cache. Multiple named caches allow independent alternate protocols cache
     * configurations to operate within a single Envoy process using different configurations. All
     * alternate protocols cache options with the same name *must* be equal in all fields when
     * referenced from different configuration components. Configuration will fail to load if this is
     * not the case.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The maximum number of entries that the cache will hold. If not specified defaults to 1024.
     *
     * .. note:
     *
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum entries in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_entries = 2;
     */
    maxEntries?: UInt32Value;
    /**
     * Allows configuring a persistent
     * :ref:`key value store <envoy_v3_api_msg_config.common.key_value.v3.KeyValueStoreConfig>` to flush
     * alternate protocols entries to disk.
     * This function is currently only supported if concurrency is 1
     * Cached entries will take precedence over pre-populated entries below.
     *
     * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig key_value_store_config = 3;
     */
    keyValueStoreConfig?: TypedExtensionConfig;
    /**
     * Allows pre-populating the cache with entries, as described above.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;
     */
    prepopulatedEntries: AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry[];
    /**
     * Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
     * this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
     * could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
     * the other hand, if the list contained the value ``.example.com`` then all three hosts could share
     * Alt-Svc entries. Each entry must start with ``.``. If a hostname matches multiple suffixes, the
     * first listed suffix will be used.
     *
     * Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
     * [#not-implemented-hide:]
     *
     * @generated from protobuf field: repeated string canonical_suffixes = 5;
     */
    canonicalSuffixes: string[];
}
/**
 * Allows pre-populating the cache with HTTP/3 alternate protocols entries with a 7 day lifetime.
 * This will cause Envoy to attempt HTTP/3 to those upstreams, even if the upstreams have not
 * advertised HTTP/3 support. These entries will be overwritten by alt-svc
 * response headers or cached values.
 * As with regular cached entries, if the origin response would result in clearing an existing
 * alternate protocol cache entry, pre-populated entries will also be cleared.
 * Adding a cache entry with hostname=foo.com port=123 is the equivalent of getting
 * response headers
 * alt-svc: h3=:"123"; ma=86400" in a response to a request to foo.com:123
 *
 * @generated from protobuf message envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry
 */
export interface AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry {
    /**
     * The host name for the alternate protocol entry.
     *
     * @generated from protobuf field: string hostname = 1;
     */
    hostname: string;
    /**
     * The port for the alternate protocol entry.
     *
     * @generated from protobuf field: uint32 port = 2;
     */
    port: number;
}
/**
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.core.v3.HttpProtocolOptions
 */
export interface HttpProtocolOptions {
    /**
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     *
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     *
     * If the :ref:`overload action <config_overload_manager_overload_actions>` "envoy.overload_actions.reduce_timeouts"
     * is configured, this timeout is scaled for downstream connections according to the value for
     * :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE>`.
     *
     * @generated from protobuf field: google.protobuf.Duration idle_timeout = 1;
     */
    idleTimeout?: Duration;
    /**
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * and if there are no active streams, the connection will be closed. If the connection is a
     * downstream connection and there are any active streams, the drain sequence will kick-in,
     * and the connection will be force-closed after the drain period. See :ref:`drain_timeout
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
     *
     * @generated from protobuf field: google.protobuf.Duration max_connection_duration = 3;
     */
    maxConnectionDuration?: Duration;
    /**
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_headers_count = 2;
     */
    maxHeadersCount?: UInt32Value;
    /**
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     *
     * @generated from protobuf field: google.protobuf.Duration max_stream_duration = 4;
     */
    maxStreamDuration?: Duration;
    /**
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * Note: this only affects client headers. It does not affect headers added
     * by Envoy filters and does not have any impact if added to cluster config.
     *
     * @generated from protobuf field: envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;
     */
    headersWithUnderscoresAction: HttpProtocolOptions_HeadersWithUnderscoresAction;
    /**
     * Optional maximum requests for both upstream and downstream connections.
     * If not specified, there is no limit.
     * Setting this parameter to 1 will effectively disable keep alive.
     * For HTTP/2 and HTTP/3, due to concurrent stream processing, the limit is approximate.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_requests_per_connection = 6;
     */
    maxRequestsPerConnection?: UInt32Value;
}
/**
 * Action to take when Envoy receives client request with header names containing underscore
 * characters.
 * Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
 * as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
 * characters.
 *
 * @generated from protobuf enum envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction
 */
export enum HttpProtocolOptions_HeadersWithUnderscoresAction {
    /**
     * Allow headers with underscores. This is the default behavior.
     *
     * @generated from protobuf enum value: ALLOW = 0;
     */
    ALLOW = 0,
    /**
     * Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
     * end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
     * is incremented for each rejected request.
     *
     * @generated from protobuf enum value: REJECT_REQUEST = 1;
     */
    REJECT_REQUEST = 1,
    /**
     * Drop the client header with name containing underscores. The header is dropped before the filter chain is
     * invoked and as such filters will not see dropped headers. The
     * "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
     *
     * @generated from protobuf enum value: DROP_HEADER = 2;
     */
    DROP_HEADER = 2
}
/**
 * [#next-free-field: 11]
 *
 * @generated from protobuf message envoy.config.core.v3.Http1ProtocolOptions
 */
export interface Http1ProtocolOptions {
    /**
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     *
     * @generated from protobuf field: google.protobuf.BoolValue allow_absolute_url = 1;
     */
    allowAbsoluteUrl?: BoolValue;
    /**
     * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
     * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
     * style connect logic, dechunking, and handling lack of client host iff
     * ``default_host_for_http_10`` is configured.
     *
     * @generated from protobuf field: bool accept_http_10 = 2;
     */
    acceptHttp10: boolean;
    /**
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     *
     * @generated from protobuf field: string default_host_for_http_10 = 3;
     */
    defaultHostForHttp10: string;
    /**
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     *
     * @generated from protobuf field: envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;
     */
    headerKeyFormat?: Http1ProtocolOptions_HeaderKeyFormat;
    /**
     * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
     *
     * .. attention::
     *
     *   Note that this only happens when Envoy is chunk encoding which occurs when:
     *   - The request is HTTP/1.1.
     *   - Is neither a HEAD only request nor a HTTP Upgrade.
     *   - Not a response to a HEAD request.
     *   - The content length header is not present.
     *
     * @generated from protobuf field: bool enable_trailers = 5;
     */
    enableTrailers: boolean;
    /**
     * Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
     * headers set. By default such messages are rejected, but if option is enabled - Envoy will
     * remove Content-Length header and process message.
     * See `RFC7230, sec. 3.3.3 <https://tools.ietf.org/html/rfc7230#section-3.3.3>`_ for details.
     *
     * .. attention::
     *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
     *   is proxied via multiple layers of proxies.
     * [#comment:TODO: This field is ignored when the
     * :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
     * is present.]
     *
     * @generated from protobuf field: bool allow_chunked_length = 6;
     */
    allowChunkedLength: boolean;
    /**
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
     *
     * @generated from protobuf field: google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;
     */
    overrideStreamErrorOnInvalidHttpMessage?: BoolValue;
    /**
     * Allows sending fully qualified URLs when proxying the first line of the
     * response. By default, Envoy will only send the path components in the first line.
     * If this is true, Envoy will create a fully qualified URI composing scheme
     * (inferred if not present), host (from the host/:authority header) and path
     * (from first line or :path header).
     *
     * @generated from protobuf field: bool send_fully_qualified_url = 8;
     */
    sendFullyQualifiedUrl: boolean;
    /**
     * [#not-implemented-hide:] Hiding so that field can be removed after BalsaParser is rolled out.
     * If set, force HTTP/1 parser: BalsaParser if true, http-parser if false.
     * If unset, HTTP/1 parser is selected based on
     * envoy.reloadable_features.http1_use_balsa_parser.
     * See issue #21245.
     *
     * @generated from protobuf field: google.protobuf.BoolValue use_balsa_parser = 9;
     */
    useBalsaParser?: BoolValue;
    /**
     * [#not-implemented-hide:] Hiding so that field can be removed.
     * If true, and BalsaParser is used (either `use_balsa_parser` above is true,
     * or `envoy.reloadable_features.http1_use_balsa_parser` is true and
     * `use_balsa_parser` is unset), then every non-empty method with only valid
     * characters is accepted. Otherwise, methods not on the hard-coded list are
     * rejected.
     * Once UHV is enabled, this field should be removed, and BalsaParser should
     * allow any method. UHV validates the method, rejecting empty string or
     * invalid characters, and provides :ref:`restrict_http_methods
     * <envoy_v3_api_field_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.restrict_http_methods>`
     * to reject custom methods.
     *
     * @generated from protobuf field: bool allow_custom_methods = 10;
     */
    allowCustomMethods: boolean;
}
/**
 * [#next-free-field: 9]
 *
 * @generated from protobuf message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat
 */
export interface Http1ProtocolOptions_HeaderKeyFormat {
    /**
     * @generated from protobuf oneof: header_format
     */
    headerFormat: {
        oneofKind: "properCaseWords";
        /**
         * Formats the header by proper casing words: the first character and any character following
         * a special character will be capitalized if it's an alpha character. For example,
         * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
         * Note that while this results in most headers following conventional casing, certain headers
         * are not covered. For example, the "TE" header will be formatted as "Te".
         *
         * @generated from protobuf field: envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;
         */
        properCaseWords: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords;
    } | {
        oneofKind: "statefulFormatter";
        /**
         * Configuration for stateful formatter extensions that allow using received headers to
         * affect the output of encoding headers. E.g., preserving case during proxying.
         * [#extension-category: envoy.http.stateful_header_formatters]
         *
         * @generated from protobuf field: envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;
         */
        statefulFormatter: TypedExtensionConfig;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords
 */
export interface Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
}
/**
 * @generated from protobuf message envoy.config.core.v3.KeepaliveSettings
 */
export interface KeepaliveSettings {
    /**
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     *
     * @generated from protobuf field: google.protobuf.Duration interval = 1;
     */
    interval?: Duration;
    /**
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     *
     * @generated from protobuf field: google.protobuf.Duration timeout = 2;
     */
    timeout?: Duration;
    /**
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     *
     * @generated from protobuf field: envoy.type.v3.Percent interval_jitter = 3;
     */
    intervalJitter?: Percent;
    /**
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     *
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` and the current PTO of the connection to decide whether to probe before sending a new request.
     *
     * @generated from protobuf field: google.protobuf.Duration connection_idle_interval = 4;
     */
    connectionIdleInterval?: Duration;
}
/**
 * [#next-free-field: 17]
 *
 * @generated from protobuf message envoy.config.core.v3.Http2ProtocolOptions
 */
export interface Http2ProtocolOptions {
    /**
     * `Maximum table size <https://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value hpack_table_size = 1;
     */
    hpackTableSize?: UInt32Value;
    /**
     * `Maximum concurrent streams <https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     *
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     *
     * This acts as an upper bound: Envoy will lower the max concurrent streams allowed on a given
     * connection based on upstream settings. Config dumps will reflect the configured upper bound,
     * not the per-connection negotiated limits.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_concurrent_streams = 2;
     */
    maxConcurrentStreams?: UInt32Value;
    /**
     * `Initial stream-level flow-control window
     * <https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2>`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     *
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     *
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value initial_stream_window_size = 3;
     */
    initialStreamWindowSize?: UInt32Value;
    /**
     * Similar to ``initial_stream_window_size``, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as ``initial_stream_window_size``.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value initial_connection_window_size = 4;
     */
    initialConnectionWindowSize?: UInt32Value;
    /**
     * Allows proxying Websocket and other upgrades over H2 connect.
     *
     * @generated from protobuf field: bool allow_connect = 5;
     */
    allowConnect: boolean;
    /**
     * [#not-implemented-hide:] Hiding until envoy has full metadata support.
     * Still under implementation. DO NOT USE.
     *
     * Allows metadata. See [metadata
     * docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
     * information.
     *
     * @generated from protobuf field: bool allow_metadata = 6;
     */
    allowMetadata: boolean;
    /**
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_outbound_frames = 7;
     */
    maxOutboundFrames?: UInt32Value;
    /**
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_outbound_control_frames = 8;
     */
    maxOutboundControlFrames?: UInt32Value;
    /**
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;
     */
    maxConsecutiveInboundFramesWithEmptyPayload?: UInt32Value;
    /**
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *
     *   ``max_inbound_priority_frames_per_stream`` * (1 + ``opened_streams``)
     *
     * the connection is terminated. For downstream connections the ``opened_streams`` is incremented when
     * Envoy receives complete response headers from the upstream server. For upstream connection the
     * ``opened_streams`` is incremented when Envoy send the HEADERS frame for a new stream. The
     * ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;
     */
    maxInboundPriorityFramesPerStream?: UInt32Value;
    /**
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *
     *   5 + 2 * (``opened_streams`` +
     *            ``max_inbound_window_update_frames_per_data_frame_sent`` * ``outbound_data_frames``)
     *
     * the connection is terminated. For downstream connections the ``opened_streams`` is incremented when
     * Envoy receives complete response headers from the upstream server. For upstream connections the
     * ``opened_streams`` is incremented when Envoy sends the HEADERS frame for a new stream. The
     * ``http2.inbound_priority_frames_flood`` stat tracks the number of connections terminated due to
     * flood mitigation. The default max_inbound_window_update_frames_per_data_frame_sent value is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11;
     */
    maxInboundWindowUpdateFramesPerDataFrameSent?: UInt32Value;
    /**
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     *
     * This is overridden by HCM :ref:`stream_error_on_invalid_http_messaging
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`
     * iff present.
     *
     * This is deprecated in favor of :ref:`override_stream_error_on_invalid_http_message
     * <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message>`
     *
     * See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.
     *
     * @deprecated
     * @generated from protobuf field: bool stream_error_on_invalid_http_messaging = 12 [deprecated = true];
     */
    streamErrorOnInvalidHttpMessaging: boolean;
    /**
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     *
     * This overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`
     *
     * See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.
     *
     * @generated from protobuf field: google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 14;
     */
    overrideStreamErrorOnInvalidHttpMessage?: BoolValue;
    /**
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     *
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     *
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     *
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     *
     * .. code-block:: text
     *
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     *
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     *
     * See `IANA HTTP/2 Settings
     * <https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings>`_ for
     * standardized identifiers.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;
     */
    customSettingsParameters: Http2ProtocolOptions_SettingsParameter[];
    /**
     * Send HTTP/2 PING frames to verify that the connection is still healthy. If the remote peer
     * does not respond within the configured timeout, the connection will be aborted.
     *
     * @generated from protobuf field: envoy.config.core.v3.KeepaliveSettings connection_keepalive = 15;
     */
    connectionKeepalive?: KeepaliveSettings;
    /**
     * [#not-implemented-hide:] Hiding so that the field can be removed after oghttp2 is rolled out.
     * If set, force use of a particular HTTP/2 codec: oghttp2 if true, nghttp2 if false.
     * If unset, HTTP/2 codec is selected based on envoy.reloadable_features.http2_use_oghttp2.
     *
     * @generated from protobuf field: google.protobuf.BoolValue use_oghttp2_codec = 16;
     */
    useOghttp2Codec?: BoolValue;
}
/**
 * Defines a parameter to be sent in the SETTINGS frame.
 * See `RFC7540, sec. 6.5.1 <https://tools.ietf.org/html/rfc7540#section-6.5.1>`_ for details.
 *
 * @generated from protobuf message envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter
 */
export interface Http2ProtocolOptions_SettingsParameter {
    /**
     * The 16 bit parameter identifier.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value identifier = 1;
     */
    identifier?: UInt32Value;
    /**
     * The 32 bit parameter value.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value value = 2;
     */
    value?: UInt32Value;
}
/**
 * [#not-implemented-hide:]
 *
 * @generated from protobuf message envoy.config.core.v3.GrpcProtocolOptions
 */
export interface GrpcProtocolOptions {
    /**
     * @generated from protobuf field: envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 1;
     */
    http2ProtocolOptions?: Http2ProtocolOptions;
}
/**
 * A message which allows using HTTP/3.
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.core.v3.Http3ProtocolOptions
 */
export interface Http3ProtocolOptions {
    /**
     * @generated from protobuf field: envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;
     */
    quicProtocolOptions?: QuicProtocolOptions;
    /**
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     *
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
     *
     * @generated from protobuf field: google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;
     */
    overrideStreamErrorOnInvalidHttpMessage?: BoolValue;
    /**
     * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
     * the header mechanisms from the `HTTP/2 extended connect RFC
     * <https://datatracker.ietf.org/doc/html/rfc8441>`_
     * and settings `proposed for HTTP/3
     * <https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/>`_
     * Note that HTTP/3 CONNECT is not yet an RFC.
     *
     * @generated from protobuf field: bool allow_extended_connect = 5;
     */
    allowExtendedConnect: boolean;
}
/**
 * A message to control transformations to the :scheme header
 *
 * @generated from protobuf message envoy.config.core.v3.SchemeHeaderTransformation
 */
export interface SchemeHeaderTransformation {
    /**
     * @generated from protobuf oneof: transformation
     */
    transformation: {
        oneofKind: "schemeToOverwrite";
        /**
         * Overwrite any Scheme header with the contents of this string.
         *
         * @generated from protobuf field: string scheme_to_overwrite = 1;
         */
        schemeToOverwrite: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class TcpProtocolOptions$Type extends MessageType<TcpProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.TcpProtocolOptions", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.TcpProtocolOptions" } });
    }
    create(value?: PartialMessage<TcpProtocolOptions>): TcpProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TcpProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpProtocolOptions): TcpProtocolOptions {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TcpProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.TcpProtocolOptions
 */
export const TcpProtocolOptions = new TcpProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuicKeepAliveSettings$Type extends MessageType<QuicKeepAliveSettings> {
    constructor() {
        super("envoy.config.core.v3.QuicKeepAliveSettings", [
            { no: 1, name: "max_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { lte: {}, gte: { seconds: "1" } } } } },
            { no: 2, name: "initial_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { lte: {}, gte: { seconds: "1" } } } } }
        ]);
    }
    create(value?: PartialMessage<QuicKeepAliveSettings>): QuicKeepAliveSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QuicKeepAliveSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuicKeepAliveSettings): QuicKeepAliveSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration max_interval */ 1:
                    message.maxInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxInterval);
                    break;
                case /* google.protobuf.Duration initial_interval */ 2:
                    message.initialInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.initialInterval);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuicKeepAliveSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration max_interval = 1; */
        if (message.maxInterval)
            Duration.internalBinaryWrite(message.maxInterval, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration initial_interval = 2; */
        if (message.initialInterval)
            Duration.internalBinaryWrite(message.initialInterval, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.QuicKeepAliveSettings
 */
export const QuicKeepAliveSettings = new QuicKeepAliveSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuicProtocolOptions$Type extends MessageType<QuicProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.QuicProtocolOptions", [
            { no: 1, name: "max_concurrent_streams", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 2, name: "initial_stream_window_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 16777216, gte: 1 } } } },
            { no: 3, name: "initial_connection_window_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 25165824, gte: 1 } } } },
            { no: 4, name: "num_timeouts_to_trigger_port_migration", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 5, gte: 0 } } } },
            { no: 5, name: "connection_keepalive", kind: "message", T: () => QuicKeepAliveSettings }
        ]);
    }
    create(value?: PartialMessage<QuicProtocolOptions>): QuicProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QuicProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuicProtocolOptions): QuicProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value max_concurrent_streams */ 1:
                    message.maxConcurrentStreams = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxConcurrentStreams);
                    break;
                case /* google.protobuf.UInt32Value initial_stream_window_size */ 2:
                    message.initialStreamWindowSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.initialStreamWindowSize);
                    break;
                case /* google.protobuf.UInt32Value initial_connection_window_size */ 3:
                    message.initialConnectionWindowSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.initialConnectionWindowSize);
                    break;
                case /* google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration */ 4:
                    message.numTimeoutsToTriggerPortMigration = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.numTimeoutsToTriggerPortMigration);
                    break;
                case /* envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive */ 5:
                    message.connectionKeepalive = QuicKeepAliveSettings.internalBinaryRead(reader, reader.uint32(), options, message.connectionKeepalive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuicProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value max_concurrent_streams = 1; */
        if (message.maxConcurrentStreams)
            UInt32Value.internalBinaryWrite(message.maxConcurrentStreams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value initial_stream_window_size = 2; */
        if (message.initialStreamWindowSize)
            UInt32Value.internalBinaryWrite(message.initialStreamWindowSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value initial_connection_window_size = 3; */
        if (message.initialConnectionWindowSize)
            UInt32Value.internalBinaryWrite(message.initialConnectionWindowSize, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4; */
        if (message.numTimeoutsToTriggerPortMigration)
            UInt32Value.internalBinaryWrite(message.numTimeoutsToTriggerPortMigration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5; */
        if (message.connectionKeepalive)
            QuicKeepAliveSettings.internalBinaryWrite(message.connectionKeepalive, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.QuicProtocolOptions
 */
export const QuicProtocolOptions = new QuicProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpstreamHttpProtocolOptions$Type extends MessageType<UpstreamHttpProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.UpstreamHttpProtocolOptions", [
            { no: 1, name: "auto_sni", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "auto_san_validation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "override_auto_sni_header", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.UpstreamHttpProtocolOptions" } });
    }
    create(value?: PartialMessage<UpstreamHttpProtocolOptions>): UpstreamHttpProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.autoSni = false;
        message.autoSanValidation = false;
        message.overrideAutoSniHeader = "";
        if (value !== undefined)
            reflectionMergePartial<UpstreamHttpProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpstreamHttpProtocolOptions): UpstreamHttpProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool auto_sni */ 1:
                    message.autoSni = reader.bool();
                    break;
                case /* bool auto_san_validation */ 2:
                    message.autoSanValidation = reader.bool();
                    break;
                case /* string override_auto_sni_header */ 3:
                    message.overrideAutoSniHeader = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpstreamHttpProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool auto_sni = 1; */
        if (message.autoSni !== false)
            writer.tag(1, WireType.Varint).bool(message.autoSni);
        /* bool auto_san_validation = 2; */
        if (message.autoSanValidation !== false)
            writer.tag(2, WireType.Varint).bool(message.autoSanValidation);
        /* string override_auto_sni_header = 3; */
        if (message.overrideAutoSniHeader !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.overrideAutoSniHeader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.UpstreamHttpProtocolOptions
 */
export const UpstreamHttpProtocolOptions = new UpstreamHttpProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlternateProtocolsCacheOptions$Type extends MessageType<AlternateProtocolsCacheOptions> {
    constructor() {
        super("envoy.config.core.v3.AlternateProtocolsCacheOptions", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "max_entries", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gt: 0 } } } },
            { no: 3, name: "key_value_store_config", kind: "message", T: () => TypedExtensionConfig },
            { no: 4, name: "prepopulated_entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry },
            { no: 5, name: "canonical_suffixes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AlternateProtocolsCacheOptions>): AlternateProtocolsCacheOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.prepopulatedEntries = [];
        message.canonicalSuffixes = [];
        if (value !== undefined)
            reflectionMergePartial<AlternateProtocolsCacheOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlternateProtocolsCacheOptions): AlternateProtocolsCacheOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.UInt32Value max_entries */ 2:
                    message.maxEntries = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxEntries);
                    break;
                case /* envoy.config.core.v3.TypedExtensionConfig key_value_store_config */ 3:
                    message.keyValueStoreConfig = TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, message.keyValueStoreConfig);
                    break;
                case /* repeated envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries */ 4:
                    message.prepopulatedEntries.push(AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string canonical_suffixes */ 5:
                    message.canonicalSuffixes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlternateProtocolsCacheOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.UInt32Value max_entries = 2; */
        if (message.maxEntries)
            UInt32Value.internalBinaryWrite(message.maxEntries, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.TypedExtensionConfig key_value_store_config = 3; */
        if (message.keyValueStoreConfig)
            TypedExtensionConfig.internalBinaryWrite(message.keyValueStoreConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4; */
        for (let i = 0; i < message.prepopulatedEntries.length; i++)
            AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry.internalBinaryWrite(message.prepopulatedEntries[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string canonical_suffixes = 5; */
        for (let i = 0; i < message.canonicalSuffixes.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.canonicalSuffixes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.AlternateProtocolsCacheOptions
 */
export const AlternateProtocolsCacheOptions = new AlternateProtocolsCacheOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry$Type extends MessageType<AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry> {
    constructor() {
        super("envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry", [
            { no: 1, name: "hostname", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { wellKnownRegex: "HTTP_HEADER_NAME", ignoreEmpty: true } } } },
            { no: 2, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 65535, gt: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry>): AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hostname = "";
        message.port = 0;
        if (value !== undefined)
            reflectionMergePartial<AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry): AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hostname */ 1:
                    message.hostname = reader.string();
                    break;
                case /* uint32 port */ 2:
                    message.port = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hostname = 1; */
        if (message.hostname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hostname);
        /* uint32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).uint32(message.port);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry
 */
export const AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry = new AlternateProtocolsCacheOptions_AlternateProtocolsCacheEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpProtocolOptions$Type extends MessageType<HttpProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.HttpProtocolOptions", [
            { no: 1, name: "idle_timeout", kind: "message", T: () => Duration },
            { no: 3, name: "max_connection_duration", kind: "message", T: () => Duration },
            { no: 2, name: "max_headers_count", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 4, name: "max_stream_duration", kind: "message", T: () => Duration },
            { no: 5, name: "headers_with_underscores_action", kind: "enum", T: () => ["envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction", HttpProtocolOptions_HeadersWithUnderscoresAction] },
            { no: 6, name: "max_requests_per_connection", kind: "message", T: () => UInt32Value }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.HttpProtocolOptions" } });
    }
    create(value?: PartialMessage<HttpProtocolOptions>): HttpProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headersWithUnderscoresAction = 0;
        if (value !== undefined)
            reflectionMergePartial<HttpProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpProtocolOptions): HttpProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration idle_timeout */ 1:
                    message.idleTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.idleTimeout);
                    break;
                case /* google.protobuf.Duration max_connection_duration */ 3:
                    message.maxConnectionDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxConnectionDuration);
                    break;
                case /* google.protobuf.UInt32Value max_headers_count */ 2:
                    message.maxHeadersCount = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxHeadersCount);
                    break;
                case /* google.protobuf.Duration max_stream_duration */ 4:
                    message.maxStreamDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxStreamDuration);
                    break;
                case /* envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action */ 5:
                    message.headersWithUnderscoresAction = reader.int32();
                    break;
                case /* google.protobuf.UInt32Value max_requests_per_connection */ 6:
                    message.maxRequestsPerConnection = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxRequestsPerConnection);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration idle_timeout = 1; */
        if (message.idleTimeout)
            Duration.internalBinaryWrite(message.idleTimeout, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration max_connection_duration = 3; */
        if (message.maxConnectionDuration)
            Duration.internalBinaryWrite(message.maxConnectionDuration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_headers_count = 2; */
        if (message.maxHeadersCount)
            UInt32Value.internalBinaryWrite(message.maxHeadersCount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration max_stream_duration = 4; */
        if (message.maxStreamDuration)
            Duration.internalBinaryWrite(message.maxStreamDuration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5; */
        if (message.headersWithUnderscoresAction !== 0)
            writer.tag(5, WireType.Varint).int32(message.headersWithUnderscoresAction);
        /* google.protobuf.UInt32Value max_requests_per_connection = 6; */
        if (message.maxRequestsPerConnection)
            UInt32Value.internalBinaryWrite(message.maxRequestsPerConnection, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.HttpProtocolOptions
 */
export const HttpProtocolOptions = new HttpProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http1ProtocolOptions$Type extends MessageType<Http1ProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.Http1ProtocolOptions", [
            { no: 1, name: "allow_absolute_url", kind: "message", T: () => BoolValue },
            { no: 2, name: "accept_http_10", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "default_host_for_http_10", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "header_key_format", kind: "message", T: () => Http1ProtocolOptions_HeaderKeyFormat },
            { no: 5, name: "enable_trailers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "allow_chunked_length", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "override_stream_error_on_invalid_http_message", kind: "message", T: () => BoolValue },
            { no: 8, name: "send_fully_qualified_url", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "use_balsa_parser", kind: "message", T: () => BoolValue, options: { "xds.annotations.v3.field_status": { workInProgress: true } } },
            { no: 10, name: "allow_custom_methods", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "xds.annotations.v3.field_status": { workInProgress: true } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.Http1ProtocolOptions" } });
    }
    create(value?: PartialMessage<Http1ProtocolOptions>): Http1ProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.acceptHttp10 = false;
        message.defaultHostForHttp10 = "";
        message.enableTrailers = false;
        message.allowChunkedLength = false;
        message.sendFullyQualifiedUrl = false;
        message.allowCustomMethods = false;
        if (value !== undefined)
            reflectionMergePartial<Http1ProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http1ProtocolOptions): Http1ProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.BoolValue allow_absolute_url */ 1:
                    message.allowAbsoluteUrl = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.allowAbsoluteUrl);
                    break;
                case /* bool accept_http_10 */ 2:
                    message.acceptHttp10 = reader.bool();
                    break;
                case /* string default_host_for_http_10 */ 3:
                    message.defaultHostForHttp10 = reader.string();
                    break;
                case /* envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format */ 4:
                    message.headerKeyFormat = Http1ProtocolOptions_HeaderKeyFormat.internalBinaryRead(reader, reader.uint32(), options, message.headerKeyFormat);
                    break;
                case /* bool enable_trailers */ 5:
                    message.enableTrailers = reader.bool();
                    break;
                case /* bool allow_chunked_length */ 6:
                    message.allowChunkedLength = reader.bool();
                    break;
                case /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message */ 7:
                    message.overrideStreamErrorOnInvalidHttpMessage = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.overrideStreamErrorOnInvalidHttpMessage);
                    break;
                case /* bool send_fully_qualified_url */ 8:
                    message.sendFullyQualifiedUrl = reader.bool();
                    break;
                case /* google.protobuf.BoolValue use_balsa_parser */ 9:
                    message.useBalsaParser = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.useBalsaParser);
                    break;
                case /* bool allow_custom_methods */ 10:
                    message.allowCustomMethods = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http1ProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.BoolValue allow_absolute_url = 1; */
        if (message.allowAbsoluteUrl)
            BoolValue.internalBinaryWrite(message.allowAbsoluteUrl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool accept_http_10 = 2; */
        if (message.acceptHttp10 !== false)
            writer.tag(2, WireType.Varint).bool(message.acceptHttp10);
        /* string default_host_for_http_10 = 3; */
        if (message.defaultHostForHttp10 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.defaultHostForHttp10);
        /* envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4; */
        if (message.headerKeyFormat)
            Http1ProtocolOptions_HeaderKeyFormat.internalBinaryWrite(message.headerKeyFormat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool enable_trailers = 5; */
        if (message.enableTrailers !== false)
            writer.tag(5, WireType.Varint).bool(message.enableTrailers);
        /* bool allow_chunked_length = 6; */
        if (message.allowChunkedLength !== false)
            writer.tag(6, WireType.Varint).bool(message.allowChunkedLength);
        /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7; */
        if (message.overrideStreamErrorOnInvalidHttpMessage)
            BoolValue.internalBinaryWrite(message.overrideStreamErrorOnInvalidHttpMessage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bool send_fully_qualified_url = 8; */
        if (message.sendFullyQualifiedUrl !== false)
            writer.tag(8, WireType.Varint).bool(message.sendFullyQualifiedUrl);
        /* google.protobuf.BoolValue use_balsa_parser = 9; */
        if (message.useBalsaParser)
            BoolValue.internalBinaryWrite(message.useBalsaParser, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool allow_custom_methods = 10; */
        if (message.allowCustomMethods !== false)
            writer.tag(10, WireType.Varint).bool(message.allowCustomMethods);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http1ProtocolOptions
 */
export const Http1ProtocolOptions = new Http1ProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http1ProtocolOptions_HeaderKeyFormat$Type extends MessageType<Http1ProtocolOptions_HeaderKeyFormat> {
    constructor() {
        super("envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat", [
            { no: 1, name: "proper_case_words", kind: "message", oneof: "headerFormat", T: () => Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords },
            { no: 8, name: "stateful_formatter", kind: "message", oneof: "headerFormat", T: () => TypedExtensionConfig }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.Http1ProtocolOptions.HeaderKeyFormat" } });
    }
    create(value?: PartialMessage<Http1ProtocolOptions_HeaderKeyFormat>): Http1ProtocolOptions_HeaderKeyFormat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerFormat = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Http1ProtocolOptions_HeaderKeyFormat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http1ProtocolOptions_HeaderKeyFormat): Http1ProtocolOptions_HeaderKeyFormat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words */ 1:
                    message.headerFormat = {
                        oneofKind: "properCaseWords",
                        properCaseWords: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords.internalBinaryRead(reader, reader.uint32(), options, (message.headerFormat as any).properCaseWords)
                    };
                    break;
                case /* envoy.config.core.v3.TypedExtensionConfig stateful_formatter */ 8:
                    message.headerFormat = {
                        oneofKind: "statefulFormatter",
                        statefulFormatter: TypedExtensionConfig.internalBinaryRead(reader, reader.uint32(), options, (message.headerFormat as any).statefulFormatter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http1ProtocolOptions_HeaderKeyFormat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1; */
        if (message.headerFormat.oneofKind === "properCaseWords")
            Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords.internalBinaryWrite(message.headerFormat.properCaseWords, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8; */
        if (message.headerFormat.oneofKind === "statefulFormatter")
            TypedExtensionConfig.internalBinaryWrite(message.headerFormat.statefulFormatter, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat
 */
export const Http1ProtocolOptions_HeaderKeyFormat = new Http1ProtocolOptions_HeaderKeyFormat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords$Type extends MessageType<Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords> {
    constructor() {
        super("envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords", [], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords" } });
    }
    create(value?: PartialMessage<Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords>): Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords): Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords
 */
export const Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords = new Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeepaliveSettings$Type extends MessageType<KeepaliveSettings> {
    constructor() {
        super("envoy.config.core.v3.KeepaliveSettings", [
            { no: 1, name: "interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gte: { nanos: 1000000 } } } } },
            { no: 2, name: "timeout", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, gte: { nanos: 1000000 } } } } },
            { no: 3, name: "interval_jitter", kind: "message", T: () => Percent },
            { no: 4, name: "connection_idle_interval", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { gte: { nanos: 1000000 } } } } }
        ]);
    }
    create(value?: PartialMessage<KeepaliveSettings>): KeepaliveSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<KeepaliveSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeepaliveSettings): KeepaliveSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration interval */ 1:
                    message.interval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.interval);
                    break;
                case /* google.protobuf.Duration timeout */ 2:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* envoy.type.v3.Percent interval_jitter */ 3:
                    message.intervalJitter = Percent.internalBinaryRead(reader, reader.uint32(), options, message.intervalJitter);
                    break;
                case /* google.protobuf.Duration connection_idle_interval */ 4:
                    message.connectionIdleInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.connectionIdleInterval);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeepaliveSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration interval = 1; */
        if (message.interval)
            Duration.internalBinaryWrite(message.interval, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration timeout = 2; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.type.v3.Percent interval_jitter = 3; */
        if (message.intervalJitter)
            Percent.internalBinaryWrite(message.intervalJitter, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration connection_idle_interval = 4; */
        if (message.connectionIdleInterval)
            Duration.internalBinaryWrite(message.connectionIdleInterval, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.KeepaliveSettings
 */
export const KeepaliveSettings = new KeepaliveSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http2ProtocolOptions$Type extends MessageType<Http2ProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.Http2ProtocolOptions", [
            { no: 1, name: "hpack_table_size", kind: "message", T: () => UInt32Value },
            { no: 2, name: "max_concurrent_streams", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 2147483647, gte: 1 } } } },
            { no: 3, name: "initial_stream_window_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 2147483647, gte: 65535 } } } },
            { no: 4, name: "initial_connection_window_size", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 2147483647, gte: 65535 } } } },
            { no: 5, name: "allow_connect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "allow_metadata", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "max_outbound_frames", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 8, name: "max_outbound_control_frames", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 9, name: "max_consecutive_inbound_frames_with_empty_payload", kind: "message", T: () => UInt32Value },
            { no: 10, name: "max_inbound_priority_frames_per_stream", kind: "message", T: () => UInt32Value },
            { no: 11, name: "max_inbound_window_update_frames_per_data_frame_sent", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 12, name: "stream_error_on_invalid_http_messaging", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "envoy.annotations.deprecated_at_minor_version": "3.0" } },
            { no: 14, name: "override_stream_error_on_invalid_http_message", kind: "message", T: () => BoolValue },
            { no: 13, name: "custom_settings_parameters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Http2ProtocolOptions_SettingsParameter },
            { no: 15, name: "connection_keepalive", kind: "message", T: () => KeepaliveSettings },
            { no: 16, name: "use_oghttp2_codec", kind: "message", T: () => BoolValue, options: { "xds.annotations.v3.field_status": { workInProgress: true } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.Http2ProtocolOptions" } });
    }
    create(value?: PartialMessage<Http2ProtocolOptions>): Http2ProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allowConnect = false;
        message.allowMetadata = false;
        message.streamErrorOnInvalidHttpMessaging = false;
        message.customSettingsParameters = [];
        if (value !== undefined)
            reflectionMergePartial<Http2ProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http2ProtocolOptions): Http2ProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value hpack_table_size */ 1:
                    message.hpackTableSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.hpackTableSize);
                    break;
                case /* google.protobuf.UInt32Value max_concurrent_streams */ 2:
                    message.maxConcurrentStreams = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxConcurrentStreams);
                    break;
                case /* google.protobuf.UInt32Value initial_stream_window_size */ 3:
                    message.initialStreamWindowSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.initialStreamWindowSize);
                    break;
                case /* google.protobuf.UInt32Value initial_connection_window_size */ 4:
                    message.initialConnectionWindowSize = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.initialConnectionWindowSize);
                    break;
                case /* bool allow_connect */ 5:
                    message.allowConnect = reader.bool();
                    break;
                case /* bool allow_metadata */ 6:
                    message.allowMetadata = reader.bool();
                    break;
                case /* google.protobuf.UInt32Value max_outbound_frames */ 7:
                    message.maxOutboundFrames = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxOutboundFrames);
                    break;
                case /* google.protobuf.UInt32Value max_outbound_control_frames */ 8:
                    message.maxOutboundControlFrames = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxOutboundControlFrames);
                    break;
                case /* google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload */ 9:
                    message.maxConsecutiveInboundFramesWithEmptyPayload = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxConsecutiveInboundFramesWithEmptyPayload);
                    break;
                case /* google.protobuf.UInt32Value max_inbound_priority_frames_per_stream */ 10:
                    message.maxInboundPriorityFramesPerStream = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxInboundPriorityFramesPerStream);
                    break;
                case /* google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent */ 11:
                    message.maxInboundWindowUpdateFramesPerDataFrameSent = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxInboundWindowUpdateFramesPerDataFrameSent);
                    break;
                case /* bool stream_error_on_invalid_http_messaging = 12 [deprecated = true];*/ 12:
                    message.streamErrorOnInvalidHttpMessaging = reader.bool();
                    break;
                case /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message */ 14:
                    message.overrideStreamErrorOnInvalidHttpMessage = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.overrideStreamErrorOnInvalidHttpMessage);
                    break;
                case /* repeated envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter custom_settings_parameters */ 13:
                    message.customSettingsParameters.push(Http2ProtocolOptions_SettingsParameter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.core.v3.KeepaliveSettings connection_keepalive */ 15:
                    message.connectionKeepalive = KeepaliveSettings.internalBinaryRead(reader, reader.uint32(), options, message.connectionKeepalive);
                    break;
                case /* google.protobuf.BoolValue use_oghttp2_codec */ 16:
                    message.useOghttp2Codec = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.useOghttp2Codec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http2ProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value hpack_table_size = 1; */
        if (message.hpackTableSize)
            UInt32Value.internalBinaryWrite(message.hpackTableSize, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_concurrent_streams = 2; */
        if (message.maxConcurrentStreams)
            UInt32Value.internalBinaryWrite(message.maxConcurrentStreams, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value initial_stream_window_size = 3; */
        if (message.initialStreamWindowSize)
            UInt32Value.internalBinaryWrite(message.initialStreamWindowSize, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value initial_connection_window_size = 4; */
        if (message.initialConnectionWindowSize)
            UInt32Value.internalBinaryWrite(message.initialConnectionWindowSize, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool allow_connect = 5; */
        if (message.allowConnect !== false)
            writer.tag(5, WireType.Varint).bool(message.allowConnect);
        /* bool allow_metadata = 6; */
        if (message.allowMetadata !== false)
            writer.tag(6, WireType.Varint).bool(message.allowMetadata);
        /* google.protobuf.UInt32Value max_outbound_frames = 7; */
        if (message.maxOutboundFrames)
            UInt32Value.internalBinaryWrite(message.maxOutboundFrames, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_outbound_control_frames = 8; */
        if (message.maxOutboundControlFrames)
            UInt32Value.internalBinaryWrite(message.maxOutboundControlFrames, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9; */
        if (message.maxConsecutiveInboundFramesWithEmptyPayload)
            UInt32Value.internalBinaryWrite(message.maxConsecutiveInboundFramesWithEmptyPayload, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10; */
        if (message.maxInboundPriorityFramesPerStream)
            UInt32Value.internalBinaryWrite(message.maxInboundPriorityFramesPerStream, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11; */
        if (message.maxInboundWindowUpdateFramesPerDataFrameSent)
            UInt32Value.internalBinaryWrite(message.maxInboundWindowUpdateFramesPerDataFrameSent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool stream_error_on_invalid_http_messaging = 12 [deprecated = true]; */
        if (message.streamErrorOnInvalidHttpMessaging !== false)
            writer.tag(12, WireType.Varint).bool(message.streamErrorOnInvalidHttpMessaging);
        /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 14; */
        if (message.overrideStreamErrorOnInvalidHttpMessage)
            BoolValue.internalBinaryWrite(message.overrideStreamErrorOnInvalidHttpMessage, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13; */
        for (let i = 0; i < message.customSettingsParameters.length; i++)
            Http2ProtocolOptions_SettingsParameter.internalBinaryWrite(message.customSettingsParameters[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.core.v3.KeepaliveSettings connection_keepalive = 15; */
        if (message.connectionKeepalive)
            KeepaliveSettings.internalBinaryWrite(message.connectionKeepalive, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue use_oghttp2_codec = 16; */
        if (message.useOghttp2Codec)
            BoolValue.internalBinaryWrite(message.useOghttp2Codec, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http2ProtocolOptions
 */
export const Http2ProtocolOptions = new Http2ProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http2ProtocolOptions_SettingsParameter$Type extends MessageType<Http2ProtocolOptions_SettingsParameter> {
    constructor() {
        super("envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter", [
            { no: 1, name: "identifier", kind: "message", T: () => UInt32Value, options: { "validate.rules": { message: { required: true }, uint32: { lte: 65535, gte: 0 } } } },
            { no: 2, name: "value", kind: "message", T: () => UInt32Value, options: { "validate.rules": { message: { required: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter" } });
    }
    create(value?: PartialMessage<Http2ProtocolOptions_SettingsParameter>): Http2ProtocolOptions_SettingsParameter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Http2ProtocolOptions_SettingsParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http2ProtocolOptions_SettingsParameter): Http2ProtocolOptions_SettingsParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value identifier */ 1:
                    message.identifier = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.identifier);
                    break;
                case /* google.protobuf.UInt32Value value */ 2:
                    message.value = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http2ProtocolOptions_SettingsParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value identifier = 1; */
        if (message.identifier)
            UInt32Value.internalBinaryWrite(message.identifier, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value value = 2; */
        if (message.value)
            UInt32Value.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter
 */
export const Http2ProtocolOptions_SettingsParameter = new Http2ProtocolOptions_SettingsParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcProtocolOptions$Type extends MessageType<GrpcProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.GrpcProtocolOptions", [
            { no: 1, name: "http2_protocol_options", kind: "message", T: () => Http2ProtocolOptions }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.GrpcProtocolOptions" } });
    }
    create(value?: PartialMessage<GrpcProtocolOptions>): GrpcProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GrpcProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcProtocolOptions): GrpcProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options */ 1:
                    message.http2ProtocolOptions = Http2ProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.http2ProtocolOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 1; */
        if (message.http2ProtocolOptions)
            Http2ProtocolOptions.internalBinaryWrite(message.http2ProtocolOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.GrpcProtocolOptions
 */
export const GrpcProtocolOptions = new GrpcProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Http3ProtocolOptions$Type extends MessageType<Http3ProtocolOptions> {
    constructor() {
        super("envoy.config.core.v3.Http3ProtocolOptions", [
            { no: 1, name: "quic_protocol_options", kind: "message", T: () => QuicProtocolOptions },
            { no: 2, name: "override_stream_error_on_invalid_http_message", kind: "message", T: () => BoolValue },
            { no: 5, name: "allow_extended_connect", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "xds.annotations.v3.field_status": { workInProgress: true } } }
        ]);
    }
    create(value?: PartialMessage<Http3ProtocolOptions>): Http3ProtocolOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allowExtendedConnect = false;
        if (value !== undefined)
            reflectionMergePartial<Http3ProtocolOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Http3ProtocolOptions): Http3ProtocolOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.QuicProtocolOptions quic_protocol_options */ 1:
                    message.quicProtocolOptions = QuicProtocolOptions.internalBinaryRead(reader, reader.uint32(), options, message.quicProtocolOptions);
                    break;
                case /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message */ 2:
                    message.overrideStreamErrorOnInvalidHttpMessage = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.overrideStreamErrorOnInvalidHttpMessage);
                    break;
                case /* bool allow_extended_connect */ 5:
                    message.allowExtendedConnect = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Http3ProtocolOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1; */
        if (message.quicProtocolOptions)
            QuicProtocolOptions.internalBinaryWrite(message.quicProtocolOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2; */
        if (message.overrideStreamErrorOnInvalidHttpMessage)
            BoolValue.internalBinaryWrite(message.overrideStreamErrorOnInvalidHttpMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool allow_extended_connect = 5; */
        if (message.allowExtendedConnect !== false)
            writer.tag(5, WireType.Varint).bool(message.allowExtendedConnect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.Http3ProtocolOptions
 */
export const Http3ProtocolOptions = new Http3ProtocolOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemeHeaderTransformation$Type extends MessageType<SchemeHeaderTransformation> {
    constructor() {
        super("envoy.config.core.v3.SchemeHeaderTransformation", [
            { no: 1, name: "scheme_to_overwrite", kind: "scalar", oneof: "transformation", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { in: ["http", "https"] } } } }
        ]);
    }
    create(value?: PartialMessage<SchemeHeaderTransformation>): SchemeHeaderTransformation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transformation = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SchemeHeaderTransformation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemeHeaderTransformation): SchemeHeaderTransformation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scheme_to_overwrite */ 1:
                    message.transformation = {
                        oneofKind: "schemeToOverwrite",
                        schemeToOverwrite: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemeHeaderTransformation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scheme_to_overwrite = 1; */
        if (message.transformation.oneofKind === "schemeToOverwrite")
            writer.tag(1, WireType.LengthDelimited).string(message.transformation.schemeToOverwrite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.SchemeHeaderTransformation
 */
export const SchemeHeaderTransformation = new SchemeHeaderTransformation$Type();
