// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/core/v3/socket_option.proto" (package "envoy.config.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// [#protodoc-title: Socket option]

/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 *
 * For example:
 *
 * .. code-block:: json
 *
 *  {
 *    "description": "support tcp keep alive",
 *    "state": 0,
 *    "level": 1,
 *    "name": 9,
 *    "int_value": 1,
 *  }
 *
 * 1 means SOL_SOCKET and 9 means SO_KEEPALIVE on Linux.
 * With the above configuration, `TCP Keep-Alives <https://www.freesoft.org/CIE/RFC/1122/114.htm>`_
 * can be enabled in socket with Linux, which can be used in
 * :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.socket_options>` or
 * :ref:`admin's <envoy_v3_api_field_config.bootstrap.v3.Admin.socket_options>` socket_options etc.
 *
 * It should be noted that the name or level may have different values on different platforms.
 * [#next-free-field: 7]
 *
 * @generated from protobuf message envoy.config.core.v3.SocketOption
 */
export interface SocketOption {
    /**
     * An optional name to give this socket option for debugging, etc.
     * Uniqueness is not required and no special meaning is assumed.
     *
     * @generated from protobuf field: string description = 1;
     */
    description: string;
    /**
     * Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
     *
     * @generated from protobuf field: int64 level = 2;
     */
    level: bigint;
    /**
     * The numeric name as passed to setsockopt
     *
     * @generated from protobuf field: int64 name = 3;
     */
    name: bigint;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "intValue";
        /**
         * Because many sockopts take an int value.
         *
         * @generated from protobuf field: int64 int_value = 4;
         */
        intValue: bigint;
    } | {
        oneofKind: "bufValue";
        /**
         * Otherwise it's a byte buffer.
         *
         * @generated from protobuf field: bytes buf_value = 5;
         */
        bufValue: Uint8Array;
    } | {
        oneofKind: undefined;
    };
    /**
     * The state in which the option will be applied. When used in BindConfig
     * STATE_PREBIND is currently the only valid value.
     *
     * @generated from protobuf field: envoy.config.core.v3.SocketOption.SocketState state = 6;
     */
    state: SocketOption_SocketState;
}
/**
 * @generated from protobuf enum envoy.config.core.v3.SocketOption.SocketState
 */
export enum SocketOption_SocketState {
    /**
     * Socket options are applied after socket creation but before binding the socket to a port
     *
     * @generated from protobuf enum value: STATE_PREBIND = 0;
     */
    STATE_PREBIND = 0,
    /**
     * Socket options are applied after binding the socket to a port but before calling listen()
     *
     * @generated from protobuf enum value: STATE_BOUND = 1;
     */
    STATE_BOUND = 1,
    /**
     * Socket options are applied after calling listen()
     *
     * @generated from protobuf enum value: STATE_LISTENING = 2;
     */
    STATE_LISTENING = 2
}
/**
 * @generated from protobuf message envoy.config.core.v3.SocketOptionsOverride
 */
export interface SocketOptionsOverride {
    /**
     * @generated from protobuf field: repeated envoy.config.core.v3.SocketOption socket_options = 1;
     */
    socketOptions: SocketOption[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SocketOption$Type extends MessageType<SocketOption> {
    constructor() {
        super("envoy.config.core.v3.SocketOption", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "int_value", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "buf_value", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "state", kind: "enum", T: () => ["envoy.config.core.v3.SocketOption.SocketState", SocketOption_SocketState], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.core.SocketOption" } });
    }
    create(value?: PartialMessage<SocketOption>): SocketOption {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.description = "";
        message.level = 0n;
        message.name = 0n;
        message.value = { oneofKind: undefined };
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<SocketOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketOption): SocketOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* int64 name */ 3:
                    message.name = reader.int64().toBigInt();
                    break;
                case /* int64 int_value */ 4:
                    message.value = {
                        oneofKind: "intValue",
                        intValue: reader.int64().toBigInt()
                    };
                    break;
                case /* bytes buf_value */ 5:
                    message.value = {
                        oneofKind: "bufValue",
                        bufValue: reader.bytes()
                    };
                    break;
                case /* envoy.config.core.v3.SocketOption.SocketState state */ 6:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        /* int64 level = 2; */
        if (message.level !== 0n)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* int64 name = 3; */
        if (message.name !== 0n)
            writer.tag(3, WireType.Varint).int64(message.name);
        /* int64 int_value = 4; */
        if (message.value.oneofKind === "intValue")
            writer.tag(4, WireType.Varint).int64(message.value.intValue);
        /* bytes buf_value = 5; */
        if (message.value.oneofKind === "bufValue")
            writer.tag(5, WireType.LengthDelimited).bytes(message.value.bufValue);
        /* envoy.config.core.v3.SocketOption.SocketState state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.SocketOption
 */
export const SocketOption = new SocketOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocketOptionsOverride$Type extends MessageType<SocketOptionsOverride> {
    constructor() {
        super("envoy.config.core.v3.SocketOptionsOverride", [
            { no: 1, name: "socket_options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SocketOption }
        ]);
    }
    create(value?: PartialMessage<SocketOptionsOverride>): SocketOptionsOverride {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.socketOptions = [];
        if (value !== undefined)
            reflectionMergePartial<SocketOptionsOverride>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocketOptionsOverride): SocketOptionsOverride {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.core.v3.SocketOption socket_options */ 1:
                    message.socketOptions.push(SocketOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocketOptionsOverride, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.core.v3.SocketOption socket_options = 1; */
        for (let i = 0; i < message.socketOptions.length; i++)
            SocketOption.internalBinaryWrite(message.socketOptions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.core.v3.SocketOptionsOverride
 */
export const SocketOptionsOverride = new SocketOptionsOverride$Type();
