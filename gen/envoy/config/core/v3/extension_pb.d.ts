// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/config/core/v3/extension.proto (package envoy.config.core.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Message type for extension configuration.
 * [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.].
 *
 * @generated from message envoy.config.core.v3.TypedExtensionConfig
 */
export declare class TypedExtensionConfig extends Message<TypedExtensionConfig> {
  /**
   * The name of an extension. This is not used to select the extension, instead
   * it serves the role of an opaque identifier.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The typed config for the extension. The type URL will be used to identify
   * the extension. In the case that the type URL is ``xds.type.v3.TypedStruct``
   * (or, for historical reasons, ``udpa.type.v1.TypedStruct``), the inner type
   * URL of ``TypedStruct`` will be utilized. See the
   * :ref:`extension configuration overview
   * <config_overview_extension_configuration>` for further details.
   *
   * @generated from field: google.protobuf.Any typed_config = 2;
   */
  typedConfig?: Any;

  constructor(data?: PartialMessage<TypedExtensionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.config.core.v3.TypedExtensionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypedExtensionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypedExtensionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypedExtensionConfig;

  static equals(a: TypedExtensionConfig | PlainMessage<TypedExtensionConfig> | undefined, b: TypedExtensionConfig | PlainMessage<TypedExtensionConfig> | undefined): boolean;
}

