// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/accesslog/v2/file.proto" (package "envoy.config.accesslog.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../../../google/protobuf/struct";
// [#protodoc-title: File access log]
// [#extension: envoy.access_loggers.file]

/**
 * Custom configuration for an :ref:`AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`
 * that writes log entries directly to a file. Configures the built-in *envoy.access_loggers.file*
 * AccessLog.
 *
 * @generated from protobuf message envoy.config.accesslog.v2.FileAccessLog
 */
export interface FileAccessLog {
    /**
     * A path to a local file to which to write the access log entries.
     *
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * @generated from protobuf oneof: access_log_format
     */
    accessLogFormat: {
        oneofKind: "format";
        /**
         * Access log :ref:`format string<config_access_log_format_strings>`.
         * Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
         * :ref:`default format <config_access_log_default_format>`.
         *
         * @generated from protobuf field: string format = 2;
         */
        format: string;
    } | {
        oneofKind: "jsonFormat";
        /**
         * Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
         * are rendered as strings.
         *
         * @generated from protobuf field: google.protobuf.Struct json_format = 3;
         */
        jsonFormat: Struct;
    } | {
        oneofKind: "typedJsonFormat";
        /**
         * Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
         * rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
         * be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
         * documentation for a specific command operator for details.
         *
         * @generated from protobuf field: google.protobuf.Struct typed_json_format = 4;
         */
        typedJsonFormat: Struct;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class FileAccessLog$Type extends MessageType<FileAccessLog> {
    constructor() {
        super("envoy.config.accesslog.v2.FileAccessLog", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minBytes: "1" } } } },
            { no: 2, name: "format", kind: "scalar", oneof: "accessLogFormat", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "json_format", kind: "message", oneof: "accessLogFormat", T: () => Struct },
            { no: 4, name: "typed_json_format", kind: "message", oneof: "accessLogFormat", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<FileAccessLog>): FileAccessLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.accessLogFormat = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FileAccessLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileAccessLog): FileAccessLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string format */ 2:
                    message.accessLogFormat = {
                        oneofKind: "format",
                        format: reader.string()
                    };
                    break;
                case /* google.protobuf.Struct json_format */ 3:
                    message.accessLogFormat = {
                        oneofKind: "jsonFormat",
                        jsonFormat: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.accessLogFormat as any).jsonFormat)
                    };
                    break;
                case /* google.protobuf.Struct typed_json_format */ 4:
                    message.accessLogFormat = {
                        oneofKind: "typedJsonFormat",
                        typedJsonFormat: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.accessLogFormat as any).typedJsonFormat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileAccessLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string format = 2; */
        if (message.accessLogFormat.oneofKind === "format")
            writer.tag(2, WireType.LengthDelimited).string(message.accessLogFormat.format);
        /* google.protobuf.Struct json_format = 3; */
        if (message.accessLogFormat.oneofKind === "jsonFormat")
            Struct.internalBinaryWrite(message.accessLogFormat.jsonFormat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct typed_json_format = 4; */
        if (message.accessLogFormat.oneofKind === "typedJsonFormat")
            Struct.internalBinaryWrite(message.accessLogFormat.typedJsonFormat, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.accesslog.v2.FileAccessLog
 */
export const FileAccessLog = new FileAccessLog$Type();
