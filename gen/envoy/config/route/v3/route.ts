// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/route/v3/route.proto" (package "envoy.config.route.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConfigSource } from "../../core/v3/config_source";
import { Any } from "../../../../google/protobuf/any";
import { RouteAction_RequestMirrorPolicy } from "./route_components";
import { ClusterSpecifierPlugin } from "./route_components";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { HeaderValueOption } from "../../core/v3/base";
import { VirtualHost } from "./route_components";
// [#protodoc-title: HTTP route configuration]
// * Routing :ref:`architecture overview <arch_overview_http_routing>`
// * HTTP :ref:`router filter <config_http_filters_router>`

/**
 * [#next-free-field: 17]
 *
 * @generated from protobuf message envoy.config.route.v3.RouteConfiguration
 */
export interface RouteConfiguration {
    /**
     * The name of the route configuration. For example, it might match
     * :ref:`route_config_name
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name>` in
     * :ref:`envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds`.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * An array of virtual hosts that make up the route table.
     *
     * @generated from protobuf field: repeated envoy.config.route.v3.VirtualHost virtual_hosts = 2;
     */
    virtualHosts: VirtualHost[];
    /**
     * An array of virtual hosts will be dynamically loaded via the VHDS API.
     * Both ``virtual_hosts`` and ``vhds`` fields will be used when present. ``virtual_hosts`` can be used
     * for a base routing table or for infrequently changing virtual hosts. ``vhds`` is used for
     * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
     * generate a routing table for a given RouteConfiguration, with ``vhds`` derived configuration
     * taking precedence.
     *
     * @generated from protobuf field: envoy.config.route.v3.Vhds vhds = 9;
     */
    vhds?: Vhds;
    /**
     * Optionally specifies a list of HTTP headers that the connection manager
     * will consider to be internal only. If they are found on external requests they will be cleaned
     * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
     * information.
     *
     * @generated from protobuf field: repeated string internal_only_headers = 3;
     */
    internalOnlyHeaders: string[];
    /**
     * Specifies a list of HTTP headers that should be added to each response that
     * the connection manager encodes. Headers specified at this level are applied
     * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
     * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
     * header value syntax, see the documentation on :ref:`custom request headers
     * <config_http_conn_man_headers_custom_request_headers>`.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4;
     */
    responseHeadersToAdd: HeaderValueOption[];
    /**
     * Specifies a list of HTTP headers that should be removed from each response
     * that the connection manager encodes.
     *
     * @generated from protobuf field: repeated string response_headers_to_remove = 5;
     */
    responseHeadersToRemove: string[];
    /**
     * Specifies a list of HTTP headers that should be added to each request
     * routed by the HTTP connection manager. Headers specified at this level are
     * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
     * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
     * header value syntax, see the documentation on :ref:`custom request headers
     * <config_http_conn_man_headers_custom_request_headers>`.
     *
     * @generated from protobuf field: repeated envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6;
     */
    requestHeadersToAdd: HeaderValueOption[];
    /**
     * Specifies a list of HTTP headers that should be removed from each request
     * routed by the HTTP connection manager.
     *
     * @generated from protobuf field: repeated string request_headers_to_remove = 8;
     */
    requestHeadersToRemove: string[];
    /**
     * By default, headers that should be added/removed are evaluated from most to least specific:
     *
     * * route level
     * * virtual host level
     * * connection manager level
     *
     * To allow setting overrides at the route or virtual host level, this order can be reversed
     * by setting this option to true. Defaults to false.
     *
     *
     * @generated from protobuf field: bool most_specific_header_mutations_wins = 10;
     */
    mostSpecificHeaderMutationsWins: boolean;
    /**
     * An optional boolean that specifies whether the clusters that the route
     * table refers to will be validated by the cluster manager. If set to true
     * and a route refers to a non-existent cluster, the route table will not
     * load. If set to false and a route refers to a non-existent cluster, the
     * route table will load and the router filter will return a 404 if the route
     * is selected at runtime. This setting defaults to true if the route table
     * is statically defined via the :ref:`route_config
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`
     * option. This setting default to false if the route table is loaded dynamically via the
     * :ref:`rds
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`
     * option. Users may wish to override the default behavior in certain cases (for example when
     * using CDS with a static route table).
     *
     * @generated from protobuf field: google.protobuf.BoolValue validate_clusters = 7;
     */
    validateClusters?: BoolValue;
    /**
     * The maximum bytes of the response :ref:`direct response body
     * <envoy_v3_api_field_config.route.v3.DirectResponseAction.body>` size. If not specified the default
     * is 4096.
     *
     * .. warning::
     *
     *   Envoy currently holds the content of :ref:`direct response body
     *   <envoy_v3_api_field_config.route.v3.DirectResponseAction.body>` in memory. Be careful setting
     *   this to be larger than the default 4KB, since the allocated memory for direct response body
     *   is not subject to data plane buffering controls.
     *
     *
     * @generated from protobuf field: google.protobuf.UInt32Value max_direct_response_body_size_bytes = 11;
     */
    maxDirectResponseBodySizeBytes?: UInt32Value;
    /**
     * A list of plugins and their configurations which may be used by a
     * :ref:`cluster specifier plugin name <envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin>`
     * within the route. All ``extension.name`` fields in this list must be unique.
     *
     * @generated from protobuf field: repeated envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;
     */
    clusterSpecifierPlugins: ClusterSpecifierPlugin[];
    /**
     * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
     * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
     *
     * @generated from protobuf field: repeated envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;
     */
    requestMirrorPolicies: RouteAction_RequestMirrorPolicy[];
    /**
     * By default, port in :authority header (if any) is used in host matching.
     * With this option enabled, Envoy will ignore the port number in the :authority header (if any) when picking VirtualHost.
     * NOTE: this option will not strip the port number (if any) contained in route config
     * :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost`.domains field.
     *
     * @generated from protobuf field: bool ignore_port_in_host_matching = 14;
     */
    ignorePortInHostMatching: boolean;
    /**
     * Ignore path-parameters in path-matching.
     * Before RFC3986, URI were like(RFC1808): <scheme>://<net_loc>/<path>;<params>?<query>#<fragment>
     * Envoy by default takes ":path" as "<path>;<params>".
     * For users who want to only match path on the "<path>" portion, this option should be true.
     *
     * @generated from protobuf field: bool ignore_path_parameters_in_path_matching = 15;
     */
    ignorePathParametersInPathMatching: boolean;
    /**
     * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
     * The key should match the :ref:`filter config name
     * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>`.
     * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
     * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
     * entry referred by the canonical filter name will be provided to the filters as fallback.
     *
     * Use of this field is filter specific;
     * see the :ref:`HTTP filter documentation <config_http_filters>` for if and how it is utilized.
     * [#comment: An entry's value may be wrapped in a
     * :ref:`FilterConfig<envoy_v3_api_msg_config.route.v3.FilterConfig>`
     * message to specify additional options.]
     *
     * @generated from protobuf field: map<string, google.protobuf.Any> typed_per_filter_config = 16;
     */
    typedPerFilterConfig: {
        [key: string]: Any;
    };
}
/**
 * @generated from protobuf message envoy.config.route.v3.Vhds
 */
export interface Vhds {
    /**
     * Configuration source specifier for VHDS.
     *
     * @generated from protobuf field: envoy.config.core.v3.ConfigSource config_source = 1;
     */
    configSource?: ConfigSource;
}
// @generated message type with reflection information, may provide speed optimized methods
class RouteConfiguration$Type extends MessageType<RouteConfiguration> {
    constructor() {
        super("envoy.config.route.v3.RouteConfiguration", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "virtual_hosts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VirtualHost },
            { no: 9, name: "vhds", kind: "message", T: () => Vhds },
            { no: 3, name: "internal_only_headers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } } } },
            { no: 4, name: "response_headers_to_add", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValueOption, options: { "validate.rules": { repeated: { maxItems: "1000" } } } },
            { no: 5, name: "response_headers_to_remove", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } } } },
            { no: 6, name: "request_headers_to_add", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HeaderValueOption, options: { "validate.rules": { repeated: { maxItems: "1000" } } } },
            { no: 8, name: "request_headers_to_remove", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { wellKnownRegex: "HTTP_HEADER_NAME", strict: false } } } } } },
            { no: 10, name: "most_specific_header_mutations_wins", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "validate_clusters", kind: "message", T: () => BoolValue },
            { no: 11, name: "max_direct_response_body_size_bytes", kind: "message", T: () => UInt32Value },
            { no: 12, name: "cluster_specifier_plugins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClusterSpecifierPlugin },
            { no: 13, name: "request_mirror_policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RouteAction_RequestMirrorPolicy },
            { no: 14, name: "ignore_port_in_host_matching", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "ignore_path_parameters_in_path_matching", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "typed_per_filter_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Any } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.RouteConfiguration" } });
    }
    create(value?: PartialMessage<RouteConfiguration>): RouteConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.virtualHosts = [];
        message.internalOnlyHeaders = [];
        message.responseHeadersToAdd = [];
        message.responseHeadersToRemove = [];
        message.requestHeadersToAdd = [];
        message.requestHeadersToRemove = [];
        message.mostSpecificHeaderMutationsWins = false;
        message.clusterSpecifierPlugins = [];
        message.requestMirrorPolicies = [];
        message.ignorePortInHostMatching = false;
        message.ignorePathParametersInPathMatching = false;
        message.typedPerFilterConfig = {};
        if (value !== undefined)
            reflectionMergePartial<RouteConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteConfiguration): RouteConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated envoy.config.route.v3.VirtualHost virtual_hosts */ 2:
                    message.virtualHosts.push(VirtualHost.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* envoy.config.route.v3.Vhds vhds */ 9:
                    message.vhds = Vhds.internalBinaryRead(reader, reader.uint32(), options, message.vhds);
                    break;
                case /* repeated string internal_only_headers */ 3:
                    message.internalOnlyHeaders.push(reader.string());
                    break;
                case /* repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add */ 4:
                    message.responseHeadersToAdd.push(HeaderValueOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string response_headers_to_remove */ 5:
                    message.responseHeadersToRemove.push(reader.string());
                    break;
                case /* repeated envoy.config.core.v3.HeaderValueOption request_headers_to_add */ 6:
                    message.requestHeadersToAdd.push(HeaderValueOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string request_headers_to_remove */ 8:
                    message.requestHeadersToRemove.push(reader.string());
                    break;
                case /* bool most_specific_header_mutations_wins */ 10:
                    message.mostSpecificHeaderMutationsWins = reader.bool();
                    break;
                case /* google.protobuf.BoolValue validate_clusters */ 7:
                    message.validateClusters = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.validateClusters);
                    break;
                case /* google.protobuf.UInt32Value max_direct_response_body_size_bytes */ 11:
                    message.maxDirectResponseBodySizeBytes = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.maxDirectResponseBodySizeBytes);
                    break;
                case /* repeated envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins */ 12:
                    message.clusterSpecifierPlugins.push(ClusterSpecifierPlugin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies */ 13:
                    message.requestMirrorPolicies.push(RouteAction_RequestMirrorPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool ignore_port_in_host_matching */ 14:
                    message.ignorePortInHostMatching = reader.bool();
                    break;
                case /* bool ignore_path_parameters_in_path_matching */ 15:
                    message.ignorePathParametersInPathMatching = reader.bool();
                    break;
                case /* map<string, google.protobuf.Any> typed_per_filter_config */ 16:
                    this.binaryReadMap16(message.typedPerFilterConfig, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap16(map: RouteConfiguration["typedPerFilterConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RouteConfiguration["typedPerFilterConfig"] | undefined, val: RouteConfiguration["typedPerFilterConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Any.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field envoy.config.route.v3.RouteConfiguration.typed_per_filter_config");
            }
        }
        map[key ?? ""] = val ?? Any.create();
    }
    internalBinaryWrite(message: RouteConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated envoy.config.route.v3.VirtualHost virtual_hosts = 2; */
        for (let i = 0; i < message.virtualHosts.length; i++)
            VirtualHost.internalBinaryWrite(message.virtualHosts[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.route.v3.Vhds vhds = 9; */
        if (message.vhds)
            Vhds.internalBinaryWrite(message.vhds, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated string internal_only_headers = 3; */
        for (let i = 0; i < message.internalOnlyHeaders.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.internalOnlyHeaders[i]);
        /* repeated envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4; */
        for (let i = 0; i < message.responseHeadersToAdd.length; i++)
            HeaderValueOption.internalBinaryWrite(message.responseHeadersToAdd[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string response_headers_to_remove = 5; */
        for (let i = 0; i < message.responseHeadersToRemove.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.responseHeadersToRemove[i]);
        /* repeated envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6; */
        for (let i = 0; i < message.requestHeadersToAdd.length; i++)
            HeaderValueOption.internalBinaryWrite(message.requestHeadersToAdd[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated string request_headers_to_remove = 8; */
        for (let i = 0; i < message.requestHeadersToRemove.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.requestHeadersToRemove[i]);
        /* bool most_specific_header_mutations_wins = 10; */
        if (message.mostSpecificHeaderMutationsWins !== false)
            writer.tag(10, WireType.Varint).bool(message.mostSpecificHeaderMutationsWins);
        /* google.protobuf.BoolValue validate_clusters = 7; */
        if (message.validateClusters)
            BoolValue.internalBinaryWrite(message.validateClusters, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value max_direct_response_body_size_bytes = 11; */
        if (message.maxDirectResponseBodySizeBytes)
            UInt32Value.internalBinaryWrite(message.maxDirectResponseBodySizeBytes, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12; */
        for (let i = 0; i < message.clusterSpecifierPlugins.length; i++)
            ClusterSpecifierPlugin.internalBinaryWrite(message.clusterSpecifierPlugins[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13; */
        for (let i = 0; i < message.requestMirrorPolicies.length; i++)
            RouteAction_RequestMirrorPolicy.internalBinaryWrite(message.requestMirrorPolicies[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bool ignore_port_in_host_matching = 14; */
        if (message.ignorePortInHostMatching !== false)
            writer.tag(14, WireType.Varint).bool(message.ignorePortInHostMatching);
        /* bool ignore_path_parameters_in_path_matching = 15; */
        if (message.ignorePathParametersInPathMatching !== false)
            writer.tag(15, WireType.Varint).bool(message.ignorePathParametersInPathMatching);
        /* map<string, google.protobuf.Any> typed_per_filter_config = 16; */
        for (let k of globalThis.Object.keys(message.typedPerFilterConfig)) {
            writer.tag(16, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Any.internalBinaryWrite(message.typedPerFilterConfig[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.route.v3.RouteConfiguration
 */
export const RouteConfiguration = new RouteConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vhds$Type extends MessageType<Vhds> {
    constructor() {
        super("envoy.config.route.v3.Vhds", [
            { no: 1, name: "config_source", kind: "message", T: () => ConfigSource, options: { "validate.rules": { message: { required: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.Vhds" } });
    }
    create(value?: PartialMessage<Vhds>): Vhds {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Vhds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vhds): Vhds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.config.core.v3.ConfigSource config_source */ 1:
                    message.configSource = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.configSource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vhds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.config.core.v3.ConfigSource config_source = 1; */
        if (message.configSource)
            ConfigSource.internalBinaryWrite(message.configSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.route.v3.Vhds
 */
export const Vhds = new Vhds$Type();
