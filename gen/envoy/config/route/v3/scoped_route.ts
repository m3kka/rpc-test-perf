// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/config/route/v3/scoped_route.proto" (package "envoy.config.route.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RouteConfiguration } from "./route";
// [#protodoc-title: HTTP scoped routing configuration]
// * Routing :ref:`architecture overview <arch_overview_http_routing>`

/**
 * Specifies a routing scope, which associates a
 * :ref:`Key<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration.Key>` to a
 * :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration`.
 * The :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration` can be obtained dynamically
 * via RDS (:ref:`route_configuration_name<envoy_v3_api_field_config.route.v3.ScopedRouteConfiguration.route_configuration_name>`)
 * or specified inline (:ref:`route_configuration<envoy_v3_api_field_config.route.v3.ScopedRouteConfiguration.route_configuration>`).
 *
 * The HTTP connection manager builds up a table consisting of these Key to
 * RouteConfiguration mappings, and looks up the RouteConfiguration to use per
 * request according to the algorithm specified in the
 * :ref:`scope_key_builder<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scope_key_builder>`
 * assigned to the HttpConnectionManager.
 *
 * For example, with the following configurations (in YAML):
 *
 * HttpConnectionManager config:
 *
 * .. code::
 *
 *   ...
 *   scoped_routes:
 *     name: foo-scoped-routes
 *     scope_key_builder:
 *       fragments:
 *         - header_value_extractor:
 *             name: X-Route-Selector
 *             element_separator: ","
 *             element:
 *               separator: =
 *               key: vip
 *
 * ScopedRouteConfiguration resources (specified statically via
 * :ref:`scoped_route_configurations_list<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list>`
 * or obtained dynamically via SRDS):
 *
 * .. code::
 *
 *  (1)
 *   name: route-scope1
 *   route_configuration_name: route-config1
 *   key:
 *      fragments:
 *        - string_key: 172.10.10.20
 *
 *  (2)
 *   name: route-scope2
 *   route_configuration_name: route-config2
 *   key:
 *     fragments:
 *       - string_key: 172.20.20.30
 *
 * A request from a client such as:
 *
 * .. code::
 *
 *     GET / HTTP/1.1
 *     Host: foo.com
 *     X-Route-Selector: vip=172.10.10.20
 *
 * would result in the routing table defined by the ``route-config1``
 * RouteConfiguration being assigned to the HTTP request/stream.
 *
 * [#next-free-field: 6]
 *
 * @generated from protobuf message envoy.config.route.v3.ScopedRouteConfiguration
 */
export interface ScopedRouteConfiguration {
    /**
     * Whether the RouteConfiguration should be loaded on demand.
     *
     * @generated from protobuf field: bool on_demand = 4;
     */
    onDemand: boolean;
    /**
     * The name assigned to the routing scope.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The resource name to use for a :ref:`envoy_v3_api_msg_service.discovery.v3.DiscoveryRequest` to an
     * RDS server to fetch the :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration` associated
     * with this scope.
     *
     * @generated from protobuf field: string route_configuration_name = 2;
     */
    routeConfigurationName: string;
    /**
     * The :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration` associated with the scope.
     *
     * @generated from protobuf field: envoy.config.route.v3.RouteConfiguration route_configuration = 5;
     */
    routeConfiguration?: RouteConfiguration;
    /**
     * The key to match against.
     *
     * @generated from protobuf field: envoy.config.route.v3.ScopedRouteConfiguration.Key key = 3;
     */
    key?: ScopedRouteConfiguration_Key;
}
/**
 * Specifies a key which is matched against the output of the
 * :ref:`scope_key_builder<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scope_key_builder>`
 * specified in the HttpConnectionManager. The matching is done per HTTP
 * request and is dependent on the order of the fragments contained in the
 * Key.
 *
 * @generated from protobuf message envoy.config.route.v3.ScopedRouteConfiguration.Key
 */
export interface ScopedRouteConfiguration_Key {
    /**
     * The ordered set of fragments to match against. The order must match the
     * fragments in the corresponding
     * :ref:`scope_key_builder<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scope_key_builder>`.
     *
     * @generated from protobuf field: repeated envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment fragments = 1;
     */
    fragments: ScopedRouteConfiguration_Key_Fragment[];
}
/**
 * @generated from protobuf message envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment
 */
export interface ScopedRouteConfiguration_Key_Fragment {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stringKey";
        /**
         * A string to match against.
         *
         * @generated from protobuf field: string string_key = 1;
         */
        stringKey: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ScopedRouteConfiguration$Type extends MessageType<ScopedRouteConfiguration> {
    constructor() {
        super("envoy.config.route.v3.ScopedRouteConfiguration", [
            { no: 4, name: "on_demand", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "route_configuration_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "udpa.annotations.field_migrate": { oneofPromotion: "route_config" } } },
            { no: 5, name: "route_configuration", kind: "message", T: () => RouteConfiguration, options: { "udpa.annotations.field_migrate": { oneofPromotion: "route_config" } } },
            { no: 3, name: "key", kind: "message", T: () => ScopedRouteConfiguration_Key, options: { "validate.rules": { message: { required: true } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ScopedRouteConfiguration" } });
    }
    create(value?: PartialMessage<ScopedRouteConfiguration>): ScopedRouteConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.onDemand = false;
        message.name = "";
        message.routeConfigurationName = "";
        if (value !== undefined)
            reflectionMergePartial<ScopedRouteConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScopedRouteConfiguration): ScopedRouteConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool on_demand */ 4:
                    message.onDemand = reader.bool();
                    break;
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string route_configuration_name */ 2:
                    message.routeConfigurationName = reader.string();
                    break;
                case /* envoy.config.route.v3.RouteConfiguration route_configuration */ 5:
                    message.routeConfiguration = RouteConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.routeConfiguration);
                    break;
                case /* envoy.config.route.v3.ScopedRouteConfiguration.Key key */ 3:
                    message.key = ScopedRouteConfiguration_Key.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScopedRouteConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool on_demand = 4; */
        if (message.onDemand !== false)
            writer.tag(4, WireType.Varint).bool(message.onDemand);
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string route_configuration_name = 2; */
        if (message.routeConfigurationName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routeConfigurationName);
        /* envoy.config.route.v3.RouteConfiguration route_configuration = 5; */
        if (message.routeConfiguration)
            RouteConfiguration.internalBinaryWrite(message.routeConfiguration, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* envoy.config.route.v3.ScopedRouteConfiguration.Key key = 3; */
        if (message.key)
            ScopedRouteConfiguration_Key.internalBinaryWrite(message.key, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.route.v3.ScopedRouteConfiguration
 */
export const ScopedRouteConfiguration = new ScopedRouteConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScopedRouteConfiguration_Key$Type extends MessageType<ScopedRouteConfiguration_Key> {
    constructor() {
        super("envoy.config.route.v3.ScopedRouteConfiguration.Key", [
            { no: 1, name: "fragments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScopedRouteConfiguration_Key_Fragment, options: { "validate.rules": { repeated: { minItems: "1" } } } }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ScopedRouteConfiguration.Key" } });
    }
    create(value?: PartialMessage<ScopedRouteConfiguration_Key>): ScopedRouteConfiguration_Key {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fragments = [];
        if (value !== undefined)
            reflectionMergePartial<ScopedRouteConfiguration_Key>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScopedRouteConfiguration_Key): ScopedRouteConfiguration_Key {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment fragments */ 1:
                    message.fragments.push(ScopedRouteConfiguration_Key_Fragment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScopedRouteConfiguration_Key, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment fragments = 1; */
        for (let i = 0; i < message.fragments.length; i++)
            ScopedRouteConfiguration_Key_Fragment.internalBinaryWrite(message.fragments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.route.v3.ScopedRouteConfiguration.Key
 */
export const ScopedRouteConfiguration_Key = new ScopedRouteConfiguration_Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScopedRouteConfiguration_Key_Fragment$Type extends MessageType<ScopedRouteConfiguration_Key_Fragment> {
    constructor() {
        super("envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment", [
            { no: 1, name: "string_key", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ }
        ], { "udpa.annotations.versioning": { previousMessageType: "envoy.api.v2.ScopedRouteConfiguration.Key.Fragment" } });
    }
    create(value?: PartialMessage<ScopedRouteConfiguration_Key_Fragment>): ScopedRouteConfiguration_Key_Fragment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ScopedRouteConfiguration_Key_Fragment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScopedRouteConfiguration_Key_Fragment): ScopedRouteConfiguration_Key_Fragment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string string_key */ 1:
                    message.type = {
                        oneofKind: "stringKey",
                        stringKey: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScopedRouteConfiguration_Key_Fragment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string string_key = 1; */
        if (message.type.oneofKind === "stringKey")
            writer.tag(1, WireType.LengthDelimited).string(message.type.stringKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.config.route.v3.ScopedRouteConfiguration.Key.Fragment
 */
export const ScopedRouteConfiguration_Key_Fragment = new ScopedRouteConfiguration_Key_Fragment$Type();
