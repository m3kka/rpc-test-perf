// @generated by protobuf-ts 2.9.2
// @generated from protobuf file "envoy/watchdog/v3/abort_action.proto" (package "envoy.watchdog.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
// [#protodoc-title: Watchdog Action that kills a stuck thread to kill the process.]

/**
 * A GuardDogAction that will terminate the process by killing the
 * stuck thread. This would allow easier access to the call stack of the stuck
 * thread since we would run signal handlers on that thread. By default
 * this will be registered to run as the last watchdog action on KILL and
 * MULTIKILL events if those are enabled.
 *
 * @generated from protobuf message envoy.watchdog.v3.AbortActionConfig
 */
export interface AbortActionConfig {
    /**
     * How long to wait for the thread to respond to the thread kill function
     * before killing the process from this action. This is a blocking action.
     * By default this is 5 seconds.
     *
     * @generated from protobuf field: google.protobuf.Duration wait_duration = 1;
     */
    waitDuration?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class AbortActionConfig$Type extends MessageType<AbortActionConfig> {
    constructor() {
        super("envoy.watchdog.v3.AbortActionConfig", [
            { no: 1, name: "wait_duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<AbortActionConfig>): AbortActionConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AbortActionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbortActionConfig): AbortActionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration wait_duration */ 1:
                    message.waitDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.waitDuration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbortActionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration wait_duration = 1; */
        if (message.waitDuration)
            Duration.internalBinaryWrite(message.waitDuration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message envoy.watchdog.v3.AbortActionConfig
 */
export const AbortActionConfig = new AbortActionConfig$Type();
