// @generated by protoc-gen-es v1.5.1
// @generated from file envoy/watchdog/v3/abort_action.proto (package envoy.watchdog.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A GuardDogAction that will terminate the process by killing the
 * stuck thread. This would allow easier access to the call stack of the stuck
 * thread since we would run signal handlers on that thread. By default
 * this will be registered to run as the last watchdog action on KILL and
 * MULTIKILL events if those are enabled.
 *
 * @generated from message envoy.watchdog.v3.AbortActionConfig
 */
export declare class AbortActionConfig extends Message<AbortActionConfig> {
  /**
   * How long to wait for the thread to respond to the thread kill function
   * before killing the process from this action. This is a blocking action.
   * By default this is 5 seconds.
   *
   * @generated from field: google.protobuf.Duration wait_duration = 1;
   */
  waitDuration?: Duration;

  constructor(data?: PartialMessage<AbortActionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "envoy.watchdog.v3.AbortActionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortActionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortActionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortActionConfig;

  static equals(a: AbortActionConfig | PlainMessage<AbortActionConfig> | undefined, b: AbortActionConfig | PlainMessage<AbortActionConfig> | undefined): boolean;
}

