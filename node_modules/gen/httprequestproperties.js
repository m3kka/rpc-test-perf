// source: envoy/data/accesslog/v2/accesslog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.data.accesslog.v2.HTTPRequestProperties');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.UInt32Value');

goog.forwardDeclare('proto.envoy.api.v2.core.RequestMethod');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.accesslog.v2.HTTPRequestProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.accesslog.v2.HTTPRequestProperties.displayName = 'proto.envoy.data.accesslog.v2.HTTPRequestProperties';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.accesslog.v2.HTTPRequestProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestMethod: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scheme: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authority: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: (f = msg.getPort()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userAgent: jspb.Message.getFieldWithDefault(msg, 6, ""),
    referer: jspb.Message.getFieldWithDefault(msg, 7, ""),
    forwardedFor: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    originalPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    requestHeadersBytes: jspb.Message.getFieldWithDefault(msg, 11, 0),
    requestBodyBytes: jspb.Message.getFieldWithDefault(msg, 12, 0),
    requestHeadersMap: (f = msg.getRequestHeadersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.accesslog.v2.HTTPRequestProperties;
  return proto.envoy.data.accesslog.v2.HTTPRequestProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.api.v2.core.RequestMethod} */ (reader.readEnum());
      msg.setRequestMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheme(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthority(value);
      break;
    case 4:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setForwardedFor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalPath(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestHeadersBytes(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestBodyBytes(value);
      break;
    case 13:
      var value = msg.getRequestHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.accesslog.v2.HTTPRequestProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScheme();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthority();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReferer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getForwardedFor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getOriginalPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRequestHeadersBytes();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getRequestBodyBytes();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getRequestHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional envoy.api.v2.core.RequestMethod request_method = 1;
 * @return {!proto.envoy.api.v2.core.RequestMethod}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getRequestMethod = function() {
  return /** @type {!proto.envoy.api.v2.core.RequestMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.api.v2.core.RequestMethod} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setRequestMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string scheme = 2;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getScheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setScheme = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string authority = 3;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setAuthority = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.UInt32Value port = 4;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getPort = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 4));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
*/
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setPort = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.clearPort = function() {
  return this.setPort(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.hasPort = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_agent = 6;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setUserAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string referer = 7;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getReferer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setReferer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string forwarded_for = 8;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getForwardedFor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setForwardedFor = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string request_id = 9;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string original_path = 10;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getOriginalPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setOriginalPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 request_headers_bytes = 11;
 * @return {number}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getRequestHeadersBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setRequestHeadersBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 request_body_bytes = 12;
 * @return {number}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getRequestBodyBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.setRequestBodyBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * map<string, string> request_headers = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.getRequestHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.envoy.data.accesslog.v2.HTTPRequestProperties} returns this
 */
proto.envoy.data.accesslog.v2.HTTPRequestProperties.prototype.clearRequestHeadersMap = function() {
  this.getRequestHeadersMap().clear();
  return this;
};


