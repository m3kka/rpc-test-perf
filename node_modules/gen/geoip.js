// source: envoy/extensions/filters/http/geoip/v3/geoip.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.filters.http.geoip.v3.Geoip');
goog.provide('proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd');
goog.provide('proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.geoip.v3.Geoip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.displayName = 'proto.envoy.extensions.filters.http.geoip.v3.Geoip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.displayName = 'proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.displayName = 'proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.toObject = function(includeInstance, msg) {
  var f, obj = {
    xffConfig: (f = msg.getXffConfig()) && proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.toObject(includeInstance, f),
    geoHeadersToAdd: (f = msg.getGeoHeadersToAdd()) && proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.toObject(includeInstance, f),
    provider: (f = msg.getProvider()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.geoip.v3.Geoip;
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig;
      reader.readMessage(value,proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.deserializeBinaryFromReader);
      msg.setXffConfig(value);
      break;
    case 2:
      var value = new proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd;
      reader.readMessage(value,proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.deserializeBinaryFromReader);
      msg.setGeoHeadersToAdd(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXffConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.serializeBinaryToWriter
    );
  }
  f = message.getGeoHeadersToAdd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.serializeBinaryToWriter
    );
  }
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    city: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    asn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isAnon: jspb.Message.getFieldWithDefault(msg, 5, ""),
    anonVpn: jspb.Message.getFieldWithDefault(msg, 6, ""),
    anonHosting: jspb.Message.getFieldWithDefault(msg, 7, ""),
    anonTor: jspb.Message.getFieldWithDefault(msg, 8, ""),
    anonProxy: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd;
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsAnon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnonVpn(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnonHosting(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnonTor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnonProxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAsn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsAnon();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAnonVpn();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAnonHosting();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAnonTor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAnonProxy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string city = 2;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string asn = 4;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getAsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setAsn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string is_anon = 5;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getIsAnon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setIsAnon = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string anon_vpn = 6;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getAnonVpn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setAnonVpn = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string anon_hosting = 7;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getAnonHosting = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setAnonHosting = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string anon_tor = 8;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getAnonTor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setAnonTor = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string anon_proxy = 9;
 * @return {string}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.getAnonProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd.prototype.setAnonProxy = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    xffNumTrustedHops: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig;
  return proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXffNumTrustedHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXffNumTrustedHops();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 xff_num_trusted_hops = 1;
 * @return {number}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.prototype.getXffNumTrustedHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig.prototype.setXffNumTrustedHops = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional XffConfig xff_config = 1;
 * @return {?proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.getXffConfig = function() {
  return /** @type{?proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig, 1));
};


/**
 * @param {?proto.envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
*/
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.setXffConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.clearXffConfig = function() {
  return this.setXffConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.hasXffConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GeolocationHeadersToAdd geo_headers_to_add = 2;
 * @return {?proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.getGeoHeadersToAdd = function() {
  return /** @type{?proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd, 2));
};


/**
 * @param {?proto.envoy.extensions.filters.http.geoip.v3.Geoip.GeolocationHeadersToAdd|undefined} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
*/
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.setGeoHeadersToAdd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.clearGeoHeadersToAdd = function() {
  return this.setGeoHeadersToAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.hasGeoHeadersToAdd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig provider = 3;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.getProvider = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
*/
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.setProvider = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.geoip.v3.Geoip} returns this
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.clearProvider = function() {
  return this.setProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.geoip.v3.Geoip.prototype.hasProvider = function() {
  return jspb.Message.getField(this, 3) != null;
};


