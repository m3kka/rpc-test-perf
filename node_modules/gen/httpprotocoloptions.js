// source: envoy/extensions/upstreams/http/v3/http_protocol_options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions');
goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig');
goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig');
goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.ProtocolConfigCase');
goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UpstreamProtocolOptionsCase');
goog.provide('proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.AlternateProtocolsCacheOptions');
goog.require('proto.envoy.config.core.v3.Http1ProtocolOptions');
goog.require('proto.envoy.config.core.v3.Http2ProtocolOptions');
goog.require('proto.envoy.config.core.v3.Http3ProtocolOptions');
goog.require('proto.envoy.config.core.v3.HttpProtocolOptions');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');
goog.require('proto.envoy.config.core.v3.UpstreamHttpProtocolOptions');
goog.require('proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.repeatedFields_, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_);
};
goog.inherits(proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.displayName = 'proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_);
};
goog.inherits(proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.displayName = 'proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.displayName = 'proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.displayName = 'proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.repeatedFields_ = [6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UpstreamProtocolOptionsCase = {
  UPSTREAM_PROTOCOL_OPTIONS_NOT_SET: 0,
  EXPLICIT_HTTP_CONFIG: 3,
  USE_DOWNSTREAM_PROTOCOL_CONFIG: 4,
  AUTO_CONFIG: 5
};

/**
 * @return {proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UpstreamProtocolOptionsCase}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getUpstreamProtocolOptionsCase = function() {
  return /** @type {proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UpstreamProtocolOptionsCase} */(jspb.Message.computeOneofCase(this, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonHttpProtocolOptions: (f = msg.getCommonHttpProtocolOptions()) && proto.envoy.config.core.v3.HttpProtocolOptions.toObject(includeInstance, f),
    upstreamHttpProtocolOptions: (f = msg.getUpstreamHttpProtocolOptions()) && proto.envoy.config.core.v3.UpstreamHttpProtocolOptions.toObject(includeInstance, f),
    explicitHttpConfig: (f = msg.getExplicitHttpConfig()) && proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.toObject(includeInstance, f),
    useDownstreamProtocolConfig: (f = msg.getUseDownstreamProtocolConfig()) && proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.toObject(includeInstance, f),
    autoConfig: (f = msg.getAutoConfig()) && proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.toObject(includeInstance, f),
    httpFiltersList: jspb.Message.toObjectList(msg.getHttpFiltersList(),
    proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.toObject, includeInstance),
    headerValidationConfig: (f = msg.getHeaderValidationConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions;
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.HttpProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.HttpProtocolOptions.deserializeBinaryFromReader);
      msg.setCommonHttpProtocolOptions(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.UpstreamHttpProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.UpstreamHttpProtocolOptions.deserializeBinaryFromReader);
      msg.setUpstreamHttpProtocolOptions(value);
      break;
    case 3:
      var value = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig;
      reader.readMessage(value,proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.deserializeBinaryFromReader);
      msg.setExplicitHttpConfig(value);
      break;
    case 4:
      var value = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig;
      reader.readMessage(value,proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.deserializeBinaryFromReader);
      msg.setUseDownstreamProtocolConfig(value);
      break;
    case 5:
      var value = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig;
      reader.readMessage(value,proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.deserializeBinaryFromReader);
      msg.setAutoConfig(value);
      break;
    case 6:
      var value = new proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter;
      reader.readMessage(value,proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.deserializeBinaryFromReader);
      msg.addHttpFilters(value);
      break;
    case 7:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setHeaderValidationConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonHttpProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.HttpProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getUpstreamHttpProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.UpstreamHttpProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getExplicitHttpConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.serializeBinaryToWriter
    );
  }
  f = message.getUseDownstreamProtocolConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.serializeBinaryToWriter
    );
  }
  f = message.getAutoConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.serializeBinaryToWriter
    );
  }
  f = message.getHttpFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.serializeBinaryToWriter
    );
  }
  f = message.getHeaderValidationConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.ProtocolConfigCase = {
  PROTOCOL_CONFIG_NOT_SET: 0,
  HTTP_PROTOCOL_OPTIONS: 1,
  HTTP2_PROTOCOL_OPTIONS: 2,
  HTTP3_PROTOCOL_OPTIONS: 3
};

/**
 * @return {proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.ProtocolConfigCase}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.getProtocolConfigCase = function() {
  return /** @type {proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.ProtocolConfigCase} */(jspb.Message.computeOneofCase(this, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpProtocolOptions: (f = msg.getHttpProtocolOptions()) && proto.envoy.config.core.v3.Http1ProtocolOptions.toObject(includeInstance, f),
    http2ProtocolOptions: (f = msg.getHttp2ProtocolOptions()) && proto.envoy.config.core.v3.Http2ProtocolOptions.toObject(includeInstance, f),
    http3ProtocolOptions: (f = msg.getHttp3ProtocolOptions()) && proto.envoy.config.core.v3.Http3ProtocolOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig;
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.Http1ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http1ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttpProtocolOptions(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.Http2ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http2ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp2ProtocolOptions(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.Http3ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http3ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp3ProtocolOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.Http1ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp2ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.Http2ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp3ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.Http3ProtocolOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 1;
 * @return {?proto.envoy.config.core.v3.Http1ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.getHttpProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http1ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http1ProtocolOptions, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.Http1ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.setHttpProtocolOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.clearHttpProtocolOptions = function() {
  return this.setHttpProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.hasHttpProtocolOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 2;
 * @return {?proto.envoy.config.core.v3.Http2ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.getHttp2ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http2ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http2ProtocolOptions, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.Http2ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.setHttp2ProtocolOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.clearHttp2ProtocolOptions = function() {
  return this.setHttp2ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.hasHttp2ProtocolOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.Http3ProtocolOptions http3_protocol_options = 3;
 * @return {?proto.envoy.config.core.v3.Http3ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.getHttp3ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http3ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http3ProtocolOptions, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.Http3ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.setHttp3ProtocolOptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.clearHttp3ProtocolOptions = function() {
  return this.setHttp3ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig.prototype.hasHttp3ProtocolOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpProtocolOptions: (f = msg.getHttpProtocolOptions()) && proto.envoy.config.core.v3.Http1ProtocolOptions.toObject(includeInstance, f),
    http2ProtocolOptions: (f = msg.getHttp2ProtocolOptions()) && proto.envoy.config.core.v3.Http2ProtocolOptions.toObject(includeInstance, f),
    http3ProtocolOptions: (f = msg.getHttp3ProtocolOptions()) && proto.envoy.config.core.v3.Http3ProtocolOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig;
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.Http1ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http1ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttpProtocolOptions(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.Http2ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http2ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp2ProtocolOptions(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.Http3ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http3ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp3ProtocolOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.Http1ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp2ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.Http2ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp3ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.Http3ProtocolOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 1;
 * @return {?proto.envoy.config.core.v3.Http1ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.getHttpProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http1ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http1ProtocolOptions, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.Http1ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.setHttpProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.clearHttpProtocolOptions = function() {
  return this.setHttpProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.hasHttpProtocolOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 2;
 * @return {?proto.envoy.config.core.v3.Http2ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.getHttp2ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http2ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http2ProtocolOptions, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.Http2ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.setHttp2ProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.clearHttp2ProtocolOptions = function() {
  return this.setHttp2ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.hasHttp2ProtocolOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.Http3ProtocolOptions http3_protocol_options = 3;
 * @return {?proto.envoy.config.core.v3.Http3ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.getHttp3ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http3ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http3ProtocolOptions, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.Http3ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.setHttp3ProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.clearHttp3ProtocolOptions = function() {
  return this.setHttp3ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig.prototype.hasHttp3ProtocolOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpProtocolOptions: (f = msg.getHttpProtocolOptions()) && proto.envoy.config.core.v3.Http1ProtocolOptions.toObject(includeInstance, f),
    http2ProtocolOptions: (f = msg.getHttp2ProtocolOptions()) && proto.envoy.config.core.v3.Http2ProtocolOptions.toObject(includeInstance, f),
    http3ProtocolOptions: (f = msg.getHttp3ProtocolOptions()) && proto.envoy.config.core.v3.Http3ProtocolOptions.toObject(includeInstance, f),
    alternateProtocolsCacheOptions: (f = msg.getAlternateProtocolsCacheOptions()) && proto.envoy.config.core.v3.AlternateProtocolsCacheOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig;
  return proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.Http1ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http1ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttpProtocolOptions(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.Http2ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http2ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp2ProtocolOptions(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.Http3ProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.Http3ProtocolOptions.deserializeBinaryFromReader);
      msg.setHttp3ProtocolOptions(value);
      break;
    case 4:
      var value = new proto.envoy.config.core.v3.AlternateProtocolsCacheOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.AlternateProtocolsCacheOptions.deserializeBinaryFromReader);
      msg.setAlternateProtocolsCacheOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.Http1ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp2ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.Http2ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp3ProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.Http3ProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getAlternateProtocolsCacheOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.core.v3.AlternateProtocolsCacheOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 1;
 * @return {?proto.envoy.config.core.v3.Http1ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.getHttpProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http1ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http1ProtocolOptions, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.Http1ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.setHttpProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.clearHttpProtocolOptions = function() {
  return this.setHttpProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.hasHttpProtocolOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 2;
 * @return {?proto.envoy.config.core.v3.Http2ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.getHttp2ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http2ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http2ProtocolOptions, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.Http2ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.setHttp2ProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.clearHttp2ProtocolOptions = function() {
  return this.setHttp2ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.hasHttp2ProtocolOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.Http3ProtocolOptions http3_protocol_options = 3;
 * @return {?proto.envoy.config.core.v3.Http3ProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.getHttp3ProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.Http3ProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.Http3ProtocolOptions, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.Http3ProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.setHttp3ProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.clearHttp3ProtocolOptions = function() {
  return this.setHttp3ProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.hasHttp3ProtocolOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional envoy.config.core.v3.AlternateProtocolsCacheOptions alternate_protocols_cache_options = 4;
 * @return {?proto.envoy.config.core.v3.AlternateProtocolsCacheOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.getAlternateProtocolsCacheOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.AlternateProtocolsCacheOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.AlternateProtocolsCacheOptions, 4));
};


/**
 * @param {?proto.envoy.config.core.v3.AlternateProtocolsCacheOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.setAlternateProtocolsCacheOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.clearAlternateProtocolsCacheOptions = function() {
  return this.setAlternateProtocolsCacheOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig.prototype.hasAlternateProtocolsCacheOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 1;
 * @return {?proto.envoy.config.core.v3.HttpProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getCommonHttpProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.HttpProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.HttpProtocolOptions, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.HttpProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setCommonHttpProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearCommonHttpProtocolOptions = function() {
  return this.setCommonHttpProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasCommonHttpProtocolOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 2;
 * @return {?proto.envoy.config.core.v3.UpstreamHttpProtocolOptions}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getUpstreamHttpProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.UpstreamHttpProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.UpstreamHttpProtocolOptions, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.UpstreamHttpProtocolOptions|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setUpstreamHttpProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearUpstreamHttpProtocolOptions = function() {
  return this.setUpstreamHttpProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasUpstreamHttpProtocolOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExplicitHttpConfig explicit_http_config = 3;
 * @return {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getExplicitHttpConfig = function() {
  return /** @type{?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig, 3));
};


/**
 * @param {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setExplicitHttpConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearExplicitHttpConfig = function() {
  return this.setExplicitHttpConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasExplicitHttpConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UseDownstreamHttpConfig use_downstream_protocol_config = 4;
 * @return {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getUseDownstreamProtocolConfig = function() {
  return /** @type{?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig, 4));
};


/**
 * @param {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setUseDownstreamProtocolConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearUseDownstreamProtocolConfig = function() {
  return this.setUseDownstreamProtocolConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasUseDownstreamProtocolConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AutoHttpConfig auto_config = 5;
 * @return {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getAutoConfig = function() {
  return /** @type{?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig, 5));
};


/**
 * @param {?proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setAutoConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearAutoConfig = function() {
  return this.setAutoConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasAutoConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;
 * @return {!Array<!proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter>}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getHttpFiltersList = function() {
  return /** @type{!Array<!proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter, 6));
};


/**
 * @param {!Array<!proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter>} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setHttpFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.addHttpFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearHttpFiltersList = function() {
  return this.setHttpFiltersList([]);
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig header_validation_config = 7;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.getHeaderValidationConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 7));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
*/
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.setHeaderValidationConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions} returns this
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.clearHeaderValidationConfig = function() {
  return this.setHeaderValidationConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.prototype.hasHeaderValidationConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


