// source: envoy/config/rbac/v2/rbac.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.rbac.v2.Permission');
goog.provide('proto.envoy.config.rbac.v2.Permission.RuleCase');
goog.provide('proto.envoy.config.rbac.v2.Permission.Set');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.api.v2.core.CidrRange');
goog.require('proto.envoy.api.v2.route.HeaderMatcher');
goog.require('proto.envoy.type.matcher.MetadataMatcher');
goog.require('proto.envoy.type.matcher.PathMatcher');
goog.require('proto.envoy.type.matcher.StringMatcher');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.rbac.v2.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.rbac.v2.Permission.oneofGroups_);
};
goog.inherits(proto.envoy.config.rbac.v2.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.rbac.v2.Permission.displayName = 'proto.envoy.config.rbac.v2.Permission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.rbac.v2.Permission.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.rbac.v2.Permission.Set.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.rbac.v2.Permission.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.rbac.v2.Permission.Set.displayName = 'proto.envoy.config.rbac.v2.Permission.Set';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.rbac.v2.Permission.oneofGroups_ = [[1,2,3,4,10,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.envoy.config.rbac.v2.Permission.RuleCase = {
  RULE_NOT_SET: 0,
  AND_RULES: 1,
  OR_RULES: 2,
  ANY: 3,
  HEADER: 4,
  URL_PATH: 10,
  DESTINATION_IP: 5,
  DESTINATION_PORT: 6,
  METADATA: 7,
  NOT_RULE: 8,
  REQUESTED_SERVER_NAME: 9
};

/**
 * @return {proto.envoy.config.rbac.v2.Permission.RuleCase}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getRuleCase = function() {
  return /** @type {proto.envoy.config.rbac.v2.Permission.RuleCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.rbac.v2.Permission.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.rbac.v2.Permission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.rbac.v2.Permission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v2.Permission.toObject = function(includeInstance, msg) {
  var f, obj = {
    andRules: (f = msg.getAndRules()) && proto.envoy.config.rbac.v2.Permission.Set.toObject(includeInstance, f),
    orRules: (f = msg.getOrRules()) && proto.envoy.config.rbac.v2.Permission.Set.toObject(includeInstance, f),
    any: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    header: (f = msg.getHeader()) && proto.envoy.api.v2.route.HeaderMatcher.toObject(includeInstance, f),
    urlPath: (f = msg.getUrlPath()) && proto.envoy.type.matcher.PathMatcher.toObject(includeInstance, f),
    destinationIp: (f = msg.getDestinationIp()) && proto.envoy.api.v2.core.CidrRange.toObject(includeInstance, f),
    destinationPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
    metadata: (f = msg.getMetadata()) && proto.envoy.type.matcher.MetadataMatcher.toObject(includeInstance, f),
    notRule: (f = msg.getNotRule()) && proto.envoy.config.rbac.v2.Permission.toObject(includeInstance, f),
    requestedServerName: (f = msg.getRequestedServerName()) && proto.envoy.type.matcher.StringMatcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.rbac.v2.Permission}
 */
proto.envoy.config.rbac.v2.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.rbac.v2.Permission;
  return proto.envoy.config.rbac.v2.Permission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.rbac.v2.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.rbac.v2.Permission}
 */
proto.envoy.config.rbac.v2.Permission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.rbac.v2.Permission.Set;
      reader.readMessage(value,proto.envoy.config.rbac.v2.Permission.Set.deserializeBinaryFromReader);
      msg.setAndRules(value);
      break;
    case 2:
      var value = new proto.envoy.config.rbac.v2.Permission.Set;
      reader.readMessage(value,proto.envoy.config.rbac.v2.Permission.Set.deserializeBinaryFromReader);
      msg.setOrRules(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAny(value);
      break;
    case 4:
      var value = new proto.envoy.api.v2.route.HeaderMatcher;
      reader.readMessage(value,proto.envoy.api.v2.route.HeaderMatcher.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 10:
      var value = new proto.envoy.type.matcher.PathMatcher;
      reader.readMessage(value,proto.envoy.type.matcher.PathMatcher.deserializeBinaryFromReader);
      msg.setUrlPath(value);
      break;
    case 5:
      var value = new proto.envoy.api.v2.core.CidrRange;
      reader.readMessage(value,proto.envoy.api.v2.core.CidrRange.deserializeBinaryFromReader);
      msg.setDestinationIp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationPort(value);
      break;
    case 7:
      var value = new proto.envoy.type.matcher.MetadataMatcher;
      reader.readMessage(value,proto.envoy.type.matcher.MetadataMatcher.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 8:
      var value = new proto.envoy.config.rbac.v2.Permission;
      reader.readMessage(value,proto.envoy.config.rbac.v2.Permission.deserializeBinaryFromReader);
      msg.setNotRule(value);
      break;
    case 9:
      var value = new proto.envoy.type.matcher.StringMatcher;
      reader.readMessage(value,proto.envoy.type.matcher.StringMatcher.deserializeBinaryFromReader);
      msg.setRequestedServerName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.rbac.v2.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.rbac.v2.Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.rbac.v2.Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v2.Permission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAndRules();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.rbac.v2.Permission.Set.serializeBinaryToWriter
    );
  }
  f = message.getOrRules();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.rbac.v2.Permission.Set.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.api.v2.route.HeaderMatcher.serializeBinaryToWriter
    );
  }
  f = message.getUrlPath();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.envoy.type.matcher.PathMatcher.serializeBinaryToWriter
    );
  }
  f = message.getDestinationIp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.api.v2.core.CidrRange.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.type.matcher.MetadataMatcher.serializeBinaryToWriter
    );
  }
  f = message.getNotRule();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.envoy.config.rbac.v2.Permission.serializeBinaryToWriter
    );
  }
  f = message.getRequestedServerName();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.envoy.type.matcher.StringMatcher.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.rbac.v2.Permission.Set.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.rbac.v2.Permission.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.rbac.v2.Permission.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.rbac.v2.Permission.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v2.Permission.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.envoy.config.rbac.v2.Permission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.rbac.v2.Permission.Set}
 */
proto.envoy.config.rbac.v2.Permission.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.rbac.v2.Permission.Set;
  return proto.envoy.config.rbac.v2.Permission.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.rbac.v2.Permission.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.rbac.v2.Permission.Set}
 */
proto.envoy.config.rbac.v2.Permission.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.rbac.v2.Permission;
      reader.readMessage(value,proto.envoy.config.rbac.v2.Permission.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.rbac.v2.Permission.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.rbac.v2.Permission.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.rbac.v2.Permission.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v2.Permission.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.rbac.v2.Permission.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Permission rules = 1;
 * @return {!Array<!proto.envoy.config.rbac.v2.Permission>}
 */
proto.envoy.config.rbac.v2.Permission.Set.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.envoy.config.rbac.v2.Permission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.rbac.v2.Permission, 1));
};


/**
 * @param {!Array<!proto.envoy.config.rbac.v2.Permission>} value
 * @return {!proto.envoy.config.rbac.v2.Permission.Set} returns this
*/
proto.envoy.config.rbac.v2.Permission.Set.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.rbac.v2.Permission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.rbac.v2.Permission}
 */
proto.envoy.config.rbac.v2.Permission.Set.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.rbac.v2.Permission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.rbac.v2.Permission.Set} returns this
 */
proto.envoy.config.rbac.v2.Permission.Set.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


/**
 * optional Set and_rules = 1;
 * @return {?proto.envoy.config.rbac.v2.Permission.Set}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getAndRules = function() {
  return /** @type{?proto.envoy.config.rbac.v2.Permission.Set} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.rbac.v2.Permission.Set, 1));
};


/**
 * @param {?proto.envoy.config.rbac.v2.Permission.Set|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setAndRules = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearAndRules = function() {
  return this.setAndRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasAndRules = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Set or_rules = 2;
 * @return {?proto.envoy.config.rbac.v2.Permission.Set}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getOrRules = function() {
  return /** @type{?proto.envoy.config.rbac.v2.Permission.Set} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.rbac.v2.Permission.Set, 2));
};


/**
 * @param {?proto.envoy.config.rbac.v2.Permission.Set|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setOrRules = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearOrRules = function() {
  return this.setOrRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasOrRules = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool any = 3;
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getAny = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.setAny = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearAny = function() {
  return jspb.Message.setOneofField(this, 3, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasAny = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional envoy.api.v2.route.HeaderMatcher header = 4;
 * @return {?proto.envoy.api.v2.route.HeaderMatcher}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getHeader = function() {
  return /** @type{?proto.envoy.api.v2.route.HeaderMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.route.HeaderMatcher, 4));
};


/**
 * @param {?proto.envoy.api.v2.route.HeaderMatcher|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setHeader = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional envoy.type.matcher.PathMatcher url_path = 10;
 * @return {?proto.envoy.type.matcher.PathMatcher}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getUrlPath = function() {
  return /** @type{?proto.envoy.type.matcher.PathMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.type.matcher.PathMatcher, 10));
};


/**
 * @param {?proto.envoy.type.matcher.PathMatcher|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setUrlPath = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearUrlPath = function() {
  return this.setUrlPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasUrlPath = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional envoy.api.v2.core.CidrRange destination_ip = 5;
 * @return {?proto.envoy.api.v2.core.CidrRange}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getDestinationIp = function() {
  return /** @type{?proto.envoy.api.v2.core.CidrRange} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.core.CidrRange, 5));
};


/**
 * @param {?proto.envoy.api.v2.core.CidrRange|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setDestinationIp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearDestinationIp = function() {
  return this.setDestinationIp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasDestinationIp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 destination_port = 6;
 * @return {number}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getDestinationPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.setDestinationPort = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearDestinationPort = function() {
  return jspb.Message.setOneofField(this, 6, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasDestinationPort = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional envoy.type.matcher.MetadataMatcher metadata = 7;
 * @return {?proto.envoy.type.matcher.MetadataMatcher}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getMetadata = function() {
  return /** @type{?proto.envoy.type.matcher.MetadataMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.type.matcher.MetadataMatcher, 7));
};


/**
 * @param {?proto.envoy.type.matcher.MetadataMatcher|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Permission not_rule = 8;
 * @return {?proto.envoy.config.rbac.v2.Permission}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getNotRule = function() {
  return /** @type{?proto.envoy.config.rbac.v2.Permission} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.rbac.v2.Permission, 8));
};


/**
 * @param {?proto.envoy.config.rbac.v2.Permission|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setNotRule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearNotRule = function() {
  return this.setNotRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasNotRule = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional envoy.type.matcher.StringMatcher requested_server_name = 9;
 * @return {?proto.envoy.type.matcher.StringMatcher}
 */
proto.envoy.config.rbac.v2.Permission.prototype.getRequestedServerName = function() {
  return /** @type{?proto.envoy.type.matcher.StringMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.type.matcher.StringMatcher, 9));
};


/**
 * @param {?proto.envoy.type.matcher.StringMatcher|undefined} value
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
*/
proto.envoy.config.rbac.v2.Permission.prototype.setRequestedServerName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.envoy.config.rbac.v2.Permission.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v2.Permission} returns this
 */
proto.envoy.config.rbac.v2.Permission.prototype.clearRequestedServerName = function() {
  return this.setRequestedServerName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v2.Permission.prototype.hasRequestedServerName = function() {
  return jspb.Message.getField(this, 9) != null;
};


