// source: envoy/api/v2/auth/tls.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.api.v2.auth.CommonTlsContext');
goog.provide('proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext');
goog.provide('proto.envoy.api.v2.auth.CommonTlsContext.ValidationContextTypeCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.api.v2.auth.CertificateValidationContext');
goog.require('proto.envoy.api.v2.auth.SdsSecretConfig');
goog.require('proto.envoy.api.v2.auth.TlsCertificate');
goog.require('proto.envoy.api.v2.auth.TlsParameters');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.api.v2.auth.CommonTlsContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.api.v2.auth.CommonTlsContext.repeatedFields_, proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_);
};
goog.inherits(proto.envoy.api.v2.auth.CommonTlsContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.api.v2.auth.CommonTlsContext.displayName = 'proto.envoy.api.v2.auth.CommonTlsContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.displayName = 'proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.api.v2.auth.CommonTlsContext.repeatedFields_ = [2,6,4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_ = [[3,7,8]];

/**
 * @enum {number}
 */
proto.envoy.api.v2.auth.CommonTlsContext.ValidationContextTypeCase = {
  VALIDATION_CONTEXT_TYPE_NOT_SET: 0,
  VALIDATION_CONTEXT: 3,
  VALIDATION_CONTEXT_SDS_SECRET_CONFIG: 7,
  COMBINED_VALIDATION_CONTEXT: 8
};

/**
 * @return {proto.envoy.api.v2.auth.CommonTlsContext.ValidationContextTypeCase}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getValidationContextTypeCase = function() {
  return /** @type {proto.envoy.api.v2.auth.CommonTlsContext.ValidationContextTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.api.v2.auth.CommonTlsContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.api.v2.auth.CommonTlsContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    tlsParams: (f = msg.getTlsParams()) && proto.envoy.api.v2.auth.TlsParameters.toObject(includeInstance, f),
    tlsCertificatesList: jspb.Message.toObjectList(msg.getTlsCertificatesList(),
    proto.envoy.api.v2.auth.TlsCertificate.toObject, includeInstance),
    tlsCertificateSdsSecretConfigsList: jspb.Message.toObjectList(msg.getTlsCertificateSdsSecretConfigsList(),
    proto.envoy.api.v2.auth.SdsSecretConfig.toObject, includeInstance),
    validationContext: (f = msg.getValidationContext()) && proto.envoy.api.v2.auth.CertificateValidationContext.toObject(includeInstance, f),
    validationContextSdsSecretConfig: (f = msg.getValidationContextSdsSecretConfig()) && proto.envoy.api.v2.auth.SdsSecretConfig.toObject(includeInstance, f),
    combinedValidationContext: (f = msg.getCombinedValidationContext()) && proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.toObject(includeInstance, f),
    alpnProtocolsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.api.v2.auth.CommonTlsContext;
  return proto.envoy.api.v2.auth.CommonTlsContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.api.v2.auth.TlsParameters;
      reader.readMessage(value,proto.envoy.api.v2.auth.TlsParameters.deserializeBinaryFromReader);
      msg.setTlsParams(value);
      break;
    case 2:
      var value = new proto.envoy.api.v2.auth.TlsCertificate;
      reader.readMessage(value,proto.envoy.api.v2.auth.TlsCertificate.deserializeBinaryFromReader);
      msg.addTlsCertificates(value);
      break;
    case 6:
      var value = new proto.envoy.api.v2.auth.SdsSecretConfig;
      reader.readMessage(value,proto.envoy.api.v2.auth.SdsSecretConfig.deserializeBinaryFromReader);
      msg.addTlsCertificateSdsSecretConfigs(value);
      break;
    case 3:
      var value = new proto.envoy.api.v2.auth.CertificateValidationContext;
      reader.readMessage(value,proto.envoy.api.v2.auth.CertificateValidationContext.deserializeBinaryFromReader);
      msg.setValidationContext(value);
      break;
    case 7:
      var value = new proto.envoy.api.v2.auth.SdsSecretConfig;
      reader.readMessage(value,proto.envoy.api.v2.auth.SdsSecretConfig.deserializeBinaryFromReader);
      msg.setValidationContextSdsSecretConfig(value);
      break;
    case 8:
      var value = new proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext;
      reader.readMessage(value,proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.deserializeBinaryFromReader);
      msg.setCombinedValidationContext(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlpnProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.api.v2.auth.CommonTlsContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.api.v2.auth.CommonTlsContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTlsParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.api.v2.auth.TlsParameters.serializeBinaryToWriter
    );
  }
  f = message.getTlsCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.api.v2.auth.TlsCertificate.serializeBinaryToWriter
    );
  }
  f = message.getTlsCertificateSdsSecretConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.envoy.api.v2.auth.SdsSecretConfig.serializeBinaryToWriter
    );
  }
  f = message.getValidationContext();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.api.v2.auth.CertificateValidationContext.serializeBinaryToWriter
    );
  }
  f = message.getValidationContextSdsSecretConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.api.v2.auth.SdsSecretConfig.serializeBinaryToWriter
    );
  }
  f = message.getCombinedValidationContext();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.serializeBinaryToWriter
    );
  }
  f = message.getAlpnProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultValidationContext: (f = msg.getDefaultValidationContext()) && proto.envoy.api.v2.auth.CertificateValidationContext.toObject(includeInstance, f),
    validationContextSdsSecretConfig: (f = msg.getValidationContextSdsSecretConfig()) && proto.envoy.api.v2.auth.SdsSecretConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext;
  return proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.api.v2.auth.CertificateValidationContext;
      reader.readMessage(value,proto.envoy.api.v2.auth.CertificateValidationContext.deserializeBinaryFromReader);
      msg.setDefaultValidationContext(value);
      break;
    case 2:
      var value = new proto.envoy.api.v2.auth.SdsSecretConfig;
      reader.readMessage(value,proto.envoy.api.v2.auth.SdsSecretConfig.deserializeBinaryFromReader);
      msg.setValidationContextSdsSecretConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultValidationContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.api.v2.auth.CertificateValidationContext.serializeBinaryToWriter
    );
  }
  f = message.getValidationContextSdsSecretConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.api.v2.auth.SdsSecretConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional CertificateValidationContext default_validation_context = 1;
 * @return {?proto.envoy.api.v2.auth.CertificateValidationContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.getDefaultValidationContext = function() {
  return /** @type{?proto.envoy.api.v2.auth.CertificateValidationContext} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.CertificateValidationContext, 1));
};


/**
 * @param {?proto.envoy.api.v2.auth.CertificateValidationContext|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.setDefaultValidationContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.clearDefaultValidationContext = function() {
  return this.setDefaultValidationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.hasDefaultValidationContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SdsSecretConfig validation_context_sds_secret_config = 2;
 * @return {?proto.envoy.api.v2.auth.SdsSecretConfig}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.getValidationContextSdsSecretConfig = function() {
  return /** @type{?proto.envoy.api.v2.auth.SdsSecretConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.SdsSecretConfig, 2));
};


/**
 * @param {?proto.envoy.api.v2.auth.SdsSecretConfig|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.setValidationContextSdsSecretConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.clearValidationContextSdsSecretConfig = function() {
  return this.setValidationContextSdsSecretConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.prototype.hasValidationContextSdsSecretConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TlsParameters tls_params = 1;
 * @return {?proto.envoy.api.v2.auth.TlsParameters}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getTlsParams = function() {
  return /** @type{?proto.envoy.api.v2.auth.TlsParameters} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.TlsParameters, 1));
};


/**
 * @param {?proto.envoy.api.v2.auth.TlsParameters|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setTlsParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearTlsParams = function() {
  return this.setTlsParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.hasTlsParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TlsCertificate tls_certificates = 2;
 * @return {!Array<!proto.envoy.api.v2.auth.TlsCertificate>}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getTlsCertificatesList = function() {
  return /** @type{!Array<!proto.envoy.api.v2.auth.TlsCertificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.api.v2.auth.TlsCertificate, 2));
};


/**
 * @param {!Array<!proto.envoy.api.v2.auth.TlsCertificate>} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setTlsCertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.api.v2.auth.TlsCertificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.api.v2.auth.TlsCertificate}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.addTlsCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.api.v2.auth.TlsCertificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearTlsCertificatesList = function() {
  return this.setTlsCertificatesList([]);
};


/**
 * repeated SdsSecretConfig tls_certificate_sds_secret_configs = 6;
 * @return {!Array<!proto.envoy.api.v2.auth.SdsSecretConfig>}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getTlsCertificateSdsSecretConfigsList = function() {
  return /** @type{!Array<!proto.envoy.api.v2.auth.SdsSecretConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.api.v2.auth.SdsSecretConfig, 6));
};


/**
 * @param {!Array<!proto.envoy.api.v2.auth.SdsSecretConfig>} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setTlsCertificateSdsSecretConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.envoy.api.v2.auth.SdsSecretConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.api.v2.auth.SdsSecretConfig}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.addTlsCertificateSdsSecretConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.envoy.api.v2.auth.SdsSecretConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearTlsCertificateSdsSecretConfigsList = function() {
  return this.setTlsCertificateSdsSecretConfigsList([]);
};


/**
 * optional CertificateValidationContext validation_context = 3;
 * @return {?proto.envoy.api.v2.auth.CertificateValidationContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getValidationContext = function() {
  return /** @type{?proto.envoy.api.v2.auth.CertificateValidationContext} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.CertificateValidationContext, 3));
};


/**
 * @param {?proto.envoy.api.v2.auth.CertificateValidationContext|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setValidationContext = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearValidationContext = function() {
  return this.setValidationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.hasValidationContext = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SdsSecretConfig validation_context_sds_secret_config = 7;
 * @return {?proto.envoy.api.v2.auth.SdsSecretConfig}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getValidationContextSdsSecretConfig = function() {
  return /** @type{?proto.envoy.api.v2.auth.SdsSecretConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.SdsSecretConfig, 7));
};


/**
 * @param {?proto.envoy.api.v2.auth.SdsSecretConfig|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setValidationContextSdsSecretConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearValidationContextSdsSecretConfig = function() {
  return this.setValidationContextSdsSecretConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.hasValidationContextSdsSecretConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CombinedCertificateValidationContext combined_validation_context = 8;
 * @return {?proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getCombinedValidationContext = function() {
  return /** @type{?proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext} */ (
    jspb.Message.getWrapperField(this, proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext, 8));
};


/**
 * @param {?proto.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext|undefined} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
*/
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setCombinedValidationContext = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.envoy.api.v2.auth.CommonTlsContext.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearCombinedValidationContext = function() {
  return this.setCombinedValidationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.hasCombinedValidationContext = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated string alpn_protocols = 4;
 * @return {!Array<string>}
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.getAlpnProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.setAlpnProtocolsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.addAlpnProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.api.v2.auth.CommonTlsContext} returns this
 */
proto.envoy.api.v2.auth.CommonTlsContext.prototype.clearAlpnProtocolsList = function() {
  return this.setAlpnProtocolsList([]);
};


