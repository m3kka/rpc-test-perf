// source: envoy/config/listener/v3/quic_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.listener.v3.QuicProtocolOptions');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.QuicProtocolOptions');
goog.require('proto.envoy.config.core.v3.RuntimeFeatureFlag');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');
goog.require('proto.google.protobuf.Duration');
goog.require('proto.google.protobuf.UInt32Value');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.listener.v3.QuicProtocolOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.listener.v3.QuicProtocolOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.listener.v3.QuicProtocolOptions.displayName = 'proto.envoy.config.listener.v3.QuicProtocolOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.listener.v3.QuicProtocolOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.listener.v3.QuicProtocolOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    quicProtocolOptions: (f = msg.getQuicProtocolOptions()) && proto.envoy.config.core.v3.QuicProtocolOptions.toObject(includeInstance, f),
    idleTimeout: (f = msg.getIdleTimeout()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    cryptoHandshakeTimeout: (f = msg.getCryptoHandshakeTimeout()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    enabled: (f = msg.getEnabled()) && proto.envoy.config.core.v3.RuntimeFeatureFlag.toObject(includeInstance, f),
    packetsToReadToConnectionCountRatio: (f = msg.getPacketsToReadToConnectionCountRatio()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f),
    cryptoStreamConfig: (f = msg.getCryptoStreamConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    proofSourceConfig: (f = msg.getProofSourceConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    connectionIdGeneratorConfig: (f = msg.getConnectionIdGeneratorConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    serverPreferredAddressConfig: (f = msg.getServerPreferredAddressConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.listener.v3.QuicProtocolOptions;
  return proto.envoy.config.listener.v3.QuicProtocolOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.listener.v3.QuicProtocolOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.QuicProtocolOptions;
      reader.readMessage(value,proto.envoy.config.core.v3.QuicProtocolOptions.deserializeBinaryFromReader);
      msg.setQuicProtocolOptions(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setIdleTimeout(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setCryptoHandshakeTimeout(value);
      break;
    case 4:
      var value = new proto.envoy.config.core.v3.RuntimeFeatureFlag;
      reader.readMessage(value,proto.envoy.config.core.v3.RuntimeFeatureFlag.deserializeBinaryFromReader);
      msg.setEnabled(value);
      break;
    case 5:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setPacketsToReadToConnectionCountRatio(value);
      break;
    case 6:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setCryptoStreamConfig(value);
      break;
    case 7:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setProofSourceConfig(value);
      break;
    case 8:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setConnectionIdGeneratorConfig(value);
      break;
    case 9:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setServerPreferredAddressConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.listener.v3.QuicProtocolOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.listener.v3.QuicProtocolOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuicProtocolOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.QuicProtocolOptions.serializeBinaryToWriter
    );
  }
  f = message.getIdleTimeout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getCryptoHandshakeTimeout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getEnabled();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.core.v3.RuntimeFeatureFlag.serializeBinaryToWriter
    );
  }
  f = message.getPacketsToReadToConnectionCountRatio();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getCryptoStreamConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getProofSourceConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getConnectionIdGeneratorConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getServerPreferredAddressConfig();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;
 * @return {?proto.envoy.config.core.v3.QuicProtocolOptions}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getQuicProtocolOptions = function() {
  return /** @type{?proto.envoy.config.core.v3.QuicProtocolOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.QuicProtocolOptions, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.QuicProtocolOptions|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setQuicProtocolOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearQuicProtocolOptions = function() {
  return this.setQuicProtocolOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasQuicProtocolOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Duration idle_timeout = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getIdleTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setIdleTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearIdleTimeout = function() {
  return this.setIdleTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasIdleTimeout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration crypto_handshake_timeout = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getCryptoHandshakeTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setCryptoHandshakeTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearCryptoHandshakeTimeout = function() {
  return this.setCryptoHandshakeTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasCryptoHandshakeTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;
 * @return {?proto.envoy.config.core.v3.RuntimeFeatureFlag}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getEnabled = function() {
  return /** @type{?proto.envoy.config.core.v3.RuntimeFeatureFlag} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.RuntimeFeatureFlag, 4));
};


/**
 * @param {?proto.envoy.config.core.v3.RuntimeFeatureFlag|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setEnabled = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearEnabled = function() {
  return this.setEnabled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getPacketsToReadToConnectionCountRatio = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 5));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setPacketsToReadToConnectionCountRatio = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearPacketsToReadToConnectionCountRatio = function() {
  return this.setPacketsToReadToConnectionCountRatio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasPacketsToReadToConnectionCountRatio = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getCryptoStreamConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 6));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setCryptoStreamConfig = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearCryptoStreamConfig = function() {
  return this.setCryptoStreamConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasCryptoStreamConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getProofSourceConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 7));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setProofSourceConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearProofSourceConfig = function() {
  return this.setProofSourceConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasProofSourceConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig connection_id_generator_config = 8;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getConnectionIdGeneratorConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 8));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setConnectionIdGeneratorConfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearConnectionIdGeneratorConfig = function() {
  return this.setConnectionIdGeneratorConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasConnectionIdGeneratorConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig server_preferred_address_config = 9;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.getServerPreferredAddressConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 9));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
*/
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.setServerPreferredAddressConfig = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.listener.v3.QuicProtocolOptions} returns this
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.clearServerPreferredAddressConfig = function() {
  return this.setServerPreferredAddressConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.listener.v3.QuicProtocolOptions.prototype.hasServerPreferredAddressConfig = function() {
  return jspb.Message.getField(this, 9) != null;
};


