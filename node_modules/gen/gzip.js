// source: envoy/extensions/filters/http/gzip/v3/gzip.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.filters.http.gzip.v3.Gzip');
goog.provide('proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel');
goog.provide('proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum');
goog.provide('proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.extensions.filters.http.compressor.v3.Compressor');
goog.require('proto.google.protobuf.UInt32Value');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.gzip.v3.Gzip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.gzip.v3.Gzip.displayName = 'proto.envoy.extensions.filters.http.gzip.v3.Gzip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.displayName = 'proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.gzip.v3.Gzip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.toObject = function(includeInstance, msg) {
  var f, obj = {
    memoryLevel: (f = msg.getMemoryLevel()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f),
    compressionLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    compressionStrategy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    windowBits: (f = msg.getWindowBits()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f),
    compressor: (f = msg.getCompressor()) && proto.envoy.extensions.filters.http.compressor.v3.Compressor.toObject(includeInstance, f),
    chunkSize: (f = msg.getChunkSize()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.gzip.v3.Gzip;
  return proto.envoy.extensions.filters.http.gzip.v3.Gzip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setMemoryLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum} */ (reader.readEnum());
      msg.setCompressionLevel(value);
      break;
    case 4:
      var value = /** @type {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy} */ (reader.readEnum());
      msg.setCompressionStrategy(value);
      break;
    case 9:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setWindowBits(value);
      break;
    case 10:
      var value = new proto.envoy.extensions.filters.http.compressor.v3.Compressor;
      reader.readMessage(value,proto.envoy.extensions.filters.http.compressor.v3.Compressor.deserializeBinaryFromReader);
      msg.setCompressor(value);
      break;
    case 11:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setChunkSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.gzip.v3.Gzip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemoryLevel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getCompressionLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCompressionStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getWindowBits();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getCompressor();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.envoy.extensions.filters.http.compressor.v3.Compressor.serializeBinaryToWriter
    );
  }
  f = message.getChunkSize();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy = {
  DEFAULT: 0,
  FILTERED: 1,
  HUFFMAN: 2,
  RLE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel;
  return proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum = {
  DEFAULT: 0,
  BEST: 1,
  SPEED: 2
};

/**
 * optional google.protobuf.UInt32Value memory_level = 1;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getMemoryLevel = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 1));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
*/
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setMemoryLevel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.clearMemoryLevel = function() {
  return this.setMemoryLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.hasMemoryLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompressionLevel.Enum compression_level = 3;
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getCompressionLevel = function() {
  return /** @type {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel.Enum} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setCompressionLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CompressionStrategy compression_strategy = 4;
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getCompressionStrategy = function() {
  return /** @type {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.envoy.extensions.filters.http.gzip.v3.Gzip.CompressionStrategy} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setCompressionStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional google.protobuf.UInt32Value window_bits = 9;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getWindowBits = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 9));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
*/
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setWindowBits = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.clearWindowBits = function() {
  return this.setWindowBits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.hasWindowBits = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional envoy.extensions.filters.http.compressor.v3.Compressor compressor = 10;
 * @return {?proto.envoy.extensions.filters.http.compressor.v3.Compressor}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getCompressor = function() {
  return /** @type{?proto.envoy.extensions.filters.http.compressor.v3.Compressor} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.http.compressor.v3.Compressor, 10));
};


/**
 * @param {?proto.envoy.extensions.filters.http.compressor.v3.Compressor|undefined} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
*/
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setCompressor = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.clearCompressor = function() {
  return this.setCompressor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.hasCompressor = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.UInt32Value chunk_size = 11;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.getChunkSize = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 11));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
*/
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.setChunkSize = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.gzip.v3.Gzip} returns this
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.clearChunkSize = function() {
  return this.setChunkSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.gzip.v3.Gzip.prototype.hasChunkSize = function() {
  return jspb.Message.getField(this, 11) != null;
};


