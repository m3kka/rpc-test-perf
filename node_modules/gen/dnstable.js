// source: envoy/data/dns/v3/dns_table.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.data.dns.v3.DnsTable');
goog.provide('proto.envoy.data.dns.v3.DnsTable.AddressList');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsEndpoint');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.EndpointConfigCase');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsService');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsServiceList');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.ProtocolConfigCase');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.EndpointTypeCase');
goog.provide('proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.type.matcher.v3.StringMatcher');
goog.require('proto.google.protobuf.Duration');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.dns.v3.DnsTable.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.displayName = 'proto.envoy.data.dns.v3.DnsTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.AddressList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.dns.v3.DnsTable.AddressList.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.AddressList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.AddressList.displayName = 'proto.envoy.data.dns.v3.DnsTable.AddressList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.dns.v3.DnsTable.DnsService.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsService.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.dns.v3.DnsTable.DnsServiceList.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsServiceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsServiceList.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsServiceList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.displayName = 'proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalRetryCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    virtualDomainsList: jspb.Message.toObjectList(msg.getVirtualDomainsList(),
    proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.toObject, includeInstance),
    knownSuffixesList: jspb.Message.toObjectList(msg.getKnownSuffixesList(),
    proto.envoy.type.matcher.v3.StringMatcher.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable}
 */
proto.envoy.data.dns.v3.DnsTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable;
  return proto.envoy.data.dns.v3.DnsTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable}
 */
proto.envoy.data.dns.v3.DnsTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExternalRetryCount(value);
      break;
    case 2:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.deserializeBinaryFromReader);
      msg.addVirtualDomains(value);
      break;
    case 3:
      var value = new proto.envoy.type.matcher.v3.StringMatcher;
      reader.readMessage(value,proto.envoy.type.matcher.v3.StringMatcher.deserializeBinaryFromReader);
      msg.addKnownSuffixes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalRetryCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getVirtualDomainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.serializeBinaryToWriter
    );
  }
  f = message.getKnownSuffixesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.envoy.type.matcher.v3.StringMatcher.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.AddressList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.AddressList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.AddressList}
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.AddressList;
  return proto.envoy.data.dns.v3.DnsTable.AddressList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.AddressList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.AddressList}
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.AddressList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.AddressList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string address = 1;
 * @return {!Array<string>}
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.getAddressList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.AddressList} returns this
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.setAddressList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.dns.v3.DnsTable.AddressList} returns this
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.addAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.dns.v3.DnsTable.AddressList} returns this
 */
proto.envoy.data.dns.v3.DnsTable.AddressList.prototype.clearAddressList = function() {
  return this.setAddressList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.ProtocolConfigCase = {
  PROTOCOL_CONFIG_NOT_SET: 0,
  NUMBER: 1,
  NAME: 2
};

/**
 * @return {proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.ProtocolConfigCase}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.getProtocolConfigCase = function() {
  return /** @type {proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.ProtocolConfigCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol;
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.setNumber = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.clearNumber = function() {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.EndpointTypeCase = {
  ENDPOINT_TYPE_NOT_SET: 0,
  HOST_NAME: 1,
  CLUSTER_NAME: 2
};

/**
 * @return {proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.EndpointTypeCase}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getEndpointTypeCase = function() {
  return /** @type {proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.EndpointTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clusterName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget;
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string host_name = 1;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.setHostName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.clearHostName = function() {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.hasHostName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cluster_name = 2;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.setClusterName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.clearClusterName = function() {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.hasClusterName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 priority = 3;
 * @return {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 weight = 4;
 * @return {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 port = 5;
 * @return {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    protocol: (f = msg.getProtocol()) && proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.toObject(includeInstance, f),
    ttl: (f = msg.getTtl()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsService;
  return proto.envoy.data.dns.v3.DnsTable.DnsService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    case 4:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol.serializeBinaryToWriter
    );
  }
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DnsServiceProtocol protocol = 2;
 * @return {?proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.getProtocol = function() {
  return /** @type{?proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol, 2));
};


/**
 * @param {?proto.envoy.data.dns.v3.DnsTable.DnsServiceProtocol|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.setProtocol = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration ttl = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.getTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.setTtl = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated DnsServiceTarget targets = 4;
 * @return {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget>}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget, 4));
};


/**
 * @param {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget>} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.setTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget}
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.envoy.data.dns.v3.DnsTable.DnsServiceTarget, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsService.prototype.clearTargetsList = function() {
  return this.setTargetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.envoy.data.dns.v3.DnsTable.DnsService.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsServiceList;
  return proto.envoy.data.dns.v3.DnsTable.DnsServiceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsService;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsService.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsServiceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsService.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DnsService services = 1;
 * @return {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsService>}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.envoy.data.dns.v3.DnsTable.DnsService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsService, 1));
};


/**
 * @param {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsService>} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsService}
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.data.dns.v3.DnsTable.DnsService, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsServiceList} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsServiceList.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.EndpointConfigCase = {
  ENDPOINT_CONFIG_NOT_SET: 0,
  ADDRESS_LIST: 1,
  CLUSTER_NAME: 2,
  SERVICE_LIST: 3
};

/**
 * @return {proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.EndpointConfigCase}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.getEndpointConfigCase = function() {
  return /** @type {proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.EndpointConfigCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressList: (f = msg.getAddressList()) && proto.envoy.data.dns.v3.DnsTable.AddressList.toObject(includeInstance, f),
    clusterName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceList: (f = msg.getServiceList()) && proto.envoy.data.dns.v3.DnsTable.DnsServiceList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsEndpoint;
  return proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.dns.v3.DnsTable.AddressList;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.AddressList.deserializeBinaryFromReader);
      msg.setAddressList(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 3:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsServiceList;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsServiceList.deserializeBinaryFromReader);
      msg.setServiceList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.data.dns.v3.DnsTable.AddressList.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsServiceList.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddressList address_list = 1;
 * @return {?proto.envoy.data.dns.v3.DnsTable.AddressList}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.getAddressList = function() {
  return /** @type{?proto.envoy.data.dns.v3.DnsTable.AddressList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.dns.v3.DnsTable.AddressList, 1));
};


/**
 * @param {?proto.envoy.data.dns.v3.DnsTable.AddressList|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.setAddressList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.clearAddressList = function() {
  return this.setAddressList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.hasAddressList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cluster_name = 2;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.setClusterName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.clearClusterName = function() {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.hasClusterName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DnsServiceList service_list = 3;
 * @return {?proto.envoy.data.dns.v3.DnsTable.DnsServiceList}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.getServiceList = function() {
  return /** @type{?proto.envoy.data.dns.v3.DnsTable.DnsServiceList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsServiceList, 3));
};


/**
 * @param {?proto.envoy.data.dns.v3.DnsTable.DnsServiceList|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.setServiceList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.clearServiceList = function() {
  return this.setServiceList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.prototype.hasServiceList = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endpoint: (f = msg.getEndpoint()) && proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.toObject(includeInstance, f),
    answerTtl: (f = msg.getAnswerTtl()) && proto.google.protobuf.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain;
  return proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.envoy.data.dns.v3.DnsTable.DnsEndpoint;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.deserializeBinaryFromReader);
      msg.setEndpoint(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setAnswerTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.data.dns.v3.DnsTable.DnsEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getAnswerTtl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DnsEndpoint endpoint = 2;
 * @return {?proto.envoy.data.dns.v3.DnsTable.DnsEndpoint}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.getEndpoint = function() {
  return /** @type{?proto.envoy.data.dns.v3.DnsTable.DnsEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsEndpoint, 2));
};


/**
 * @param {?proto.envoy.data.dns.v3.DnsTable.DnsEndpoint|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.setEndpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.clearEndpoint = function() {
  return this.setEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.hasEndpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration answer_ttl = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.getAnswerTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} returns this
*/
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.setAnswerTtl = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain} returns this
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.clearAnswerTtl = function() {
  return this.setAnswerTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain.prototype.hasAnswerTtl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 external_retry_count = 1;
 * @return {number}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.getExternalRetryCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.data.dns.v3.DnsTable} returns this
 */
proto.envoy.data.dns.v3.DnsTable.prototype.setExternalRetryCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DnsVirtualDomain virtual_domains = 2;
 * @return {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain>}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.getVirtualDomainsList = function() {
  return /** @type{!Array<!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain, 2));
};


/**
 * @param {!Array<!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain>} value
 * @return {!proto.envoy.data.dns.v3.DnsTable} returns this
*/
proto.envoy.data.dns.v3.DnsTable.prototype.setVirtualDomainsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.addVirtualDomains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.data.dns.v3.DnsTable.DnsVirtualDomain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.dns.v3.DnsTable} returns this
 */
proto.envoy.data.dns.v3.DnsTable.prototype.clearVirtualDomainsList = function() {
  return this.setVirtualDomainsList([]);
};


/**
 * repeated envoy.type.matcher.v3.StringMatcher known_suffixes = 3;
 * @return {!Array<!proto.envoy.type.matcher.v3.StringMatcher>}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.getKnownSuffixesList = function() {
  return /** @type{!Array<!proto.envoy.type.matcher.v3.StringMatcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.type.matcher.v3.StringMatcher, 3));
};


/**
 * @param {!Array<!proto.envoy.type.matcher.v3.StringMatcher>} value
 * @return {!proto.envoy.data.dns.v3.DnsTable} returns this
*/
proto.envoy.data.dns.v3.DnsTable.prototype.setKnownSuffixesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.envoy.type.matcher.v3.StringMatcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.type.matcher.v3.StringMatcher}
 */
proto.envoy.data.dns.v3.DnsTable.prototype.addKnownSuffixes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.envoy.type.matcher.v3.StringMatcher, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.dns.v3.DnsTable} returns this
 */
proto.envoy.data.dns.v3.DnsTable.prototype.clearKnownSuffixesList = function() {
  return this.setKnownSuffixesList([]);
};


