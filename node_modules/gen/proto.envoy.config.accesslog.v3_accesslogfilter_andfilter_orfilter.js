// source: envoy/config/accesslog/v3/accesslog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.accesslog.v3.AccessLogFilter');
goog.provide('proto.envoy.config.accesslog.v3.AccessLogFilter.FilterSpecifierCase');
goog.provide('proto.envoy.config.accesslog.v3.AndFilter');
goog.provide('proto.envoy.config.accesslog.v3.OrFilter');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.accesslog.v3.DurationFilter');
goog.require('proto.envoy.config.accesslog.v3.ExtensionFilter');
goog.require('proto.envoy.config.accesslog.v3.GrpcStatusFilter');
goog.require('proto.envoy.config.accesslog.v3.HeaderFilter');
goog.require('proto.envoy.config.accesslog.v3.LogTypeFilter');
goog.require('proto.envoy.config.accesslog.v3.MetadataFilter');
goog.require('proto.envoy.config.accesslog.v3.NotHealthCheckFilter');
goog.require('proto.envoy.config.accesslog.v3.ResponseFlagFilter');
goog.require('proto.envoy.config.accesslog.v3.RuntimeFilter');
goog.require('proto.envoy.config.accesslog.v3.StatusCodeFilter');
goog.require('proto.envoy.config.accesslog.v3.TraceableFilter');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.accesslog.v3.AccessLogFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_);
};
goog.inherits(proto.envoy.config.accesslog.v3.AccessLogFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.accesslog.v3.AccessLogFilter.displayName = 'proto.envoy.config.accesslog.v3.AccessLogFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.accesslog.v3.AndFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.accesslog.v3.AndFilter.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.accesslog.v3.AndFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.accesslog.v3.AndFilter.displayName = 'proto.envoy.config.accesslog.v3.AndFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.accesslog.v3.OrFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.accesslog.v3.OrFilter.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.accesslog.v3.OrFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.accesslog.v3.OrFilter.displayName = 'proto.envoy.config.accesslog.v3.OrFilter';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.FilterSpecifierCase = {
  FILTER_SPECIFIER_NOT_SET: 0,
  STATUS_CODE_FILTER: 1,
  DURATION_FILTER: 2,
  NOT_HEALTH_CHECK_FILTER: 3,
  TRACEABLE_FILTER: 4,
  RUNTIME_FILTER: 5,
  AND_FILTER: 6,
  OR_FILTER: 7,
  HEADER_FILTER: 8,
  RESPONSE_FLAG_FILTER: 9,
  GRPC_STATUS_FILTER: 10,
  EXTENSION_FILTER: 11,
  METADATA_FILTER: 12,
  LOG_TYPE_FILTER: 13
};

/**
 * @return {proto.envoy.config.accesslog.v3.AccessLogFilter.FilterSpecifierCase}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getFilterSpecifierCase = function() {
  return /** @type {proto.envoy.config.accesslog.v3.AccessLogFilter.FilterSpecifierCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.accesslog.v3.AccessLogFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.accesslog.v3.AccessLogFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCodeFilter: (f = msg.getStatusCodeFilter()) && proto.envoy.config.accesslog.v3.StatusCodeFilter.toObject(includeInstance, f),
    durationFilter: (f = msg.getDurationFilter()) && proto.envoy.config.accesslog.v3.DurationFilter.toObject(includeInstance, f),
    notHealthCheckFilter: (f = msg.getNotHealthCheckFilter()) && proto.envoy.config.accesslog.v3.NotHealthCheckFilter.toObject(includeInstance, f),
    traceableFilter: (f = msg.getTraceableFilter()) && proto.envoy.config.accesslog.v3.TraceableFilter.toObject(includeInstance, f),
    runtimeFilter: (f = msg.getRuntimeFilter()) && proto.envoy.config.accesslog.v3.RuntimeFilter.toObject(includeInstance, f),
    andFilter: (f = msg.getAndFilter()) && proto.envoy.config.accesslog.v3.AndFilter.toObject(includeInstance, f),
    orFilter: (f = msg.getOrFilter()) && proto.envoy.config.accesslog.v3.OrFilter.toObject(includeInstance, f),
    headerFilter: (f = msg.getHeaderFilter()) && proto.envoy.config.accesslog.v3.HeaderFilter.toObject(includeInstance, f),
    responseFlagFilter: (f = msg.getResponseFlagFilter()) && proto.envoy.config.accesslog.v3.ResponseFlagFilter.toObject(includeInstance, f),
    grpcStatusFilter: (f = msg.getGrpcStatusFilter()) && proto.envoy.config.accesslog.v3.GrpcStatusFilter.toObject(includeInstance, f),
    extensionFilter: (f = msg.getExtensionFilter()) && proto.envoy.config.accesslog.v3.ExtensionFilter.toObject(includeInstance, f),
    metadataFilter: (f = msg.getMetadataFilter()) && proto.envoy.config.accesslog.v3.MetadataFilter.toObject(includeInstance, f),
    logTypeFilter: (f = msg.getLogTypeFilter()) && proto.envoy.config.accesslog.v3.LogTypeFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.accesslog.v3.AccessLogFilter;
  return proto.envoy.config.accesslog.v3.AccessLogFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.accesslog.v3.AccessLogFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.accesslog.v3.StatusCodeFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.StatusCodeFilter.deserializeBinaryFromReader);
      msg.setStatusCodeFilter(value);
      break;
    case 2:
      var value = new proto.envoy.config.accesslog.v3.DurationFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.DurationFilter.deserializeBinaryFromReader);
      msg.setDurationFilter(value);
      break;
    case 3:
      var value = new proto.envoy.config.accesslog.v3.NotHealthCheckFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.NotHealthCheckFilter.deserializeBinaryFromReader);
      msg.setNotHealthCheckFilter(value);
      break;
    case 4:
      var value = new proto.envoy.config.accesslog.v3.TraceableFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.TraceableFilter.deserializeBinaryFromReader);
      msg.setTraceableFilter(value);
      break;
    case 5:
      var value = new proto.envoy.config.accesslog.v3.RuntimeFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.RuntimeFilter.deserializeBinaryFromReader);
      msg.setRuntimeFilter(value);
      break;
    case 6:
      var value = new proto.envoy.config.accesslog.v3.AndFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.AndFilter.deserializeBinaryFromReader);
      msg.setAndFilter(value);
      break;
    case 7:
      var value = new proto.envoy.config.accesslog.v3.OrFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.OrFilter.deserializeBinaryFromReader);
      msg.setOrFilter(value);
      break;
    case 8:
      var value = new proto.envoy.config.accesslog.v3.HeaderFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.HeaderFilter.deserializeBinaryFromReader);
      msg.setHeaderFilter(value);
      break;
    case 9:
      var value = new proto.envoy.config.accesslog.v3.ResponseFlagFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.ResponseFlagFilter.deserializeBinaryFromReader);
      msg.setResponseFlagFilter(value);
      break;
    case 10:
      var value = new proto.envoy.config.accesslog.v3.GrpcStatusFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.GrpcStatusFilter.deserializeBinaryFromReader);
      msg.setGrpcStatusFilter(value);
      break;
    case 11:
      var value = new proto.envoy.config.accesslog.v3.ExtensionFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.ExtensionFilter.deserializeBinaryFromReader);
      msg.setExtensionFilter(value);
      break;
    case 12:
      var value = new proto.envoy.config.accesslog.v3.MetadataFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.MetadataFilter.deserializeBinaryFromReader);
      msg.setMetadataFilter(value);
      break;
    case 13:
      var value = new proto.envoy.config.accesslog.v3.LogTypeFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.LogTypeFilter.deserializeBinaryFromReader);
      msg.setLogTypeFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.accesslog.v3.AccessLogFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.accesslog.v3.AccessLogFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCodeFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.accesslog.v3.StatusCodeFilter.serializeBinaryToWriter
    );
  }
  f = message.getDurationFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.accesslog.v3.DurationFilter.serializeBinaryToWriter
    );
  }
  f = message.getNotHealthCheckFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.accesslog.v3.NotHealthCheckFilter.serializeBinaryToWriter
    );
  }
  f = message.getTraceableFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.accesslog.v3.TraceableFilter.serializeBinaryToWriter
    );
  }
  f = message.getRuntimeFilter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.config.accesslog.v3.RuntimeFilter.serializeBinaryToWriter
    );
  }
  f = message.getAndFilter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.envoy.config.accesslog.v3.AndFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrFilter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.config.accesslog.v3.OrFilter.serializeBinaryToWriter
    );
  }
  f = message.getHeaderFilter();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.envoy.config.accesslog.v3.HeaderFilter.serializeBinaryToWriter
    );
  }
  f = message.getResponseFlagFilter();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.envoy.config.accesslog.v3.ResponseFlagFilter.serializeBinaryToWriter
    );
  }
  f = message.getGrpcStatusFilter();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.envoy.config.accesslog.v3.GrpcStatusFilter.serializeBinaryToWriter
    );
  }
  f = message.getExtensionFilter();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.envoy.config.accesslog.v3.ExtensionFilter.serializeBinaryToWriter
    );
  }
  f = message.getMetadataFilter();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.envoy.config.accesslog.v3.MetadataFilter.serializeBinaryToWriter
    );
  }
  f = message.getLogTypeFilter();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.envoy.config.accesslog.v3.LogTypeFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusCodeFilter status_code_filter = 1;
 * @return {?proto.envoy.config.accesslog.v3.StatusCodeFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getStatusCodeFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.StatusCodeFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.StatusCodeFilter, 1));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.StatusCodeFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setStatusCodeFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearStatusCodeFilter = function() {
  return this.setStatusCodeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasStatusCodeFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DurationFilter duration_filter = 2;
 * @return {?proto.envoy.config.accesslog.v3.DurationFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getDurationFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.DurationFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.DurationFilter, 2));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.DurationFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setDurationFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearDurationFilter = function() {
  return this.setDurationFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasDurationFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NotHealthCheckFilter not_health_check_filter = 3;
 * @return {?proto.envoy.config.accesslog.v3.NotHealthCheckFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getNotHealthCheckFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.NotHealthCheckFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.NotHealthCheckFilter, 3));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.NotHealthCheckFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setNotHealthCheckFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearNotHealthCheckFilter = function() {
  return this.setNotHealthCheckFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasNotHealthCheckFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TraceableFilter traceable_filter = 4;
 * @return {?proto.envoy.config.accesslog.v3.TraceableFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getTraceableFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.TraceableFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.TraceableFilter, 4));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.TraceableFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setTraceableFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearTraceableFilter = function() {
  return this.setTraceableFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasTraceableFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RuntimeFilter runtime_filter = 5;
 * @return {?proto.envoy.config.accesslog.v3.RuntimeFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getRuntimeFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.RuntimeFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.RuntimeFilter, 5));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.RuntimeFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setRuntimeFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearRuntimeFilter = function() {
  return this.setRuntimeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasRuntimeFilter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AndFilter and_filter = 6;
 * @return {?proto.envoy.config.accesslog.v3.AndFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getAndFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.AndFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.AndFilter, 6));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.AndFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setAndFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearAndFilter = function() {
  return this.setAndFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasAndFilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OrFilter or_filter = 7;
 * @return {?proto.envoy.config.accesslog.v3.OrFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getOrFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.OrFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.OrFilter, 7));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.OrFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setOrFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearOrFilter = function() {
  return this.setOrFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasOrFilter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional HeaderFilter header_filter = 8;
 * @return {?proto.envoy.config.accesslog.v3.HeaderFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getHeaderFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.HeaderFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.HeaderFilter, 8));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.HeaderFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setHeaderFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearHeaderFilter = function() {
  return this.setHeaderFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasHeaderFilter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseFlagFilter response_flag_filter = 9;
 * @return {?proto.envoy.config.accesslog.v3.ResponseFlagFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getResponseFlagFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.ResponseFlagFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.ResponseFlagFilter, 9));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.ResponseFlagFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setResponseFlagFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearResponseFlagFilter = function() {
  return this.setResponseFlagFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasResponseFlagFilter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GrpcStatusFilter grpc_status_filter = 10;
 * @return {?proto.envoy.config.accesslog.v3.GrpcStatusFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getGrpcStatusFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.GrpcStatusFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.GrpcStatusFilter, 10));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.GrpcStatusFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setGrpcStatusFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearGrpcStatusFilter = function() {
  return this.setGrpcStatusFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasGrpcStatusFilter = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ExtensionFilter extension_filter = 11;
 * @return {?proto.envoy.config.accesslog.v3.ExtensionFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getExtensionFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.ExtensionFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.ExtensionFilter, 11));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.ExtensionFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setExtensionFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearExtensionFilter = function() {
  return this.setExtensionFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasExtensionFilter = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MetadataFilter metadata_filter = 12;
 * @return {?proto.envoy.config.accesslog.v3.MetadataFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getMetadataFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.MetadataFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.MetadataFilter, 12));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.MetadataFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setMetadataFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearMetadataFilter = function() {
  return this.setMetadataFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasMetadataFilter = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional LogTypeFilter log_type_filter = 13;
 * @return {?proto.envoy.config.accesslog.v3.LogTypeFilter}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.getLogTypeFilter = function() {
  return /** @type{?proto.envoy.config.accesslog.v3.LogTypeFilter} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.accesslog.v3.LogTypeFilter, 13));
};


/**
 * @param {?proto.envoy.config.accesslog.v3.LogTypeFilter|undefined} value
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
*/
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.setLogTypeFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.envoy.config.accesslog.v3.AccessLogFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter} returns this
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.clearLogTypeFilter = function() {
  return this.setLogTypeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.accesslog.v3.AccessLogFilter.prototype.hasLogTypeFilter = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.accesslog.v3.AndFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.accesslog.v3.AndFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.accesslog.v3.AndFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.accesslog.v3.AndFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.AndFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.envoy.config.accesslog.v3.AccessLogFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.accesslog.v3.AndFilter}
 */
proto.envoy.config.accesslog.v3.AndFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.accesslog.v3.AndFilter;
  return proto.envoy.config.accesslog.v3.AndFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.accesslog.v3.AndFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.accesslog.v3.AndFilter}
 */
proto.envoy.config.accesslog.v3.AndFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.accesslog.v3.AccessLogFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.AccessLogFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.accesslog.v3.AndFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.accesslog.v3.AndFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.accesslog.v3.AndFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.AndFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.accesslog.v3.AccessLogFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLogFilter filters = 1;
 * @return {!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>}
 */
proto.envoy.config.accesslog.v3.AndFilter.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.accesslog.v3.AccessLogFilter, 1));
};


/**
 * @param {!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>} value
 * @return {!proto.envoy.config.accesslog.v3.AndFilter} returns this
*/
proto.envoy.config.accesslog.v3.AndFilter.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.accesslog.v3.AccessLogFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter}
 */
proto.envoy.config.accesslog.v3.AndFilter.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.accesslog.v3.AccessLogFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.accesslog.v3.AndFilter} returns this
 */
proto.envoy.config.accesslog.v3.AndFilter.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.accesslog.v3.OrFilter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.accesslog.v3.OrFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.accesslog.v3.OrFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.accesslog.v3.OrFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.OrFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.envoy.config.accesslog.v3.AccessLogFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.accesslog.v3.OrFilter}
 */
proto.envoy.config.accesslog.v3.OrFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.accesslog.v3.OrFilter;
  return proto.envoy.config.accesslog.v3.OrFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.accesslog.v3.OrFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.accesslog.v3.OrFilter}
 */
proto.envoy.config.accesslog.v3.OrFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.envoy.config.accesslog.v3.AccessLogFilter;
      reader.readMessage(value,proto.envoy.config.accesslog.v3.AccessLogFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.accesslog.v3.OrFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.accesslog.v3.OrFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.accesslog.v3.OrFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.accesslog.v3.OrFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.accesslog.v3.AccessLogFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLogFilter filters = 2;
 * @return {!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>}
 */
proto.envoy.config.accesslog.v3.OrFilter.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.accesslog.v3.AccessLogFilter, 2));
};


/**
 * @param {!Array<!proto.envoy.config.accesslog.v3.AccessLogFilter>} value
 * @return {!proto.envoy.config.accesslog.v3.OrFilter} returns this
*/
proto.envoy.config.accesslog.v3.OrFilter.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.accesslog.v3.AccessLogFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.accesslog.v3.AccessLogFilter}
 */
proto.envoy.config.accesslog.v3.OrFilter.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.accesslog.v3.AccessLogFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.accesslog.v3.OrFilter} returns this
 */
proto.envoy.config.accesslog.v3.OrFilter.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


