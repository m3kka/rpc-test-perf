// source: envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig');
goog.provide('proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig');
goog.provide('proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig');
goog.provide('proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.ConfigSourceCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.Address');
goog.require('proto.envoy.config.core.v3.DataSource');
goog.require('proto.envoy.config.core.v3.DnsResolutionConfig');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');
goog.require('proto.envoy.data.dns.v3.DnsTable');
goog.require('proto.google.protobuf.Duration');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.displayName = 'proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.oneofGroups_);
};
goog.inherits(proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.displayName = 'proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.repeatedFields_, null);
};
goog.inherits(proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.displayName = 'proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    statPrefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverConfig: (f = msg.getServerConfig()) && proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.toObject(includeInstance, f),
    clientConfig: (f = msg.getClientConfig()) && proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig;
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatPrefix(value);
      break;
    case 2:
      var value = new proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig;
      reader.readMessage(value,proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.deserializeBinaryFromReader);
      msg.setServerConfig(value);
      break;
    case 3:
      var value = new proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig;
      reader.readMessage(value,proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.deserializeBinaryFromReader);
      msg.setClientConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.serializeBinaryToWriter
    );
  }
  f = message.getClientConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.ConfigSourceCase = {
  CONFIG_SOURCE_NOT_SET: 0,
  INLINE_DNS_TABLE: 1,
  EXTERNAL_DNS_TABLE: 2
};

/**
 * @return {proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.ConfigSourceCase}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.getConfigSourceCase = function() {
  return /** @type {proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.ConfigSourceCase} */(jspb.Message.computeOneofCase(this, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    inlineDnsTable: (f = msg.getInlineDnsTable()) && proto.envoy.data.dns.v3.DnsTable.toObject(includeInstance, f),
    externalDnsTable: (f = msg.getExternalDnsTable()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig;
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.dns.v3.DnsTable;
      reader.readMessage(value,proto.envoy.data.dns.v3.DnsTable.deserializeBinaryFromReader);
      msg.setInlineDnsTable(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setExternalDnsTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInlineDnsTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.data.dns.v3.DnsTable.serializeBinaryToWriter
    );
  }
  f = message.getExternalDnsTable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.data.dns.v3.DnsTable inline_dns_table = 1;
 * @return {?proto.envoy.data.dns.v3.DnsTable}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.getInlineDnsTable = function() {
  return /** @type{?proto.envoy.data.dns.v3.DnsTable} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.dns.v3.DnsTable, 1));
};


/**
 * @param {?proto.envoy.data.dns.v3.DnsTable|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.setInlineDnsTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.clearInlineDnsTable = function() {
  return this.setInlineDnsTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.hasInlineDnsTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.DataSource external_dns_table = 2;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.getExternalDnsTable = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.setExternalDnsTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.clearExternalDnsTable = function() {
  return this.setExternalDnsTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.prototype.hasExternalDnsTable = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolverTimeout: (f = msg.getResolverTimeout()) && proto.google.protobuf.Duration.toObject(includeInstance, f),
    upstreamResolversList: jspb.Message.toObjectList(msg.getUpstreamResolversList(),
    proto.envoy.config.core.v3.Address.toObject, includeInstance),
    dnsResolutionConfig: (f = msg.getDnsResolutionConfig()) && proto.envoy.config.core.v3.DnsResolutionConfig.toObject(includeInstance, f),
    typedDnsResolverConfig: (f = msg.getTypedDnsResolverConfig()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    maxPendingLookups: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig;
  return proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Duration;
      reader.readMessage(value,proto.google.protobuf.Duration.deserializeBinaryFromReader);
      msg.setResolverTimeout(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.Address;
      reader.readMessage(value,proto.envoy.config.core.v3.Address.deserializeBinaryFromReader);
      msg.addUpstreamResolvers(value);
      break;
    case 5:
      var value = new proto.envoy.config.core.v3.DnsResolutionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.DnsResolutionConfig.deserializeBinaryFromReader);
      msg.setDnsResolutionConfig(value);
      break;
    case 4:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setTypedDnsResolverConfig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxPendingLookups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolverTimeout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Duration.serializeBinaryToWriter
    );
  }
  f = message.getUpstreamResolversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.core.v3.Address.serializeBinaryToWriter
    );
  }
  f = message.getDnsResolutionConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.config.core.v3.DnsResolutionConfig.serializeBinaryToWriter
    );
  }
  f = message.getTypedDnsResolverConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getMaxPendingLookups();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Duration resolver_timeout = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.getResolverTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.setResolverTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.clearResolverTimeout = function() {
  return this.setResolverTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.hasResolverTimeout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated envoy.config.core.v3.Address upstream_resolvers = 2;
 * @return {!Array<!proto.envoy.config.core.v3.Address>}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.getUpstreamResolversList = function() {
  return /** @type{!Array<!proto.envoy.config.core.v3.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.core.v3.Address, 2));
};


/**
 * @param {!Array<!proto.envoy.config.core.v3.Address>} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.setUpstreamResolversList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.core.v3.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.core.v3.Address}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.addUpstreamResolvers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.core.v3.Address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.clearUpstreamResolversList = function() {
  return this.setUpstreamResolversList([]);
};


/**
 * optional envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5;
 * @return {?proto.envoy.config.core.v3.DnsResolutionConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.getDnsResolutionConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.DnsResolutionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DnsResolutionConfig, 5));
};


/**
 * @param {?proto.envoy.config.core.v3.DnsResolutionConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.setDnsResolutionConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.clearDnsResolutionConfig = function() {
  return this.setDnsResolutionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.hasDnsResolutionConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.getTypedDnsResolverConfig = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 4));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.setTypedDnsResolverConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.clearTypedDnsResolverConfig = function() {
  return this.setTypedDnsResolverConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.hasTypedDnsResolverConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 max_pending_lookups = 3;
 * @return {number}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.getMaxPendingLookups = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.prototype.setMaxPendingLookups = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string stat_prefix = 1;
 * @return {string}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.getStatPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.setStatPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ServerContextConfig server_config = 2;
 * @return {?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.getServerConfig = function() {
  return /** @type{?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig, 2));
};


/**
 * @param {?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.setServerConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.clearServerConfig = function() {
  return this.setServerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.hasServerConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClientContextConfig client_config = 3;
 * @return {?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.getClientConfig = function() {
  return /** @type{?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig, 3));
};


/**
 * @param {?proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} returns this
*/
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.setClientConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig} returns this
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.clearClientConfig = function() {
  return this.setClientConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.prototype.hasClientConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


