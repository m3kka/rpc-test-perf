// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_tap_v3_tap_pb = require('../../../../envoy/service/tap/v3/tap_pb.js');
var envoy_config_core_v3_base_pb = require('../../../../envoy/config/core/v3/base_pb.js');
var envoy_data_tap_v3_wrapper_pb = require('../../../../envoy/data/tap/v3/wrapper_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../udpa/annotations/versioning_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');

function serialize_envoy_service_tap_v3_StreamTapsRequest(arg) {
  if (!(arg instanceof envoy_service_tap_v3_tap_pb.StreamTapsRequest)) {
    throw new Error('Expected argument of type envoy.service.tap.v3.StreamTapsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_tap_v3_StreamTapsRequest(buffer_arg) {
  return envoy_service_tap_v3_tap_pb.StreamTapsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_tap_v3_StreamTapsResponse(arg) {
  if (!(arg instanceof envoy_service_tap_v3_tap_pb.StreamTapsResponse)) {
    throw new Error('Expected argument of type envoy.service.tap.v3.StreamTapsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_tap_v3_StreamTapsResponse(buffer_arg) {
  return envoy_service_tap_v3_tap_pb.StreamTapsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: Tap sink service]
//
// [#not-implemented-hide:] A tap service to receive incoming taps. Envoy will call
// StreamTaps to deliver captured taps to the server
var TapSinkServiceService = exports.TapSinkServiceService = {
  // Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
// response to be sent as nothing would be done in the case of failure. The server should
// disconnect if it expects Envoy to reconnect.
streamTaps: {
    path: '/envoy.service.tap.v3.TapSinkService/StreamTaps',
    requestStream: true,
    responseStream: false,
    requestType: envoy_service_tap_v3_tap_pb.StreamTapsRequest,
    responseType: envoy_service_tap_v3_tap_pb.StreamTapsResponse,
    requestSerialize: serialize_envoy_service_tap_v3_StreamTapsRequest,
    requestDeserialize: deserialize_envoy_service_tap_v3_StreamTapsRequest,
    responseSerialize: serialize_envoy_service_tap_v3_StreamTapsResponse,
    responseDeserialize: deserialize_envoy_service_tap_v3_StreamTapsResponse,
  },
};

exports.TapSinkServiceClient = grpc.makeGenericClientConstructor(TapSinkServiceService);
