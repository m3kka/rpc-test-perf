// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_status_v3_csds_pb = require('../../../../envoy/service/status/v3/csds_pb.js');
var envoy_admin_v3_config_dump_shared_pb = require('../../../../envoy/admin/v3/config_dump_shared_pb.js');
var envoy_config_core_v3_base_pb = require('../../../../envoy/config/core/v3/base_pb.js');
var envoy_type_matcher_v3_node_pb = require('../../../../envoy/type/matcher/v3/node_pb.js');
var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var envoy_annotations_deprecation_pb = require('../../../../envoy/annotations/deprecation_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../udpa/annotations/versioning_pb.js');

function serialize_envoy_service_status_v3_ClientStatusRequest(arg) {
  if (!(arg instanceof envoy_service_status_v3_csds_pb.ClientStatusRequest)) {
    throw new Error('Expected argument of type envoy.service.status.v3.ClientStatusRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_status_v3_ClientStatusRequest(buffer_arg) {
  return envoy_service_status_v3_csds_pb.ClientStatusRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_status_v3_ClientStatusResponse(arg) {
  if (!(arg instanceof envoy_service_status_v3_csds_pb.ClientStatusResponse)) {
    throw new Error('Expected argument of type envoy.service.status.v3.ClientStatusResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_status_v3_ClientStatusResponse(buffer_arg) {
  return envoy_service_status_v3_csds_pb.ClientStatusResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: Client status discovery service (CSDS)]
//
// CSDS is Client Status Discovery Service. It can be used to get the status of
// an xDS-compliant client from the management server's point of view. It can
// also be used to get the current xDS states directly from the client.
var ClientStatusDiscoveryServiceService = exports.ClientStatusDiscoveryServiceService = {
  streamClientStatus: {
    path: '/envoy.service.status.v3.ClientStatusDiscoveryService/StreamClientStatus',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_status_v3_csds_pb.ClientStatusRequest,
    responseType: envoy_service_status_v3_csds_pb.ClientStatusResponse,
    requestSerialize: serialize_envoy_service_status_v3_ClientStatusRequest,
    requestDeserialize: deserialize_envoy_service_status_v3_ClientStatusRequest,
    responseSerialize: serialize_envoy_service_status_v3_ClientStatusResponse,
    responseDeserialize: deserialize_envoy_service_status_v3_ClientStatusResponse,
  },
  fetchClientStatus: {
    path: '/envoy.service.status.v3.ClientStatusDiscoveryService/FetchClientStatus',
    requestStream: false,
    responseStream: false,
    requestType: envoy_service_status_v3_csds_pb.ClientStatusRequest,
    responseType: envoy_service_status_v3_csds_pb.ClientStatusResponse,
    requestSerialize: serialize_envoy_service_status_v3_ClientStatusRequest,
    requestDeserialize: deserialize_envoy_service_status_v3_ClientStatusRequest,
    responseSerialize: serialize_envoy_service_status_v3_ClientStatusResponse,
    responseDeserialize: deserialize_envoy_service_status_v3_ClientStatusResponse,
  },
};

exports.ClientStatusDiscoveryServiceClient = grpc.makeGenericClientConstructor(ClientStatusDiscoveryServiceService);
