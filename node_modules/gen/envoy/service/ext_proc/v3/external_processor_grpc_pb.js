// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_ext_proc_v3_external_processor_pb = require('../../../../envoy/service/ext_proc/v3/external_processor_pb.js');
var envoy_config_core_v3_base_pb = require('../../../../envoy/config/core/v3/base_pb.js');
var envoy_extensions_filters_http_ext_proc_v3_processing_mode_pb = require('../../../../envoy/extensions/filters/http/ext_proc/v3/processing_mode_pb.js');
var envoy_type_v3_http_status_pb = require('../../../../envoy/type/v3/http_status_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');

function serialize_envoy_service_ext_proc_v3_ProcessingRequest(arg) {
  if (!(arg instanceof envoy_service_ext_proc_v3_external_processor_pb.ProcessingRequest)) {
    throw new Error('Expected argument of type envoy.service.ext_proc.v3.ProcessingRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_ext_proc_v3_ProcessingRequest(buffer_arg) {
  return envoy_service_ext_proc_v3_external_processor_pb.ProcessingRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_ext_proc_v3_ProcessingResponse(arg) {
  if (!(arg instanceof envoy_service_ext_proc_v3_external_processor_pb.ProcessingResponse)) {
    throw new Error('Expected argument of type envoy.service.ext_proc.v3.ProcessingResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_ext_proc_v3_ProcessingResponse(buffer_arg) {
  return envoy_service_ext_proc_v3_external_processor_pb.ProcessingResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: External processing service]
//
// A service that can access and modify HTTP requests and responses
// as part of a filter chain.
// The overall external processing protocol works like this:
//
// 1. Envoy sends to the service information about the HTTP request.
// 2. The service sends back a ProcessingResponse message that directs Envoy
//    to either stop processing, continue without it, or send it the
//    next chunk of the message body.
// 3. If so requested, Envoy sends the server chunks of the message body,
//    or the entire body at once. In either case, the server sends back
//    a ProcessingResponse after each message it receives.
// 4. If so requested, Envoy sends the server the HTTP trailers,
//    and the server sends back a ProcessingResponse.
// 5. At this point, request processing is done, and we pick up again
//    at step 1 when Envoy receives a response from the upstream server.
// 6. At any point above, if the server closes the gRPC stream cleanly,
//    then Envoy proceeds without consulting the server.
// 7. At any point above, if the server closes the gRPC stream with an error,
//    then Envoy returns a 500 error to the client, unless the filter
//    was configured to ignore errors.
//
// In other words, the process is a request/response conversation, but
// using a gRPC stream to make it easier for the server to
// maintain state.
//
var ExternalProcessorService = exports.ExternalProcessorService = {
  // This begins the bidirectional stream that Envoy will use to
// give the server control over what the filter does. The actual
// protocol is described by the ProcessingRequest and ProcessingResponse
// messages below.
process: {
    path: '/envoy.service.ext_proc.v3.ExternalProcessor/Process',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_ext_proc_v3_external_processor_pb.ProcessingRequest,
    responseType: envoy_service_ext_proc_v3_external_processor_pb.ProcessingResponse,
    requestSerialize: serialize_envoy_service_ext_proc_v3_ProcessingRequest,
    requestDeserialize: deserialize_envoy_service_ext_proc_v3_ProcessingRequest,
    responseSerialize: serialize_envoy_service_ext_proc_v3_ProcessingResponse,
    responseDeserialize: deserialize_envoy_service_ext_proc_v3_ProcessingResponse,
  },
};

exports.ExternalProcessorClient = grpc.makeGenericClientConstructor(ExternalProcessorService);
