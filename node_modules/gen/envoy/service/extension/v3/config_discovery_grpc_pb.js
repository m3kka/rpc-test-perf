// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_extension_v3_config_discovery_pb = require('../../../../envoy/service/extension/v3/config_discovery_pb.js');
var envoy_service_discovery_v3_discovery_pb = require('../../../../envoy/service/discovery/v3/discovery_pb.js');
var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
var envoy_annotations_resource_pb = require('../../../../envoy/annotations/resource_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');

function serialize_envoy_service_discovery_v3_DeltaDiscoveryRequest(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DeltaDiscoveryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DeltaDiscoveryRequest(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DeltaDiscoveryResponse(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DeltaDiscoveryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DeltaDiscoveryResponse(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DiscoveryRequest(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DiscoveryRequest)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DiscoveryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DiscoveryRequest(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DiscoveryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DiscoveryResponse(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DiscoveryResponse)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DiscoveryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DiscoveryResponse(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DiscoveryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: Extension config discovery service (ECDS)]
//
// A service that supports dynamic configuration updates for a specific filter.
// Currently, ECDS is supported for HTTP filters and Listener filters. Please check
// :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.
// The overall extension config discovery service works as follows:
//
// 1. A filter (:ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`
//    or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
//    contains a :ref:`config_discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>` configuration. This configuration
//    includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
//    from which the filter configuration will be fetched.
// 2. The client then registers for a resource using the filter name as the resource_name.
// 3. The xDS server sends back the filter's configuration.
// 4. The client stores the configuration that will be used in the next instantiation of the filter chain,
//    i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
//    account in the following instantiation of the filter chain.
//
// Note: Filters that are configured using ECDS are warmed. For more details see
// :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.
//
// Return extension configurations.
var ExtensionConfigDiscoveryServiceService = exports.ExtensionConfigDiscoveryServiceService = {
  streamExtensionConfigs: {
    path: '/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_discovery_v3_discovery_pb.DiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryResponse,
  },
  deltaExtensionConfigs: {
    path: '/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DeltaDiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DeltaDiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DeltaDiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DeltaDiscoveryResponse,
  },
  fetchExtensionConfigs: {
    path: '/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs',
    requestStream: false,
    responseStream: false,
    requestType: envoy_service_discovery_v3_discovery_pb.DiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryResponse,
  },
};

exports.ExtensionConfigDiscoveryServiceClient = grpc.makeGenericClientConstructor(ExtensionConfigDiscoveryServiceService);
