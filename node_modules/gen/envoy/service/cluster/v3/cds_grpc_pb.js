// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_cluster_v3_cds_pb = require('../../../../envoy/service/cluster/v3/cds_pb.js');
var envoy_service_discovery_v3_discovery_pb = require('../../../../envoy/service/discovery/v3/discovery_pb.js');
var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
var envoy_annotations_resource_pb = require('../../../../envoy/annotations/resource_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../udpa/annotations/versioning_pb.js');

function serialize_envoy_service_discovery_v3_DeltaDiscoveryRequest(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DeltaDiscoveryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DeltaDiscoveryRequest(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DeltaDiscoveryResponse(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DeltaDiscoveryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DeltaDiscoveryResponse(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DiscoveryRequest(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DiscoveryRequest)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DiscoveryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DiscoveryRequest(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DiscoveryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_discovery_v3_DiscoveryResponse(arg) {
  if (!(arg instanceof envoy_service_discovery_v3_discovery_pb.DiscoveryResponse)) {
    throw new Error('Expected argument of type envoy.service.discovery.v3.DiscoveryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_discovery_v3_DiscoveryResponse(buffer_arg) {
  return envoy_service_discovery_v3_discovery_pb.DiscoveryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: CDS]
//
// Return list of all clusters this proxy will load balance to.
var ClusterDiscoveryServiceService = exports.ClusterDiscoveryServiceService = {
  streamClusters: {
    path: '/envoy.service.cluster.v3.ClusterDiscoveryService/StreamClusters',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_discovery_v3_discovery_pb.DiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryResponse,
  },
  deltaClusters: {
    path: '/envoy.service.cluster.v3.ClusterDiscoveryService/DeltaClusters',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DeltaDiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DeltaDiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DeltaDiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DeltaDiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DeltaDiscoveryResponse,
  },
  fetchClusters: {
    path: '/envoy.service.cluster.v3.ClusterDiscoveryService/FetchClusters',
    requestStream: false,
    responseStream: false,
    requestType: envoy_service_discovery_v3_discovery_pb.DiscoveryRequest,
    responseType: envoy_service_discovery_v3_discovery_pb.DiscoveryResponse,
    requestSerialize: serialize_envoy_service_discovery_v3_DiscoveryRequest,
    requestDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryRequest,
    responseSerialize: serialize_envoy_service_discovery_v3_DiscoveryResponse,
    responseDeserialize: deserialize_envoy_service_discovery_v3_DiscoveryResponse,
  },
};

exports.ClusterDiscoveryServiceClient = grpc.makeGenericClientConstructor(ClusterDiscoveryServiceService);
