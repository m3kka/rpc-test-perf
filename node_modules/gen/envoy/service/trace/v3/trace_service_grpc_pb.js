// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_trace_v3_trace_service_pb = require('../../../../envoy/service/trace/v3/trace_service_pb.js');
var envoy_config_core_v3_base_pb = require('../../../../envoy/config/core/v3/base_pb.js');
var opencensus_proto_trace_v1_trace_pb = require('../../../../opencensus/proto/trace/v1/trace_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../udpa/annotations/versioning_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');

function serialize_envoy_service_trace_v3_StreamTracesMessage(arg) {
  if (!(arg instanceof envoy_service_trace_v3_trace_service_pb.StreamTracesMessage)) {
    throw new Error('Expected argument of type envoy.service.trace.v3.StreamTracesMessage');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_trace_v3_StreamTracesMessage(buffer_arg) {
  return envoy_service_trace_v3_trace_service_pb.StreamTracesMessage.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_trace_v3_StreamTracesResponse(arg) {
  if (!(arg instanceof envoy_service_trace_v3_trace_service_pb.StreamTracesResponse)) {
    throw new Error('Expected argument of type envoy.service.trace.v3.StreamTracesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_trace_v3_StreamTracesResponse(buffer_arg) {
  return envoy_service_trace_v3_trace_service_pb.StreamTracesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: Trace service]
//
// Service for streaming traces to server that consumes the trace data. It
// uses OpenCensus data model as a standard to represent trace information.
var TraceServiceService = exports.TraceServiceService = {
  // Envoy will connect and send StreamTracesMessage messages forever. It does
// not expect any response to be sent as nothing would be done in the case
// of failure.
streamTraces: {
    path: '/envoy.service.trace.v3.TraceService/StreamTraces',
    requestStream: true,
    responseStream: false,
    requestType: envoy_service_trace_v3_trace_service_pb.StreamTracesMessage,
    responseType: envoy_service_trace_v3_trace_service_pb.StreamTracesResponse,
    requestSerialize: serialize_envoy_service_trace_v3_StreamTracesMessage,
    requestDeserialize: deserialize_envoy_service_trace_v3_StreamTracesMessage,
    responseSerialize: serialize_envoy_service_trace_v3_StreamTracesResponse,
    responseDeserialize: deserialize_envoy_service_trace_v3_StreamTracesResponse,
  },
};

exports.TraceServiceClient = grpc.makeGenericClientConstructor(TraceServiceService);
