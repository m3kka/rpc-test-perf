// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_rate_limit_quota_v3_rlqs_pb = require('../../../../envoy/service/rate_limit_quota/v3/rlqs_pb.js');
var envoy_type_v3_ratelimit_strategy_pb = require('../../../../envoy/type/v3/ratelimit_strategy_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var xds_annotations_v3_status_pb = require('../../../../xds/annotations/v3/status_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');

function serialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaResponse(arg) {
  if (!(arg instanceof envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaResponse)) {
    throw new Error('Expected argument of type envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaResponse(buffer_arg) {
  return envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaUsageReports(arg) {
  if (!(arg instanceof envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaUsageReports)) {
    throw new Error('Expected argument of type envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaUsageReports(buffer_arg) {
  return envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaUsageReports.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: Rate Limit Quota Service (RLQS)]
//
// The Rate Limit Quota Service (RLQS) is a Envoy global rate limiting service that allows to
// delegate rate limit decisions to a remote service. The service will aggregate the usage reports
// from multiple data plane instances, and distribute Rate Limit Assignments to each instance
// based on its business logic. The logic is outside of the scope of the protocol API.
//
// The protocol is designed as a streaming-first API. It utilizes watch-like subscription model.
// The data plane groups requests into Quota Buckets as directed by the filter config,
// and periodically reports them to the RLQS server along with the Bucket identifier, :ref:`BucketId
// <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>`. Once RLQS server has collected enough
// reports to make a decision, it'll send back the assignment with the rate limiting instructions.
//
// The first report sent by the data plane is interpreted by the RLQS server as a "watch" request,
// indicating that the data plane instance is interested in receiving further updates for the
// ``BucketId``. From then on, RLQS server may push assignments to this instance at will, even if
// the instance is not sending usage reports. It's the responsibility of the RLQS server
// to determine when the data plane instance didn't send ``BucketId`` reports for too long,
// and to respond with the :ref:`AbandonAction
// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction>`,
// indicating that the server has now stopped sending quota assignments for the ``BucketId`` bucket,
// and the data plane instance should :ref:`abandon
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.abandon_action>`
// it.
//
// Refer to Rate Limit Quota :ref:`configuration overview <config_http_filters_rate_limit_quota>`
// for further details.
//
// Defines the Rate Limit Quota Service (RLQS).
var RateLimitQuotaServiceService = exports.RateLimitQuotaServiceService = {
  // Main communication channel: the data plane sends usage reports to the RLQS server,
// and the server asynchronously responding with the assignments.
streamRateLimitQuotas: {
    path: '/envoy.service.rate_limit_quota.v3.RateLimitQuotaService/StreamRateLimitQuotas',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaUsageReports,
    responseType: envoy_service_rate_limit_quota_v3_rlqs_pb.RateLimitQuotaResponse,
    requestSerialize: serialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaUsageReports,
    requestDeserialize: deserialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaUsageReports,
    responseSerialize: serialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaResponse,
    responseDeserialize: deserialize_envoy_service_rate_limit_quota_v3_RateLimitQuotaResponse,
  },
};

exports.RateLimitQuotaServiceClient = grpc.makeGenericClientConstructor(RateLimitQuotaServiceService);
