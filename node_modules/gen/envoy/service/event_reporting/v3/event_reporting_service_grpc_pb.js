// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var envoy_service_event_reporting_v3_event_reporting_service_pb = require('../../../../envoy/service/event_reporting/v3/event_reporting_service_pb.js');
var envoy_config_core_v3_base_pb = require('../../../../envoy/config/core/v3/base_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var udpa_annotations_status_pb = require('../../../../udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../udpa/annotations/versioning_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');

function serialize_envoy_service_event_reporting_v3_StreamEventsRequest(arg) {
  if (!(arg instanceof envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsRequest)) {
    throw new Error('Expected argument of type envoy.service.event_reporting.v3.StreamEventsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_event_reporting_v3_StreamEventsRequest(buffer_arg) {
  return envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_envoy_service_event_reporting_v3_StreamEventsResponse(arg) {
  if (!(arg instanceof envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsResponse)) {
    throw new Error('Expected argument of type envoy.service.event_reporting.v3.StreamEventsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_envoy_service_event_reporting_v3_StreamEventsResponse(buffer_arg) {
  return envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// [#protodoc-title: gRPC Event Reporting Service]
//
// [#not-implemented-hide:]
// Service for streaming different types of events from Envoy to a server. The examples of
// such events may be health check or outlier detection events.
var EventReportingServiceService = exports.EventReportingServiceService = {
  // Envoy will connect and send StreamEventsRequest messages forever.
// The management server may send StreamEventsResponse to configure event stream. See below.
// This API is designed for high throughput with the expectation that it might be lossy.
streamEvents: {
    path: '/envoy.service.event_reporting.v3.EventReportingService/StreamEvents',
    requestStream: true,
    responseStream: true,
    requestType: envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsRequest,
    responseType: envoy_service_event_reporting_v3_event_reporting_service_pb.StreamEventsResponse,
    requestSerialize: serialize_envoy_service_event_reporting_v3_StreamEventsRequest,
    requestDeserialize: deserialize_envoy_service_event_reporting_v3_StreamEventsRequest,
    responseSerialize: serialize_envoy_service_event_reporting_v3_StreamEventsResponse,
    responseDeserialize: deserialize_envoy_service_event_reporting_v3_StreamEventsResponse,
  },
};

exports.EventReportingServiceClient = grpc.makeGenericClientConstructor(EventReportingServiceService);
