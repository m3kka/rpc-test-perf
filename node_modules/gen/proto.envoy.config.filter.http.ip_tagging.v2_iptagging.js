// source: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.filter.http.ip_tagging.v2.IPTagging');
goog.provide('proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag');
goog.provide('proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.api.v2.core.CidrRange');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.ip_tagging.v2.IPTagging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.displayName = 'proto.envoy.config.filter.http.ip_tagging.v2.IPTagging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.displayName = 'proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ipTagsList: jspb.Message.toObjectList(msg.getIpTagsList(),
    proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.ip_tagging.v2.IPTagging;
  return proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    case 4:
      var value = new proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag;
      reader.readMessage(value,proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.deserializeBinaryFromReader);
      msg.addIpTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIpTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType = {
  BOTH: 0,
  INTERNAL: 1,
  EXTERNAL: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipTagName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipListList: jspb.Message.toObjectList(msg.getIpListList(),
    proto.envoy.api.v2.core.CidrRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag;
  return proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpTagName(value);
      break;
    case 2:
      var value = new proto.envoy.api.v2.core.CidrRange;
      reader.readMessage(value,proto.envoy.api.v2.core.CidrRange.deserializeBinaryFromReader);
      msg.addIpList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpTagName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.api.v2.core.CidrRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ip_tag_name = 1;
 * @return {string}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.getIpTagName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} returns this
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.setIpTagName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated envoy.api.v2.core.CidrRange ip_list = 2;
 * @return {!Array<!proto.envoy.api.v2.core.CidrRange>}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.getIpListList = function() {
  return /** @type{!Array<!proto.envoy.api.v2.core.CidrRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.api.v2.core.CidrRange, 2));
};


/**
 * @param {!Array<!proto.envoy.api.v2.core.CidrRange>} value
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} returns this
*/
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.setIpListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.api.v2.core.CidrRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.api.v2.core.CidrRange}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.addIpList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.api.v2.core.CidrRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag} returns this
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.prototype.clearIpListList = function() {
  return this.setIpListList([]);
};


/**
 * optional RequestType request_type = 1;
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.getRequestType = function() {
  return /** @type {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType} value
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} returns this
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated IPTag ip_tags = 4;
 * @return {!Array<!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag>}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.getIpTagsList = function() {
  return /** @type{!Array<!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag, 4));
};


/**
 * @param {!Array<!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag>} value
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} returns this
*/
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.setIpTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag}
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.addIpTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.filter.http.ip_tagging.v2.IPTagging} returns this
 */
proto.envoy.config.filter.http.ip_tagging.v2.IPTagging.prototype.clearIpTagsList = function() {
  return this.setIpTagsList([]);
};


