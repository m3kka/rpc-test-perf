// source: envoy/config/tap/v3/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.tap.v3.OutputSink');
goog.provide('proto.envoy.config.tap.v3.OutputSink.Format');
goog.provide('proto.envoy.config.tap.v3.OutputSink.OutputSinkTypeCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.tap.v3.BufferedAdminSink');
goog.require('proto.envoy.config.tap.v3.FilePerTapSink');
goog.require('proto.envoy.config.tap.v3.StreamingAdminSink');
goog.require('proto.envoy.config.tap.v3.StreamingGrpcSink');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.tap.v3.OutputSink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.tap.v3.OutputSink.oneofGroups_);
};
goog.inherits(proto.envoy.config.tap.v3.OutputSink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.tap.v3.OutputSink.displayName = 'proto.envoy.config.tap.v3.OutputSink';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.tap.v3.OutputSink.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.envoy.config.tap.v3.OutputSink.OutputSinkTypeCase = {
  OUTPUT_SINK_TYPE_NOT_SET: 0,
  STREAMING_ADMIN: 2,
  FILE_PER_TAP: 3,
  STREAMING_GRPC: 4,
  BUFFERED_ADMIN: 5
};

/**
 * @return {proto.envoy.config.tap.v3.OutputSink.OutputSinkTypeCase}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getOutputSinkTypeCase = function() {
  return /** @type {proto.envoy.config.tap.v3.OutputSink.OutputSinkTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.tap.v3.OutputSink.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.tap.v3.OutputSink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.tap.v3.OutputSink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.tap.v3.OutputSink.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streamingAdmin: (f = msg.getStreamingAdmin()) && proto.envoy.config.tap.v3.StreamingAdminSink.toObject(includeInstance, f),
    filePerTap: (f = msg.getFilePerTap()) && proto.envoy.config.tap.v3.FilePerTapSink.toObject(includeInstance, f),
    streamingGrpc: (f = msg.getStreamingGrpc()) && proto.envoy.config.tap.v3.StreamingGrpcSink.toObject(includeInstance, f),
    bufferedAdmin: (f = msg.getBufferedAdmin()) && proto.envoy.config.tap.v3.BufferedAdminSink.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.tap.v3.OutputSink}
 */
proto.envoy.config.tap.v3.OutputSink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.tap.v3.OutputSink;
  return proto.envoy.config.tap.v3.OutputSink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.tap.v3.OutputSink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.tap.v3.OutputSink}
 */
proto.envoy.config.tap.v3.OutputSink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.config.tap.v3.OutputSink.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = new proto.envoy.config.tap.v3.StreamingAdminSink;
      reader.readMessage(value,proto.envoy.config.tap.v3.StreamingAdminSink.deserializeBinaryFromReader);
      msg.setStreamingAdmin(value);
      break;
    case 3:
      var value = new proto.envoy.config.tap.v3.FilePerTapSink;
      reader.readMessage(value,proto.envoy.config.tap.v3.FilePerTapSink.deserializeBinaryFromReader);
      msg.setFilePerTap(value);
      break;
    case 4:
      var value = new proto.envoy.config.tap.v3.StreamingGrpcSink;
      reader.readMessage(value,proto.envoy.config.tap.v3.StreamingGrpcSink.deserializeBinaryFromReader);
      msg.setStreamingGrpc(value);
      break;
    case 5:
      var value = new proto.envoy.config.tap.v3.BufferedAdminSink;
      reader.readMessage(value,proto.envoy.config.tap.v3.BufferedAdminSink.deserializeBinaryFromReader);
      msg.setBufferedAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.tap.v3.OutputSink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.tap.v3.OutputSink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.tap.v3.OutputSink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStreamingAdmin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.tap.v3.StreamingAdminSink.serializeBinaryToWriter
    );
  }
  f = message.getFilePerTap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.tap.v3.FilePerTapSink.serializeBinaryToWriter
    );
  }
  f = message.getStreamingGrpc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.tap.v3.StreamingGrpcSink.serializeBinaryToWriter
    );
  }
  f = message.getBufferedAdmin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.config.tap.v3.BufferedAdminSink.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.config.tap.v3.OutputSink.Format = {
  JSON_BODY_AS_BYTES: 0,
  JSON_BODY_AS_STRING: 1,
  PROTO_BINARY: 2,
  PROTO_BINARY_LENGTH_DELIMITED: 3,
  PROTO_TEXT: 4
};

/**
 * optional Format format = 1;
 * @return {!proto.envoy.config.tap.v3.OutputSink.Format}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getFormat = function() {
  return /** @type {!proto.envoy.config.tap.v3.OutputSink.Format} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.config.tap.v3.OutputSink.Format} value
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
 */
proto.envoy.config.tap.v3.OutputSink.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional StreamingAdminSink streaming_admin = 2;
 * @return {?proto.envoy.config.tap.v3.StreamingAdminSink}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getStreamingAdmin = function() {
  return /** @type{?proto.envoy.config.tap.v3.StreamingAdminSink} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.tap.v3.StreamingAdminSink, 2));
};


/**
 * @param {?proto.envoy.config.tap.v3.StreamingAdminSink|undefined} value
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
*/
proto.envoy.config.tap.v3.OutputSink.prototype.setStreamingAdmin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.tap.v3.OutputSink.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
 */
proto.envoy.config.tap.v3.OutputSink.prototype.clearStreamingAdmin = function() {
  return this.setStreamingAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.hasStreamingAdmin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FilePerTapSink file_per_tap = 3;
 * @return {?proto.envoy.config.tap.v3.FilePerTapSink}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getFilePerTap = function() {
  return /** @type{?proto.envoy.config.tap.v3.FilePerTapSink} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.tap.v3.FilePerTapSink, 3));
};


/**
 * @param {?proto.envoy.config.tap.v3.FilePerTapSink|undefined} value
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
*/
proto.envoy.config.tap.v3.OutputSink.prototype.setFilePerTap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.tap.v3.OutputSink.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
 */
proto.envoy.config.tap.v3.OutputSink.prototype.clearFilePerTap = function() {
  return this.setFilePerTap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.hasFilePerTap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StreamingGrpcSink streaming_grpc = 4;
 * @return {?proto.envoy.config.tap.v3.StreamingGrpcSink}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getStreamingGrpc = function() {
  return /** @type{?proto.envoy.config.tap.v3.StreamingGrpcSink} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.tap.v3.StreamingGrpcSink, 4));
};


/**
 * @param {?proto.envoy.config.tap.v3.StreamingGrpcSink|undefined} value
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
*/
proto.envoy.config.tap.v3.OutputSink.prototype.setStreamingGrpc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.tap.v3.OutputSink.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
 */
proto.envoy.config.tap.v3.OutputSink.prototype.clearStreamingGrpc = function() {
  return this.setStreamingGrpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.hasStreamingGrpc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BufferedAdminSink buffered_admin = 5;
 * @return {?proto.envoy.config.tap.v3.BufferedAdminSink}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.getBufferedAdmin = function() {
  return /** @type{?proto.envoy.config.tap.v3.BufferedAdminSink} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.tap.v3.BufferedAdminSink, 5));
};


/**
 * @param {?proto.envoy.config.tap.v3.BufferedAdminSink|undefined} value
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
*/
proto.envoy.config.tap.v3.OutputSink.prototype.setBufferedAdmin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.envoy.config.tap.v3.OutputSink.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.tap.v3.OutputSink} returns this
 */
proto.envoy.config.tap.v3.OutputSink.prototype.clearBufferedAdmin = function() {
  return this.setBufferedAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.tap.v3.OutputSink.prototype.hasBufferedAdmin = function() {
  return jspb.Message.getField(this, 5) != null;
};


