// source: envoy/data/tap/v3/transport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.data.tap.v3.SocketEvent');
goog.provide('proto.envoy.data.tap.v3.SocketEvent.Closed');
goog.provide('proto.envoy.data.tap.v3.SocketEvent.EventSelectorCase');
goog.provide('proto.envoy.data.tap.v3.SocketEvent.Read');
goog.provide('proto.envoy.data.tap.v3.SocketEvent.Write');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.data.tap.v3.Body');
goog.require('proto.google.protobuf.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v3.SocketEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.tap.v3.SocketEvent.oneofGroups_);
};
goog.inherits(proto.envoy.data.tap.v3.SocketEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.tap.v3.SocketEvent.displayName = 'proto.envoy.data.tap.v3.SocketEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v3.SocketEvent.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v3.SocketEvent.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.tap.v3.SocketEvent.Read.displayName = 'proto.envoy.data.tap.v3.SocketEvent.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v3.SocketEvent.Write = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v3.SocketEvent.Write, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.tap.v3.SocketEvent.Write.displayName = 'proto.envoy.data.tap.v3.SocketEvent.Write';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v3.SocketEvent.Closed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v3.SocketEvent.Closed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.tap.v3.SocketEvent.Closed.displayName = 'proto.envoy.data.tap.v3.SocketEvent.Closed';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.tap.v3.SocketEvent.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.envoy.data.tap.v3.SocketEvent.EventSelectorCase = {
  EVENT_SELECTOR_NOT_SET: 0,
  READ: 2,
  WRITE: 3,
  CLOSED: 4
};

/**
 * @return {proto.envoy.data.tap.v3.SocketEvent.EventSelectorCase}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.getEventSelectorCase = function() {
  return /** @type {proto.envoy.data.tap.v3.SocketEvent.EventSelectorCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.tap.v3.SocketEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v3.SocketEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v3.SocketEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    read: (f = msg.getRead()) && proto.envoy.data.tap.v3.SocketEvent.Read.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.envoy.data.tap.v3.SocketEvent.Write.toObject(includeInstance, f),
    closed: (f = msg.getClosed()) && proto.envoy.data.tap.v3.SocketEvent.Closed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v3.SocketEvent}
 */
proto.envoy.data.tap.v3.SocketEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v3.SocketEvent;
  return proto.envoy.data.tap.v3.SocketEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v3.SocketEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v3.SocketEvent}
 */
proto.envoy.data.tap.v3.SocketEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.envoy.data.tap.v3.SocketEvent.Read;
      reader.readMessage(value,proto.envoy.data.tap.v3.SocketEvent.Read.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 3:
      var value = new proto.envoy.data.tap.v3.SocketEvent.Write;
      reader.readMessage(value,proto.envoy.data.tap.v3.SocketEvent.Write.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    case 4:
      var value = new proto.envoy.data.tap.v3.SocketEvent.Closed;
      reader.readMessage(value,proto.envoy.data.tap.v3.SocketEvent.Closed.deserializeBinaryFromReader);
      msg.setClosed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v3.SocketEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v3.SocketEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.data.tap.v3.SocketEvent.Read.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.data.tap.v3.SocketEvent.Write.serializeBinaryToWriter
    );
  }
  f = message.getClosed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.data.tap.v3.SocketEvent.Closed.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v3.SocketEvent.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Read.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.envoy.data.tap.v3.Body.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Read}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v3.SocketEvent.Read;
  return proto.envoy.data.tap.v3.SocketEvent.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Read}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.tap.v3.Body;
      reader.readMessage(value,proto.envoy.data.tap.v3.Body.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v3.SocketEvent.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.data.tap.v3.Body.serializeBinaryToWriter
    );
  }
};


/**
 * optional Body data = 1;
 * @return {?proto.envoy.data.tap.v3.Body}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.getData = function() {
  return /** @type{?proto.envoy.data.tap.v3.Body} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v3.Body, 1));
};


/**
 * @param {?proto.envoy.data.tap.v3.Body|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Read} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Read} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.Read.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v3.SocketEvent.Write.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Write} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Write.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.envoy.data.tap.v3.Body.toObject(includeInstance, f),
    endStream: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Write}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v3.SocketEvent.Write;
  return proto.envoy.data.tap.v3.SocketEvent.Write.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Write} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Write}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.tap.v3.Body;
      reader.readMessage(value,proto.envoy.data.tap.v3.Body.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v3.SocketEvent.Write.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Write} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Write.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.data.tap.v3.Body.serializeBinaryToWriter
    );
  }
  f = message.getEndStream();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Body data = 1;
 * @return {?proto.envoy.data.tap.v3.Body}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.getData = function() {
  return /** @type{?proto.envoy.data.tap.v3.Body} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v3.Body, 1));
};


/**
 * @param {?proto.envoy.data.tap.v3.Body|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Write} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Write} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool end_stream = 2;
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.getEndStream = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Write} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.Write.prototype.setEndStream = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v3.SocketEvent.Closed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Closed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Closed}
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v3.SocketEvent.Closed;
  return proto.envoy.data.tap.v3.SocketEvent.Closed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Closed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v3.SocketEvent.Closed}
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v3.SocketEvent.Closed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v3.SocketEvent.Closed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v3.SocketEvent.Closed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Read read = 2;
 * @return {?proto.envoy.data.tap.v3.SocketEvent.Read}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.getRead = function() {
  return /** @type{?proto.envoy.data.tap.v3.SocketEvent.Read} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v3.SocketEvent.Read, 2));
};


/**
 * @param {?proto.envoy.data.tap.v3.SocketEvent.Read|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.prototype.setRead = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.data.tap.v3.SocketEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.clearRead = function() {
  return this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Write write = 3;
 * @return {?proto.envoy.data.tap.v3.SocketEvent.Write}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.getWrite = function() {
  return /** @type{?proto.envoy.data.tap.v3.SocketEvent.Write} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v3.SocketEvent.Write, 3));
};


/**
 * @param {?proto.envoy.data.tap.v3.SocketEvent.Write|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.prototype.setWrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.data.tap.v3.SocketEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.clearWrite = function() {
  return this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Closed closed = 4;
 * @return {?proto.envoy.data.tap.v3.SocketEvent.Closed}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.getClosed = function() {
  return /** @type{?proto.envoy.data.tap.v3.SocketEvent.Closed} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v3.SocketEvent.Closed, 4));
};


/**
 * @param {?proto.envoy.data.tap.v3.SocketEvent.Closed|undefined} value
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
*/
proto.envoy.data.tap.v3.SocketEvent.prototype.setClosed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.data.tap.v3.SocketEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.tap.v3.SocketEvent} returns this
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.clearClosed = function() {
  return this.setClosed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v3.SocketEvent.prototype.hasClosed = function() {
  return jspb.Message.getField(this, 4) != null;
};


