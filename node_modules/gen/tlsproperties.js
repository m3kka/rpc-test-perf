// source: envoy/data/accesslog/v2/accesslog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.data.accesslog.v2.TLSProperties');
goog.provide('proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties');
goog.provide('proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName');
goog.provide('proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.SanCase');
goog.provide('proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.UInt32Value');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.accesslog.v2.TLSProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.accesslog.v2.TLSProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.accesslog.v2.TLSProperties.displayName = 'proto.envoy.data.accesslog.v2.TLSProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.displayName = 'proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_);
};
goog.inherits(proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.displayName = 'proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.accesslog.v2.TLSProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    tlsVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tlsCipherSuite: (f = msg.getTlsCipherSuite()) && proto.google.protobuf.UInt32Value.toObject(includeInstance, f),
    tlsSniHostname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    localCertificateProperties: (f = msg.getLocalCertificateProperties()) && proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.toObject(includeInstance, f),
    peerCertificateProperties: (f = msg.getPeerCertificateProperties()) && proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.toObject(includeInstance, f),
    tlsSessionId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.accesslog.v2.TLSProperties;
  return proto.envoy.data.accesslog.v2.TLSProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion} */ (reader.readEnum());
      msg.setTlsVersion(value);
      break;
    case 2:
      var value = new proto.google.protobuf.UInt32Value;
      reader.readMessage(value,proto.google.protobuf.UInt32Value.deserializeBinaryFromReader);
      msg.setTlsCipherSuite(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsSniHostname(value);
      break;
    case 4:
      var value = new proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties;
      reader.readMessage(value,proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.deserializeBinaryFromReader);
      msg.setLocalCertificateProperties(value);
      break;
    case 5:
      var value = new proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties;
      reader.readMessage(value,proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.deserializeBinaryFromReader);
      msg.setPeerCertificateProperties(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.accesslog.v2.TLSProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTlsVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTlsCipherSuite();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getTlsSniHostname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocalCertificateProperties();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.serializeBinaryToWriter
    );
  }
  f = message.getPeerCertificateProperties();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.serializeBinaryToWriter
    );
  }
  f = message.getTlsSessionId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion = {
  VERSION_UNSPECIFIED: 0,
  TLSV1: 1,
  TLSV1_1: 2,
  TLSV1_2: 3,
  TLSV1_3: 4
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    subjectAltNameList: jspb.Message.toObjectList(msg.getSubjectAltNameList(),
    proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.toObject, includeInstance),
    subject: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties;
  return proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName;
      reader.readMessage(value,proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.deserializeBinaryFromReader);
      msg.addSubjectAltName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubjectAltNameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.serializeBinaryToWriter
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.SanCase = {
  SAN_NOT_SET: 0,
  URI: 1,
  DNS: 2
};

/**
 * @return {proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.SanCase}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.getSanCase = function() {
  return /** @type {proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.SanCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dns: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName;
  return proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.setUri = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.clearUri = function() {
  return jspb.Message.setOneofField(this, 1, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.hasUri = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string dns = 2;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.getDns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.setDns = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.clearDns = function() {
  return jspb.Message.setOneofField(this, 2, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName.prototype.hasDns = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SubjectAltName subject_alt_name = 1;
 * @return {!Array<!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName>}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.getSubjectAltNameList = function() {
  return /** @type{!Array<!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName, 1));
};


/**
 * @param {!Array<!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName>} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} returns this
*/
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.setSubjectAltNameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.addSubjectAltName = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.clearSubjectAltNameList = function() {
  return this.setSubjectAltNameList([]);
};


/**
 * optional string subject = 2;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TLSVersion tls_version = 1;
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getTlsVersion = function() {
  return /** @type {!proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.data.accesslog.v2.TLSProperties.TLSVersion} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setTlsVersion = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.UInt32Value tls_cipher_suite = 2;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getTlsCipherSuite = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.UInt32Value, 2));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
*/
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setTlsCipherSuite = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.clearTlsCipherSuite = function() {
  return this.setTlsCipherSuite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.hasTlsCipherSuite = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tls_sni_hostname = 3;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getTlsSniHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setTlsSniHostname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional CertificateProperties local_certificate_properties = 4;
 * @return {?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getLocalCertificateProperties = function() {
  return /** @type{?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties, 4));
};


/**
 * @param {?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties|undefined} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
*/
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setLocalCertificateProperties = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.clearLocalCertificateProperties = function() {
  return this.setLocalCertificateProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.hasLocalCertificateProperties = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CertificateProperties peer_certificate_properties = 5;
 * @return {?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getPeerCertificateProperties = function() {
  return /** @type{?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties, 5));
};


/**
 * @param {?proto.envoy.data.accesslog.v2.TLSProperties.CertificateProperties|undefined} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
*/
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setPeerCertificateProperties = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.clearPeerCertificateProperties = function() {
  return this.setPeerCertificateProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.hasPeerCertificateProperties = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string tls_session_id = 6;
 * @return {string}
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.getTlsSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.data.accesslog.v2.TLSProperties} returns this
 */
proto.envoy.data.accesslog.v2.TLSProperties.prototype.setTlsSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


