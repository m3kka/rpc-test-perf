// source: envoy/config/common/matcher/v3/matcher.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.common.matcher.v3.Matcher');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.MatchTypeCase');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.MatcherCase');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherTree');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.TreeTypeCase');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.MatcherTypeCase');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.OnMatch');
goog.provide('proto.envoy.config.common.matcher.v3.Matcher.OnMatch.OnMatchCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');
goog.require('proto.envoy.type.matcher.v3.StringMatcher');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.common.matcher.v3.Matcher.oneofGroups_);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.displayName = 'proto.envoy.config.common.matcher.v3.Matcher';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.oneofGroups_);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.OnMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.OnMatch.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.OnMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.oneofGroups_);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherTree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.displayName = 'proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTypeCase = {
  MATCHER_TYPE_NOT_SET: 0,
  MATCHER_LIST: 1,
  MATCHER_TREE: 2
};

/**
 * @return {proto.envoy.config.common.matcher.v3.Matcher.MatcherTypeCase}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.getMatcherTypeCase = function() {
  return /** @type {proto.envoy.config.common.matcher.v3.Matcher.MatcherTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.common.matcher.v3.Matcher.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    matcherList: (f = msg.getMatcherList()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.toObject(includeInstance, f),
    matcherTree: (f = msg.getMatcherTree()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.toObject(includeInstance, f),
    onNoMatch: (f = msg.getOnNoMatch()) && proto.envoy.config.common.matcher.v3.Matcher.OnMatch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher;
  return proto.envoy.config.common.matcher.v3.Matcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.deserializeBinaryFromReader);
      msg.setMatcherList(value);
      break;
    case 2:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherTree;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.deserializeBinaryFromReader);
      msg.setMatcherTree(value);
      break;
    case 3:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.OnMatch;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinaryFromReader);
      msg.setOnNoMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatcherList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.serializeBinaryToWriter
    );
  }
  f = message.getMatcherTree();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.serializeBinaryToWriter
    );
  }
  f = message.getOnNoMatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.OnMatch.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.OnMatchCase = {
  ON_MATCH_NOT_SET: 0,
  MATCHER: 1,
  ACTION: 2
};

/**
 * @return {proto.envoy.config.common.matcher.v3.Matcher.OnMatch.OnMatchCase}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.getOnMatchCase = function() {
  return /** @type {proto.envoy.config.common.matcher.v3.Matcher.OnMatch.OnMatchCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.OnMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    matcher: (f = msg.getMatcher()) && proto.envoy.config.common.matcher.v3.Matcher.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.OnMatch;
  return proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.deserializeBinaryFromReader);
      msg.setMatcher(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.OnMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatcher();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Matcher matcher = 1;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.getMatcher = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher, 1));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.setMatcher = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.clearMatcher = function() {
  return this.setMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.hasMatcher = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig action = 2;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.getAction = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.setAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.OnMatch} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.OnMatch.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchersList: jspb.Message.toObjectList(msg.getMatchersList(),
    proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.deserializeBinaryFromReader);
      msg.addMatchers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.MatchTypeCase = {
  MATCH_TYPE_NOT_SET: 0,
  SINGLE_PREDICATE: 1,
  OR_MATCHER: 2,
  AND_MATCHER: 3,
  NOT_MATCHER: 4
};

/**
 * @return {proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.MatchTypeCase}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.getMatchTypeCase = function() {
  return /** @type {proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.MatchTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    singlePredicate: (f = msg.getSinglePredicate()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.toObject(includeInstance, f),
    orMatcher: (f = msg.getOrMatcher()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.toObject(includeInstance, f),
    andMatcher: (f = msg.getAndMatcher()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.toObject(includeInstance, f),
    notMatcher: (f = msg.getNotMatcher()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.deserializeBinaryFromReader);
      msg.setSinglePredicate(value);
      break;
    case 2:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.deserializeBinaryFromReader);
      msg.setOrMatcher(value);
      break;
    case 3:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.deserializeBinaryFromReader);
      msg.setAndMatcher(value);
      break;
    case 4:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinaryFromReader);
      msg.setNotMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSinglePredicate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.serializeBinaryToWriter
    );
  }
  f = message.getOrMatcher();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.serializeBinaryToWriter
    );
  }
  f = message.getAndMatcher();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.serializeBinaryToWriter
    );
  }
  f = message.getNotMatcher();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.MatcherCase = {
  MATCHER_NOT_SET: 0,
  VALUE_MATCH: 2,
  CUSTOM_MATCH: 3
};

/**
 * @return {proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.MatcherCase}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.getMatcherCase = function() {
  return /** @type {proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.MatcherCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    valueMatch: (f = msg.getValueMatch()) && proto.envoy.type.matcher.v3.StringMatcher.toObject(includeInstance, f),
    customMatch: (f = msg.getCustomMatch()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.envoy.type.matcher.v3.StringMatcher;
      reader.readMessage(value,proto.envoy.type.matcher.v3.StringMatcher.deserializeBinaryFromReader);
      msg.setValueMatch(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setCustomMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getValueMatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.type.matcher.v3.StringMatcher.serializeBinaryToWriter
    );
  }
  f = message.getCustomMatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig input = 1;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.getInput = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.type.matcher.v3.StringMatcher value_match = 2;
 * @return {?proto.envoy.type.matcher.v3.StringMatcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.getValueMatch = function() {
  return /** @type{?proto.envoy.type.matcher.v3.StringMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.type.matcher.v3.StringMatcher, 2));
};


/**
 * @param {?proto.envoy.type.matcher.v3.StringMatcher|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.setValueMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.clearValueMatch = function() {
  return this.setValueMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.hasValueMatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig custom_match = 3;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.getCustomMatch = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.setCustomMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.clearCustomMatch = function() {
  return this.setCustomMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate.prototype.hasCustomMatch = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    predicateList: jspb.Message.toObjectList(msg.getPredicateList(),
    proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinaryFromReader);
      msg.addPredicate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredicateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Predicate predicate = 1;
 * @return {!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate>}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.getPredicateList = function() {
  return /** @type{!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate, 1));
};


/**
 * @param {!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate>} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.setPredicateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.addPredicate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList.prototype.clearPredicateList = function() {
  return this.setPredicateList([]);
};


/**
 * optional SinglePredicate single_predicate = 1;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.getSinglePredicate = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate, 1));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.setSinglePredicate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.clearSinglePredicate = function() {
  return this.setSinglePredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.hasSinglePredicate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PredicateList or_matcher = 2;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.getOrMatcher = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList, 2));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.setOrMatcher = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.clearOrMatcher = function() {
  return this.setOrMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.hasOrMatcher = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PredicateList and_matcher = 3;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.getAndMatcher = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList, 3));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.setAndMatcher = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.clearAndMatcher = function() {
  return this.setAndMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.hasAndMatcher = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Predicate not_matcher = 4;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.getNotMatcher = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate, 4));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.setNotMatcher = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.clearNotMatcher = function() {
  return this.setNotMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.prototype.hasNotMatcher = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    predicate: (f = msg.getPredicate()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.toObject(includeInstance, f),
    onMatch: (f = msg.getOnMatch()) && proto.envoy.config.common.matcher.v3.Matcher.OnMatch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    case 2:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.OnMatch;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinaryFromReader);
      msg.setOnMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.serializeBinaryToWriter
    );
  }
  f = message.getOnMatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.OnMatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional Predicate predicate = 1;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.getPredicate = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate, 1));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.setPredicate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.clearPredicate = function() {
  return this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnMatch on_match = 2;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.OnMatch}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.getOnMatch = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.OnMatch} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.OnMatch, 2));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.OnMatch|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.setOnMatch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.clearOnMatch = function() {
  return this.setOnMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher.prototype.hasOnMatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated FieldMatcher matchers = 1;
 * @return {!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher>}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.getMatchersList = function() {
  return /** @type{!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher, 1));
};


/**
 * @param {!Array<!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher>} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.setMatchersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.addMatchers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherList} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherList.prototype.clearMatchersList = function() {
  return this.setMatchersList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.TreeTypeCase = {
  TREE_TYPE_NOT_SET: 0,
  EXACT_MATCH_MAP: 2,
  PREFIX_MATCH_MAP: 3,
  CUSTOM_MATCH: 4
};

/**
 * @return {proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.TreeTypeCase}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.getTreeTypeCase = function() {
  return /** @type {proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.TreeTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    exactMatchMap: (f = msg.getExactMatchMap()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.toObject(includeInstance, f),
    prefixMatchMap: (f = msg.getPrefixMatchMap()) && proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.toObject(includeInstance, f),
    customMatch: (f = msg.getCustomMatch()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherTree;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.deserializeBinaryFromReader);
      msg.setExactMatchMap(value);
      break;
    case 3:
      var value = new proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap;
      reader.readMessage(value,proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.deserializeBinaryFromReader);
      msg.setPrefixMatchMap(value);
      break;
    case 4:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setCustomMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getExactMatchMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.serializeBinaryToWriter
    );
  }
  f = message.getPrefixMatchMap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.serializeBinaryToWriter
    );
  }
  f = message.getCustomMatch();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapMap: (f = msg.getMapMap()) ? f.toObject(includeInstance, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap;
  return proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.deserializeBinaryFromReader, "", new proto.envoy.config.common.matcher.v3.Matcher.OnMatch());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.common.matcher.v3.Matcher.OnMatch.serializeBinaryToWriter);
  }
};


/**
 * map<string, OnMatch> map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.common.matcher.v3.Matcher.OnMatch>}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.prototype.getMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.common.matcher.v3.Matcher.OnMatch>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.envoy.config.common.matcher.v3.Matcher.OnMatch));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.prototype.clearMapMap = function() {
  this.getMapMap().clear();
  return this;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig input = 1;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.getInput = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchMap exact_match_map = 2;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.getExactMatchMap = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap, 2));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.setExactMatchMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.clearExactMatchMap = function() {
  return this.setExactMatchMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.hasExactMatchMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MatchMap prefix_match_map = 3;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.getPrefixMatchMap = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap, 3));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.setPrefixMatchMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.clearPrefixMatchMap = function() {
  return this.setPrefixMatchMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.hasPrefixMatchMap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig custom_match = 4;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.getCustomMatch = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 4));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.setCustomMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.clearCustomMatch = function() {
  return this.setCustomMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.MatcherTree.prototype.hasCustomMatch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MatcherList matcher_list = 1;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.getMatcherList = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherList, 1));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherList|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.prototype.setMatcherList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.common.matcher.v3.Matcher.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.clearMatcherList = function() {
  return this.setMatcherList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.hasMatcherList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatcherTree matcher_tree = 2;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.getMatcherTree = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.MatcherTree, 2));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.MatcherTree|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.prototype.setMatcherTree = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.common.matcher.v3.Matcher.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.clearMatcherTree = function() {
  return this.setMatcherTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.hasMatcherTree = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OnMatch on_no_match = 3;
 * @return {?proto.envoy.config.common.matcher.v3.Matcher.OnMatch}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.getOnNoMatch = function() {
  return /** @type{?proto.envoy.config.common.matcher.v3.Matcher.OnMatch} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.common.matcher.v3.Matcher.OnMatch, 3));
};


/**
 * @param {?proto.envoy.config.common.matcher.v3.Matcher.OnMatch|undefined} value
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
*/
proto.envoy.config.common.matcher.v3.Matcher.prototype.setOnNoMatch = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.common.matcher.v3.Matcher} returns this
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.clearOnNoMatch = function() {
  return this.setOnNoMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.common.matcher.v3.Matcher.prototype.hasOnNoMatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


