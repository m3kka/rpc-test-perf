// source: envoy/extensions/filters/http/oauth2/v3/oauth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials');
goog.provide('proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames');
goog.provide('proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.TokenFormationCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.oneofGroups_);
};
goog.inherits(proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.displayName = 'proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.displayName = 'proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.TokenFormationCase = {
  TOKEN_FORMATION_NOT_SET: 0,
  HMAC_SECRET: 3
};

/**
 * @return {proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.TokenFormationCase}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.getTokenFormationCase = function() {
  return /** @type {proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.TokenFormationCase} */(jspb.Message.computeOneofCase(this, proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenSecret: (f = msg.getTokenSecret()) && proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.toObject(includeInstance, f),
    hmacSecret: (f = msg.getHmacSecret()) && proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.toObject(includeInstance, f),
    cookieNames: (f = msg.getCookieNames()) && proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials;
  return proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig;
      reader.readMessage(value,proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.deserializeBinaryFromReader);
      msg.setTokenSecret(value);
      break;
    case 3:
      var value = new proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig;
      reader.readMessage(value,proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.deserializeBinaryFromReader);
      msg.setHmacSecret(value);
      break;
    case 4:
      var value = new proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames;
      reader.readMessage(value,proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.deserializeBinaryFromReader);
      msg.setCookieNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenSecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.serializeBinaryToWriter
    );
  }
  f = message.getHmacSecret();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.serializeBinaryToWriter
    );
  }
  f = message.getCookieNames();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.toObject = function(includeInstance, msg) {
  var f, obj = {
    bearerToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oauthHmac: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oauthExpires: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    refreshToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames;
  return proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBearerToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthHmac(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthExpires(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBearerToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOauthHmac();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOauthExpires();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string bearer_token = 1;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.getBearerToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.setBearerToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string oauth_hmac = 2;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.getOauthHmac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.setOauthHmac = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oauth_expires = 3;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.getOauthExpires = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.setOauthExpires = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id_token = 4;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.getIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.setIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string refresh_token = 5;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.getRefreshToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames.prototype.setRefreshToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig token_secret = 2;
 * @return {?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.getTokenSecret = function() {
  return /** @type{?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, 2));
};


/**
 * @param {?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
*/
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.setTokenSecret = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.clearTokenSecret = function() {
  return this.setTokenSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.hasTokenSecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig hmac_secret = 3;
 * @return {?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.getHmacSecret = function() {
  return /** @type{?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, 3));
};


/**
 * @param {?proto.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig|undefined} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
*/
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.setHmacSecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.clearHmacSecret = function() {
  return this.setHmacSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.hasHmacSecret = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CookieNames cookie_names = 4;
 * @return {?proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.getCookieNames = function() {
  return /** @type{?proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames, 4));
};


/**
 * @param {?proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.CookieNames|undefined} value
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
*/
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.setCookieNames = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials} returns this
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.clearCookieNames = function() {
  return this.setCookieNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.filters.http.oauth2.v3.OAuth2Credentials.prototype.hasCookieNames = function() {
  return jspb.Message.getField(this, 4) != null;
};


