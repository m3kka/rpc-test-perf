// source: envoy/extensions/transport_sockets/tls/v3/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.DataSource');
goog.require('proto.envoy.config.core.v3.WatchedDirectory');
goog.require('proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider');
goog.require('proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.repeatedFields_, null);
};
goog.inherits(proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.displayName = 'proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateChain: (f = msg.getCertificateChain()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f),
    privateKey: (f = msg.getPrivateKey()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f),
    pkcs12: (f = msg.getPkcs12()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f),
    watchedDirectory: (f = msg.getWatchedDirectory()) && proto.envoy.config.core.v3.WatchedDirectory.toObject(includeInstance, f),
    privateKeyProvider: (f = msg.getPrivateKeyProvider()) && proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider.toObject(includeInstance, f),
    privateKeyProviderList: (f = msg.getPrivateKeyProviderList()) && proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList.toObject(includeInstance, f),
    password: (f = msg.getPassword()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f),
    ocspStaple: (f = msg.getOcspStaple()) && proto.envoy.config.core.v3.DataSource.toObject(includeInstance, f),
    signedCertificateTimestampList: jspb.Message.toObjectList(msg.getSignedCertificateTimestampList(),
    proto.envoy.config.core.v3.DataSource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate;
  return proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setCertificateChain(value);
      break;
    case 2:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setPrivateKey(value);
      break;
    case 8:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setPkcs12(value);
      break;
    case 7:
      var value = new proto.envoy.config.core.v3.WatchedDirectory;
      reader.readMessage(value,proto.envoy.config.core.v3.WatchedDirectory.deserializeBinaryFromReader);
      msg.setWatchedDirectory(value);
      break;
    case 6:
      var value = new proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider;
      reader.readMessage(value,proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider.deserializeBinaryFromReader);
      msg.setPrivateKeyProvider(value);
      break;
    case 9:
      var value = new proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList;
      reader.readMessage(value,proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList.deserializeBinaryFromReader);
      msg.setPrivateKeyProviderList(value);
      break;
    case 3:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 4:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.setOcspStaple(value);
      break;
    case 5:
      var value = new proto.envoy.config.core.v3.DataSource;
      reader.readMessage(value,proto.envoy.config.core.v3.DataSource.deserializeBinaryFromReader);
      msg.addSignedCertificateTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getPkcs12();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getWatchedDirectory();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.config.core.v3.WatchedDirectory.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKeyProvider();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKeyProviderList();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getOcspStaple();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getSignedCertificateTimestampList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.envoy.config.core.v3.DataSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.core.v3.DataSource certificate_chain = 1;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getCertificateChain = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setCertificateChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearCertificateChain = function() {
  return this.setCertificateChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasCertificateChain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.core.v3.DataSource private_key = 2;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getPrivateKey = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 2));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearPrivateKey = function() {
  return this.setPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasPrivateKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.config.core.v3.DataSource pkcs12 = 8;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getPkcs12 = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 8));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setPkcs12 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearPkcs12 = function() {
  return this.setPkcs12(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasPkcs12 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional envoy.config.core.v3.WatchedDirectory watched_directory = 7;
 * @return {?proto.envoy.config.core.v3.WatchedDirectory}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getWatchedDirectory = function() {
  return /** @type{?proto.envoy.config.core.v3.WatchedDirectory} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.WatchedDirectory, 7));
};


/**
 * @param {?proto.envoy.config.core.v3.WatchedDirectory|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setWatchedDirectory = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearWatchedDirectory = function() {
  return this.setWatchedDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasWatchedDirectory = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PrivateKeyProvider private_key_provider = 6;
 * @return {?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getPrivateKeyProvider = function() {
  return /** @type{?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider, 6));
};


/**
 * @param {?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setPrivateKeyProvider = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearPrivateKeyProvider = function() {
  return this.setPrivateKeyProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasPrivateKeyProvider = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PrivateKeyProviderList private_key_provider_list = 9;
 * @return {?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getPrivateKeyProviderList = function() {
  return /** @type{?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList} */ (
    jspb.Message.getWrapperField(this, proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList, 9));
};


/**
 * @param {?proto.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderList|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setPrivateKeyProviderList = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearPrivateKeyProviderList = function() {
  return this.setPrivateKeyProviderList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasPrivateKeyProviderList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional envoy.config.core.v3.DataSource password = 3;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getPassword = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 3));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional envoy.config.core.v3.DataSource ocsp_staple = 4;
 * @return {?proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getOcspStaple = function() {
  return /** @type{?proto.envoy.config.core.v3.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.DataSource, 4));
};


/**
 * @param {?proto.envoy.config.core.v3.DataSource|undefined} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setOcspStaple = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearOcspStaple = function() {
  return this.setOcspStaple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.hasOcspStaple = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;
 * @return {!Array<!proto.envoy.config.core.v3.DataSource>}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.getSignedCertificateTimestampList = function() {
  return /** @type{!Array<!proto.envoy.config.core.v3.DataSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.core.v3.DataSource, 5));
};


/**
 * @param {!Array<!proto.envoy.config.core.v3.DataSource>} value
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
*/
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.setSignedCertificateTimestampList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.envoy.config.core.v3.DataSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.core.v3.DataSource}
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.addSignedCertificateTimestamp = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.envoy.config.core.v3.DataSource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate} returns this
 */
proto.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.prototype.clearSignedCertificateTimestampList = function() {
  return this.setSignedCertificateTimestampList([]);
};


