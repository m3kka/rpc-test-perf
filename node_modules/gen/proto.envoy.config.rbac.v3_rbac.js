// source: envoy/config/rbac/v3/rbac.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.envoy.config.rbac.v3.RBAC');
goog.provide('proto.envoy.config.rbac.v3.RBAC.Action');
goog.provide('proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions');
goog.provide('proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition');
goog.provide('proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.envoy.config.core.v3.TypedExtensionConfig');
goog.require('proto.envoy.config.rbac.v3.Policy');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.rbac.v3.RBAC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.rbac.v3.RBAC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.rbac.v3.RBAC.displayName = 'proto.envoy.config.rbac.v3.RBAC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.displayName = 'proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.displayName = 'proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.rbac.v3.RBAC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.rbac.v3.RBAC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    policiesMap: (f = msg.getPoliciesMap()) ? f.toObject(includeInstance, proto.envoy.config.rbac.v3.Policy.toObject) : [],
    auditLoggingOptions: (f = msg.getAuditLoggingOptions()) && proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.rbac.v3.RBAC}
 */
proto.envoy.config.rbac.v3.RBAC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.rbac.v3.RBAC;
  return proto.envoy.config.rbac.v3.RBAC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.rbac.v3.RBAC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.rbac.v3.RBAC}
 */
proto.envoy.config.rbac.v3.RBAC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.config.rbac.v3.RBAC.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = msg.getPoliciesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.rbac.v3.Policy.deserializeBinaryFromReader, "", new proto.envoy.config.rbac.v3.Policy());
         });
      break;
    case 3:
      var value = new proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions;
      reader.readMessage(value,proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.deserializeBinaryFromReader);
      msg.setAuditLoggingOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.rbac.v3.RBAC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.rbac.v3.RBAC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPoliciesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.rbac.v3.Policy.serializeBinaryToWriter);
  }
  f = message.getAuditLoggingOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.config.rbac.v3.RBAC.Action = {
  ALLOW: 0,
  DENY: 1,
  LOG: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    auditCondition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    loggerConfigsList: jspb.Message.toObjectList(msg.getLoggerConfigsList(),
    proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions;
  return proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition} */ (reader.readEnum());
      msg.setAuditCondition(value);
      break;
    case 2:
      var value = new proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig;
      reader.readMessage(value,proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.deserializeBinaryFromReader);
      msg.addLoggerConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuditCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLoggerConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition = {
  NONE: 0,
  ON_DENY: 1,
  ON_ALLOW: 2,
  ON_DENY_AND_ALLOW: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    auditLogger: (f = msg.getAuditLogger()) && proto.envoy.config.core.v3.TypedExtensionConfig.toObject(includeInstance, f),
    isOptional: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig;
  return proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.core.v3.TypedExtensionConfig;
      reader.readMessage(value,proto.envoy.config.core.v3.TypedExtensionConfig.deserializeBinaryFromReader);
      msg.setAuditLogger(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOptional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuditLogger();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.core.v3.TypedExtensionConfig.serializeBinaryToWriter
    );
  }
  f = message.getIsOptional();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional envoy.config.core.v3.TypedExtensionConfig audit_logger = 1;
 * @return {?proto.envoy.config.core.v3.TypedExtensionConfig}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.getAuditLogger = function() {
  return /** @type{?proto.envoy.config.core.v3.TypedExtensionConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.core.v3.TypedExtensionConfig, 1));
};


/**
 * @param {?proto.envoy.config.core.v3.TypedExtensionConfig|undefined} value
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} returns this
*/
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.setAuditLogger = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} returns this
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.clearAuditLogger = function() {
  return this.setAuditLogger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.hasAuditLogger = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_optional = 2;
 * @return {boolean}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.getIsOptional = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig} returns this
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig.prototype.setIsOptional = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional AuditCondition audit_condition = 1;
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.getAuditCondition = function() {
  return /** @type {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditCondition} value
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} returns this
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.setAuditCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated AuditLoggerConfig logger_configs = 2;
 * @return {!Array<!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig>}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.getLoggerConfigsList = function() {
  return /** @type{!Array<!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig, 2));
};


/**
 * @param {!Array<!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig>} value
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} returns this
*/
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.setLoggerConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig}
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.addLoggerConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.AuditLoggerConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} returns this
 */
proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions.prototype.clearLoggerConfigsList = function() {
  return this.setLoggerConfigsList([]);
};


/**
 * optional Action action = 1;
 * @return {!proto.envoy.config.rbac.v3.RBAC.Action}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.getAction = function() {
  return /** @type {!proto.envoy.config.rbac.v3.RBAC.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.envoy.config.rbac.v3.RBAC.Action} value
 * @return {!proto.envoy.config.rbac.v3.RBAC} returns this
 */
proto.envoy.config.rbac.v3.RBAC.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, Policy> policies = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.rbac.v3.Policy>}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.getPoliciesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.rbac.v3.Policy>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.envoy.config.rbac.v3.Policy));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.envoy.config.rbac.v3.RBAC} returns this
 */
proto.envoy.config.rbac.v3.RBAC.prototype.clearPoliciesMap = function() {
  this.getPoliciesMap().clear();
  return this;
};


/**
 * optional AuditLoggingOptions audit_logging_options = 3;
 * @return {?proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.getAuditLoggingOptions = function() {
  return /** @type{?proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions, 3));
};


/**
 * @param {?proto.envoy.config.rbac.v3.RBAC.AuditLoggingOptions|undefined} value
 * @return {!proto.envoy.config.rbac.v3.RBAC} returns this
*/
proto.envoy.config.rbac.v3.RBAC.prototype.setAuditLoggingOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.envoy.config.rbac.v3.RBAC} returns this
 */
proto.envoy.config.rbac.v3.RBAC.prototype.clearAuditLoggingOptions = function() {
  return this.setAuditLoggingOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.rbac.v3.RBAC.prototype.hasAuditLoggingOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};


